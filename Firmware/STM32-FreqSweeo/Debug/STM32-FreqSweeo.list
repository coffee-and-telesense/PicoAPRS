
STM32-FreqSweeo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004508  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004698  08004698  00005698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004760  08004760  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004760  08004760  00005760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004768  08004768  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004768  08004768  00005768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800476c  0800476c  0000576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004770  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000010  08004780  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004780  000061ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e7d  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c8e  00000000  00000000  00018ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  0001bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d2e  00000000  00000000  0001cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210a7  00000000  00000000  0001d98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145c1  00000000  00000000  0003ea35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7a44  00000000  00000000  00052ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011aa3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004720  00000000  00000000  0011aa80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004680 	.word	0x08004680

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004680 	.word	0x08004680

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	@ 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2iz>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007a4:	d215      	bcs.n	80007d2 <__aeabi_d2iz+0x36>
 80007a6:	d511      	bpl.n	80007cc <__aeabi_d2iz+0x30>
 80007a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b0:	d912      	bls.n	80007d8 <__aeabi_d2iz+0x3c>
 80007b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	bf18      	it	ne
 80007c8:	4240      	negne	r0, r0
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d105      	bne.n	80007e4 <__aeabi_d2iz+0x48>
 80007d8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007dc:	bf08      	it	eq
 80007de:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000800:	f000 b96a 	b.w	8000ad8 <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9d08      	ldr	r5, [sp, #32]
 8000822:	460c      	mov	r4, r1
 8000824:	2b00      	cmp	r3, #0
 8000826:	d14e      	bne.n	80008c6 <__udivmoddi4+0xaa>
 8000828:	4694      	mov	ip, r2
 800082a:	458c      	cmp	ip, r1
 800082c:	4686      	mov	lr, r0
 800082e:	fab2 f282 	clz	r2, r2
 8000832:	d962      	bls.n	80008fa <__udivmoddi4+0xde>
 8000834:	b14a      	cbz	r2, 800084a <__udivmoddi4+0x2e>
 8000836:	f1c2 0320 	rsb	r3, r2, #32
 800083a:	4091      	lsls	r1, r2
 800083c:	fa20 f303 	lsr.w	r3, r0, r3
 8000840:	fa0c fc02 	lsl.w	ip, ip, r2
 8000844:	4319      	orrs	r1, r3
 8000846:	fa00 fe02 	lsl.w	lr, r0, r2
 800084a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800084e:	fa1f f68c 	uxth.w	r6, ip
 8000852:	fbb1 f4f7 	udiv	r4, r1, r7
 8000856:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800085a:	fb07 1114 	mls	r1, r7, r4, r1
 800085e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000862:	fb04 f106 	mul.w	r1, r4, r6
 8000866:	4299      	cmp	r1, r3
 8000868:	d90a      	bls.n	8000880 <__udivmoddi4+0x64>
 800086a:	eb1c 0303 	adds.w	r3, ip, r3
 800086e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000872:	f080 8112 	bcs.w	8000a9a <__udivmoddi4+0x27e>
 8000876:	4299      	cmp	r1, r3
 8000878:	f240 810f 	bls.w	8000a9a <__udivmoddi4+0x27e>
 800087c:	3c02      	subs	r4, #2
 800087e:	4463      	add	r3, ip
 8000880:	1a59      	subs	r1, r3, r1
 8000882:	fa1f f38e 	uxth.w	r3, lr
 8000886:	fbb1 f0f7 	udiv	r0, r1, r7
 800088a:	fb07 1110 	mls	r1, r7, r0, r1
 800088e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000892:	fb00 f606 	mul.w	r6, r0, r6
 8000896:	429e      	cmp	r6, r3
 8000898:	d90a      	bls.n	80008b0 <__udivmoddi4+0x94>
 800089a:	eb1c 0303 	adds.w	r3, ip, r3
 800089e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80008a2:	f080 80fc 	bcs.w	8000a9e <__udivmoddi4+0x282>
 80008a6:	429e      	cmp	r6, r3
 80008a8:	f240 80f9 	bls.w	8000a9e <__udivmoddi4+0x282>
 80008ac:	4463      	add	r3, ip
 80008ae:	3802      	subs	r0, #2
 80008b0:	1b9b      	subs	r3, r3, r6
 80008b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008b6:	2100      	movs	r1, #0
 80008b8:	b11d      	cbz	r5, 80008c2 <__udivmoddi4+0xa6>
 80008ba:	40d3      	lsrs	r3, r2
 80008bc:	2200      	movs	r2, #0
 80008be:	e9c5 3200 	strd	r3, r2, [r5]
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d905      	bls.n	80008d6 <__udivmoddi4+0xba>
 80008ca:	b10d      	cbz	r5, 80008d0 <__udivmoddi4+0xb4>
 80008cc:	e9c5 0100 	strd	r0, r1, [r5]
 80008d0:	2100      	movs	r1, #0
 80008d2:	4608      	mov	r0, r1
 80008d4:	e7f5      	b.n	80008c2 <__udivmoddi4+0xa6>
 80008d6:	fab3 f183 	clz	r1, r3
 80008da:	2900      	cmp	r1, #0
 80008dc:	d146      	bne.n	800096c <__udivmoddi4+0x150>
 80008de:	42a3      	cmp	r3, r4
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0xcc>
 80008e2:	4290      	cmp	r0, r2
 80008e4:	f0c0 80f0 	bcc.w	8000ac8 <__udivmoddi4+0x2ac>
 80008e8:	1a86      	subs	r6, r0, r2
 80008ea:	eb64 0303 	sbc.w	r3, r4, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d0e6      	beq.n	80008c2 <__udivmoddi4+0xa6>
 80008f4:	e9c5 6300 	strd	r6, r3, [r5]
 80008f8:	e7e3      	b.n	80008c2 <__udivmoddi4+0xa6>
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	f040 8090 	bne.w	8000a20 <__udivmoddi4+0x204>
 8000900:	eba1 040c 	sub.w	r4, r1, ip
 8000904:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000908:	fa1f f78c 	uxth.w	r7, ip
 800090c:	2101      	movs	r1, #1
 800090e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000912:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000916:	fb08 4416 	mls	r4, r8, r6, r4
 800091a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800091e:	fb07 f006 	mul.w	r0, r7, r6
 8000922:	4298      	cmp	r0, r3
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x11c>
 8000926:	eb1c 0303 	adds.w	r3, ip, r3
 800092a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x11a>
 8000930:	4298      	cmp	r0, r3
 8000932:	f200 80cd 	bhi.w	8000ad0 <__udivmoddi4+0x2b4>
 8000936:	4626      	mov	r6, r4
 8000938:	1a1c      	subs	r4, r3, r0
 800093a:	fa1f f38e 	uxth.w	r3, lr
 800093e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000942:	fb08 4410 	mls	r4, r8, r0, r4
 8000946:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800094a:	fb00 f707 	mul.w	r7, r0, r7
 800094e:	429f      	cmp	r7, r3
 8000950:	d908      	bls.n	8000964 <__udivmoddi4+0x148>
 8000952:	eb1c 0303 	adds.w	r3, ip, r3
 8000956:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800095a:	d202      	bcs.n	8000962 <__udivmoddi4+0x146>
 800095c:	429f      	cmp	r7, r3
 800095e:	f200 80b0 	bhi.w	8000ac2 <__udivmoddi4+0x2a6>
 8000962:	4620      	mov	r0, r4
 8000964:	1bdb      	subs	r3, r3, r7
 8000966:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096a:	e7a5      	b.n	80008b8 <__udivmoddi4+0x9c>
 800096c:	f1c1 0620 	rsb	r6, r1, #32
 8000970:	408b      	lsls	r3, r1
 8000972:	fa22 f706 	lsr.w	r7, r2, r6
 8000976:	431f      	orrs	r7, r3
 8000978:	fa20 fc06 	lsr.w	ip, r0, r6
 800097c:	fa04 f301 	lsl.w	r3, r4, r1
 8000980:	ea43 030c 	orr.w	r3, r3, ip
 8000984:	40f4      	lsrs	r4, r6
 8000986:	fa00 f801 	lsl.w	r8, r0, r1
 800098a:	0c38      	lsrs	r0, r7, #16
 800098c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000990:	fbb4 fef0 	udiv	lr, r4, r0
 8000994:	fa1f fc87 	uxth.w	ip, r7
 8000998:	fb00 441e 	mls	r4, r0, lr, r4
 800099c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009a0:	fb0e f90c 	mul.w	r9, lr, ip
 80009a4:	45a1      	cmp	r9, r4
 80009a6:	fa02 f201 	lsl.w	r2, r2, r1
 80009aa:	d90a      	bls.n	80009c2 <__udivmoddi4+0x1a6>
 80009ac:	193c      	adds	r4, r7, r4
 80009ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80009b2:	f080 8084 	bcs.w	8000abe <__udivmoddi4+0x2a2>
 80009b6:	45a1      	cmp	r9, r4
 80009b8:	f240 8081 	bls.w	8000abe <__udivmoddi4+0x2a2>
 80009bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009c0:	443c      	add	r4, r7
 80009c2:	eba4 0409 	sub.w	r4, r4, r9
 80009c6:	fa1f f983 	uxth.w	r9, r3
 80009ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80009ce:	fb00 4413 	mls	r4, r0, r3, r4
 80009d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009da:	45a4      	cmp	ip, r4
 80009dc:	d907      	bls.n	80009ee <__udivmoddi4+0x1d2>
 80009de:	193c      	adds	r4, r7, r4
 80009e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009e4:	d267      	bcs.n	8000ab6 <__udivmoddi4+0x29a>
 80009e6:	45a4      	cmp	ip, r4
 80009e8:	d965      	bls.n	8000ab6 <__udivmoddi4+0x29a>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	443c      	add	r4, r7
 80009ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009f2:	fba0 9302 	umull	r9, r3, r0, r2
 80009f6:	eba4 040c 	sub.w	r4, r4, ip
 80009fa:	429c      	cmp	r4, r3
 80009fc:	46ce      	mov	lr, r9
 80009fe:	469c      	mov	ip, r3
 8000a00:	d351      	bcc.n	8000aa6 <__udivmoddi4+0x28a>
 8000a02:	d04e      	beq.n	8000aa2 <__udivmoddi4+0x286>
 8000a04:	b155      	cbz	r5, 8000a1c <__udivmoddi4+0x200>
 8000a06:	ebb8 030e 	subs.w	r3, r8, lr
 8000a0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a12:	40cb      	lsrs	r3, r1
 8000a14:	431e      	orrs	r6, r3
 8000a16:	40cc      	lsrs	r4, r1
 8000a18:	e9c5 6400 	strd	r6, r4, [r5]
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	e750      	b.n	80008c2 <__udivmoddi4+0xa6>
 8000a20:	f1c2 0320 	rsb	r3, r2, #32
 8000a24:	fa20 f103 	lsr.w	r1, r0, r3
 8000a28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a30:	4094      	lsls	r4, r2
 8000a32:	430c      	orrs	r4, r1
 8000a34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a3c:	fa1f f78c 	uxth.w	r7, ip
 8000a40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a44:	fb08 3110 	mls	r1, r8, r0, r3
 8000a48:	0c23      	lsrs	r3, r4, #16
 8000a4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4e:	fb00 f107 	mul.w	r1, r0, r7
 8000a52:	4299      	cmp	r1, r3
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x24c>
 8000a56:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a5e:	d22c      	bcs.n	8000aba <__udivmoddi4+0x29e>
 8000a60:	4299      	cmp	r1, r3
 8000a62:	d92a      	bls.n	8000aba <__udivmoddi4+0x29e>
 8000a64:	3802      	subs	r0, #2
 8000a66:	4463      	add	r3, ip
 8000a68:	1a5b      	subs	r3, r3, r1
 8000a6a:	b2a4      	uxth	r4, r4
 8000a6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a70:	fb08 3311 	mls	r3, r8, r1, r3
 8000a74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a78:	fb01 f307 	mul.w	r3, r1, r7
 8000a7c:	42a3      	cmp	r3, r4
 8000a7e:	d908      	bls.n	8000a92 <__udivmoddi4+0x276>
 8000a80:	eb1c 0404 	adds.w	r4, ip, r4
 8000a84:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a88:	d213      	bcs.n	8000ab2 <__udivmoddi4+0x296>
 8000a8a:	42a3      	cmp	r3, r4
 8000a8c:	d911      	bls.n	8000ab2 <__udivmoddi4+0x296>
 8000a8e:	3902      	subs	r1, #2
 8000a90:	4464      	add	r4, ip
 8000a92:	1ae4      	subs	r4, r4, r3
 8000a94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a98:	e739      	b.n	800090e <__udivmoddi4+0xf2>
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	e6f0      	b.n	8000880 <__udivmoddi4+0x64>
 8000a9e:	4608      	mov	r0, r1
 8000aa0:	e706      	b.n	80008b0 <__udivmoddi4+0x94>
 8000aa2:	45c8      	cmp	r8, r9
 8000aa4:	d2ae      	bcs.n	8000a04 <__udivmoddi4+0x1e8>
 8000aa6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aaa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000aae:	3801      	subs	r0, #1
 8000ab0:	e7a8      	b.n	8000a04 <__udivmoddi4+0x1e8>
 8000ab2:	4631      	mov	r1, r6
 8000ab4:	e7ed      	b.n	8000a92 <__udivmoddi4+0x276>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	e799      	b.n	80009ee <__udivmoddi4+0x1d2>
 8000aba:	4630      	mov	r0, r6
 8000abc:	e7d4      	b.n	8000a68 <__udivmoddi4+0x24c>
 8000abe:	46d6      	mov	lr, sl
 8000ac0:	e77f      	b.n	80009c2 <__udivmoddi4+0x1a6>
 8000ac2:	4463      	add	r3, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	e74d      	b.n	8000964 <__udivmoddi4+0x148>
 8000ac8:	4606      	mov	r6, r0
 8000aca:	4623      	mov	r3, r4
 8000acc:	4608      	mov	r0, r1
 8000ace:	e70f      	b.n	80008f0 <__udivmoddi4+0xd4>
 8000ad0:	3e02      	subs	r6, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	e730      	b.n	8000938 <__udivmoddi4+0x11c>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_idiv0>:
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2224      	movs	r2, #36	@ 0x24
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fd9c 	bl	8004626 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_DAC1_Init+0x5c>)
 8000af0:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <MX_DAC1_Init+0x60>)
 8000af2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000af4:	4810      	ldr	r0, [pc, #64]	@ (8000b38 <MX_DAC1_Init+0x5c>)
 8000af6:	f000 fd9a 	bl	800162e <HAL_DAC_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b00:	f000 f9ec 	bl	8000edc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	@ (8000b38 <MX_DAC1_Init+0x5c>)
 8000b20:	f000 fef6 	bl	8001910 <HAL_DAC_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b2a:	f000 f9d7 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	@ 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000002c 	.word	0x2000002c
 8000b3c:	40007400 	.word	0x40007400

08000b40 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8000c1c <HAL_DAC_MspInit+0xdc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d157      	bne.n	8000c12 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b62:	4b2f      	ldr	r3, [pc, #188]	@ (8000c20 <HAL_DAC_MspInit+0xe0>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b66:	4a2e      	ldr	r2, [pc, #184]	@ (8000c20 <HAL_DAC_MspInit+0xe0>)
 8000b68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c20 <HAL_DAC_MspInit+0xe0>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <HAL_DAC_MspInit+0xe0>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	4a28      	ldr	r2, [pc, #160]	@ (8000c20 <HAL_DAC_MspInit+0xe0>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b86:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <HAL_DAC_MspInit+0xe0>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b92:	2310      	movs	r3, #16
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b96:	2303      	movs	r3, #3
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba8:	f001 fa66 	bl	8002078 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000bae:	4a1e      	ldr	r2, [pc, #120]	@ (8000c28 <HAL_DAC_MspInit+0xe8>)
 8000bb0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000bb4:	2206      	movs	r2, #6
 8000bb6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000bba:	2210      	movs	r2, #16
 8000bbc:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000bc6:	2280      	movs	r2, #128	@ 0x80
 8000bc8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bca:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000bcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bd0:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000bd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bd8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000bda:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000bdc:	2220      	movs	r2, #32
 8000bde:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000be0:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000be6:	480f      	ldr	r0, [pc, #60]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000be8:	f001 f84e 	bl	8001c88 <HAL_DMA_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000bf2:	f000 f973 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	4a09      	ldr	r2, [pc, #36]	@ (8000c24 <HAL_DAC_MspInit+0xe4>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2036      	movs	r0, #54	@ 0x36
 8000c08:	f000 fcdb 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c0c:	2036      	movs	r0, #54	@ 0x36
 8000c0e:	f000 fcf4 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	@ 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40007400 	.word	0x40007400
 8000c20:	40021000 	.word	0x40021000
 8000c24:	20000040 	.word	0x20000040
 8000c28:	40020030 	.word	0x40020030

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_DMA_Init+0x38>)
 8000c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c36:	4a0b      	ldr	r2, [pc, #44]	@ (8000c64 <MX_DMA_Init+0x38>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_DMA_Init+0x38>)
 8000c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	200d      	movs	r0, #13
 8000c50:	f000 fcb7 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c54:	200d      	movs	r0, #13
 8000c56:	f000 fcd0 	bl	80015fa <HAL_NVIC_EnableIRQ>

}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000

08000c68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d38 <MX_GPIO_Init+0xd0>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a2d      	ldr	r2, [pc, #180]	@ (8000d38 <MX_GPIO_Init+0xd0>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d38 <MX_GPIO_Init+0xd0>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <MX_GPIO_Init+0xd0>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	4a27      	ldr	r2, [pc, #156]	@ (8000d38 <MX_GPIO_Init+0xd0>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca2:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <MX_GPIO_Init+0xd0>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <MX_GPIO_Init+0xd0>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	4a21      	ldr	r2, [pc, #132]	@ (8000d38 <MX_GPIO_Init+0xd0>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cba:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <MX_GPIO_Init+0xd0>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2160      	movs	r1, #96	@ 0x60
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cce:	f001 fb3d 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4819      	ldr	r0, [pc, #100]	@ (8000d3c <MX_GPIO_Init+0xd4>)
 8000cd8:	f001 fb38 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cdc:	2360      	movs	r3, #96	@ 0x60
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf6:	f001 f9bf 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d10:	f001 f9b2 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d14:	2308      	movs	r3, #8
 8000d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <MX_GPIO_Init+0xd4>)
 8000d2c:	f001 f9a4 	bl	8002078 <HAL_GPIO_Init>

}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000400 	.word	0x48000400

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d46:	f000 fac8 	bl	80012da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4a:	f000 f825 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4e:	f7ff ff8b 	bl	8000c68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d52:	f7ff ff6b 	bl	8000c2c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 f9fd 	bl	8001154 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000d5a:	f7ff febf 	bl	8000adc <MX_DAC1_Init>
  MX_TIM6_Init();
 8000d5e:	f000 f94b 	bl	8000ff8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d62:	f000 f97f 	bl	8001064 <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim6);
 8000d66:	4808      	ldr	r0, [pc, #32]	@ (8000d88 <main+0x48>)
 8000d68:	f002 fd04 	bl	8003774 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000d6c:	4807      	ldr	r0, [pc, #28]	@ (8000d8c <main+0x4c>)
 8000d6e:	f002 fd4d 	bl	800380c <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sine_wave_array, 32, DAC_ALIGN_12B_R);
 8000d72:	2300      	movs	r3, #0
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2320      	movs	r3, #32
 8000d78:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <main+0x50>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <main+0x54>)
 8000d7e:	f000 fc79 	bl	8001674 <HAL_DAC_Start_DMA>

  while (1)
 8000d82:	bf00      	nop
 8000d84:	e7fd      	b.n	8000d82 <main+0x42>
 8000d86:	bf00      	nop
 8000d88:	20000088 	.word	0x20000088
 8000d8c:	200000d4 	.word	0x200000d4
 8000d90:	08004698 	.word	0x08004698
 8000d94:	2000002c 	.word	0x2000002c

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b096      	sub	sp, #88	@ 0x58
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	2244      	movs	r2, #68	@ 0x44
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 fc3d 	bl	8004626 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	463b      	mov	r3, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000dbe:	f001 fafb 	bl	80023b8 <HAL_PWREx_ControlVoltageScaling>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000dc8:	f000 f888 	bl	8000edc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dcc:	f001 fad6 	bl	800237c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000dd0:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <SystemClock_Config+0xc0>)
 8000dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000dd6:	4a20      	ldr	r2, [pc, #128]	@ (8000e58 <SystemClock_Config+0xc0>)
 8000dd8:	f023 0318 	bic.w	r3, r3, #24
 8000ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000de0:	2314      	movs	r3, #20
 8000de2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000de8:	2301      	movs	r3, #1
 8000dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000df0:	2360      	movs	r3, #96	@ 0x60
 8000df2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df4:	2302      	movs	r3, #2
 8000df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000e00:	2310      	movs	r3, #16
 8000e02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e04:	2307      	movs	r3, #7
 8000e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fb25 	bl	8002464 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e20:	f000 f85c 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 ff25 	bl	8002c8c <HAL_RCC_ClockConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e48:	f000 f848 	bl	8000edc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e4c:	f002 fb38 	bl	80034c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e50:	bf00      	nop
 8000e52:	3758      	adds	r7, #88	@ 0x58
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	00000000 	.word	0x00000000

08000e60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM7){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a18      	ldr	r2, [pc, #96]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d123      	bne.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x5a>



	 prescale = prescale + (int)(prescale * 0.047);
 8000e72:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fc26 	bl	80006c8 <__aeabi_i2d>
 8000e7c:	a312      	add	r3, pc, #72	@ (adr r3, 8000ec8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	f7ff f9a5 	bl	80001d0 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f7ff fc85 	bl	800079c <__aeabi_d2iz>
 8000e92:	4602      	mov	r2, r0
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e9c:	6013      	str	r3, [r2, #0]

	 if(prescale>65535){
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ea6:	db03      	blt.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x50>
		 prescale = 665;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000eaa:	f240 2299 	movw	r2, #665	@ 0x299
 8000eae:	601a      	str	r2, [r3, #0]
	 }

	__HAL_TIM_SET_PRESCALER(&htim6, prescale);
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	629a      	str	r2, [r3, #40]	@ 0x28

	}


}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	4dd2f1aa 	.word	0x4dd2f1aa
 8000ecc:	3fa81062 	.word	0x3fa81062
 8000ed0:	40001400 	.word	0x40001400
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000088 	.word	0x20000088

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <Error_Handler+0x8>

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <HAL_MspInit+0x44>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f2c <HAL_MspInit+0x44>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <HAL_MspInit+0x44>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <HAL_MspInit+0x44>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0a:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <HAL_MspInit+0x44>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_MspInit+0x44>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <NMI_Handler+0x4>

08000f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <MemManage_Handler+0x4>

08000f48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f86:	f000 f9fd 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <DMA1_Channel3_IRQHandler+0x10>)
 8000f96:	f000 ff8f 	bl	8001eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000040 	.word	0x20000040

08000fa4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fa8:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <TIM6_DAC_IRQHandler+0x14>)
 8000faa:	f002 fc83 	bl	80038b4 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000fae:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <TIM6_DAC_IRQHandler+0x18>)
 8000fb0:	f000 fc2c 	bl	800180c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000088 	.word	0x20000088
 8000fbc:	2000002c 	.word	0x2000002c

08000fc0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <TIM7_IRQHandler+0x10>)
 8000fc6:	f002 fc75 	bl	80038b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000d4 	.word	0x200000d4

08000fd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <MX_TIM6_Init+0x64>)
 800100a:	4a15      	ldr	r2, [pc, #84]	@ (8001060 <MX_TIM6_Init+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 665;
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <MX_TIM6_Init+0x64>)
 8001010:	f240 2299 	movw	r2, #665	@ 0x299
 8001014:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <MX_TIM6_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 14;
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <MX_TIM6_Init+0x64>)
 800101e:	220e      	movs	r2, #14
 8001020:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <MX_TIM6_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <MX_TIM6_Init+0x64>)
 800102a:	f002 fb4b 	bl	80036c4 <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001034:	f7ff ff52 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001038:	2320      	movs	r3, #32
 800103a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	@ (800105c <MX_TIM6_Init+0x64>)
 8001046:	f002 fdd5 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001050:	f7ff ff44 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000088 	.word	0x20000088
 8001060:	40001000 	.word	0x40001000

08001064 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <MX_TIM7_Init+0x64>)
 8001076:	4a15      	ldr	r2, [pc, #84]	@ (80010cc <MX_TIM7_Init+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 97;
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <MX_TIM7_Init+0x64>)
 800107c:	2261      	movs	r2, #97	@ 0x61
 800107e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_TIM7_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <MX_TIM7_Init+0x64>)
 8001088:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800108c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_TIM7_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <MX_TIM7_Init+0x64>)
 8001096:	f002 fb15 	bl	80036c4 <HAL_TIM_Base_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80010a0:	f7ff ff1c 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010a4:	2320      	movs	r3, #32
 80010a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_TIM7_Init+0x64>)
 80010b2:	f002 fd9f 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80010bc:	f7ff ff0e 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000d4 	.word	0x200000d4
 80010cc:	40001400 	.word	0x40001400

080010d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001148 <HAL_TIM_Base_MspInit+0x78>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d114      	bne.n	800110c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <HAL_TIM_Base_MspInit+0x7c>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e6:	4a19      	ldr	r2, [pc, #100]	@ (800114c <HAL_TIM_Base_MspInit+0x7c>)
 80010e8:	f043 0310 	orr.w	r3, r3, #16
 80010ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <HAL_TIM_Base_MspInit+0x7c>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2036      	movs	r0, #54	@ 0x36
 8001100:	f000 fa5f 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001104:	2036      	movs	r0, #54	@ 0x36
 8001106:	f000 fa78 	bl	80015fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800110a:	e018      	b.n	800113e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0f      	ldr	r2, [pc, #60]	@ (8001150 <HAL_TIM_Base_MspInit+0x80>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d113      	bne.n	800113e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001116:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <HAL_TIM_Base_MspInit+0x7c>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	4a0c      	ldr	r2, [pc, #48]	@ (800114c <HAL_TIM_Base_MspInit+0x7c>)
 800111c:	f043 0320 	orr.w	r3, r3, #32
 8001120:	6593      	str	r3, [r2, #88]	@ 0x58
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_TIM_Base_MspInit+0x7c>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001126:	f003 0320 	and.w	r3, r3, #32
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2037      	movs	r0, #55	@ 0x37
 8001134:	f000 fa45 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001138:	2037      	movs	r0, #55	@ 0x37
 800113a:	f000 fa5e 	bl	80015fa <HAL_NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40001000 	.word	0x40001000
 800114c:	40021000 	.word	0x40021000
 8001150:	40001400 	.word	0x40001400

08001154 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800115a:	4a15      	ldr	r2, [pc, #84]	@ (80011b0 <MX_USART2_UART_Init+0x5c>)
 800115c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001198:	f002 fdb0 	bl	8003cfc <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011a2:	f7ff fe9b 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000120 	.word	0x20000120
 80011b0:	40004400 	.word	0x40004400

080011b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b09e      	sub	sp, #120	@ 0x78
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	2254      	movs	r2, #84	@ 0x54
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fa26 	bl	8004626 <memset>
  if(uartHandle->Instance==USART2)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a28      	ldr	r2, [pc, #160]	@ (8001280 <HAL_UART_MspInit+0xcc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d148      	bne.n	8001276 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 ff6f 	bl	80030d4 <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011fc:	f7ff fe6e 	bl	8000edc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001200:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <HAL_UART_MspInit+0xd0>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001204:	4a1f      	ldr	r2, [pc, #124]	@ (8001284 <HAL_UART_MspInit+0xd0>)
 8001206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800120a:	6593      	str	r3, [r2, #88]	@ 0x58
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_UART_MspInit+0xd0>)
 800120e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_UART_MspInit+0xd0>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121c:	4a19      	ldr	r2, [pc, #100]	@ (8001284 <HAL_UART_MspInit+0xd0>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <HAL_UART_MspInit+0xd0>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001230:	2304      	movs	r3, #4
 8001232:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001240:	2307      	movs	r3, #7
 8001242:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124e:	f000 ff13 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001256:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001264:	2303      	movs	r3, #3
 8001266:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001272:	f000 ff01 	bl	8002078 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001276:	bf00      	nop
 8001278:	3778      	adds	r7, #120	@ 0x78
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40004400 	.word	0x40004400
 8001284:	40021000 	.word	0x40021000

08001288 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800128c:	f7ff fea2 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	@ (80012c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <LoopForever+0xe>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	@ (80012d4 <LoopForever+0x16>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b6:	f003 f9bf 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ba:	f7ff fd41 	bl	8000d40 <main>

080012be <LoopForever>:

LoopForever:
    b LoopForever
 80012be:	e7fe      	b.n	80012be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012cc:	08004770 	.word	0x08004770
  ldr r2, =_sbss
 80012d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012d4:	200001ac 	.word	0x200001ac

080012d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC1_IRQHandler>

080012da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f961 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ea:	2000      	movs	r0, #0
 80012ec:	f000 f80e 	bl	800130c <HAL_InitTick>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	e001      	b.n	8001300 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012fc:	f7ff fdf4 	bl	8000ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001300:	79fb      	ldrb	r3, [r7, #7]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001318:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <HAL_InitTick+0x6c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d023      	beq.n	8001368 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001320:	4b16      	ldr	r3, [pc, #88]	@ (800137c <HAL_InitTick+0x70>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <HAL_InitTick+0x6c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f96d 	bl	8001616 <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10f      	bne.n	8001362 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d809      	bhi.n	800135c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001350:	f000 f937 	bl	80015c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001354:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <HAL_InitTick+0x74>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e007      	b.n	800136c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e004      	b.n	800136c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	e001      	b.n	800136c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000000c 	.word	0x2000000c
 800137c:	20000004 	.word	0x20000004
 8001380:	20000008 	.word	0x20000008

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000000c 	.word	0x2000000c
 80013a8:	200001a8 	.word	0x200001a8

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200001a8 	.word	0x200001a8

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000000c 	.word	0x2000000c

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4907      	ldr	r1, [pc, #28]	@ (80014a8 <__NVIC_EnableIRQ+0x38>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	@ (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	@ (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	@ 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	@ 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800158c:	f7ff ff8e 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff29 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff3e 	bl	8001454 <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff8e 	bl	8001500 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5d 	bl	80014ac <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff31 	bl	8001470 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e014      	b.n	800166a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	791b      	ldrb	r3, [r3, #4]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d105      	bne.n	8001656 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fa75 	bl	8000b40 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2202      	movs	r2, #2
 800165a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	795b      	ldrb	r3, [r3, #5]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_DAC_Start_DMA+0x1e>
 800168e:	2302      	movs	r3, #2
 8001690:	e0ab      	b.n	80017ea <HAL_DAC_Start_DMA+0x176>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2202      	movs	r2, #2
 800169c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d12f      	bne.n	8001704 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a52      	ldr	r2, [pc, #328]	@ (80017f4 <HAL_DAC_Start_DMA+0x180>)
 80016aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a51      	ldr	r2, [pc, #324]	@ (80017f8 <HAL_DAC_Start_DMA+0x184>)
 80016b2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a50      	ldr	r2, [pc, #320]	@ (80017fc <HAL_DAC_Start_DMA+0x188>)
 80016ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80016ca:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d013      	beq.n	80016fa <HAL_DAC_Start_DMA+0x86>
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d845      	bhi.n	8001764 <HAL_DAC_Start_DMA+0xf0>
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_DAC_Start_DMA+0x72>
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d005      	beq.n	80016f0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80016e4:	e03e      	b.n	8001764 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3308      	adds	r3, #8
 80016ec:	613b      	str	r3, [r7, #16]
        break;
 80016ee:	e03c      	b.n	800176a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	330c      	adds	r3, #12
 80016f6:	613b      	str	r3, [r7, #16]
        break;
 80016f8:	e037      	b.n	800176a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3310      	adds	r3, #16
 8001700:	613b      	str	r3, [r7, #16]
        break;
 8001702:	e032      	b.n	800176a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4a3d      	ldr	r2, [pc, #244]	@ (8001800 <HAL_DAC_Start_DMA+0x18c>)
 800170a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4a3c      	ldr	r2, [pc, #240]	@ (8001804 <HAL_DAC_Start_DMA+0x190>)
 8001712:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4a3b      	ldr	r2, [pc, #236]	@ (8001808 <HAL_DAC_Start_DMA+0x194>)
 800171a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800172a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	2b08      	cmp	r3, #8
 8001730:	d013      	beq.n	800175a <HAL_DAC_Start_DMA+0xe6>
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d817      	bhi.n	8001768 <HAL_DAC_Start_DMA+0xf4>
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_DAC_Start_DMA+0xd2>
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	2b04      	cmp	r3, #4
 8001742:	d005      	beq.n	8001750 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001744:	e010      	b.n	8001768 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3314      	adds	r3, #20
 800174c:	613b      	str	r3, [r7, #16]
        break;
 800174e:	e00c      	b.n	800176a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3318      	adds	r3, #24
 8001756:	613b      	str	r3, [r7, #16]
        break;
 8001758:	e007      	b.n	800176a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	331c      	adds	r3, #28
 8001760:	613b      	str	r3, [r7, #16]
        break;
 8001762:	e002      	b.n	800176a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001764:	bf00      	nop
 8001766:	e000      	b.n	800176a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001768:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d111      	bne.n	8001794 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800177e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6898      	ldr	r0, [r3, #8]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	f000 fb35 	bl	8001df8 <HAL_DMA_Start_IT>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
 8001792:	e010      	b.n	80017b6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80017a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	68d8      	ldr	r0, [r3, #12]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	f000 fb23 	bl	8001df8 <HAL_DMA_Start_IT>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2201      	movs	r2, #1
 80017d0:	409a      	lsls	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	e005      	b.n	80017e8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	f043 0204 	orr.w	r2, r3, #4
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08001b5f 	.word	0x08001b5f
 80017f8:	08001b81 	.word	0x08001b81
 80017fc:	08001b9d 	.word	0x08001b9d
 8001800:	08001c1b 	.word	0x08001c1b
 8001804:	08001c3d 	.word	0x08001c3d
 8001808:	08001c59 	.word	0x08001c59

0800180c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800181e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001822:	d120      	bne.n	8001866 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800182a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800182e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001832:	d118      	bne.n	8001866 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2204      	movs	r2, #4
 8001838:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f043 0201 	orr.w	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800184e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800185e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f84b 	bl	80018fc <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001874:	d120      	bne.n	80018b8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001884:	d118      	bne.n	80018b8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2204      	movs	r2, #4
 800188a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f043 0202 	orr.w	r2, r3, #2
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80018b0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f9a7 	bl	8001c06 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	795b      	ldrb	r3, [r3, #5]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_DAC_ConfigChannel+0x1c>
 8001928:	2302      	movs	r3, #2
 800192a:	e114      	b.n	8001b56 <HAL_DAC_ConfigChannel+0x246>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2202      	movs	r2, #2
 8001936:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b04      	cmp	r3, #4
 800193e:	f040 8081 	bne.w	8001a44 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001942:	f7ff fd33 	bl	80013ac <HAL_GetTick>
 8001946:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d140      	bne.n	80019d0 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800194e:	e018      	b.n	8001982 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001950:	f7ff fd2c 	bl	80013ac <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d911      	bls.n	8001982 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00a      	beq.n	8001982 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f043 0208 	orr.w	r2, r3, #8
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2203      	movs	r2, #3
 800197c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e0e9      	b.n	8001b56 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1df      	bne.n	8001950 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff fd17 	bl	80013c4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	6992      	ldr	r2, [r2, #24]
 800199e:	641a      	str	r2, [r3, #64]	@ 0x40
 80019a0:	e023      	b.n	80019ea <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80019a2:	f7ff fd03 	bl	80013ac <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d90f      	bls.n	80019d0 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da0a      	bge.n	80019d0 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	f043 0208 	orr.w	r2, r3, #8
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2203      	movs	r2, #3
 80019ca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e0c2      	b.n	8001b56 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	dbe3      	blt.n	80019a2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80019da:	2001      	movs	r0, #1
 80019dc:	f7ff fcf2 	bl	80013c4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	6992      	ldr	r2, [r2, #24]
 80019e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	ea02 0103 	and.w	r1, r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	21ff      	movs	r1, #255	@ 0xff
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	ea02 0103 	and.w	r1, r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d11d      	bne.n	8001a88 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a52:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a8e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2207      	movs	r2, #7
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6819      	ldr	r1, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	400a      	ands	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	22c0      	movs	r2, #192	@ 0xc0
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	400a      	ands	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fea7 	bl	80018c0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2201      	movs	r2, #1
 8001b76:	711a      	strb	r2, [r3, #4]
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f7ff fea0 	bl	80018d4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f043 0204 	orr.w	r2, r3, #4
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff fe96 	bl	80018e8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	711a      	strb	r2, [r3, #4]
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c26:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff ffce 	bl	8001bca <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	711a      	strb	r2, [r3, #4]
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff ffc7 	bl	8001bde <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f043 0204 	orr.w	r2, r3, #4
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f7ff ffbd 	bl	8001bf2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	711a      	strb	r2, [r3, #4]
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e098      	b.n	8001dcc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd8 <HAL_DMA_Init+0x150>)
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d80f      	bhi.n	8001cc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b4b      	ldr	r3, [pc, #300]	@ (8001ddc <HAL_DMA_Init+0x154>)
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8001de0 <HAL_DMA_Init+0x158>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	091b      	lsrs	r3, r3, #4
 8001cb8:	009a      	lsls	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a48      	ldr	r2, [pc, #288]	@ (8001de4 <HAL_DMA_Init+0x15c>)
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cc4:	e00e      	b.n	8001ce4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b46      	ldr	r3, [pc, #280]	@ (8001de8 <HAL_DMA_Init+0x160>)
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a43      	ldr	r2, [pc, #268]	@ (8001de0 <HAL_DMA_Init+0x158>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	009a      	lsls	r2, r3, #2
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a42      	ldr	r2, [pc, #264]	@ (8001dec <HAL_DMA_Init+0x164>)
 8001ce2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d3e:	d039      	beq.n	8001db4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	4a27      	ldr	r2, [pc, #156]	@ (8001de4 <HAL_DMA_Init+0x15c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d11a      	bne.n	8001d80 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d4a:	4b29      	ldr	r3, [pc, #164]	@ (8001df0 <HAL_DMA_Init+0x168>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f003 031c 	and.w	r3, r3, #28
 8001d56:	210f      	movs	r1, #15
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4924      	ldr	r1, [pc, #144]	@ (8001df0 <HAL_DMA_Init+0x168>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d64:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <HAL_DMA_Init+0x168>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d70:	f003 031c 	and.w	r3, r3, #28
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	491d      	ldr	r1, [pc, #116]	@ (8001df0 <HAL_DMA_Init+0x168>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
 8001d7e:	e019      	b.n	8001db4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <HAL_DMA_Init+0x16c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	f003 031c 	and.w	r3, r3, #28
 8001d8c:	210f      	movs	r1, #15
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	4917      	ldr	r1, [pc, #92]	@ (8001df4 <HAL_DMA_Init+0x16c>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <HAL_DMA_Init+0x16c>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	f003 031c 	and.w	r3, r3, #28
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	4911      	ldr	r1, [pc, #68]	@ (8001df4 <HAL_DMA_Init+0x16c>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40020407 	.word	0x40020407
 8001ddc:	bffdfff8 	.word	0xbffdfff8
 8001de0:	cccccccd 	.word	0xcccccccd
 8001de4:	40020000 	.word	0x40020000
 8001de8:	bffdfbf8 	.word	0xbffdfbf8
 8001dec:	40020400 	.word	0x40020400
 8001df0:	400200a8 	.word	0x400200a8
 8001df4:	400204a8 	.word	0x400204a8

08001df8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_DMA_Start_IT+0x20>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e04b      	b.n	8001eb0 <HAL_DMA_Start_IT+0xb8>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d13a      	bne.n	8001ea2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 f8e0 	bl	8002016 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d008      	beq.n	8001e70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 020e 	orr.w	r2, r2, #14
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e00f      	b.n	8001e90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0204 	bic.w	r2, r2, #4
 8001e7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 020a 	orr.w	r2, r2, #10
 8001e8e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e005      	b.n	8001eae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	f003 031c 	and.w	r3, r3, #28
 8001ed8:	2204      	movs	r2, #4
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d026      	beq.n	8001f32 <HAL_DMA_IRQHandler+0x7a>
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d021      	beq.n	8001f32 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0204 	bic.w	r2, r2, #4
 8001f0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	f003 021c 	and.w	r2, r3, #28
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	2104      	movs	r1, #4
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d071      	beq.n	800200c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001f30:	e06c      	b.n	800200c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	f003 031c 	and.w	r3, r3, #28
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d02e      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0xec>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d029      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10b      	bne.n	8001f76 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020a 	bic.w	r2, r2, #10
 8001f6c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f003 021c 	and.w	r2, r3, #28
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	2102      	movs	r1, #2
 8001f84:	fa01 f202 	lsl.w	r2, r1, r2
 8001f88:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d038      	beq.n	800200c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001fa2:	e033      	b.n	800200c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa8:	f003 031c 	and.w	r3, r3, #28
 8001fac:	2208      	movs	r2, #8
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d02a      	beq.n	800200e <HAL_DMA_IRQHandler+0x156>
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d025      	beq.n	800200e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 020e 	bic.w	r2, r2, #14
 8001fd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	f003 021c 	and.w	r2, r3, #28
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800200c:	bf00      	nop
 800200e:	bf00      	nop
}
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002028:	f003 021c 	and.w	r2, r3, #28
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f202 	lsl.w	r2, r1, r2
 8002036:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d108      	bne.n	800205a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002058:	e007      	b.n	800206a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	60da      	str	r2, [r3, #12]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002086:	e148      	b.n	800231a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2101      	movs	r1, #1
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 813a 	beq.w	8002314 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d005      	beq.n	80020b8 <HAL_GPIO_Init+0x40>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d130      	bne.n	800211a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ee:	2201      	movs	r2, #1
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	f003 0201 	and.w	r2, r3, #1
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b03      	cmp	r3, #3
 8002124:	d017      	beq.n	8002156 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2203      	movs	r2, #3
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d123      	bne.n	80021aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	08da      	lsrs	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3208      	adds	r2, #8
 800216a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	08da      	lsrs	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3208      	adds	r2, #8
 80021a4:	6939      	ldr	r1, [r7, #16]
 80021a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0203 	and.w	r2, r3, #3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8094 	beq.w	8002314 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ec:	4b52      	ldr	r3, [pc, #328]	@ (8002338 <HAL_GPIO_Init+0x2c0>)
 80021ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f0:	4a51      	ldr	r2, [pc, #324]	@ (8002338 <HAL_GPIO_Init+0x2c0>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80021f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002338 <HAL_GPIO_Init+0x2c0>)
 80021fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002204:	4a4d      	ldr	r2, [pc, #308]	@ (800233c <HAL_GPIO_Init+0x2c4>)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800222e:	d00d      	beq.n	800224c <HAL_GPIO_Init+0x1d4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a43      	ldr	r2, [pc, #268]	@ (8002340 <HAL_GPIO_Init+0x2c8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d007      	beq.n	8002248 <HAL_GPIO_Init+0x1d0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a42      	ldr	r2, [pc, #264]	@ (8002344 <HAL_GPIO_Init+0x2cc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d101      	bne.n	8002244 <HAL_GPIO_Init+0x1cc>
 8002240:	2302      	movs	r3, #2
 8002242:	e004      	b.n	800224e <HAL_GPIO_Init+0x1d6>
 8002244:	2307      	movs	r3, #7
 8002246:	e002      	b.n	800224e <HAL_GPIO_Init+0x1d6>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_GPIO_Init+0x1d6>
 800224c:	2300      	movs	r3, #0
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	f002 0203 	and.w	r2, r2, #3
 8002254:	0092      	lsls	r2, r2, #2
 8002256:	4093      	lsls	r3, r2
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800225e:	4937      	ldr	r1, [pc, #220]	@ (800233c <HAL_GPIO_Init+0x2c4>)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800226c:	4b36      	ldr	r3, [pc, #216]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002290:	4a2d      	ldr	r2, [pc, #180]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002296:	4b2c      	ldr	r3, [pc, #176]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ba:	4a23      	ldr	r2, [pc, #140]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022c0:	4b21      	ldr	r3, [pc, #132]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022e4:	4a18      	ldr	r2, [pc, #96]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800230e:	4a0e      	ldr	r2, [pc, #56]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3301      	adds	r3, #1
 8002318:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	f47f aeaf 	bne.w	8002088 <HAL_GPIO_Init+0x10>
  }
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40021000 	.word	0x40021000
 800233c:	40010000 	.word	0x40010000
 8002340:	48000400 	.word	0x48000400
 8002344:	48000800 	.word	0x48000800
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002368:	e002      	b.n	8002370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40007000 	.word	0x40007000

0800239c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023a0:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40007000 	.word	0x40007000

080023b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c6:	d130      	bne.n	800242a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c8:	4b23      	ldr	r3, [pc, #140]	@ (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023d4:	d038      	beq.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d6:	4b20      	ldr	r3, [pc, #128]	@ (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023de:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023e6:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2232      	movs	r2, #50	@ 0x32
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002460 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9b      	lsrs	r3, r3, #18
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fc:	e002      	b.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3b01      	subs	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002404:	4b14      	ldr	r3, [pc, #80]	@ (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002410:	d102      	bne.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f2      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002418:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002424:	d110      	bne.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e00f      	b.n	800244a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800242a:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002436:	d007      	beq.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002438:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002440:	4a05      	ldr	r2, [pc, #20]	@ (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002442:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002446:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40007000 	.word	0x40007000
 800245c:	20000004 	.word	0x20000004
 8002460:	431bde83 	.word	0x431bde83

08002464 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	f000 bc02 	b.w	8002c7c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002478:	4b96      	ldr	r3, [pc, #600]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002482:	4b94      	ldr	r3, [pc, #592]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80e4 	beq.w	8002662 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d007      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4c>
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	f040 808b 	bne.w	80025be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	f040 8087 	bne.w	80025be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024b0:	4b88      	ldr	r3, [pc, #544]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_OscConfig+0x64>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e3d9      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1a      	ldr	r2, [r3, #32]
 80024cc:	4b81      	ldr	r3, [pc, #516]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_RCC_OscConfig+0x7e>
 80024d8:	4b7e      	ldr	r3, [pc, #504]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024e0:	e005      	b.n	80024ee <HAL_RCC_OscConfig+0x8a>
 80024e2:	4b7c      	ldr	r3, [pc, #496]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80024e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d223      	bcs.n	800253a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fd8c 	bl	8003014 <RCC_SetFlashLatencyFromMSIRange>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e3ba      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002506:	4b73      	ldr	r3, [pc, #460]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a72      	ldr	r2, [pc, #456]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 800250c:	f043 0308 	orr.w	r3, r3, #8
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	4b70      	ldr	r3, [pc, #448]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	496d      	ldr	r1, [pc, #436]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002524:	4b6b      	ldr	r3, [pc, #428]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	4968      	ldr	r1, [pc, #416]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
 8002538:	e025      	b.n	8002586 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800253a:	4b66      	ldr	r3, [pc, #408]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a65      	ldr	r2, [pc, #404]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b63      	ldr	r3, [pc, #396]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4960      	ldr	r1, [pc, #384]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002558:	4b5e      	ldr	r3, [pc, #376]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	495b      	ldr	r1, [pc, #364]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fd4c 	bl	8003014 <RCC_SetFlashLatencyFromMSIRange>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e37a      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002586:	f000 fc81 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 800258a:	4602      	mov	r2, r0
 800258c:	4b51      	ldr	r3, [pc, #324]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	4950      	ldr	r1, [pc, #320]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002598:	5ccb      	ldrb	r3, [r1, r3]
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	fa22 f303 	lsr.w	r3, r2, r3
 80025a2:	4a4e      	ldr	r2, [pc, #312]	@ (80026dc <HAL_RCC_OscConfig+0x278>)
 80025a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025a6:	4b4e      	ldr	r3, [pc, #312]	@ (80026e0 <HAL_RCC_OscConfig+0x27c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe feae 	bl	800130c <HAL_InitTick>
 80025b0:	4603      	mov	r3, r0
 80025b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d052      	beq.n	8002660 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	e35e      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d032      	beq.n	800262c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025c6:	4b43      	ldr	r3, [pc, #268]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a42      	ldr	r2, [pc, #264]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025d2:	f7fe feeb 	bl	80013ac <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025da:	f7fe fee7 	bl	80013ac <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e347      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ec:	4b39      	ldr	r3, [pc, #228]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f8:	4b36      	ldr	r3, [pc, #216]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a35      	ldr	r2, [pc, #212]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025fe:	f043 0308 	orr.w	r3, r3, #8
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b33      	ldr	r3, [pc, #204]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4930      	ldr	r1, [pc, #192]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002616:	4b2f      	ldr	r3, [pc, #188]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	492b      	ldr	r1, [pc, #172]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
 800262a:	e01a      	b.n	8002662 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800262c:	4b29      	ldr	r3, [pc, #164]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a28      	ldr	r2, [pc, #160]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002638:	f7fe feb8 	bl	80013ac <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002640:	f7fe feb4 	bl	80013ac <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e314      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002652:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1dc>
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d073      	beq.n	8002756 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x21c>
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d10e      	bne.n	8002698 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d10b      	bne.n	8002698 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d063      	beq.n	8002754 <HAL_RCC_OscConfig+0x2f0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d15f      	bne.n	8002754 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e2f1      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a0:	d106      	bne.n	80026b0 <HAL_RCC_OscConfig+0x24c>
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a0b      	ldr	r2, [pc, #44]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e025      	b.n	80026fc <HAL_RCC_OscConfig+0x298>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b8:	d114      	bne.n	80026e4 <HAL_RCC_OscConfig+0x280>
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a05      	ldr	r2, [pc, #20]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b03      	ldr	r3, [pc, #12]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a02      	ldr	r2, [pc, #8]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e013      	b.n	80026fc <HAL_RCC_OscConfig+0x298>
 80026d4:	40021000 	.word	0x40021000
 80026d8:	08004718 	.word	0x08004718
 80026dc:	20000004 	.word	0x20000004
 80026e0:	20000008 	.word	0x20000008
 80026e4:	4ba0      	ldr	r3, [pc, #640]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a9f      	ldr	r2, [pc, #636]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b9d      	ldr	r3, [pc, #628]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a9c      	ldr	r2, [pc, #624]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fe52 	bl	80013ac <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fe4e 	bl	80013ac <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e2ae      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800271e:	4b92      	ldr	r3, [pc, #584]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x2a8>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fe3e 	bl	80013ac <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fe3a 	bl	80013ac <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	@ 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e29a      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002746:	4b88      	ldr	r3, [pc, #544]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x2d0>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d060      	beq.n	8002824 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d005      	beq.n	8002774 <HAL_RCC_OscConfig+0x310>
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d119      	bne.n	80027a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d116      	bne.n	80027a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002774:	4b7c      	ldr	r3, [pc, #496]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_OscConfig+0x328>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e277      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b76      	ldr	r3, [pc, #472]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	4973      	ldr	r1, [pc, #460]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a0:	e040      	b.n	8002824 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d023      	beq.n	80027f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe fdf9 	bl	80013ac <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027be:	f7fe fdf5 	bl	80013ac <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e255      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d0:	4b65      	ldr	r3, [pc, #404]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4b62      	ldr	r3, [pc, #392]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	495f      	ldr	r1, [pc, #380]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
 80027f0:	e018      	b.n	8002824 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80027f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fdd5 	bl	80013ac <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002806:	f7fe fdd1 	bl	80013ac <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e231      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002818:	4b53      	ldr	r3, [pc, #332]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03c      	beq.n	80028aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01c      	beq.n	8002872 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002838:	4b4b      	ldr	r3, [pc, #300]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283e:	4a4a      	ldr	r2, [pc, #296]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fdb0 	bl	80013ac <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002850:	f7fe fdac 	bl	80013ac <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e20c      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002862:	4b41      	ldr	r3, [pc, #260]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 8002864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ef      	beq.n	8002850 <HAL_RCC_OscConfig+0x3ec>
 8002870:	e01b      	b.n	80028aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002872:	4b3d      	ldr	r3, [pc, #244]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 8002874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002878:	4a3b      	ldr	r2, [pc, #236]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe fd93 	bl	80013ac <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288a:	f7fe fd8f 	bl	80013ac <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1ef      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800289c:	4b32      	ldr	r3, [pc, #200]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ef      	bne.n	800288a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80a6 	beq.w	8002a04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b8:	2300      	movs	r3, #0
 80028ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c8:	4b27      	ldr	r3, [pc, #156]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028cc:	4a26      	ldr	r2, [pc, #152]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80028d4:	4b24      	ldr	r3, [pc, #144]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e0:	2301      	movs	r3, #1
 80028e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e4:	4b21      	ldr	r3, [pc, #132]	@ (800296c <HAL_RCC_OscConfig+0x508>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d118      	bne.n	8002922 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f0:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <HAL_RCC_OscConfig+0x508>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1d      	ldr	r2, [pc, #116]	@ (800296c <HAL_RCC_OscConfig+0x508>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fc:	f7fe fd56 	bl	80013ac <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002904:	f7fe fd52 	bl	80013ac <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e1b2      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <HAL_RCC_OscConfig+0x508>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d108      	bne.n	800293c <HAL_RCC_OscConfig+0x4d8>
 800292a:	4b0f      	ldr	r3, [pc, #60]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002930:	4a0d      	ldr	r2, [pc, #52]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800293a:	e029      	b.n	8002990 <HAL_RCC_OscConfig+0x52c>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d115      	bne.n	8002970 <HAL_RCC_OscConfig+0x50c>
 8002944:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294a:	4a07      	ldr	r2, [pc, #28]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002954:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295a:	4a03      	ldr	r2, [pc, #12]	@ (8002968 <HAL_RCC_OscConfig+0x504>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002964:	e014      	b.n	8002990 <HAL_RCC_OscConfig+0x52c>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	40007000 	.word	0x40007000
 8002970:	4b9a      	ldr	r3, [pc, #616]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002976:	4a99      	ldr	r2, [pc, #612]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002980:	4b96      	ldr	r3, [pc, #600]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002986:	4a95      	ldr	r2, [pc, #596]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d016      	beq.n	80029c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7fe fd08 	bl	80013ac <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7fe fd04 	bl	80013ac <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e162      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b6:	4b89      	ldr	r3, [pc, #548]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 80029b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ed      	beq.n	80029a0 <HAL_RCC_OscConfig+0x53c>
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7fe fcf1 	bl	80013ac <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fced 	bl	80013ac <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e14b      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029e4:	4b7d      	ldr	r3, [pc, #500]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1ed      	bne.n	80029ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f2:	7ffb      	ldrb	r3, [r7, #31]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b78      	ldr	r3, [pc, #480]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fc:	4a77      	ldr	r2, [pc, #476]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d03c      	beq.n	8002a8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a18:	4b70      	ldr	r3, [pc, #448]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a1e:	4a6f      	ldr	r2, [pc, #444]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fcc0 	bl	80013ac <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a30:	f7fe fcbc 	bl	80013ac <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e11c      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a42:	4b66      	ldr	r3, [pc, #408]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ef      	beq.n	8002a30 <HAL_RCC_OscConfig+0x5cc>
 8002a50:	e01b      	b.n	8002a8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a52:	4b62      	ldr	r3, [pc, #392]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a58:	4a60      	ldr	r2, [pc, #384]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7fe fca3 	bl	80013ac <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a6a:	f7fe fc9f 	bl	80013ac <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0ff      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a7c:	4b57      	ldr	r3, [pc, #348]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1ef      	bne.n	8002a6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80f3 	beq.w	8002c7a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	f040 80c9 	bne.w	8002c30 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a9e:	4b4f      	ldr	r3, [pc, #316]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0203 	and.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d12c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abc:	3b01      	subs	r3, #1
 8002abe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d123      	bne.n	8002b0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ace:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d11b      	bne.n	8002b0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ade:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d113      	bne.n	8002b0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	3b01      	subs	r3, #1
 8002af2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d109      	bne.n	8002b0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	3b01      	subs	r3, #1
 8002b06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d06b      	beq.n	8002be4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d062      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b12:	4b32      	ldr	r3, [pc, #200]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0ac      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b22:	4b2e      	ldr	r3, [pc, #184]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a2d      	ldr	r2, [pc, #180]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002b28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b2e:	f7fe fc3d 	bl	80013ac <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe fc39 	bl	80013ac <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e099      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b48:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b54:	4b21      	ldr	r3, [pc, #132]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4b21      	ldr	r3, [pc, #132]	@ (8002be0 <HAL_RCC_OscConfig+0x77c>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b64:	3a01      	subs	r2, #1
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b6e:	0212      	lsls	r2, r2, #8
 8002b70:	4311      	orrs	r1, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b76:	0852      	lsrs	r2, r2, #1
 8002b78:	3a01      	subs	r2, #1
 8002b7a:	0552      	lsls	r2, r2, #21
 8002b7c:	4311      	orrs	r1, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b82:	0852      	lsrs	r2, r2, #1
 8002b84:	3a01      	subs	r2, #1
 8002b86:	0652      	lsls	r2, r2, #25
 8002b88:	4311      	orrs	r1, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b8e:	06d2      	lsls	r2, r2, #27
 8002b90:	430a      	orrs	r2, r1
 8002b92:	4912      	ldr	r1, [pc, #72]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b98:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb0:	f7fe fbfc 	bl	80013ac <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fbf8 	bl	80013ac <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e058      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bca:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <HAL_RCC_OscConfig+0x778>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd6:	e050      	b.n	8002c7a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e04f      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be4:	4b27      	ldr	r3, [pc, #156]	@ (8002c84 <HAL_RCC_OscConfig+0x820>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d144      	bne.n	8002c7a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bf0:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <HAL_RCC_OscConfig+0x820>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a23      	ldr	r2, [pc, #140]	@ (8002c84 <HAL_RCC_OscConfig+0x820>)
 8002bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bfc:	4b21      	ldr	r3, [pc, #132]	@ (8002c84 <HAL_RCC_OscConfig+0x820>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a20      	ldr	r2, [pc, #128]	@ (8002c84 <HAL_RCC_OscConfig+0x820>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c08:	f7fe fbd0 	bl	80013ac <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe fbcc 	bl	80013ac <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e02c      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c22:	4b18      	ldr	r3, [pc, #96]	@ (8002c84 <HAL_RCC_OscConfig+0x820>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x7ac>
 8002c2e:	e024      	b.n	8002c7a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	d01f      	beq.n	8002c76 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b13      	ldr	r3, [pc, #76]	@ (8002c84 <HAL_RCC_OscConfig+0x820>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a12      	ldr	r2, [pc, #72]	@ (8002c84 <HAL_RCC_OscConfig+0x820>)
 8002c3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe fbb3 	bl	80013ac <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7fe fbaf 	bl	80013ac <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e00f      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5c:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <HAL_RCC_OscConfig+0x820>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_RCC_OscConfig+0x820>)
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	4905      	ldr	r1, [pc, #20]	@ (8002c84 <HAL_RCC_OscConfig+0x820>)
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_RCC_OscConfig+0x824>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	60cb      	str	r3, [r1, #12]
 8002c74:	e001      	b.n	8002c7a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	feeefffc 	.word	0xfeeefffc

08002c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0e7      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b75      	ldr	r3, [pc, #468]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d910      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b72      	ldr	r3, [pc, #456]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 0207 	bic.w	r2, r3, #7
 8002cb6:	4970      	ldr	r1, [pc, #448]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b6e      	ldr	r3, [pc, #440]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0cf      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	4b66      	ldr	r3, [pc, #408]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d908      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b63      	ldr	r3, [pc, #396]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4960      	ldr	r1, [pc, #384]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d04c      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d12:	4b5a      	ldr	r3, [pc, #360]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d121      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0a6      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2a:	4b54      	ldr	r3, [pc, #336]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d115      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e09a      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d42:	4b4e      	ldr	r3, [pc, #312]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e08e      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d52:	4b4a      	ldr	r3, [pc, #296]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e086      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b46      	ldr	r3, [pc, #280]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4943      	ldr	r1, [pc, #268]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d74:	f7fe fb1a 	bl	80013ac <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7fe fb16 	bl	80013ac <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e06e      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b3a      	ldr	r3, [pc, #232]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 020c 	and.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1eb      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d010      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	4b31      	ldr	r3, [pc, #196]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d208      	bcs.n	8002dd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	492b      	ldr	r1, [pc, #172]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd2:	4b29      	ldr	r3, [pc, #164]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d210      	bcs.n	8002e02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de0:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 0207 	bic.w	r2, r3, #7
 8002de8:	4923      	ldr	r1, [pc, #140]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df0:	4b21      	ldr	r3, [pc, #132]	@ (8002e78 <HAL_RCC_ClockConfig+0x1ec>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e036      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	4918      	ldr	r1, [pc, #96]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2c:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4910      	ldr	r1, [pc, #64]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e40:	f000 f824 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	490b      	ldr	r1, [pc, #44]	@ (8002e80 <HAL_RCC_ClockConfig+0x1f4>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5c:	4a09      	ldr	r2, [pc, #36]	@ (8002e84 <HAL_RCC_ClockConfig+0x1f8>)
 8002e5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_RCC_ClockConfig+0x1fc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe fa51 	bl	800130c <HAL_InitTick>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e6e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40022000 	.word	0x40022000
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08004718 	.word	0x08004718
 8002e84:	20000004 	.word	0x20000004
 8002e88:	20000008 	.word	0x20000008

08002e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	@ 0x24
 8002e90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d121      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d11e      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ec0:	4b34      	ldr	r3, [pc, #208]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ecc:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	e005      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002edc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d102      	bne.n	8002f0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f04:	4b25      	ldr	r3, [pc, #148]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	e004      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f10:	4b23      	ldr	r3, [pc, #140]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d134      	bne.n	8002f84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d003      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0xac>
 8002f30:	e005      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f32:	4b1a      	ldr	r3, [pc, #104]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002f34:	617b      	str	r3, [r7, #20]
      break;
 8002f36:	e005      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f3a:	617b      	str	r3, [r7, #20]
      break;
 8002f3c:	e002      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	617b      	str	r3, [r7, #20]
      break;
 8002f42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f44:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	3301      	adds	r3, #1
 8002f50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f52:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	fb03 f202 	mul.w	r2, r3, r2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	0e5b      	lsrs	r3, r3, #25
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	3301      	adds	r3, #1
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f84:	69bb      	ldr	r3, [r7, #24]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08004730 	.word	0x08004730
 8002f9c:	00f42400 	.word	0x00f42400
 8002fa0:	007a1200 	.word	0x007a1200

08002fa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000004 	.word	0x20000004

08002fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fc0:	f7ff fff0 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4904      	ldr	r1, [pc, #16]	@ (8002fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	08004728 	.word	0x08004728

08002fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fec:	f7ff ffda 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	0adb      	lsrs	r3, r3, #11
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4904      	ldr	r1, [pc, #16]	@ (8003010 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	08004728 	.word	0x08004728

08003014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800301c:	2300      	movs	r3, #0
 800301e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003020:	4b2a      	ldr	r3, [pc, #168]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800302c:	f7ff f9b6 	bl	800239c <HAL_PWREx_GetVoltageRange>
 8003030:	6178      	str	r0, [r7, #20]
 8003032:	e014      	b.n	800305e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003034:	4b25      	ldr	r3, [pc, #148]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	4a24      	ldr	r2, [pc, #144]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800303e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003040:	4b22      	ldr	r3, [pc, #136]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800304c:	f7ff f9a6 	bl	800239c <HAL_PWREx_GetVoltageRange>
 8003050:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003052:	4b1e      	ldr	r3, [pc, #120]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	4a1d      	ldr	r2, [pc, #116]	@ (80030cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800305c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003064:	d10b      	bne.n	800307e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b80      	cmp	r3, #128	@ 0x80
 800306a:	d919      	bls.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003070:	d902      	bls.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003072:	2302      	movs	r3, #2
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	e013      	b.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003078:	2301      	movs	r3, #1
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	e010      	b.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b80      	cmp	r3, #128	@ 0x80
 8003082:	d902      	bls.n	800308a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003084:	2303      	movs	r3, #3
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	e00a      	b.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b80      	cmp	r3, #128	@ 0x80
 800308e:	d102      	bne.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003090:	2302      	movs	r3, #2
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	e004      	b.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b70      	cmp	r3, #112	@ 0x70
 800309a:	d101      	bne.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800309c:	2301      	movs	r3, #1
 800309e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 0207 	bic.w	r2, r3, #7
 80030a8:	4909      	ldr	r1, [pc, #36]	@ (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030b0:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d001      	beq.n	80030c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40022000 	.word	0x40022000

080030d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030dc:	2300      	movs	r3, #0
 80030de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030e0:	2300      	movs	r3, #0
 80030e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d031      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030f8:	d01a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80030fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030fe:	d814      	bhi.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003104:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003108:	d10f      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800310a:	4b5d      	ldr	r3, [pc, #372]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	4a5c      	ldr	r2, [pc, #368]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003114:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003116:	e00c      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3304      	adds	r3, #4
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f9de 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003128:	e003      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	74fb      	strb	r3, [r7, #19]
      break;
 800312e:	e000      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003132:	7cfb      	ldrb	r3, [r7, #19]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003138:	4b51      	ldr	r3, [pc, #324]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003146:	494e      	ldr	r1, [pc, #312]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800314e:	e001      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 809e 	beq.w	800329e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003166:	4b46      	ldr	r3, [pc, #280]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003176:	2300      	movs	r3, #0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317c:	4b40      	ldr	r3, [pc, #256]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003180:	4a3f      	ldr	r2, [pc, #252]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003186:	6593      	str	r3, [r2, #88]	@ 0x58
 8003188:	4b3d      	ldr	r3, [pc, #244]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003194:	2301      	movs	r3, #1
 8003196:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003198:	4b3a      	ldr	r3, [pc, #232]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a39      	ldr	r2, [pc, #228]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800319e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031a4:	f7fe f902 	bl	80013ac <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031aa:	e009      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ac:	f7fe f8fe 	bl	80013ac <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d902      	bls.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	74fb      	strb	r3, [r7, #19]
        break;
 80031be:	e005      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031c0:	4b30      	ldr	r3, [pc, #192]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ef      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d15a      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01e      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d019      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031ee:	4b24      	ldr	r3, [pc, #144]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031fa:	4b21      	ldr	r3, [pc, #132]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003200:	4a1f      	ldr	r2, [pc, #124]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800320a:	4b1d      	ldr	r3, [pc, #116]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003210:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003216:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800321a:	4a19      	ldr	r2, [pc, #100]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d016      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fe f8be 	bl	80013ac <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003232:	e00b      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003234:	f7fe f8ba 	bl	80013ac <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d902      	bls.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	74fb      	strb	r3, [r7, #19]
            break;
 800324a:	e006      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324c:	4b0c      	ldr	r3, [pc, #48]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ec      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003260:	4b07      	ldr	r3, [pc, #28]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003266:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800326e:	4904      	ldr	r1, [pc, #16]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003276:	e009      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	74bb      	strb	r3, [r7, #18]
 800327c:	e006      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328c:	7c7b      	ldrb	r3, [r7, #17]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b8a      	ldr	r3, [pc, #552]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	4a89      	ldr	r2, [pc, #548]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032aa:	4b84      	ldr	r3, [pc, #528]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b0:	f023 0203 	bic.w	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4980      	ldr	r1, [pc, #512]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032cc:	4b7b      	ldr	r3, [pc, #492]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d2:	f023 020c 	bic.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	4978      	ldr	r1, [pc, #480]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032ee:	4b73      	ldr	r3, [pc, #460]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fc:	496f      	ldr	r1, [pc, #444]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003310:	4b6a      	ldr	r3, [pc, #424]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003316:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331e:	4967      	ldr	r1, [pc, #412]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003332:	4b62      	ldr	r3, [pc, #392]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003338:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	495e      	ldr	r1, [pc, #376]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003354:	4b59      	ldr	r3, [pc, #356]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003362:	4956      	ldr	r1, [pc, #344]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003376:	4b51      	ldr	r3, [pc, #324]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	494d      	ldr	r1, [pc, #308]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d028      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003398:	4b48      	ldr	r3, [pc, #288]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	4945      	ldr	r1, [pc, #276]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033b6:	d106      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b8:	4b40      	ldr	r3, [pc, #256]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a3f      	ldr	r2, [pc, #252]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033c2:	60d3      	str	r3, [r2, #12]
 80033c4:	e011      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033ce:	d10c      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	2101      	movs	r1, #1
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f882 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d028      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033f6:	4b31      	ldr	r3, [pc, #196]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003404:	492d      	ldr	r1, [pc, #180]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003414:	d106      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003416:	4b29      	ldr	r3, [pc, #164]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	4a28      	ldr	r2, [pc, #160]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800341c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003420:	60d3      	str	r3, [r2, #12]
 8003422:	e011      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800342c:	d10c      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3304      	adds	r3, #4
 8003432:	2101      	movs	r1, #1
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f853 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01c      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003454:	4b19      	ldr	r3, [pc, #100]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003462:	4916      	ldr	r1, [pc, #88]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003472:	d10c      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	2102      	movs	r1, #2
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f830 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800348a:	7cfb      	ldrb	r3, [r7, #19]
 800348c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800349a:	4b08      	ldr	r3, [pc, #32]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a8:	4904      	ldr	r1, [pc, #16]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000

080034c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80034ca:	f043 0304 	orr.w	r3, r3, #4
 80034ce:	6013      	str	r3, [r2, #0]
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000

080034e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ee:	4b74      	ldr	r3, [pc, #464]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d018      	beq.n	800352c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034fa:	4b71      	ldr	r3, [pc, #452]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0203 	and.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d10d      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
       ||
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003512:	4b6b      	ldr	r3, [pc, #428]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
       ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d047      	beq.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e044      	b.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d018      	beq.n	8003566 <RCCEx_PLLSAI1_Config+0x86>
 8003534:	2b03      	cmp	r3, #3
 8003536:	d825      	bhi.n	8003584 <RCCEx_PLLSAI1_Config+0xa4>
 8003538:	2b01      	cmp	r3, #1
 800353a:	d002      	beq.n	8003542 <RCCEx_PLLSAI1_Config+0x62>
 800353c:	2b02      	cmp	r3, #2
 800353e:	d009      	beq.n	8003554 <RCCEx_PLLSAI1_Config+0x74>
 8003540:	e020      	b.n	8003584 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003542:	4b5f      	ldr	r3, [pc, #380]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11d      	bne.n	800358a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003552:	e01a      	b.n	800358a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003554:	4b5a      	ldr	r3, [pc, #360]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d116      	bne.n	800358e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003564:	e013      	b.n	800358e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003566:	4b56      	ldr	r3, [pc, #344]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003572:	4b53      	ldr	r3, [pc, #332]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003582:	e006      	b.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e004      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800358a:	bf00      	nop
 800358c:	e002      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800358e:	bf00      	nop
 8003590:	e000      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003592:	bf00      	nop
    }

    if(status == HAL_OK)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10d      	bne.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800359a:	4b49      	ldr	r3, [pc, #292]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	430b      	orrs	r3, r1
 80035b0:	4943      	ldr	r1, [pc, #268]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d17c      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035bc:	4b40      	ldr	r3, [pc, #256]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3f      	ldr	r2, [pc, #252]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c8:	f7fd fef0 	bl	80013ac <HAL_GetTick>
 80035cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ce:	e009      	b.n	80035e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d0:	f7fd feec 	bl	80013ac <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d902      	bls.n	80035e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	73fb      	strb	r3, [r7, #15]
        break;
 80035e2:	e005      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035e4:	4b36      	ldr	r3, [pc, #216]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ef      	bne.n	80035d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d15f      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d110      	bne.n	800361e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035fc:	4b30      	ldr	r3, [pc, #192]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003604:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6892      	ldr	r2, [r2, #8]
 800360c:	0211      	lsls	r1, r2, #8
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68d2      	ldr	r2, [r2, #12]
 8003612:	06d2      	lsls	r2, r2, #27
 8003614:	430a      	orrs	r2, r1
 8003616:	492a      	ldr	r1, [pc, #168]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003618:	4313      	orrs	r3, r2
 800361a:	610b      	str	r3, [r1, #16]
 800361c:	e027      	b.n	800366e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d112      	bne.n	800364a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003624:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800362c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6892      	ldr	r2, [r2, #8]
 8003634:	0211      	lsls	r1, r2, #8
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6912      	ldr	r2, [r2, #16]
 800363a:	0852      	lsrs	r2, r2, #1
 800363c:	3a01      	subs	r2, #1
 800363e:	0552      	lsls	r2, r2, #21
 8003640:	430a      	orrs	r2, r1
 8003642:	491f      	ldr	r1, [pc, #124]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003644:	4313      	orrs	r3, r2
 8003646:	610b      	str	r3, [r1, #16]
 8003648:	e011      	b.n	800366e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800364a:	4b1d      	ldr	r3, [pc, #116]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003652:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	0211      	lsls	r1, r2, #8
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6952      	ldr	r2, [r2, #20]
 8003660:	0852      	lsrs	r2, r2, #1
 8003662:	3a01      	subs	r2, #1
 8003664:	0652      	lsls	r2, r2, #25
 8003666:	430a      	orrs	r2, r1
 8003668:	4915      	ldr	r1, [pc, #84]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800366a:	4313      	orrs	r3, r2
 800366c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800366e:	4b14      	ldr	r3, [pc, #80]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a13      	ldr	r2, [pc, #76]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003674:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003678:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fd fe97 	bl	80013ac <HAL_GetTick>
 800367e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003680:	e009      	b.n	8003696 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003682:	f7fd fe93 	bl	80013ac <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d902      	bls.n	8003696 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	73fb      	strb	r3, [r7, #15]
          break;
 8003694:	e005      	b.n	80036a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0ef      	beq.n	8003682 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	4903      	ldr	r1, [pc, #12]	@ (80036c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000

080036c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e049      	b.n	800376a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fcf0 	bl	80010d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f000 fa06 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d001      	beq.n	800378c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e033      	b.n	80037f4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a19      	ldr	r2, [pc, #100]	@ (8003800 <HAL_TIM_Base_Start+0x8c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_TIM_Base_Start+0x3e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a6:	d004      	beq.n	80037b2 <HAL_TIM_Base_Start+0x3e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a15      	ldr	r2, [pc, #84]	@ (8003804 <HAL_TIM_Base_Start+0x90>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d115      	bne.n	80037de <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	4b13      	ldr	r3, [pc, #76]	@ (8003808 <HAL_TIM_Base_Start+0x94>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b06      	cmp	r3, #6
 80037c2:	d015      	beq.n	80037f0 <HAL_TIM_Base_Start+0x7c>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ca:	d011      	beq.n	80037f0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037dc:	e008      	b.n	80037f0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e000      	b.n	80037f2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40014000 	.word	0x40014000
 8003808:	00010007 	.word	0x00010007

0800380c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d001      	beq.n	8003824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e03b      	b.n	800389c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a19      	ldr	r2, [pc, #100]	@ (80038a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d009      	beq.n	800385a <HAL_TIM_Base_Start_IT+0x4e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800384e:	d004      	beq.n	800385a <HAL_TIM_Base_Start_IT+0x4e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a15      	ldr	r2, [pc, #84]	@ (80038ac <HAL_TIM_Base_Start_IT+0xa0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d115      	bne.n	8003886 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <HAL_TIM_Base_Start_IT+0xa4>)
 8003862:	4013      	ands	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b06      	cmp	r3, #6
 800386a:	d015      	beq.n	8003898 <HAL_TIM_Base_Start_IT+0x8c>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003872:	d011      	beq.n	8003898 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003884:	e008      	b.n	8003898 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	e000      	b.n	800389a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003898:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	40014000 	.word	0x40014000
 80038b0:	00010007 	.word	0x00010007

080038b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d020      	beq.n	8003918 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01b      	beq.n	8003918 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0202 	mvn.w	r2, #2
 80038e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f8e9 	bl	8003ad6 <HAL_TIM_IC_CaptureCallback>
 8003904:	e005      	b.n	8003912 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f8db 	bl	8003ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8ec 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d020      	beq.n	8003964 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01b      	beq.n	8003964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0204 	mvn.w	r2, #4
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f8c3 	bl	8003ad6 <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f8b5 	bl	8003ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f8c6 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d020      	beq.n	80039b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01b      	beq.n	80039b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0208 	mvn.w	r2, #8
 8003980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2204      	movs	r2, #4
 8003986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f89d 	bl	8003ad6 <HAL_TIM_IC_CaptureCallback>
 800399c:	e005      	b.n	80039aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f88f 	bl	8003ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f8a0 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d020      	beq.n	80039fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01b      	beq.n	80039fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0210 	mvn.w	r2, #16
 80039cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2208      	movs	r2, #8
 80039d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f877 	bl	8003ad6 <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f869 	bl	8003ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f87a 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00c      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0201 	mvn.w	r2, #1
 8003a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fa20 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00c      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f943 	bl	8003cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00c      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f93b 	bl	8003ce8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00c      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f834 	bl	8003afe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00c      	beq.n	8003aba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f06f 0220 	mvn.w	r2, #32
 8003ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f903 	bl	8003cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a30      	ldr	r2, [pc, #192]	@ (8003be8 <TIM_Base_SetConfig+0xd4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_Base_SetConfig+0x20>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b32:	d108      	bne.n	8003b46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a27      	ldr	r2, [pc, #156]	@ (8003be8 <TIM_Base_SetConfig+0xd4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00b      	beq.n	8003b66 <TIM_Base_SetConfig+0x52>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b54:	d007      	beq.n	8003b66 <TIM_Base_SetConfig+0x52>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a24      	ldr	r2, [pc, #144]	@ (8003bec <TIM_Base_SetConfig+0xd8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d003      	beq.n	8003b66 <TIM_Base_SetConfig+0x52>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a23      	ldr	r2, [pc, #140]	@ (8003bf0 <TIM_Base_SetConfig+0xdc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d108      	bne.n	8003b78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a12      	ldr	r2, [pc, #72]	@ (8003be8 <TIM_Base_SetConfig+0xd4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d007      	beq.n	8003bb4 <TIM_Base_SetConfig+0xa0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a11      	ldr	r2, [pc, #68]	@ (8003bec <TIM_Base_SetConfig+0xd8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_Base_SetConfig+0xa0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a10      	ldr	r2, [pc, #64]	@ (8003bf0 <TIM_Base_SetConfig+0xdc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d103      	bne.n	8003bbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f023 0201 	bic.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	611a      	str	r2, [r3, #16]
  }
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40014000 	.word	0x40014000
 8003bf0:	40014400 	.word	0x40014400

08003bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e04f      	b.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a21      	ldr	r2, [pc, #132]	@ (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d108      	bne.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d009      	beq.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c74:	d004      	beq.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a10      	ldr	r2, [pc, #64]	@ (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d10c      	bne.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40014000 	.word	0x40014000

08003cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e040      	b.n	8003d90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd fa48 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	@ 0x24
 8003d28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa54 	bl	80041f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f825 	bl	8003d98 <UART_SetConfig>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e01b      	b.n	8003d90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fad3 	bl	8004334 <UART_CheckIdleState>
 8003d8e:	4603      	mov	r3, r0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d9c:	b08a      	sub	sp, #40	@ 0x28
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	431a      	orrs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4bb4      	ldr	r3, [pc, #720]	@ (8004098 <UART_SetConfig+0x300>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4aa9      	ldr	r2, [pc, #676]	@ (800409c <UART_SetConfig+0x304>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e00:	4313      	orrs	r3, r2
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e14:	430a      	orrs	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4aa0      	ldr	r2, [pc, #640]	@ (80040a0 <UART_SetConfig+0x308>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d126      	bne.n	8003e70 <UART_SetConfig+0xd8>
 8003e22:	4ba0      	ldr	r3, [pc, #640]	@ (80040a4 <UART_SetConfig+0x30c>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d81b      	bhi.n	8003e68 <UART_SetConfig+0xd0>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <UART_SetConfig+0xa0>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e49 	.word	0x08003e49
 8003e3c:	08003e59 	.word	0x08003e59
 8003e40:	08003e51 	.word	0x08003e51
 8003e44:	08003e61 	.word	0x08003e61
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e4e:	e080      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003e50:	2302      	movs	r3, #2
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e56:	e07c      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5e:	e078      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003e60:	2308      	movs	r3, #8
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e66:	e074      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6e:	e070      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a8c      	ldr	r2, [pc, #560]	@ (80040a8 <UART_SetConfig+0x310>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d138      	bne.n	8003eec <UART_SetConfig+0x154>
 8003e7a:	4b8a      	ldr	r3, [pc, #552]	@ (80040a4 <UART_SetConfig+0x30c>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b0c      	cmp	r3, #12
 8003e86:	d82d      	bhi.n	8003ee4 <UART_SetConfig+0x14c>
 8003e88:	a201      	add	r2, pc, #4	@ (adr r2, 8003e90 <UART_SetConfig+0xf8>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003ec5 	.word	0x08003ec5
 8003e94:	08003ee5 	.word	0x08003ee5
 8003e98:	08003ee5 	.word	0x08003ee5
 8003e9c:	08003ee5 	.word	0x08003ee5
 8003ea0:	08003ed5 	.word	0x08003ed5
 8003ea4:	08003ee5 	.word	0x08003ee5
 8003ea8:	08003ee5 	.word	0x08003ee5
 8003eac:	08003ee5 	.word	0x08003ee5
 8003eb0:	08003ecd 	.word	0x08003ecd
 8003eb4:	08003ee5 	.word	0x08003ee5
 8003eb8:	08003ee5 	.word	0x08003ee5
 8003ebc:	08003ee5 	.word	0x08003ee5
 8003ec0:	08003edd 	.word	0x08003edd
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eca:	e042      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed2:	e03e      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eda:	e03a      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003edc:	2308      	movs	r3, #8
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee2:	e036      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eea:	e032      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a6a      	ldr	r2, [pc, #424]	@ (800409c <UART_SetConfig+0x304>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d12a      	bne.n	8003f4c <UART_SetConfig+0x1b4>
 8003ef6:	4b6b      	ldr	r3, [pc, #428]	@ (80040a4 <UART_SetConfig+0x30c>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f04:	d01a      	beq.n	8003f3c <UART_SetConfig+0x1a4>
 8003f06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f0a:	d81b      	bhi.n	8003f44 <UART_SetConfig+0x1ac>
 8003f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f10:	d00c      	beq.n	8003f2c <UART_SetConfig+0x194>
 8003f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f16:	d815      	bhi.n	8003f44 <UART_SetConfig+0x1ac>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <UART_SetConfig+0x18c>
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f20:	d008      	beq.n	8003f34 <UART_SetConfig+0x19c>
 8003f22:	e00f      	b.n	8003f44 <UART_SetConfig+0x1ac>
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2a:	e012      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f32:	e00e      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003f34:	2304      	movs	r3, #4
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3a:	e00a      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f42:	e006      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f4a:	e002      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a51      	ldr	r2, [pc, #324]	@ (800409c <UART_SetConfig+0x304>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d17a      	bne.n	8004052 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d824      	bhi.n	8003fae <UART_SetConfig+0x216>
 8003f64:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <UART_SetConfig+0x1d4>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f91 	.word	0x08003f91
 8003f70:	08003faf 	.word	0x08003faf
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003faf 	.word	0x08003faf
 8003f7c:	08003f9f 	.word	0x08003f9f
 8003f80:	08003faf 	.word	0x08003faf
 8003f84:	08003faf 	.word	0x08003faf
 8003f88:	08003faf 	.word	0x08003faf
 8003f8c:	08003fa7 	.word	0x08003fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f90:	f7ff f814 	bl	8002fbc <HAL_RCC_GetPCLK1Freq>
 8003f94:	61f8      	str	r0, [r7, #28]
        break;
 8003f96:	e010      	b.n	8003fba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f98:	4b44      	ldr	r3, [pc, #272]	@ (80040ac <UART_SetConfig+0x314>)
 8003f9a:	61fb      	str	r3, [r7, #28]
        break;
 8003f9c:	e00d      	b.n	8003fba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9e:	f7fe ff75 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8003fa2:	61f8      	str	r0, [r7, #28]
        break;
 8003fa4:	e009      	b.n	8003fba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003faa:	61fb      	str	r3, [r7, #28]
        break;
 8003fac:	e005      	b.n	8003fba <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8107 	beq.w	80041d0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d305      	bcc.n	8003fde <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d903      	bls.n	8003fe6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fe4:	e0f4      	b.n	80041d0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	461c      	mov	r4, r3
 8003fec:	4615      	mov	r5, r2
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	022b      	lsls	r3, r5, #8
 8003ff8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ffc:	0222      	lsls	r2, r4, #8
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	6849      	ldr	r1, [r1, #4]
 8004002:	0849      	lsrs	r1, r1, #1
 8004004:	2000      	movs	r0, #0
 8004006:	4688      	mov	r8, r1
 8004008:	4681      	mov	r9, r0
 800400a:	eb12 0a08 	adds.w	sl, r2, r8
 800400e:	eb43 0b09 	adc.w	fp, r3, r9
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004020:	4650      	mov	r0, sl
 8004022:	4659      	mov	r1, fp
 8004024:	f7fc fbe2 	bl	80007ec <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4613      	mov	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004036:	d308      	bcc.n	800404a <UART_SetConfig+0x2b2>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800403e:	d204      	bcs.n	800404a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	60da      	str	r2, [r3, #12]
 8004048:	e0c2      	b.n	80041d0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004050:	e0be      	b.n	80041d0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800405a:	d16a      	bne.n	8004132 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800405c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004060:	2b08      	cmp	r3, #8
 8004062:	d834      	bhi.n	80040ce <UART_SetConfig+0x336>
 8004064:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <UART_SetConfig+0x2d4>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004091 	.word	0x08004091
 8004070:	080040b1 	.word	0x080040b1
 8004074:	080040b9 	.word	0x080040b9
 8004078:	080040cf 	.word	0x080040cf
 800407c:	080040bf 	.word	0x080040bf
 8004080:	080040cf 	.word	0x080040cf
 8004084:	080040cf 	.word	0x080040cf
 8004088:	080040cf 	.word	0x080040cf
 800408c:	080040c7 	.word	0x080040c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fe ff94 	bl	8002fbc <HAL_RCC_GetPCLK1Freq>
 8004094:	61f8      	str	r0, [r7, #28]
        break;
 8004096:	e020      	b.n	80040da <UART_SetConfig+0x342>
 8004098:	efff69f3 	.word	0xefff69f3
 800409c:	40008000 	.word	0x40008000
 80040a0:	40013800 	.word	0x40013800
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40004400 	.word	0x40004400
 80040ac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040b0:	f7fe ff9a 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 80040b4:	61f8      	str	r0, [r7, #28]
        break;
 80040b6:	e010      	b.n	80040da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b8:	4b4c      	ldr	r3, [pc, #304]	@ (80041ec <UART_SetConfig+0x454>)
 80040ba:	61fb      	str	r3, [r7, #28]
        break;
 80040bc:	e00d      	b.n	80040da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040be:	f7fe fee5 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 80040c2:	61f8      	str	r0, [r7, #28]
        break;
 80040c4:	e009      	b.n	80040da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ca:	61fb      	str	r3, [r7, #28]
        break;
 80040cc:	e005      	b.n	80040da <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d077      	beq.n	80041d0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	005a      	lsls	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	441a      	add	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b0f      	cmp	r3, #15
 80040fa:	d916      	bls.n	800412a <UART_SetConfig+0x392>
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004102:	d212      	bcs.n	800412a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	b29b      	uxth	r3, r3
 8004108:	f023 030f 	bic.w	r3, r3, #15
 800410c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	b29b      	uxth	r3, r3
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	b29a      	uxth	r2, r3
 800411a:	8afb      	ldrh	r3, [r7, #22]
 800411c:	4313      	orrs	r3, r2
 800411e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	8afa      	ldrh	r2, [r7, #22]
 8004126:	60da      	str	r2, [r3, #12]
 8004128:	e052      	b.n	80041d0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004130:	e04e      	b.n	80041d0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004132:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004136:	2b08      	cmp	r3, #8
 8004138:	d827      	bhi.n	800418a <UART_SetConfig+0x3f2>
 800413a:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <UART_SetConfig+0x3a8>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004165 	.word	0x08004165
 8004144:	0800416d 	.word	0x0800416d
 8004148:	08004175 	.word	0x08004175
 800414c:	0800418b 	.word	0x0800418b
 8004150:	0800417b 	.word	0x0800417b
 8004154:	0800418b 	.word	0x0800418b
 8004158:	0800418b 	.word	0x0800418b
 800415c:	0800418b 	.word	0x0800418b
 8004160:	08004183 	.word	0x08004183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004164:	f7fe ff2a 	bl	8002fbc <HAL_RCC_GetPCLK1Freq>
 8004168:	61f8      	str	r0, [r7, #28]
        break;
 800416a:	e014      	b.n	8004196 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800416c:	f7fe ff3c 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 8004170:	61f8      	str	r0, [r7, #28]
        break;
 8004172:	e010      	b.n	8004196 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004174:	4b1d      	ldr	r3, [pc, #116]	@ (80041ec <UART_SetConfig+0x454>)
 8004176:	61fb      	str	r3, [r7, #28]
        break;
 8004178:	e00d      	b.n	8004196 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417a:	f7fe fe87 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 800417e:	61f8      	str	r0, [r7, #28]
        break;
 8004180:	e009      	b.n	8004196 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004186:	61fb      	str	r3, [r7, #28]
        break;
 8004188:	e005      	b.n	8004196 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004194:	bf00      	nop
    }

    if (pclk != 0U)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d019      	beq.n	80041d0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	085a      	lsrs	r2, r3, #1
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	441a      	add	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b0f      	cmp	r3, #15
 80041b4:	d909      	bls.n	80041ca <UART_SetConfig+0x432>
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041bc:	d205      	bcs.n	80041ca <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60da      	str	r2, [r3, #12]
 80041c8:	e002      	b.n	80041d0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3728      	adds	r7, #40	@ 0x28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ea:	bf00      	nop
 80041ec:	00f42400 	.word	0x00f42400

080041f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01a      	beq.n	8004306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ee:	d10a      	bne.n	8004306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b098      	sub	sp, #96	@ 0x60
 8004338:	af02      	add	r7, sp, #8
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004344:	f7fd f832 	bl	80013ac <HAL_GetTick>
 8004348:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b08      	cmp	r3, #8
 8004356:	d12e      	bne.n	80043b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004358:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004360:	2200      	movs	r2, #0
 8004362:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f88c 	bl	8004484 <UART_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d021      	beq.n	80043b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004386:	653b      	str	r3, [r7, #80]	@ 0x50
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004390:	647b      	str	r3, [r7, #68]	@ 0x44
 8004392:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800439e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e6      	bne.n	8004372 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e062      	b.n	800447c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d149      	bne.n	8004458 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043cc:	2200      	movs	r2, #0
 80043ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f856 	bl	8004484 <UART_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d03c      	beq.n	8004458 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	623b      	str	r3, [r7, #32]
   return(result);
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800440a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e6      	bne.n	80043de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3308      	adds	r3, #8
 800442e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004430:	61fa      	str	r2, [r7, #28]
 8004432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	69b9      	ldr	r1, [r7, #24]
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	617b      	str	r3, [r7, #20]
   return(result);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e011      	b.n	800447c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3758      	adds	r7, #88	@ 0x58
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004494:	e04f      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800449c:	d04b      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449e:	f7fc ff85 	bl	80013ac <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e04e      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d037      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b80      	cmp	r3, #128	@ 0x80
 80044ca:	d034      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b40      	cmp	r3, #64	@ 0x40
 80044d0:	d031      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d110      	bne.n	8004502 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2208      	movs	r2, #8
 80044e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f838 	bl	800455e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2208      	movs	r2, #8
 80044f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e029      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800450c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004510:	d111      	bne.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800451a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f81e 	bl	800455e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e00f      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	429a      	cmp	r2, r3
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	429a      	cmp	r2, r3
 8004552:	d0a0      	beq.n	8004496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800455e:	b480      	push	{r7}
 8004560:	b095      	sub	sp, #84	@ 0x54
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800457a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004584:	643b      	str	r3, [r7, #64]	@ 0x40
 8004586:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800458a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e6      	bne.n	8004566 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3308      	adds	r3, #8
 800459e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e5      	bne.n	8004598 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d118      	bne.n	8004606 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f023 0310 	bic.w	r3, r3, #16
 80045e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6979      	ldr	r1, [r7, #20]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e6      	bne.n	80045d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800461a:	bf00      	nop
 800461c:	3754      	adds	r7, #84	@ 0x54
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <memset>:
 8004626:	4402      	add	r2, r0
 8004628:	4603      	mov	r3, r0
 800462a:	4293      	cmp	r3, r2
 800462c:	d100      	bne.n	8004630 <memset+0xa>
 800462e:	4770      	bx	lr
 8004630:	f803 1b01 	strb.w	r1, [r3], #1
 8004634:	e7f9      	b.n	800462a <memset+0x4>
	...

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	4d0d      	ldr	r5, [pc, #52]	@ (8004670 <__libc_init_array+0x38>)
 800463c:	4c0d      	ldr	r4, [pc, #52]	@ (8004674 <__libc_init_array+0x3c>)
 800463e:	1b64      	subs	r4, r4, r5
 8004640:	10a4      	asrs	r4, r4, #2
 8004642:	2600      	movs	r6, #0
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	4d0b      	ldr	r5, [pc, #44]	@ (8004678 <__libc_init_array+0x40>)
 800464a:	4c0c      	ldr	r4, [pc, #48]	@ (800467c <__libc_init_array+0x44>)
 800464c:	f000 f818 	bl	8004680 <_init>
 8004650:	1b64      	subs	r4, r4, r5
 8004652:	10a4      	asrs	r4, r4, #2
 8004654:	2600      	movs	r6, #0
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	f855 3b04 	ldr.w	r3, [r5], #4
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	08004768 	.word	0x08004768
 8004674:	08004768 	.word	0x08004768
 8004678:	08004768 	.word	0x08004768
 800467c:	0800476c 	.word	0x0800476c

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
