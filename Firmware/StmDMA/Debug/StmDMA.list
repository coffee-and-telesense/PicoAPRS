
StmDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057ec  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080058a8  080058a8  000068a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af0  08005af0  0000743c  2**0
                  CONTENTS
  4 .ARM          00000000  08005af0  08005af0  0000743c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005af0  08005af0  0000743c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af0  08005af0  00006af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005af4  08005af4  00006af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  08005af8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000043c  08005f34  0000743c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  08005f34  0000764c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000743c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a339  00000000  00000000  00007464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217e  00000000  00000000  0001179d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00013920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000088d  00000000  00000000  00014460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba0c  00000000  00000000  00014ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcf6  00000000  00000000  000306f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a572c  00000000  00000000  0003e3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3b1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dfc  00000000  00000000  000e3b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e695c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000043c 	.word	0x2000043c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005890 	.word	0x08005890

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000440 	.word	0x20000440
 8000100:	08005890 	.word	0x08005890

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f000 ff87 	bl	8001314 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fec7 	bl	80011a4 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 ff79 	bl	8001314 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ff6f 	bl	8001314 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fef1 	bl	800122c <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fee7 	bl	800122c <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f7ff ffef 	bl	8000458 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f001 fe1d 	bl	80020c0 <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 fa7a 	bl	8001988 <__aeabi_dsub>
 8000494:	f001 fe14 	bl	80020c0 <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	@ 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	b083      	sub	sp, #12
 80004b6:	9000      	str	r0, [sp, #0]
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	030c      	lsls	r4, r1, #12
 80004bc:	004f      	lsls	r7, r1, #1
 80004be:	0fce      	lsrs	r6, r1, #31
 80004c0:	0a61      	lsrs	r1, r4, #9
 80004c2:	9c00      	ldr	r4, [sp, #0]
 80004c4:	031d      	lsls	r5, r3, #12
 80004c6:	0f64      	lsrs	r4, r4, #29
 80004c8:	430c      	orrs	r4, r1
 80004ca:	9900      	ldr	r1, [sp, #0]
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	00c8      	lsls	r0, r1, #3
 80004d2:	0059      	lsls	r1, r3, #1
 80004d4:	0d4b      	lsrs	r3, r1, #21
 80004d6:	4699      	mov	r9, r3
 80004d8:	9a00      	ldr	r2, [sp, #0]
 80004da:	9b01      	ldr	r3, [sp, #4]
 80004dc:	0a6d      	lsrs	r5, r5, #9
 80004de:	0fd9      	lsrs	r1, r3, #31
 80004e0:	0f53      	lsrs	r3, r2, #29
 80004e2:	432b      	orrs	r3, r5
 80004e4:	469a      	mov	sl, r3
 80004e6:	9b00      	ldr	r3, [sp, #0]
 80004e8:	0d7f      	lsrs	r7, r7, #21
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	4694      	mov	ip, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	46b0      	mov	r8, r6
 80004f2:	1aba      	subs	r2, r7, r2
 80004f4:	428e      	cmp	r6, r1
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b0      	b.n	800065c <__aeabi_dadd+0x1b4>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_dadd+0x58>
 80004fe:	e078      	b.n	80005f2 <__aeabi_dadd+0x14a>
 8000500:	4649      	mov	r1, r9
 8000502:	2900      	cmp	r1, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x60>
 8000506:	e0e9      	b.n	80006dc <__aeabi_dadd+0x234>
 8000508:	49c9      	ldr	r1, [pc, #804]	@ (8000830 <__aeabi_dadd+0x388>)
 800050a:	428f      	cmp	r7, r1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e195      	b.n	800083c <__aeabi_dadd+0x394>
 8000510:	2501      	movs	r5, #1
 8000512:	2a38      	cmp	r2, #56	@ 0x38
 8000514:	dc16      	bgt.n	8000544 <__aeabi_dadd+0x9c>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	4653      	mov	r3, sl
 800051a:	0409      	lsls	r1, r1, #16
 800051c:	430b      	orrs	r3, r1
 800051e:	469a      	mov	sl, r3
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x7e>
 8000524:	e1e7      	b.n	80008f6 <__aeabi_dadd+0x44e>
 8000526:	2120      	movs	r1, #32
 8000528:	4655      	mov	r5, sl
 800052a:	1a8b      	subs	r3, r1, r2
 800052c:	4661      	mov	r1, ip
 800052e:	409d      	lsls	r5, r3
 8000530:	40d1      	lsrs	r1, r2
 8000532:	430d      	orrs	r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4099      	lsls	r1, r3
 8000538:	1e4b      	subs	r3, r1, #1
 800053a:	4199      	sbcs	r1, r3
 800053c:	4653      	mov	r3, sl
 800053e:	40d3      	lsrs	r3, r2
 8000540:	430d      	orrs	r5, r1
 8000542:	1ae4      	subs	r4, r4, r3
 8000544:	1b45      	subs	r5, r0, r5
 8000546:	42a8      	cmp	r0, r5
 8000548:	4180      	sbcs	r0, r0
 800054a:	4240      	negs	r0, r0
 800054c:	1a24      	subs	r4, r4, r0
 800054e:	0223      	lsls	r3, r4, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dadd+0xac>
 8000552:	e10f      	b.n	8000774 <__aeabi_dadd+0x2cc>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	2c00      	cmp	r4, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0xb6>
 800055c:	e139      	b.n	80007d2 <__aeabi_dadd+0x32a>
 800055e:	0020      	movs	r0, r4
 8000560:	f001 fee4 	bl	800232c <__clzsi2>
 8000564:	0003      	movs	r3, r0
 8000566:	3b08      	subs	r3, #8
 8000568:	2120      	movs	r1, #32
 800056a:	0028      	movs	r0, r5
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	40d0      	lsrs	r0, r2
 8000570:	409c      	lsls	r4, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409d      	lsls	r5, r3
 8000576:	4322      	orrs	r2, r4
 8000578:	429f      	cmp	r7, r3
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xd6>
 800057c:	e173      	b.n	8000866 <__aeabi_dadd+0x3be>
 800057e:	1bd8      	subs	r0, r3, r7
 8000580:	3001      	adds	r0, #1
 8000582:	1a09      	subs	r1, r1, r0
 8000584:	002c      	movs	r4, r5
 8000586:	408d      	lsls	r5, r1
 8000588:	40c4      	lsrs	r4, r0
 800058a:	1e6b      	subs	r3, r5, #1
 800058c:	419d      	sbcs	r5, r3
 800058e:	0013      	movs	r3, r2
 8000590:	40c2      	lsrs	r2, r0
 8000592:	408b      	lsls	r3, r1
 8000594:	4325      	orrs	r5, r4
 8000596:	2700      	movs	r7, #0
 8000598:	0014      	movs	r4, r2
 800059a:	431d      	orrs	r5, r3
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	1964      	adds	r4, r4, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	0223      	lsls	r3, r4, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e12d      	b.n	8000816 <__aeabi_dadd+0x36e>
 80005ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000830 <__aeabi_dadd+0x388>)
 80005bc:	3701      	adds	r7, #1
 80005be:	4297      	cmp	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0d3      	b.n	800076c <__aeabi_dadd+0x2c4>
 80005c4:	4646      	mov	r6, r8
 80005c6:	499b      	ldr	r1, [pc, #620]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c8:	08ed      	lsrs	r5, r5, #3
 80005ca:	4021      	ands	r1, r4
 80005cc:	074a      	lsls	r2, r1, #29
 80005ce:	432a      	orrs	r2, r5
 80005d0:	057c      	lsls	r4, r7, #21
 80005d2:	024d      	lsls	r5, r1, #9
 80005d4:	0b2d      	lsrs	r5, r5, #12
 80005d6:	0d64      	lsrs	r4, r4, #21
 80005d8:	0524      	lsls	r4, r4, #20
 80005da:	432c      	orrs	r4, r5
 80005dc:	07f6      	lsls	r6, r6, #31
 80005de:	4334      	orrs	r4, r6
 80005e0:	0010      	movs	r0, r2
 80005e2:	0021      	movs	r1, r4
 80005e4:	b003      	add	sp, #12
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	46bb      	mov	fp, r7
 80005ea:	46b2      	mov	sl, r6
 80005ec:	46a9      	mov	r9, r5
 80005ee:	46a0      	mov	r8, r4
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x150>
 80005f6:	e084      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005f8:	464a      	mov	r2, r9
 80005fa:	1bd2      	subs	r2, r2, r7
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e16d      	b.n	80008de <__aeabi_dadd+0x436>
 8000602:	0025      	movs	r5, r4
 8000604:	4305      	orrs	r5, r0
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e127      	b.n	800085a <__aeabi_dadd+0x3b2>
 800060a:	1e56      	subs	r6, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e23b      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 8000612:	4d87      	ldr	r5, [pc, #540]	@ (8000830 <__aeabi_dadd+0x388>)
 8000614:	42aa      	cmp	r2, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e26a      	b.n	8000af0 <__aeabi_dadd+0x648>
 800061a:	2501      	movs	r5, #1
 800061c:	2e38      	cmp	r6, #56	@ 0x38
 800061e:	dc12      	bgt.n	8000646 <__aeabi_dadd+0x19e>
 8000620:	0032      	movs	r2, r6
 8000622:	2a1f      	cmp	r2, #31
 8000624:	dd00      	ble.n	8000628 <__aeabi_dadd+0x180>
 8000626:	e1f8      	b.n	8000a1a <__aeabi_dadd+0x572>
 8000628:	2620      	movs	r6, #32
 800062a:	0025      	movs	r5, r4
 800062c:	1ab6      	subs	r6, r6, r2
 800062e:	0007      	movs	r7, r0
 8000630:	4653      	mov	r3, sl
 8000632:	40b0      	lsls	r0, r6
 8000634:	40d4      	lsrs	r4, r2
 8000636:	40b5      	lsls	r5, r6
 8000638:	40d7      	lsrs	r7, r2
 800063a:	1e46      	subs	r6, r0, #1
 800063c:	41b0      	sbcs	r0, r6
 800063e:	1b1b      	subs	r3, r3, r4
 8000640:	469a      	mov	sl, r3
 8000642:	433d      	orrs	r5, r7
 8000644:	4305      	orrs	r5, r0
 8000646:	4662      	mov	r2, ip
 8000648:	1b55      	subs	r5, r2, r5
 800064a:	45ac      	cmp	ip, r5
 800064c:	4192      	sbcs	r2, r2
 800064e:	4653      	mov	r3, sl
 8000650:	4252      	negs	r2, r2
 8000652:	000e      	movs	r6, r1
 8000654:	464f      	mov	r7, r9
 8000656:	4688      	mov	r8, r1
 8000658:	1a9c      	subs	r4, r3, r2
 800065a:	e778      	b.n	800054e <__aeabi_dadd+0xa6>
 800065c:	2a00      	cmp	r2, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_dadd+0x1ba>
 8000660:	e08e      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000662:	4649      	mov	r1, r9
 8000664:	2900      	cmp	r1, #0
 8000666:	d175      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000668:	4661      	mov	r1, ip
 800066a:	4653      	mov	r3, sl
 800066c:	4319      	orrs	r1, r3
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e0f6      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e191      	b.n	800099e <__aeabi_dadd+0x4f6>
 800067a:	4d6d      	ldr	r5, [pc, #436]	@ (8000830 <__aeabi_dadd+0x388>)
 800067c:	42aa      	cmp	r2, r5
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1da>
 8000680:	e0dc      	b.n	800083c <__aeabi_dadd+0x394>
 8000682:	2501      	movs	r5, #1
 8000684:	2938      	cmp	r1, #56	@ 0x38
 8000686:	dc14      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000688:	000a      	movs	r2, r1
 800068a:	2a1f      	cmp	r2, #31
 800068c:	dd00      	ble.n	8000690 <__aeabi_dadd+0x1e8>
 800068e:	e1a2      	b.n	80009d6 <__aeabi_dadd+0x52e>
 8000690:	2120      	movs	r1, #32
 8000692:	4653      	mov	r3, sl
 8000694:	1a89      	subs	r1, r1, r2
 8000696:	408b      	lsls	r3, r1
 8000698:	001d      	movs	r5, r3
 800069a:	4663      	mov	r3, ip
 800069c:	40d3      	lsrs	r3, r2
 800069e:	431d      	orrs	r5, r3
 80006a0:	4663      	mov	r3, ip
 80006a2:	408b      	lsls	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	1e4b      	subs	r3, r1, #1
 80006a8:	4199      	sbcs	r1, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	40d3      	lsrs	r3, r2
 80006ae:	430d      	orrs	r5, r1
 80006b0:	18e4      	adds	r4, r4, r3
 80006b2:	182d      	adds	r5, r5, r0
 80006b4:	4285      	cmp	r5, r0
 80006b6:	4180      	sbcs	r0, r0
 80006b8:	4240      	negs	r0, r0
 80006ba:	1824      	adds	r4, r4, r0
 80006bc:	0223      	lsls	r3, r4, #8
 80006be:	d559      	bpl.n	8000774 <__aeabi_dadd+0x2cc>
 80006c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <__aeabi_dadd+0x388>)
 80006c2:	3701      	adds	r7, #1
 80006c4:	429f      	cmp	r7, r3
 80006c6:	d051      	beq.n	800076c <__aeabi_dadd+0x2c4>
 80006c8:	2101      	movs	r1, #1
 80006ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006cc:	086a      	lsrs	r2, r5, #1
 80006ce:	401c      	ands	r4, r3
 80006d0:	4029      	ands	r1, r5
 80006d2:	430a      	orrs	r2, r1
 80006d4:	07e5      	lsls	r5, r4, #31
 80006d6:	4315      	orrs	r5, r2
 80006d8:	0864      	lsrs	r4, r4, #1
 80006da:	e75f      	b.n	800059c <__aeabi_dadd+0xf4>
 80006dc:	4661      	mov	r1, ip
 80006de:	4653      	mov	r3, sl
 80006e0:	4319      	orrs	r1, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e0bc      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80006e6:	1e51      	subs	r1, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e164      	b.n	80009b8 <__aeabi_dadd+0x510>
 80006ee:	4d50      	ldr	r5, [pc, #320]	@ (8000830 <__aeabi_dadd+0x388>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x24e>
 80006f4:	e16a      	b.n	80009cc <__aeabi_dadd+0x524>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2938      	cmp	r1, #56	@ 0x38
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e722      	b.n	8000544 <__aeabi_dadd+0x9c>
 80006fe:	000a      	movs	r2, r1
 8000700:	e70e      	b.n	8000520 <__aeabi_dadd+0x78>
 8000702:	4a4d      	ldr	r2, [pc, #308]	@ (8000838 <__aeabi_dadd+0x390>)
 8000704:	1c7d      	adds	r5, r7, #1
 8000706:	4215      	tst	r5, r2
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x264>
 800070a:	e0d0      	b.n	80008ae <__aeabi_dadd+0x406>
 800070c:	0025      	movs	r5, r4
 800070e:	4662      	mov	r2, ip
 8000710:	4653      	mov	r3, sl
 8000712:	4305      	orrs	r5, r0
 8000714:	431a      	orrs	r2, r3
 8000716:	2f00      	cmp	r7, #0
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x274>
 800071a:	e137      	b.n	800098c <__aeabi_dadd+0x4e4>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x27a>
 8000720:	e1a8      	b.n	8000a74 <__aeabi_dadd+0x5cc>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e16a      	b.n	80009fe <__aeabi_dadd+0x556>
 8000728:	4663      	mov	r3, ip
 800072a:	1ac5      	subs	r5, r0, r3
 800072c:	4653      	mov	r3, sl
 800072e:	1ae2      	subs	r2, r4, r3
 8000730:	42a8      	cmp	r0, r5
 8000732:	419b      	sbcs	r3, r3
 8000734:	425b      	negs	r3, r3
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	021a      	lsls	r2, r3, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x296>
 800073c:	e203      	b.n	8000b46 <__aeabi_dadd+0x69e>
 800073e:	4663      	mov	r3, ip
 8000740:	1a1d      	subs	r5, r3, r0
 8000742:	45ac      	cmp	ip, r5
 8000744:	4192      	sbcs	r2, r2
 8000746:	4653      	mov	r3, sl
 8000748:	4252      	negs	r2, r2
 800074a:	1b1c      	subs	r4, r3, r4
 800074c:	000e      	movs	r6, r1
 800074e:	4688      	mov	r8, r1
 8000750:	1aa4      	subs	r4, r4, r2
 8000752:	e723      	b.n	800059c <__aeabi_dadd+0xf4>
 8000754:	4936      	ldr	r1, [pc, #216]	@ (8000830 <__aeabi_dadd+0x388>)
 8000756:	428f      	cmp	r7, r1
 8000758:	d070      	beq.n	800083c <__aeabi_dadd+0x394>
 800075a:	2501      	movs	r5, #1
 800075c:	2a38      	cmp	r2, #56	@ 0x38
 800075e:	dca8      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4653      	mov	r3, sl
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	430b      	orrs	r3, r1
 8000768:	469a      	mov	sl, r3
 800076a:	e78e      	b.n	800068a <__aeabi_dadd+0x1e2>
 800076c:	003c      	movs	r4, r7
 800076e:	2500      	movs	r5, #0
 8000770:	2200      	movs	r2, #0
 8000772:	e731      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000774:	2307      	movs	r3, #7
 8000776:	402b      	ands	r3, r5
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x2d6>
 800077c:	e710      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800077e:	e093      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d074      	beq.n	800086e <__aeabi_dadd+0x3c6>
 8000784:	464a      	mov	r2, r9
 8000786:	1bd2      	subs	r2, r2, r7
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2e6>
 800078c:	e0c7      	b.n	800091e <__aeabi_dadd+0x476>
 800078e:	4928      	ldr	r1, [pc, #160]	@ (8000830 <__aeabi_dadd+0x388>)
 8000790:	4589      	cmp	r9, r1
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e185      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000796:	2501      	movs	r5, #1
 8000798:	2a38      	cmp	r2, #56	@ 0x38
 800079a:	dc12      	bgt.n	80007c2 <__aeabi_dadd+0x31a>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0409      	lsls	r1, r1, #16
 80007a0:	430c      	orrs	r4, r1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x300>
 80007a6:	e1ab      	b.n	8000b00 <__aeabi_dadd+0x658>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0025      	movs	r5, r4
 80007ac:	1a89      	subs	r1, r1, r2
 80007ae:	0007      	movs	r7, r0
 80007b0:	4088      	lsls	r0, r1
 80007b2:	408d      	lsls	r5, r1
 80007b4:	40d7      	lsrs	r7, r2
 80007b6:	1e41      	subs	r1, r0, #1
 80007b8:	4188      	sbcs	r0, r1
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	433d      	orrs	r5, r7
 80007be:	4305      	orrs	r5, r0
 80007c0:	44a2      	add	sl, r4
 80007c2:	4465      	add	r5, ip
 80007c4:	4565      	cmp	r5, ip
 80007c6:	4192      	sbcs	r2, r2
 80007c8:	4252      	negs	r2, r2
 80007ca:	4452      	add	r2, sl
 80007cc:	0014      	movs	r4, r2
 80007ce:	464f      	mov	r7, r9
 80007d0:	e774      	b.n	80006bc <__aeabi_dadd+0x214>
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 fdaa 	bl	800232c <__clzsi2>
 80007d8:	0003      	movs	r3, r0
 80007da:	3318      	adds	r3, #24
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dadd+0x33a>
 80007e0:	e6c2      	b.n	8000568 <__aeabi_dadd+0xc0>
 80007e2:	002a      	movs	r2, r5
 80007e4:	3808      	subs	r0, #8
 80007e6:	4082      	lsls	r2, r0
 80007e8:	429f      	cmp	r7, r3
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a9      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007ee:	1bdb      	subs	r3, r3, r7
 80007f0:	1c58      	adds	r0, r3, #1
 80007f2:	281f      	cmp	r0, #31
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e1ac      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 80007f8:	0015      	movs	r5, r2
 80007fa:	3b1f      	subs	r3, #31
 80007fc:	40dd      	lsrs	r5, r3
 80007fe:	2820      	cmp	r0, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x366>
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	409a      	lsls	r2, r3
 8000808:	1e53      	subs	r3, r2, #1
 800080a:	419a      	sbcs	r2, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	2307      	movs	r3, #7
 8000810:	2700      	movs	r7, #0
 8000812:	402b      	ands	r3, r5
 8000814:	e7b0      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <__aeabi_dadd+0x388>)
 800081a:	0762      	lsls	r2, r4, #29
 800081c:	432a      	orrs	r2, r5
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	429f      	cmp	r7, r3
 8000822:	d00f      	beq.n	8000844 <__aeabi_dadd+0x39c>
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	0b25      	lsrs	r5, r4, #12
 8000828:	057c      	lsls	r4, r7, #21
 800082a:	0d64      	lsrs	r4, r4, #21
 800082c:	e6d4      	b.n	80005d8 <__aeabi_dadd+0x130>
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	08c0      	lsrs	r0, r0, #3
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	4302      	orrs	r2, r0
 8000842:	08e4      	lsrs	r4, r4, #3
 8000844:	0013      	movs	r3, r2
 8000846:	4323      	orrs	r3, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e186      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800084c:	2580      	movs	r5, #128	@ 0x80
 800084e:	032d      	lsls	r5, r5, #12
 8000850:	4325      	orrs	r5, r4
 8000852:	032d      	lsls	r5, r5, #12
 8000854:	4cc3      	ldr	r4, [pc, #780]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000856:	0b2d      	lsrs	r5, r5, #12
 8000858:	e6be      	b.n	80005d8 <__aeabi_dadd+0x130>
 800085a:	4660      	mov	r0, ip
 800085c:	4654      	mov	r4, sl
 800085e:	000e      	movs	r6, r1
 8000860:	0017      	movs	r7, r2
 8000862:	08c5      	lsrs	r5, r0, #3
 8000864:	e7d8      	b.n	8000818 <__aeabi_dadd+0x370>
 8000866:	4cc0      	ldr	r4, [pc, #768]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000868:	1aff      	subs	r7, r7, r3
 800086a:	4014      	ands	r4, r2
 800086c:	e696      	b.n	800059c <__aeabi_dadd+0xf4>
 800086e:	4abf      	ldr	r2, [pc, #764]	@ (8000b6c <__aeabi_dadd+0x6c4>)
 8000870:	1c79      	adds	r1, r7, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d16b      	bne.n	800094e <__aeabi_dadd+0x4a6>
 8000876:	0022      	movs	r2, r4
 8000878:	4302      	orrs	r2, r0
 800087a:	2f00      	cmp	r7, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x3d8>
 800087e:	e0db      	b.n	8000a38 <__aeabi_dadd+0x590>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x3de>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x63a>
 8000886:	4662      	mov	r2, ip
 8000888:	4653      	mov	r3, sl
 800088a:	431a      	orrs	r2, r3
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x3e8>
 800088e:	e0b6      	b.n	80009fe <__aeabi_dadd+0x556>
 8000890:	4663      	mov	r3, ip
 8000892:	18c5      	adds	r5, r0, r3
 8000894:	4285      	cmp	r5, r0
 8000896:	4180      	sbcs	r0, r0
 8000898:	4454      	add	r4, sl
 800089a:	4240      	negs	r0, r0
 800089c:	1824      	adds	r4, r4, r0
 800089e:	0223      	lsls	r3, r4, #8
 80008a0:	d502      	bpl.n	80008a8 <__aeabi_dadd+0x400>
 80008a2:	000f      	movs	r7, r1
 80008a4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 80008a6:	401c      	ands	r4, r3
 80008a8:	003a      	movs	r2, r7
 80008aa:	0028      	movs	r0, r5
 80008ac:	e7d8      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80008ae:	4662      	mov	r2, ip
 80008b0:	1a85      	subs	r5, r0, r2
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	4192      	sbcs	r2, r2
 80008b6:	4653      	mov	r3, sl
 80008b8:	4252      	negs	r2, r2
 80008ba:	4691      	mov	r9, r2
 80008bc:	1ae3      	subs	r3, r4, r3
 80008be:	001a      	movs	r2, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	4691      	mov	r9, r2
 80008c8:	021a      	lsls	r2, r3, #8
 80008ca:	d454      	bmi.n	8000976 <__aeabi_dadd+0x4ce>
 80008cc:	464a      	mov	r2, r9
 80008ce:	464c      	mov	r4, r9
 80008d0:	432a      	orrs	r2, r5
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e640      	b.n	8000558 <__aeabi_dadd+0xb0>
 80008d6:	2600      	movs	r6, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	2500      	movs	r5, #0
 80008dc:	e67c      	b.n	80005d8 <__aeabi_dadd+0x130>
 80008de:	4da1      	ldr	r5, [pc, #644]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 80008e0:	45a9      	cmp	r9, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x43e>
 80008e4:	e090      	b.n	8000a08 <__aeabi_dadd+0x560>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2a38      	cmp	r2, #56	@ 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x446>
 80008ec:	e6ab      	b.n	8000646 <__aeabi_dadd+0x19e>
 80008ee:	2580      	movs	r5, #128	@ 0x80
 80008f0:	042d      	lsls	r5, r5, #16
 80008f2:	432c      	orrs	r4, r5
 80008f4:	e695      	b.n	8000622 <__aeabi_dadd+0x17a>
 80008f6:	0011      	movs	r1, r2
 80008f8:	4655      	mov	r5, sl
 80008fa:	3920      	subs	r1, #32
 80008fc:	40cd      	lsrs	r5, r1
 80008fe:	46a9      	mov	r9, r5
 8000900:	2a20      	cmp	r2, #32
 8000902:	d006      	beq.n	8000912 <__aeabi_dadd+0x46a>
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	4653      	mov	r3, sl
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	4093      	lsls	r3, r2
 800090c:	4662      	mov	r2, ip
 800090e:	431a      	orrs	r2, r3
 8000910:	4694      	mov	ip, r2
 8000912:	4665      	mov	r5, ip
 8000914:	1e6b      	subs	r3, r5, #1
 8000916:	419d      	sbcs	r5, r3
 8000918:	464b      	mov	r3, r9
 800091a:	431d      	orrs	r5, r3
 800091c:	e612      	b.n	8000544 <__aeabi_dadd+0x9c>
 800091e:	0021      	movs	r1, r4
 8000920:	4301      	orrs	r1, r0
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x47e>
 8000924:	e0c4      	b.n	8000ab0 <__aeabi_dadd+0x608>
 8000926:	1e51      	subs	r1, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x486>
 800092c:	e0fb      	b.n	8000b26 <__aeabi_dadd+0x67e>
 800092e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000930:	42aa      	cmp	r2, r5
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b5      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000936:	2501      	movs	r5, #1
 8000938:	2938      	cmp	r1, #56	@ 0x38
 800093a:	dd00      	ble.n	800093e <__aeabi_dadd+0x496>
 800093c:	e741      	b.n	80007c2 <__aeabi_dadd+0x31a>
 800093e:	000a      	movs	r2, r1
 8000940:	e72f      	b.n	80007a2 <__aeabi_dadd+0x2fa>
 8000942:	4c89      	ldr	r4, [pc, #548]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000944:	1aff      	subs	r7, r7, r3
 8000946:	4014      	ands	r4, r2
 8000948:	0762      	lsls	r2, r4, #29
 800094a:	08e4      	lsrs	r4, r4, #3
 800094c:	e76a      	b.n	8000824 <__aeabi_dadd+0x37c>
 800094e:	4a85      	ldr	r2, [pc, #532]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000950:	4291      	cmp	r1, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4ae>
 8000954:	e0e3      	b.n	8000b1e <__aeabi_dadd+0x676>
 8000956:	4663      	mov	r3, ip
 8000958:	18c2      	adds	r2, r0, r3
 800095a:	4282      	cmp	r2, r0
 800095c:	4180      	sbcs	r0, r0
 800095e:	0023      	movs	r3, r4
 8000960:	4240      	negs	r0, r0
 8000962:	4453      	add	r3, sl
 8000964:	181b      	adds	r3, r3, r0
 8000966:	07dd      	lsls	r5, r3, #31
 8000968:	085c      	lsrs	r4, r3, #1
 800096a:	2307      	movs	r3, #7
 800096c:	0852      	lsrs	r2, r2, #1
 800096e:	4315      	orrs	r5, r2
 8000970:	000f      	movs	r7, r1
 8000972:	402b      	ands	r3, r5
 8000974:	e700      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000976:	4663      	mov	r3, ip
 8000978:	1a1d      	subs	r5, r3, r0
 800097a:	45ac      	cmp	ip, r5
 800097c:	4192      	sbcs	r2, r2
 800097e:	4653      	mov	r3, sl
 8000980:	4252      	negs	r2, r2
 8000982:	1b1c      	subs	r4, r3, r4
 8000984:	000e      	movs	r6, r1
 8000986:	4688      	mov	r8, r1
 8000988:	1aa4      	subs	r4, r4, r2
 800098a:	e5e5      	b.n	8000558 <__aeabi_dadd+0xb0>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x4ea>
 8000990:	e091      	b.n	8000ab6 <__aeabi_dadd+0x60e>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d138      	bne.n	8000a08 <__aeabi_dadd+0x560>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	2600      	movs	r6, #0
 800099a:	0324      	lsls	r4, r4, #12
 800099c:	e756      	b.n	800084c <__aeabi_dadd+0x3a4>
 800099e:	4663      	mov	r3, ip
 80009a0:	18c5      	adds	r5, r0, r3
 80009a2:	4285      	cmp	r5, r0
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	4454      	add	r4, sl
 80009a8:	4240      	negs	r0, r0
 80009aa:	1824      	adds	r4, r4, r0
 80009ac:	2701      	movs	r7, #1
 80009ae:	0223      	lsls	r3, r4, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_dadd+0x50c>
 80009b2:	e6df      	b.n	8000774 <__aeabi_dadd+0x2cc>
 80009b4:	2702      	movs	r7, #2
 80009b6:	e687      	b.n	80006c8 <__aeabi_dadd+0x220>
 80009b8:	4663      	mov	r3, ip
 80009ba:	1ac5      	subs	r5, r0, r3
 80009bc:	42a8      	cmp	r0, r5
 80009be:	4180      	sbcs	r0, r0
 80009c0:	4653      	mov	r3, sl
 80009c2:	4240      	negs	r0, r0
 80009c4:	1ae4      	subs	r4, r4, r3
 80009c6:	2701      	movs	r7, #1
 80009c8:	1a24      	subs	r4, r4, r0
 80009ca:	e5c0      	b.n	800054e <__aeabi_dadd+0xa6>
 80009cc:	0762      	lsls	r2, r4, #29
 80009ce:	08c0      	lsrs	r0, r0, #3
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08e4      	lsrs	r4, r4, #3
 80009d4:	e736      	b.n	8000844 <__aeabi_dadd+0x39c>
 80009d6:	0011      	movs	r1, r2
 80009d8:	4653      	mov	r3, sl
 80009da:	3920      	subs	r1, #32
 80009dc:	40cb      	lsrs	r3, r1
 80009de:	4699      	mov	r9, r3
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d006      	beq.n	80009f2 <__aeabi_dadd+0x54a>
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	4653      	mov	r3, sl
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4694      	mov	ip, r2
 80009f2:	4665      	mov	r5, ip
 80009f4:	1e6b      	subs	r3, r5, #1
 80009f6:	419d      	sbcs	r5, r3
 80009f8:	464b      	mov	r3, r9
 80009fa:	431d      	orrs	r5, r3
 80009fc:	e659      	b.n	80006b2 <__aeabi_dadd+0x20a>
 80009fe:	0762      	lsls	r2, r4, #29
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	4302      	orrs	r2, r0
 8000a04:	08e4      	lsrs	r4, r4, #3
 8000a06:	e70d      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a08:	4653      	mov	r3, sl
 8000a0a:	075a      	lsls	r2, r3, #29
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	08d8      	lsrs	r0, r3, #3
 8000a10:	4653      	mov	r3, sl
 8000a12:	000e      	movs	r6, r1
 8000a14:	4302      	orrs	r2, r0
 8000a16:	08dc      	lsrs	r4, r3, #3
 8000a18:	e714      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	3d20      	subs	r5, #32
 8000a20:	40ee      	lsrs	r6, r5
 8000a22:	2a20      	cmp	r2, #32
 8000a24:	d003      	beq.n	8000a2e <__aeabi_dadd+0x586>
 8000a26:	2540      	movs	r5, #64	@ 0x40
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	1e42      	subs	r2, r0, #1
 8000a30:	4190      	sbcs	r0, r2
 8000a32:	0005      	movs	r5, r0
 8000a34:	4335      	orrs	r5, r6
 8000a36:	e606      	b.n	8000646 <__aeabi_dadd+0x19e>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d07c      	beq.n	8000b36 <__aeabi_dadd+0x68e>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	4653      	mov	r3, sl
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a46:	e6fa      	b.n	800083e <__aeabi_dadd+0x396>
 8000a48:	0762      	lsls	r2, r4, #29
 8000a4a:	4310      	orrs	r0, r2
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	08e4      	lsrs	r4, r4, #3
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	4214      	tst	r4, r2
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a56:	08d9      	lsrs	r1, r3, #3
 8000a58:	4211      	tst	r1, r2
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	08d8      	lsrs	r0, r3, #3
 8000a60:	4653      	mov	r3, sl
 8000a62:	000c      	movs	r4, r1
 8000a64:	075b      	lsls	r3, r3, #29
 8000a66:	4318      	orrs	r0, r3
 8000a68:	0f42      	lsrs	r2, r0, #29
 8000a6a:	00c0      	lsls	r0, r0, #3
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0752      	lsls	r2, r2, #29
 8000a70:	4302      	orrs	r2, r0
 8000a72:	e6e7      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x5d2>
 8000a78:	e72d      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	08d8      	lsrs	r0, r3, #3
 8000a7e:	4653      	mov	r3, sl
 8000a80:	075a      	lsls	r2, r3, #29
 8000a82:	000e      	movs	r6, r1
 8000a84:	4302      	orrs	r2, r0
 8000a86:	08dc      	lsrs	r4, r3, #3
 8000a88:	e6cc      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	1a1d      	subs	r5, r3, r0
 8000a8e:	45ac      	cmp	ip, r5
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	4252      	negs	r2, r2
 8000a96:	1b1c      	subs	r4, r3, r4
 8000a98:	000e      	movs	r6, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	3701      	adds	r7, #1
 8000aa0:	e555      	b.n	800054e <__aeabi_dadd+0xa6>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	075a      	lsls	r2, r3, #29
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	08dc      	lsrs	r4, r3, #3
 8000aae:	e6c9      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	4654      	mov	r4, sl
 8000ab4:	e6d4      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x616>
 8000abc:	e6bf      	b.n	800083e <__aeabi_dadd+0x396>
 8000abe:	0762      	lsls	r2, r4, #29
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	08e4      	lsrs	r4, r4, #3
 8000ac6:	0312      	lsls	r2, r2, #12
 8000ac8:	4214      	tst	r4, r2
 8000aca:	d0cd      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000acc:	08dd      	lsrs	r5, r3, #3
 8000ace:	4215      	tst	r5, r2
 8000ad0:	d1ca      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	08d8      	lsrs	r0, r3, #3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	000e      	movs	r6, r1
 8000adc:	002c      	movs	r4, r5
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	075a      	lsls	r2, r3, #29
 8000aea:	430a      	orrs	r2, r1
 8000aec:	08dc      	lsrs	r4, r3, #3
 8000aee:	e699      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000af0:	4663      	mov	r3, ip
 8000af2:	08d8      	lsrs	r0, r3, #3
 8000af4:	4653      	mov	r3, sl
 8000af6:	075a      	lsls	r2, r3, #29
 8000af8:	000e      	movs	r6, r1
 8000afa:	4302      	orrs	r2, r0
 8000afc:	08dc      	lsrs	r4, r3, #3
 8000afe:	e6a1      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b00:	0011      	movs	r1, r2
 8000b02:	0027      	movs	r7, r4
 8000b04:	3920      	subs	r1, #32
 8000b06:	40cf      	lsrs	r7, r1
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d003      	beq.n	8000b14 <__aeabi_dadd+0x66c>
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	4094      	lsls	r4, r2
 8000b12:	4320      	orrs	r0, r4
 8000b14:	1e42      	subs	r2, r0, #1
 8000b16:	4190      	sbcs	r0, r2
 8000b18:	0005      	movs	r5, r0
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	e651      	b.n	80007c2 <__aeabi_dadd+0x31a>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	2500      	movs	r5, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	e558      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b26:	4460      	add	r0, ip
 8000b28:	4560      	cmp	r0, ip
 8000b2a:	4192      	sbcs	r2, r2
 8000b2c:	4454      	add	r4, sl
 8000b2e:	4252      	negs	r2, r2
 8000b30:	0005      	movs	r5, r0
 8000b32:	18a4      	adds	r4, r4, r2
 8000b34:	e73a      	b.n	80009ac <__aeabi_dadd+0x504>
 8000b36:	4653      	mov	r3, sl
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	08d9      	lsrs	r1, r3, #3
 8000b3e:	4653      	mov	r3, sl
 8000b40:	430a      	orrs	r2, r1
 8000b42:	08dc      	lsrs	r4, r3, #3
 8000b44:	e67e      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b46:	001a      	movs	r2, r3
 8000b48:	001c      	movs	r4, r3
 8000b4a:	432a      	orrs	r2, r5
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x6a8>
 8000b4e:	e6ab      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000b50:	e6c1      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000b52:	2120      	movs	r1, #32
 8000b54:	2500      	movs	r5, #0
 8000b56:	1a09      	subs	r1, r1, r0
 8000b58:	e519      	b.n	800058e <__aeabi_dadd+0xe6>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4c01      	ldr	r4, [pc, #4]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000b60:	e53a      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff
 8000b6c:	000007fe 	.word	0x000007fe

08000b70 <__aeabi_ddiv>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	46de      	mov	lr, fp
 8000b74:	4645      	mov	r5, r8
 8000b76:	4657      	mov	r7, sl
 8000b78:	464e      	mov	r6, r9
 8000b7a:	b5e0      	push	{r5, r6, r7, lr}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0b1b      	lsrs	r3, r3, #12
 8000b86:	469b      	mov	fp, r3
 8000b88:	0fca      	lsrs	r2, r1, #31
 8000b8a:	004b      	lsls	r3, r1, #1
 8000b8c:	0004      	movs	r4, r0
 8000b8e:	4680      	mov	r8, r0
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x28>
 8000b96:	e16a      	b.n	8000e6e <__aeabi_ddiv+0x2fe>
 8000b98:	4ad4      	ldr	r2, [pc, #848]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x30>
 8000b9e:	e18c      	b.n	8000eba <__aeabi_ddiv+0x34a>
 8000ba0:	4659      	mov	r1, fp
 8000ba2:	0f42      	lsrs	r2, r0, #29
 8000ba4:	00c9      	lsls	r1, r1, #3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0409      	lsls	r1, r1, #16
 8000bac:	4311      	orrs	r1, r2
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	4acf      	ldr	r2, [pc, #828]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bb4:	4689      	mov	r9, r1
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	449a      	add	sl, r3
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9e00      	ldr	r6, [sp, #0]
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	033b      	lsls	r3, r7, #12
 8000bc6:	0b1b      	lsrs	r3, r3, #12
 8000bc8:	469b      	mov	fp, r3
 8000bca:	007b      	lsls	r3, r7, #1
 8000bcc:	0030      	movs	r0, r6
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0ffd      	lsrs	r5, r7, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x68>
 8000bd6:	e128      	b.n	8000e2a <__aeabi_ddiv+0x2ba>
 8000bd8:	4ac4      	ldr	r2, [pc, #784]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x70>
 8000bde:	e177      	b.n	8000ed0 <__aeabi_ddiv+0x360>
 8000be0:	4659      	mov	r1, fp
 8000be2:	0f72      	lsrs	r2, r6, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	430a      	orrs	r2, r1
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	4311      	orrs	r1, r2
 8000bee:	468b      	mov	fp, r1
 8000bf0:	49bf      	ldr	r1, [pc, #764]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bf2:	00f2      	lsls	r2, r6, #3
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	4463      	add	r3, ip
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9e02      	ldr	r6, [sp, #8]
 8000c02:	406e      	eors	r6, r5
 8000c04:	2c0f      	cmp	r4, #15
 8000c06:	d827      	bhi.n	8000c58 <__aeabi_ddiv+0xe8>
 8000c08:	49ba      	ldr	r1, [pc, #744]	@ (8000ef4 <__aeabi_ddiv+0x384>)
 8000c0a:	00a4      	lsls	r4, r4, #2
 8000c0c:	5909      	ldr	r1, [r1, r4]
 8000c0e:	468f      	mov	pc, r1
 8000c10:	46cb      	mov	fp, r9
 8000c12:	4642      	mov	r2, r8
 8000c14:	9e02      	ldr	r6, [sp, #8]
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d016      	beq.n	8000c4a <__aeabi_ddiv+0xda>
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0xb2>
 8000c20:	e2a6      	b.n	8001170 <__aeabi_ddiv+0x600>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0xb8>
 8000c26:	e0df      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	4690      	mov	r8, r2
 8000c30:	051b      	lsls	r3, r3, #20
 8000c32:	4323      	orrs	r3, r4
 8000c34:	07f6      	lsls	r6, r6, #31
 8000c36:	4333      	orrs	r3, r6
 8000c38:	4640      	mov	r0, r8
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	b007      	add	sp, #28
 8000c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c40:	46bb      	mov	fp, r7
 8000c42:	46b2      	mov	sl, r6
 8000c44:	46a9      	mov	r9, r5
 8000c46:	46a0      	mov	r8, r4
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	4ba6      	ldr	r3, [pc, #664]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000c54:	002e      	movs	r6, r5
 8000c56:	e7df      	b.n	8000c18 <__aeabi_ddiv+0xa8>
 8000c58:	45cb      	cmp	fp, r9
 8000c5a:	d200      	bcs.n	8000c5e <__aeabi_ddiv+0xee>
 8000c5c:	e1d4      	b.n	8001008 <__aeabi_ddiv+0x498>
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xf2>
 8000c60:	e1cf      	b.n	8001002 <__aeabi_ddiv+0x492>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	4644      	mov	r4, r8
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	44e2      	add	sl, ip
 8000c70:	465b      	mov	r3, fp
 8000c72:	0e15      	lsrs	r5, r2, #24
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	431d      	orrs	r5, r3
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	042b      	lsls	r3, r5, #16
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	0c1d      	lsrs	r5, r3, #16
 8000c82:	4691      	mov	r9, r2
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9503      	str	r5, [sp, #12]
 8000c88:	f7ff fac2 	bl	8000210 <__aeabi_uidivmod>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	436a      	muls	r2, r5
 8000c90:	040b      	lsls	r3, r1, #16
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	4680      	mov	r8, r0
 8000c96:	4319      	orrs	r1, r3
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d909      	bls.n	8000cb0 <__aeabi_ddiv+0x140>
 8000c9c:	9d00      	ldr	r5, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	46ac      	mov	ip, r5
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	4461      	add	r1, ip
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	44e0      	add	r8, ip
 8000caa:	428d      	cmp	r5, r1
 8000cac:	d800      	bhi.n	8000cb0 <__aeabi_ddiv+0x140>
 8000cae:	e1fb      	b.n	80010a8 <__aeabi_ddiv+0x538>
 8000cb0:	1a88      	subs	r0, r1, r2
 8000cb2:	9902      	ldr	r1, [sp, #8]
 8000cb4:	f7ff faac 	bl	8000210 <__aeabi_uidivmod>
 8000cb8:	9a03      	ldr	r2, [sp, #12]
 8000cba:	0424      	lsls	r4, r4, #16
 8000cbc:	4342      	muls	r2, r0
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	0c24      	lsrs	r4, r4, #16
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	430c      	orrs	r4, r1
 8000cc6:	42a2      	cmp	r2, r4
 8000cc8:	d906      	bls.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d800      	bhi.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cd6:	e1e1      	b.n	800109c <__aeabi_ddiv+0x52c>
 8000cd8:	1aa0      	subs	r0, r4, r2
 8000cda:	4642      	mov	r2, r8
 8000cdc:	0412      	lsls	r2, r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	4659      	mov	r1, fp
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	001d      	movs	r5, r3
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	040b      	lsls	r3, r1, #16
 8000cee:	4649      	mov	r1, r9
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	435c      	muls	r4, r3
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	436b      	muls	r3, r5
 8000cfe:	4688      	mov	r8, r1
 8000d00:	4351      	muls	r1, r2
 8000d02:	436a      	muls	r2, r5
 8000d04:	0c25      	lsrs	r5, r4, #16
 8000d06:	46ac      	mov	ip, r5
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	4463      	add	r3, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_ddiv+0x1a8>
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0249      	lsls	r1, r1, #9
 8000d14:	468c      	mov	ip, r1
 8000d16:	4462      	add	r2, ip
 8000d18:	0c19      	lsrs	r1, r3, #16
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c24      	lsrs	r4, r4, #16
 8000d20:	188a      	adds	r2, r1, r2
 8000d22:	191c      	adds	r4, r3, r4
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d302      	bcc.n	8000d2e <__aeabi_ddiv+0x1be>
 8000d28:	d116      	bne.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d214      	bcs.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2e:	465b      	mov	r3, fp
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	444f      	add	r7, r9
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	454f      	cmp	r7, r9
 8000d3a:	419b      	sbcs	r3, r3
 8000d3c:	46ac      	mov	ip, r5
 8000d3e:	425b      	negs	r3, r3
 8000d40:	4463      	add	r3, ip
 8000d42:	18c0      	adds	r0, r0, r3
 8000d44:	4285      	cmp	r5, r0
 8000d46:	d300      	bcc.n	8000d4a <__aeabi_ddiv+0x1da>
 8000d48:	e1a1      	b.n	800108e <__aeabi_ddiv+0x51e>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x1e0>
 8000d4e:	e1f6      	b.n	800113e <__aeabi_ddiv+0x5ce>
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x1e4>
 8000d52:	e1f1      	b.n	8001138 <__aeabi_ddiv+0x5c8>
 8000d54:	9b05      	ldr	r3, [sp, #20]
 8000d56:	469b      	mov	fp, r3
 8000d58:	1b3c      	subs	r4, r7, r4
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	41bf      	sbcs	r7, r7
 8000d5e:	9d00      	ldr	r5, [sp, #0]
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	427f      	negs	r7, r7
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4285      	cmp	r5, r0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x1fc>
 8000d6a:	e1d0      	b.n	800110e <__aeabi_ddiv+0x59e>
 8000d6c:	9902      	ldr	r1, [sp, #8]
 8000d6e:	f7ff fa4f 	bl	8000210 <__aeabi_uidivmod>
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	040b      	lsls	r3, r1, #16
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	0007      	movs	r7, r0
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x214>
 8000d82:	e178      	b.n	8001076 <__aeabi_ddiv+0x506>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	f7ff fa42 	bl	8000210 <__aeabi_uidivmod>
 8000d8c:	9a03      	ldr	r2, [sp, #12]
 8000d8e:	0424      	lsls	r4, r4, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c24      	lsrs	r4, r4, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	42a2      	cmp	r2, r4
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x230>
 8000d9e:	e15d      	b.n	800105c <__aeabi_ddiv+0x4ec>
 8000da0:	4641      	mov	r1, r8
 8000da2:	1aa4      	subs	r4, r4, r2
 8000da4:	043a      	lsls	r2, r7, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	9d04      	ldr	r5, [sp, #16]
 8000daa:	0413      	lsls	r3, r2, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	4359      	muls	r1, r3
 8000db0:	4647      	mov	r7, r8
 8000db2:	436b      	muls	r3, r5
 8000db4:	469c      	mov	ip, r3
 8000db6:	0c10      	lsrs	r0, r2, #16
 8000db8:	4347      	muls	r7, r0
 8000dba:	0c0b      	lsrs	r3, r1, #16
 8000dbc:	44bc      	add	ip, r7
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4368      	muls	r0, r5
 8000dc2:	429f      	cmp	r7, r3
 8000dc4:	d903      	bls.n	8000dce <__aeabi_ddiv+0x25e>
 8000dc6:	2580      	movs	r5, #128	@ 0x80
 8000dc8:	026d      	lsls	r5, r5, #9
 8000dca:	46ac      	mov	ip, r5
 8000dcc:	4460      	add	r0, ip
 8000dce:	0c1f      	lsrs	r7, r3, #16
 8000dd0:	0409      	lsls	r1, r1, #16
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	183f      	adds	r7, r7, r0
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	42bc      	cmp	r4, r7
 8000ddc:	d200      	bcs.n	8000de0 <__aeabi_ddiv+0x270>
 8000dde:	e102      	b.n	8000fe6 <__aeabi_ddiv+0x476>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x274>
 8000de2:	e0fd      	b.n	8000fe0 <__aeabi_ddiv+0x470>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4b43      	ldr	r3, [pc, #268]	@ (8000ef8 <__aeabi_ddiv+0x388>)
 8000dea:	4453      	add	r3, sl
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x282>
 8000df0:	e0ae      	b.n	8000f50 <__aeabi_ddiv+0x3e0>
 8000df2:	0751      	lsls	r1, r2, #29
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0x288>
 8000df6:	e198      	b.n	800112a <__aeabi_ddiv+0x5ba>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	01c9      	lsls	r1, r1, #7
 8000dfc:	d506      	bpl.n	8000e0c <__aeabi_ddiv+0x29c>
 8000dfe:	4659      	mov	r1, fp
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <__aeabi_ddiv+0x38c>)
 8000e02:	4019      	ands	r1, r3
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	468b      	mov	fp, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4453      	add	r3, sl
 8000e0c:	493c      	ldr	r1, [pc, #240]	@ (8000f00 <__aeabi_ddiv+0x390>)
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_ddiv+0x2a4>
 8000e12:	e71a      	b.n	8000c4a <__aeabi_ddiv+0xda>
 8000e14:	4659      	mov	r1, fp
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	0749      	lsls	r1, r1, #29
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	465a      	mov	r2, fp
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	0254      	lsls	r4, r2, #9
 8000e22:	4688      	mov	r8, r1
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	e702      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000e2a:	465a      	mov	r2, fp
 8000e2c:	9b00      	ldr	r3, [sp, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2c4>
 8000e32:	e07e      	b.n	8000f32 <__aeabi_ddiv+0x3c2>
 8000e34:	465b      	mov	r3, fp
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x2cc>
 8000e3a:	e100      	b.n	800103e <__aeabi_ddiv+0x4ce>
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	f001 fa75 	bl	800232c <__clzsi2>
 8000e42:	0002      	movs	r2, r0
 8000e44:	0003      	movs	r3, r0
 8000e46:	3a0b      	subs	r2, #11
 8000e48:	271d      	movs	r7, #29
 8000e4a:	9e00      	ldr	r6, [sp, #0]
 8000e4c:	1aba      	subs	r2, r7, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	4658      	mov	r0, fp
 8000e52:	40d6      	lsrs	r6, r2
 8000e54:	3908      	subs	r1, #8
 8000e56:	4088      	lsls	r0, r1
 8000e58:	0032      	movs	r2, r6
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	9a00      	ldr	r2, [sp, #0]
 8000e60:	408a      	lsls	r2, r1
 8000e62:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <__aeabi_ddiv+0x394>)
 8000e64:	4453      	add	r3, sl
 8000e66:	468a      	mov	sl, r1
 8000e68:	449a      	add	sl, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e6c8      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	4303      	orrs	r3, r0
 8000e72:	4699      	mov	r9, r3
 8000e74:	d056      	beq.n	8000f24 <__aeabi_ddiv+0x3b4>
 8000e76:	465b      	mov	r3, fp
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_ddiv+0x30e>
 8000e7c:	e0cd      	b.n	800101a <__aeabi_ddiv+0x4aa>
 8000e7e:	4658      	mov	r0, fp
 8000e80:	f001 fa54 	bl	800232c <__clzsi2>
 8000e84:	230b      	movs	r3, #11
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4484      	add	ip, r0
 8000e8e:	4666      	mov	r6, ip
 8000e90:	231d      	movs	r3, #29
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	0026      	movs	r6, r4
 8000e96:	0011      	movs	r1, r2
 8000e98:	4658      	mov	r0, fp
 8000e9a:	40de      	lsrs	r6, r3
 8000e9c:	3908      	subs	r1, #8
 8000e9e:	4088      	lsls	r0, r1
 8000ea0:	0033      	movs	r3, r6
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	0023      	movs	r3, r4
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <__aeabi_ddiv+0x398>)
 8000eae:	2400      	movs	r4, #0
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	e682      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000eba:	465a      	mov	r2, fp
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	d12a      	bne.n	8000f18 <__aeabi_ddiv+0x3a8>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	4690      	mov	r8, r2
 8000eca:	2408      	movs	r4, #8
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	e677      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000ed0:	465a      	mov	r2, fp
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <__aeabi_ddiv+0x39c>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	44e2      	add	sl, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d117      	bne.n	8000f10 <__aeabi_ddiv+0x3a0>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	e689      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	fffffc01 	.word	0xfffffc01
 8000ef4:	080058a8 	.word	0x080058a8
 8000ef8:	000003ff 	.word	0x000003ff
 8000efc:	feffffff 	.word	0xfeffffff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	000003f3 	.word	0x000003f3
 8000f08:	fffffc0d 	.word	0xfffffc0d
 8000f0c:	fffff801 	.word	0xfffff801
 8000f10:	2303      	movs	r3, #3
 8000f12:	0032      	movs	r2, r6
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e673      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	46d9      	mov	r9, fp
 8000f1e:	240c      	movs	r4, #12
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	e64d      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f24:	2300      	movs	r3, #0
 8000f26:	4698      	mov	r8, r3
 8000f28:	469a      	mov	sl, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2404      	movs	r4, #4
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	e646      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f32:	2301      	movs	r3, #1
 8000f34:	431c      	orrs	r4, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	469b      	mov	fp, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	e660      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2480      	movs	r4, #128	@ 0x80
 8000f42:	4698      	mov	r8, r3
 8000f44:	2600      	movs	r6, #0
 8000f46:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	e671      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4252      	negs	r2, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	2938      	cmp	r1, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_ddiv+0x3ea>
 8000f58:	e666      	b.n	8000c28 <__aeabi_ddiv+0xb8>
 8000f5a:	291f      	cmp	r1, #31
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_ddiv+0x3f0>
 8000f5e:	e0ab      	b.n	80010b8 <__aeabi_ddiv+0x548>
 8000f60:	201f      	movs	r0, #31
 8000f62:	4240      	negs	r0, r0
 8000f64:	1ac3      	subs	r3, r0, r3
 8000f66:	4658      	mov	r0, fp
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	2920      	cmp	r1, #32
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_ddiv+0x40a>
 8000f70:	4658      	mov	r0, fp
 8000f72:	4988      	ldr	r1, [pc, #544]	@ (8001194 <__aeabi_ddiv+0x624>)
 8000f74:	4451      	add	r1, sl
 8000f76:	4088      	lsls	r0, r1
 8000f78:	4302      	orrs	r2, r0
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	418a      	sbcs	r2, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	2307      	movs	r3, #7
 8000f82:	0019      	movs	r1, r3
 8000f84:	2400      	movs	r4, #0
 8000f86:	4011      	ands	r1, r2
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d00c      	beq.n	8000fa6 <__aeabi_ddiv+0x436>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x426>
 8000f94:	e0f9      	b.n	800118a <__aeabi_ddiv+0x61a>
 8000f96:	1d11      	adds	r1, r2, #4
 8000f98:	4291      	cmp	r1, r2
 8000f9a:	419b      	sbcs	r3, r3
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	0b1c      	lsrs	r4, r3, #12
 8000fa6:	08d2      	lsrs	r2, r2, #3
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4690      	mov	r8, r2
 8000fac:	2300      	movs	r3, #0
 8000fae:	e63f      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	4223      	tst	r3, r4
 8000fb8:	d009      	beq.n	8000fce <__aeabi_ddiv+0x45e>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4223      	tst	r3, r4
 8000fbe:	d106      	bne.n	8000fce <__aeabi_ddiv+0x45e>
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	002e      	movs	r6, r5
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	4b71      	ldr	r3, [pc, #452]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fca:	0b24      	lsrs	r4, r4, #12
 8000fcc:	e630      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fce:	2480      	movs	r4, #128	@ 0x80
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0324      	lsls	r4, r4, #12
 8000fd8:	9e02      	ldr	r6, [sp, #8]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	e627      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x476>
 8000fe4:	e700      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	1e51      	subs	r1, r2, #1
 8000fea:	4684      	mov	ip, r0
 8000fec:	4464      	add	r4, ip
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d200      	bcs.n	8000ff4 <__aeabi_ddiv+0x484>
 8000ff2:	e084      	b.n	80010fe <__aeabi_ddiv+0x58e>
 8000ff4:	42bc      	cmp	r4, r7
 8000ff6:	d200      	bcs.n	8000ffa <__aeabi_ddiv+0x48a>
 8000ff8:	e0ae      	b.n	8001158 <__aeabi_ddiv+0x5e8>
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x48e>
 8000ffc:	e0c1      	b.n	8001182 <__aeabi_ddiv+0x612>
 8000ffe:	000a      	movs	r2, r1
 8001000:	e6f0      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001002:	4542      	cmp	r2, r8
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x498>
 8001006:	e62c      	b.n	8000c62 <__aeabi_ddiv+0xf2>
 8001008:	464b      	mov	r3, r9
 800100a:	07dc      	lsls	r4, r3, #31
 800100c:	0858      	lsrs	r0, r3, #1
 800100e:	4643      	mov	r3, r8
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	4643      	mov	r3, r8
 8001016:	07df      	lsls	r7, r3, #31
 8001018:	e62a      	b.n	8000c70 <__aeabi_ddiv+0x100>
 800101a:	f001 f987 	bl	800232c <__clzsi2>
 800101e:	2315      	movs	r3, #21
 8001020:	469c      	mov	ip, r3
 8001022:	4484      	add	ip, r0
 8001024:	0002      	movs	r2, r0
 8001026:	4663      	mov	r3, ip
 8001028:	3220      	adds	r2, #32
 800102a:	2b1c      	cmp	r3, #28
 800102c:	dc00      	bgt.n	8001030 <__aeabi_ddiv+0x4c0>
 800102e:	e72e      	b.n	8000e8e <__aeabi_ddiv+0x31e>
 8001030:	0023      	movs	r3, r4
 8001032:	3808      	subs	r0, #8
 8001034:	4083      	lsls	r3, r0
 8001036:	4699      	mov	r9, r3
 8001038:	2300      	movs	r3, #0
 800103a:	4698      	mov	r8, r3
 800103c:	e736      	b.n	8000eac <__aeabi_ddiv+0x33c>
 800103e:	f001 f975 	bl	800232c <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	3215      	adds	r2, #21
 8001048:	3320      	adds	r3, #32
 800104a:	2a1c      	cmp	r2, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x4e0>
 800104e:	e6fb      	b.n	8000e48 <__aeabi_ddiv+0x2d8>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	3808      	subs	r0, #8
 8001054:	4081      	lsls	r1, r0
 8001056:	2200      	movs	r2, #0
 8001058:	468b      	mov	fp, r1
 800105a:	e702      	b.n	8000e62 <__aeabi_ddiv+0x2f2>
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	468c      	mov	ip, r1
 8001062:	4464      	add	r4, ip
 8001064:	42a1      	cmp	r1, r4
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fa>
 8001068:	e69a      	b.n	8000da0 <__aeabi_ddiv+0x230>
 800106a:	42a2      	cmp	r2, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x500>
 800106e:	e697      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4464      	add	r4, ip
 8001074:	e694      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001076:	46ac      	mov	ip, r5
 8001078:	4461      	add	r1, ip
 800107a:	3f01      	subs	r7, #1
 800107c:	428d      	cmp	r5, r1
 800107e:	d900      	bls.n	8001082 <__aeabi_ddiv+0x512>
 8001080:	e680      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001082:	428a      	cmp	r2, r1
 8001084:	d800      	bhi.n	8001088 <__aeabi_ddiv+0x518>
 8001086:	e67d      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001088:	1e87      	subs	r7, r0, #2
 800108a:	4461      	add	r1, ip
 800108c:	e67a      	b.n	8000d84 <__aeabi_ddiv+0x214>
 800108e:	4285      	cmp	r5, r0
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x524>
 8001092:	e65f      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 8001094:	45b9      	cmp	r9, r7
 8001096:	d900      	bls.n	800109a <__aeabi_ddiv+0x52a>
 8001098:	e65c      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800109a:	e656      	b.n	8000d4a <__aeabi_ddiv+0x1da>
 800109c:	42a2      	cmp	r2, r4
 800109e:	d800      	bhi.n	80010a2 <__aeabi_ddiv+0x532>
 80010a0:	e61a      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a2:	1e83      	subs	r3, r0, #2
 80010a4:	4464      	add	r4, ip
 80010a6:	e617      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d800      	bhi.n	80010ae <__aeabi_ddiv+0x53e>
 80010ac:	e600      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010ae:	46ac      	mov	ip, r5
 80010b0:	1e83      	subs	r3, r0, #2
 80010b2:	4698      	mov	r8, r3
 80010b4:	4461      	add	r1, ip
 80010b6:	e5fb      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <__aeabi_ddiv+0x628>)
 80010ba:	0014      	movs	r4, r2
 80010bc:	4450      	add	r0, sl
 80010be:	4082      	lsls	r2, r0
 80010c0:	465b      	mov	r3, fp
 80010c2:	0017      	movs	r7, r2
 80010c4:	4083      	lsls	r3, r0
 80010c6:	40cc      	lsrs	r4, r1
 80010c8:	1e7a      	subs	r2, r7, #1
 80010ca:	4197      	sbcs	r7, r2
 80010cc:	4323      	orrs	r3, r4
 80010ce:	433b      	orrs	r3, r7
 80010d0:	001a      	movs	r2, r3
 80010d2:	465b      	mov	r3, fp
 80010d4:	40cb      	lsrs	r3, r1
 80010d6:	0751      	lsls	r1, r2, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010da:	210f      	movs	r1, #15
 80010dc:	4011      	ands	r1, r2
 80010de:	2904      	cmp	r1, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010e2:	1d11      	adds	r1, r2, #4
 80010e4:	4291      	cmp	r1, r2
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	4252      	negs	r2, r2
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	0219      	lsls	r1, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_ddiv+0x584>
 80010f2:	e755      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2301      	movs	r3, #1
 80010f8:	2400      	movs	r4, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	e598      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 80010fe:	000a      	movs	r2, r1
 8001100:	42bc      	cmp	r4, r7
 8001102:	d000      	beq.n	8001106 <__aeabi_ddiv+0x596>
 8001104:	e66e      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001106:	454b      	cmp	r3, r9
 8001108:	d000      	beq.n	800110c <__aeabi_ddiv+0x59c>
 800110a:	e66b      	b.n	8000de4 <__aeabi_ddiv+0x274>
 800110c:	e66c      	b.n	8000de8 <__aeabi_ddiv+0x278>
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <__aeabi_ddiv+0x62c>)
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <__aeabi_ddiv+0x630>)
 8001112:	4453      	add	r3, sl
 8001114:	4592      	cmp	sl, r2
 8001116:	da00      	bge.n	800111a <__aeabi_ddiv+0x5aa>
 8001118:	e718      	b.n	8000f4c <__aeabi_ddiv+0x3dc>
 800111a:	2101      	movs	r1, #1
 800111c:	4249      	negs	r1, r1
 800111e:	1d0a      	adds	r2, r1, #4
 8001120:	428a      	cmp	r2, r1
 8001122:	4189      	sbcs	r1, r1
 8001124:	4249      	negs	r1, r1
 8001126:	448b      	add	fp, r1
 8001128:	e666      	b.n	8000df8 <__aeabi_ddiv+0x288>
 800112a:	210f      	movs	r1, #15
 800112c:	4011      	ands	r1, r2
 800112e:	2904      	cmp	r1, #4
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x5c4>
 8001132:	e661      	b.n	8000df8 <__aeabi_ddiv+0x288>
 8001134:	0011      	movs	r1, r2
 8001136:	e7f2      	b.n	800111e <__aeabi_ddiv+0x5ae>
 8001138:	42bc      	cmp	r4, r7
 800113a:	d800      	bhi.n	800113e <__aeabi_ddiv+0x5ce>
 800113c:	e60a      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800113e:	2302      	movs	r3, #2
 8001140:	425b      	negs	r3, r3
 8001142:	469c      	mov	ip, r3
 8001144:	9900      	ldr	r1, [sp, #0]
 8001146:	444f      	add	r7, r9
 8001148:	454f      	cmp	r7, r9
 800114a:	419b      	sbcs	r3, r3
 800114c:	44e3      	add	fp, ip
 800114e:	468c      	mov	ip, r1
 8001150:	425b      	negs	r3, r3
 8001152:	4463      	add	r3, ip
 8001154:	18c0      	adds	r0, r0, r3
 8001156:	e5ff      	b.n	8000d58 <__aeabi_ddiv+0x1e8>
 8001158:	4649      	mov	r1, r9
 800115a:	9d00      	ldr	r5, [sp, #0]
 800115c:	0048      	lsls	r0, r1, #1
 800115e:	4548      	cmp	r0, r9
 8001160:	4189      	sbcs	r1, r1
 8001162:	46ac      	mov	ip, r5
 8001164:	4249      	negs	r1, r1
 8001166:	4461      	add	r1, ip
 8001168:	4681      	mov	r9, r0
 800116a:	3a02      	subs	r2, #2
 800116c:	1864      	adds	r4, r4, r1
 800116e:	e7c7      	b.n	8001100 <__aeabi_ddiv+0x590>
 8001170:	2480      	movs	r4, #128	@ 0x80
 8001172:	465b      	mov	r3, fp
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	431c      	orrs	r4, r3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4690      	mov	r8, r2
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__aeabi_ddiv+0x620>)
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	e556      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8001182:	4599      	cmp	r9, r3
 8001184:	d3e8      	bcc.n	8001158 <__aeabi_ddiv+0x5e8>
 8001186:	000a      	movs	r2, r1
 8001188:	e7bd      	b.n	8001106 <__aeabi_ddiv+0x596>
 800118a:	2300      	movs	r3, #0
 800118c:	e708      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	0000043e 	.word	0x0000043e
 8001198:	0000041e 	.word	0x0000041e
 800119c:	000003ff 	.word	0x000003ff
 80011a0:	fffffc02 	.word	0xfffffc02

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4657      	mov	r7, sl
 80011a8:	46de      	mov	lr, fp
 80011aa:	464e      	mov	r6, r9
 80011ac:	4645      	mov	r5, r8
 80011ae:	b5e0      	push	{r5, r6, r7, lr}
 80011b0:	000d      	movs	r5, r1
 80011b2:	0004      	movs	r4, r0
 80011b4:	0fe8      	lsrs	r0, r5, #31
 80011b6:	4683      	mov	fp, r0
 80011b8:	0309      	lsls	r1, r1, #12
 80011ba:	0fd8      	lsrs	r0, r3, #31
 80011bc:	0b09      	lsrs	r1, r1, #12
 80011be:	4682      	mov	sl, r0
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <__eqdf2+0x84>)
 80011c2:	468c      	mov	ip, r1
 80011c4:	031f      	lsls	r7, r3, #12
 80011c6:	0069      	lsls	r1, r5, #1
 80011c8:	005e      	lsls	r6, r3, #1
 80011ca:	0d49      	lsrs	r1, r1, #21
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	0d76      	lsrs	r6, r6, #21
 80011d0:	4281      	cmp	r1, r0
 80011d2:	d018      	beq.n	8001206 <__eqdf2+0x62>
 80011d4:	4286      	cmp	r6, r0
 80011d6:	d00f      	beq.n	80011f8 <__eqdf2+0x54>
 80011d8:	2001      	movs	r0, #1
 80011da:	42b1      	cmp	r1, r6
 80011dc:	d10d      	bne.n	80011fa <__eqdf2+0x56>
 80011de:	45bc      	cmp	ip, r7
 80011e0:	d10b      	bne.n	80011fa <__eqdf2+0x56>
 80011e2:	4294      	cmp	r4, r2
 80011e4:	d109      	bne.n	80011fa <__eqdf2+0x56>
 80011e6:	45d3      	cmp	fp, sl
 80011e8:	d01c      	beq.n	8001224 <__eqdf2+0x80>
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d105      	bne.n	80011fa <__eqdf2+0x56>
 80011ee:	4660      	mov	r0, ip
 80011f0:	4320      	orrs	r0, r4
 80011f2:	1e43      	subs	r3, r0, #1
 80011f4:	4198      	sbcs	r0, r3
 80011f6:	e000      	b.n	80011fa <__eqdf2+0x56>
 80011f8:	2001      	movs	r0, #1
 80011fa:	bcf0      	pop	{r4, r5, r6, r7}
 80011fc:	46bb      	mov	fp, r7
 80011fe:	46b2      	mov	sl, r6
 8001200:	46a9      	mov	r9, r5
 8001202:	46a0      	mov	r8, r4
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2001      	movs	r0, #1
 8001208:	428e      	cmp	r6, r1
 800120a:	d1f6      	bne.n	80011fa <__eqdf2+0x56>
 800120c:	4661      	mov	r1, ip
 800120e:	4339      	orrs	r1, r7
 8001210:	000f      	movs	r7, r1
 8001212:	4317      	orrs	r7, r2
 8001214:	4327      	orrs	r7, r4
 8001216:	d1f0      	bne.n	80011fa <__eqdf2+0x56>
 8001218:	465b      	mov	r3, fp
 800121a:	4652      	mov	r2, sl
 800121c:	1a98      	subs	r0, r3, r2
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e7ea      	b.n	80011fa <__eqdf2+0x56>
 8001224:	2000      	movs	r0, #0
 8001226:	e7e8      	b.n	80011fa <__eqdf2+0x56>
 8001228:	000007ff 	.word	0x000007ff

0800122c <__gedf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	4657      	mov	r7, sl
 8001230:	464e      	mov	r6, r9
 8001232:	4645      	mov	r5, r8
 8001234:	46de      	mov	lr, fp
 8001236:	b5e0      	push	{r5, r6, r7, lr}
 8001238:	000d      	movs	r5, r1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	0b39      	lsrs	r1, r7, #12
 800123e:	b083      	sub	sp, #12
 8001240:	0004      	movs	r4, r0
 8001242:	4680      	mov	r8, r0
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	0058      	lsls	r0, r3, #1
 8001248:	0fe9      	lsrs	r1, r5, #31
 800124a:	4f31      	ldr	r7, [pc, #196]	@ (8001310 <__gedf2+0xe4>)
 800124c:	0d40      	lsrs	r0, r0, #21
 800124e:	468c      	mov	ip, r1
 8001250:	006e      	lsls	r6, r5, #1
 8001252:	0319      	lsls	r1, r3, #12
 8001254:	4682      	mov	sl, r0
 8001256:	4691      	mov	r9, r2
 8001258:	0d76      	lsrs	r6, r6, #21
 800125a:	0b09      	lsrs	r1, r1, #12
 800125c:	0fd8      	lsrs	r0, r3, #31
 800125e:	42be      	cmp	r6, r7
 8001260:	d01f      	beq.n	80012a2 <__gedf2+0x76>
 8001262:	45ba      	cmp	sl, r7
 8001264:	d00f      	beq.n	8001286 <__gedf2+0x5a>
 8001266:	2e00      	cmp	r6, #0
 8001268:	d12f      	bne.n	80012ca <__gedf2+0x9e>
 800126a:	4655      	mov	r5, sl
 800126c:	9e01      	ldr	r6, [sp, #4]
 800126e:	4334      	orrs	r4, r6
 8001270:	2d00      	cmp	r5, #0
 8001272:	d127      	bne.n	80012c4 <__gedf2+0x98>
 8001274:	430a      	orrs	r2, r1
 8001276:	d03a      	beq.n	80012ee <__gedf2+0xc2>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d145      	bne.n	8001308 <__gedf2+0xdc>
 800127c:	2800      	cmp	r0, #0
 800127e:	d11a      	bne.n	80012b6 <__gedf2+0x8a>
 8001280:	2001      	movs	r0, #1
 8001282:	4240      	negs	r0, r0
 8001284:	e017      	b.n	80012b6 <__gedf2+0x8a>
 8001286:	4311      	orrs	r1, r2
 8001288:	d13b      	bne.n	8001302 <__gedf2+0xd6>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d102      	bne.n	8001294 <__gedf2+0x68>
 800128e:	9f01      	ldr	r7, [sp, #4]
 8001290:	4327      	orrs	r7, r4
 8001292:	d0f3      	beq.n	800127c <__gedf2+0x50>
 8001294:	4584      	cmp	ip, r0
 8001296:	d109      	bne.n	80012ac <__gedf2+0x80>
 8001298:	4663      	mov	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <__gedf2+0x54>
 800129e:	4660      	mov	r0, ip
 80012a0:	e009      	b.n	80012b6 <__gedf2+0x8a>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d12c      	bne.n	8001302 <__gedf2+0xd6>
 80012a8:	45b2      	cmp	sl, r6
 80012aa:	d024      	beq.n	80012f6 <__gedf2+0xca>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2002      	movs	r0, #2
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4018      	ands	r0, r3
 80012b4:	3801      	subs	r0, #1
 80012b6:	b003      	add	sp, #12
 80012b8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ba:	46bb      	mov	fp, r7
 80012bc:	46b2      	mov	sl, r6
 80012be:	46a9      	mov	r9, r5
 80012c0:	46a0      	mov	r8, r4
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0d9      	beq.n	800127c <__gedf2+0x50>
 80012c8:	e7e4      	b.n	8001294 <__gedf2+0x68>
 80012ca:	4654      	mov	r4, sl
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0ed      	beq.n	80012ac <__gedf2+0x80>
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d1eb      	bne.n	80012ac <__gedf2+0x80>
 80012d4:	4556      	cmp	r6, sl
 80012d6:	dce9      	bgt.n	80012ac <__gedf2+0x80>
 80012d8:	dbde      	blt.n	8001298 <__gedf2+0x6c>
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	428b      	cmp	r3, r1
 80012de:	d8e5      	bhi.n	80012ac <__gedf2+0x80>
 80012e0:	d1da      	bne.n	8001298 <__gedf2+0x6c>
 80012e2:	45c8      	cmp	r8, r9
 80012e4:	d8e2      	bhi.n	80012ac <__gedf2+0x80>
 80012e6:	2000      	movs	r0, #0
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d2e4      	bcs.n	80012b6 <__gedf2+0x8a>
 80012ec:	e7d4      	b.n	8001298 <__gedf2+0x6c>
 80012ee:	2000      	movs	r0, #0
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d0e0      	beq.n	80012b6 <__gedf2+0x8a>
 80012f4:	e7da      	b.n	80012ac <__gedf2+0x80>
 80012f6:	4311      	orrs	r1, r2
 80012f8:	d103      	bne.n	8001302 <__gedf2+0xd6>
 80012fa:	4584      	cmp	ip, r0
 80012fc:	d1d6      	bne.n	80012ac <__gedf2+0x80>
 80012fe:	2000      	movs	r0, #0
 8001300:	e7d9      	b.n	80012b6 <__gedf2+0x8a>
 8001302:	2002      	movs	r0, #2
 8001304:	4240      	negs	r0, r0
 8001306:	e7d6      	b.n	80012b6 <__gedf2+0x8a>
 8001308:	4584      	cmp	ip, r0
 800130a:	d0e6      	beq.n	80012da <__gedf2+0xae>
 800130c:	e7ce      	b.n	80012ac <__gedf2+0x80>
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	000007ff 	.word	0x000007ff

08001314 <__ledf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4657      	mov	r7, sl
 8001318:	464e      	mov	r6, r9
 800131a:	4645      	mov	r5, r8
 800131c:	46de      	mov	lr, fp
 800131e:	b5e0      	push	{r5, r6, r7, lr}
 8001320:	000d      	movs	r5, r1
 8001322:	030f      	lsls	r7, r1, #12
 8001324:	0004      	movs	r4, r0
 8001326:	4680      	mov	r8, r0
 8001328:	0fe8      	lsrs	r0, r5, #31
 800132a:	0b39      	lsrs	r1, r7, #12
 800132c:	4684      	mov	ip, r0
 800132e:	b083      	sub	sp, #12
 8001330:	0058      	lsls	r0, r3, #1
 8001332:	4f30      	ldr	r7, [pc, #192]	@ (80013f4 <__ledf2+0xe0>)
 8001334:	0d40      	lsrs	r0, r0, #21
 8001336:	9101      	str	r1, [sp, #4]
 8001338:	031e      	lsls	r6, r3, #12
 800133a:	0069      	lsls	r1, r5, #1
 800133c:	4682      	mov	sl, r0
 800133e:	4691      	mov	r9, r2
 8001340:	0d49      	lsrs	r1, r1, #21
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0fd8      	lsrs	r0, r3, #31
 8001346:	42b9      	cmp	r1, r7
 8001348:	d020      	beq.n	800138c <__ledf2+0x78>
 800134a:	45ba      	cmp	sl, r7
 800134c:	d00f      	beq.n	800136e <__ledf2+0x5a>
 800134e:	2900      	cmp	r1, #0
 8001350:	d12b      	bne.n	80013aa <__ledf2+0x96>
 8001352:	9901      	ldr	r1, [sp, #4]
 8001354:	430c      	orrs	r4, r1
 8001356:	4651      	mov	r1, sl
 8001358:	2900      	cmp	r1, #0
 800135a:	d137      	bne.n	80013cc <__ledf2+0xb8>
 800135c:	4332      	orrs	r2, r6
 800135e:	d038      	beq.n	80013d2 <__ledf2+0xbe>
 8001360:	2c00      	cmp	r4, #0
 8001362:	d144      	bne.n	80013ee <__ledf2+0xda>
 8001364:	2800      	cmp	r0, #0
 8001366:	d119      	bne.n	800139c <__ledf2+0x88>
 8001368:	2001      	movs	r0, #1
 800136a:	4240      	negs	r0, r0
 800136c:	e016      	b.n	800139c <__ledf2+0x88>
 800136e:	4316      	orrs	r6, r2
 8001370:	d113      	bne.n	800139a <__ledf2+0x86>
 8001372:	2900      	cmp	r1, #0
 8001374:	d102      	bne.n	800137c <__ledf2+0x68>
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	4327      	orrs	r7, r4
 800137a:	d0f3      	beq.n	8001364 <__ledf2+0x50>
 800137c:	4584      	cmp	ip, r0
 800137e:	d020      	beq.n	80013c2 <__ledf2+0xae>
 8001380:	4663      	mov	r3, ip
 8001382:	2002      	movs	r0, #2
 8001384:	3b01      	subs	r3, #1
 8001386:	4018      	ands	r0, r3
 8001388:	3801      	subs	r0, #1
 800138a:	e007      	b.n	800139c <__ledf2+0x88>
 800138c:	9f01      	ldr	r7, [sp, #4]
 800138e:	4327      	orrs	r7, r4
 8001390:	d103      	bne.n	800139a <__ledf2+0x86>
 8001392:	458a      	cmp	sl, r1
 8001394:	d1f4      	bne.n	8001380 <__ledf2+0x6c>
 8001396:	4316      	orrs	r6, r2
 8001398:	d01f      	beq.n	80013da <__ledf2+0xc6>
 800139a:	2002      	movs	r0, #2
 800139c:	b003      	add	sp, #12
 800139e:	bcf0      	pop	{r4, r5, r6, r7}
 80013a0:	46bb      	mov	fp, r7
 80013a2:	46b2      	mov	sl, r6
 80013a4:	46a9      	mov	r9, r5
 80013a6:	46a0      	mov	r8, r4
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	4654      	mov	r4, sl
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d0e7      	beq.n	8001380 <__ledf2+0x6c>
 80013b0:	4584      	cmp	ip, r0
 80013b2:	d1e5      	bne.n	8001380 <__ledf2+0x6c>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	dce3      	bgt.n	8001380 <__ledf2+0x6c>
 80013b8:	db03      	blt.n	80013c2 <__ledf2+0xae>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	42b3      	cmp	r3, r6
 80013be:	d8df      	bhi.n	8001380 <__ledf2+0x6c>
 80013c0:	d00f      	beq.n	80013e2 <__ledf2+0xce>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0cf      	beq.n	8001368 <__ledf2+0x54>
 80013c8:	4660      	mov	r0, ip
 80013ca:	e7e7      	b.n	800139c <__ledf2+0x88>
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0c9      	beq.n	8001364 <__ledf2+0x50>
 80013d0:	e7d4      	b.n	800137c <__ledf2+0x68>
 80013d2:	2000      	movs	r0, #0
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d0e1      	beq.n	800139c <__ledf2+0x88>
 80013d8:	e7d2      	b.n	8001380 <__ledf2+0x6c>
 80013da:	4584      	cmp	ip, r0
 80013dc:	d1d0      	bne.n	8001380 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	e7dc      	b.n	800139c <__ledf2+0x88>
 80013e2:	45c8      	cmp	r8, r9
 80013e4:	d8cc      	bhi.n	8001380 <__ledf2+0x6c>
 80013e6:	2000      	movs	r0, #0
 80013e8:	45c8      	cmp	r8, r9
 80013ea:	d2d7      	bcs.n	800139c <__ledf2+0x88>
 80013ec:	e7e9      	b.n	80013c2 <__ledf2+0xae>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d0e3      	beq.n	80013ba <__ledf2+0xa6>
 80013f2:	e7c5      	b.n	8001380 <__ledf2+0x6c>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__aeabi_dmul>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4657      	mov	r7, sl
 80013fc:	46de      	mov	lr, fp
 80013fe:	464e      	mov	r6, r9
 8001400:	4645      	mov	r5, r8
 8001402:	b5e0      	push	{r5, r6, r7, lr}
 8001404:	001f      	movs	r7, r3
 8001406:	030b      	lsls	r3, r1, #12
 8001408:	0b1b      	lsrs	r3, r3, #12
 800140a:	0016      	movs	r6, r2
 800140c:	469a      	mov	sl, r3
 800140e:	0fca      	lsrs	r2, r1, #31
 8001410:	004b      	lsls	r3, r1, #1
 8001412:	0004      	movs	r4, r0
 8001414:	4693      	mov	fp, r2
 8001416:	b087      	sub	sp, #28
 8001418:	0d5b      	lsrs	r3, r3, #21
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x26>
 800141c:	e0d5      	b.n	80015ca <__aeabi_dmul+0x1d2>
 800141e:	4abb      	ldr	r2, [pc, #748]	@ (800170c <__aeabi_dmul+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0x2e>
 8001424:	e0f8      	b.n	8001618 <__aeabi_dmul+0x220>
 8001426:	4651      	mov	r1, sl
 8001428:	0f42      	lsrs	r2, r0, #29
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	0409      	lsls	r1, r1, #16
 8001432:	4311      	orrs	r1, r2
 8001434:	00c2      	lsls	r2, r0, #3
 8001436:	4691      	mov	r9, r2
 8001438:	4ab5      	ldr	r2, [pc, #724]	@ (8001710 <__aeabi_dmul+0x318>)
 800143a:	468a      	mov	sl, r1
 800143c:	189d      	adds	r5, r3, r2
 800143e:	2300      	movs	r3, #0
 8001440:	4698      	mov	r8, r3
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	033c      	lsls	r4, r7, #12
 8001446:	007b      	lsls	r3, r7, #1
 8001448:	0ffa      	lsrs	r2, r7, #31
 800144a:	0030      	movs	r0, r6
 800144c:	0b24      	lsrs	r4, r4, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x5e>
 8001454:	e096      	b.n	8001584 <__aeabi_dmul+0x18c>
 8001456:	4aad      	ldr	r2, [pc, #692]	@ (800170c <__aeabi_dmul+0x314>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <__aeabi_dmul+0xc8>
 800145c:	0f72      	lsrs	r2, r6, #29
 800145e:	00e4      	lsls	r4, r4, #3
 8001460:	4322      	orrs	r2, r4
 8001462:	2480      	movs	r4, #128	@ 0x80
 8001464:	0424      	lsls	r4, r4, #16
 8001466:	4314      	orrs	r4, r2
 8001468:	4aa9      	ldr	r2, [pc, #676]	@ (8001710 <__aeabi_dmul+0x318>)
 800146a:	00f0      	lsls	r0, r6, #3
 800146c:	4694      	mov	ip, r2
 800146e:	4463      	add	r3, ip
 8001470:	195b      	adds	r3, r3, r5
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	4642      	mov	r2, r8
 8001478:	2600      	movs	r6, #0
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc42      	bgt.n	8001504 <__aeabi_dmul+0x10c>
 800147e:	465a      	mov	r2, fp
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	404a      	eors	r2, r1
 8001484:	4693      	mov	fp, r2
 8001486:	4642      	mov	r2, r8
 8001488:	2a02      	cmp	r2, #2
 800148a:	dc32      	bgt.n	80014f2 <__aeabi_dmul+0xfa>
 800148c:	3a01      	subs	r2, #1
 800148e:	2a01      	cmp	r2, #1
 8001490:	d900      	bls.n	8001494 <__aeabi_dmul+0x9c>
 8001492:	e149      	b.n	8001728 <__aeabi_dmul+0x330>
 8001494:	2e02      	cmp	r6, #2
 8001496:	d100      	bne.n	800149a <__aeabi_dmul+0xa2>
 8001498:	e0ca      	b.n	8001630 <__aeabi_dmul+0x238>
 800149a:	2e01      	cmp	r6, #1
 800149c:	d13d      	bne.n	800151a <__aeabi_dmul+0x122>
 800149e:	2300      	movs	r3, #0
 80014a0:	2400      	movs	r4, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	0010      	movs	r0, r2
 80014a6:	465a      	mov	r2, fp
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	4323      	orrs	r3, r4
 80014ac:	07d2      	lsls	r2, r2, #31
 80014ae:	4313      	orrs	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	b007      	add	sp, #28
 80014b4:	bcf0      	pop	{r4, r5, r6, r7}
 80014b6:	46bb      	mov	fp, r7
 80014b8:	46b2      	mov	sl, r6
 80014ba:	46a9      	mov	r9, r5
 80014bc:	46a0      	mov	r8, r4
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <__aeabi_dmul+0x314>)
 80014c2:	4326      	orrs	r6, r4
 80014c4:	18eb      	adds	r3, r5, r3
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dmul+0xd4>
 80014ca:	e0bb      	b.n	8001644 <__aeabi_dmul+0x24c>
 80014cc:	2203      	movs	r2, #3
 80014ce:	4641      	mov	r1, r8
 80014d0:	4311      	orrs	r1, r2
 80014d2:	465a      	mov	r2, fp
 80014d4:	4688      	mov	r8, r1
 80014d6:	9900      	ldr	r1, [sp, #0]
 80014d8:	404a      	eors	r2, r1
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0109      	lsls	r1, r1, #4
 80014de:	468c      	mov	ip, r1
 80014e0:	0029      	movs	r1, r5
 80014e2:	4461      	add	r1, ip
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	4641      	mov	r1, r8
 80014e8:	290a      	cmp	r1, #10
 80014ea:	dd00      	ble.n	80014ee <__aeabi_dmul+0xf6>
 80014ec:	e233      	b.n	8001956 <__aeabi_dmul+0x55e>
 80014ee:	4693      	mov	fp, r2
 80014f0:	2603      	movs	r6, #3
 80014f2:	4642      	mov	r2, r8
 80014f4:	2701      	movs	r7, #1
 80014f6:	4097      	lsls	r7, r2
 80014f8:	21a6      	movs	r1, #166	@ 0xa6
 80014fa:	003a      	movs	r2, r7
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	420f      	tst	r7, r1
 8001502:	d031      	beq.n	8001568 <__aeabi_dmul+0x170>
 8001504:	9e02      	ldr	r6, [sp, #8]
 8001506:	2e02      	cmp	r6, #2
 8001508:	d100      	bne.n	800150c <__aeabi_dmul+0x114>
 800150a:	e235      	b.n	8001978 <__aeabi_dmul+0x580>
 800150c:	2e03      	cmp	r6, #3
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x11a>
 8001510:	e1d2      	b.n	80018b8 <__aeabi_dmul+0x4c0>
 8001512:	4654      	mov	r4, sl
 8001514:	4648      	mov	r0, r9
 8001516:	2e01      	cmp	r6, #1
 8001518:	d0c1      	beq.n	800149e <__aeabi_dmul+0xa6>
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <__aeabi_dmul+0x31c>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x130>
 8001526:	e0c0      	b.n	80016aa <__aeabi_dmul+0x2b2>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	d009      	beq.n	8001540 <__aeabi_dmul+0x148>
 800152c:	220f      	movs	r2, #15
 800152e:	4002      	ands	r2, r0
 8001530:	2a04      	cmp	r2, #4
 8001532:	d005      	beq.n	8001540 <__aeabi_dmul+0x148>
 8001534:	1d02      	adds	r2, r0, #4
 8001536:	4282      	cmp	r2, r0
 8001538:	4180      	sbcs	r0, r0
 800153a:	4240      	negs	r0, r0
 800153c:	1824      	adds	r4, r4, r0
 800153e:	0010      	movs	r0, r2
 8001540:	01e2      	lsls	r2, r4, #7
 8001542:	d506      	bpl.n	8001552 <__aeabi_dmul+0x15a>
 8001544:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <__aeabi_dmul+0x320>)
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	401c      	ands	r4, r3
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	4694      	mov	ip, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4463      	add	r3, ip
 8001552:	4a72      	ldr	r2, [pc, #456]	@ (800171c <__aeabi_dmul+0x324>)
 8001554:	4293      	cmp	r3, r2
 8001556:	dc6b      	bgt.n	8001630 <__aeabi_dmul+0x238>
 8001558:	0762      	lsls	r2, r4, #29
 800155a:	08c0      	lsrs	r0, r0, #3
 800155c:	0264      	lsls	r4, r4, #9
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4302      	orrs	r2, r0
 8001562:	0b24      	lsrs	r4, r4, #12
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	e79d      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001568:	2190      	movs	r1, #144	@ 0x90
 800156a:	0089      	lsls	r1, r1, #2
 800156c:	420f      	tst	r7, r1
 800156e:	d163      	bne.n	8001638 <__aeabi_dmul+0x240>
 8001570:	2288      	movs	r2, #136	@ 0x88
 8001572:	423a      	tst	r2, r7
 8001574:	d100      	bne.n	8001578 <__aeabi_dmul+0x180>
 8001576:	e0d7      	b.n	8001728 <__aeabi_dmul+0x330>
 8001578:	9b00      	ldr	r3, [sp, #0]
 800157a:	46a2      	mov	sl, r4
 800157c:	469b      	mov	fp, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9602      	str	r6, [sp, #8]
 8001582:	e7bf      	b.n	8001504 <__aeabi_dmul+0x10c>
 8001584:	0023      	movs	r3, r4
 8001586:	4333      	orrs	r3, r6
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x194>
 800158a:	e07f      	b.n	800168c <__aeabi_dmul+0x294>
 800158c:	2c00      	cmp	r4, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x19a>
 8001590:	e1ad      	b.n	80018ee <__aeabi_dmul+0x4f6>
 8001592:	0020      	movs	r0, r4
 8001594:	f000 feca 	bl	800232c <__clzsi2>
 8001598:	0002      	movs	r2, r0
 800159a:	0003      	movs	r3, r0
 800159c:	3a0b      	subs	r2, #11
 800159e:	201d      	movs	r0, #29
 80015a0:	0019      	movs	r1, r3
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	0030      	movs	r0, r6
 80015a6:	3908      	subs	r1, #8
 80015a8:	40d0      	lsrs	r0, r2
 80015aa:	408c      	lsls	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	0030      	movs	r0, r6
 80015b0:	4088      	lsls	r0, r1
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <__aeabi_dmul+0x328>)
 80015b4:	1aeb      	subs	r3, r5, r3
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	4642      	mov	r2, r8
 80015c0:	2600      	movs	r6, #0
 80015c2:	2a0a      	cmp	r2, #10
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dmul+0x1d0>
 80015c6:	e75a      	b.n	800147e <__aeabi_dmul+0x86>
 80015c8:	e79c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80015ca:	4653      	mov	r3, sl
 80015cc:	4303      	orrs	r3, r0
 80015ce:	4699      	mov	r9, r3
 80015d0:	d054      	beq.n	800167c <__aeabi_dmul+0x284>
 80015d2:	4653      	mov	r3, sl
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x1e2>
 80015d8:	e177      	b.n	80018ca <__aeabi_dmul+0x4d2>
 80015da:	4650      	mov	r0, sl
 80015dc:	f000 fea6 	bl	800232c <__clzsi2>
 80015e0:	230b      	movs	r3, #11
 80015e2:	425b      	negs	r3, r3
 80015e4:	469c      	mov	ip, r3
 80015e6:	0002      	movs	r2, r0
 80015e8:	4484      	add	ip, r0
 80015ea:	0011      	movs	r1, r2
 80015ec:	4650      	mov	r0, sl
 80015ee:	3908      	subs	r1, #8
 80015f0:	4088      	lsls	r0, r1
 80015f2:	231d      	movs	r3, #29
 80015f4:	4680      	mov	r8, r0
 80015f6:	4660      	mov	r0, ip
 80015f8:	1a1b      	subs	r3, r3, r0
 80015fa:	0020      	movs	r0, r4
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	0003      	movs	r3, r0
 8001600:	4640      	mov	r0, r8
 8001602:	4303      	orrs	r3, r0
 8001604:	469a      	mov	sl, r3
 8001606:	0023      	movs	r3, r4
 8001608:	408b      	lsls	r3, r1
 800160a:	4699      	mov	r9, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4d44      	ldr	r5, [pc, #272]	@ (8001720 <__aeabi_dmul+0x328>)
 8001610:	4698      	mov	r8, r3
 8001612:	1aad      	subs	r5, r5, r2
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	e715      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001618:	4652      	mov	r2, sl
 800161a:	4302      	orrs	r2, r0
 800161c:	4691      	mov	r9, r2
 800161e:	d126      	bne.n	800166e <__aeabi_dmul+0x276>
 8001620:	2200      	movs	r2, #0
 8001622:	001d      	movs	r5, r3
 8001624:	2302      	movs	r3, #2
 8001626:	4692      	mov	sl, r2
 8001628:	3208      	adds	r2, #8
 800162a:	4690      	mov	r8, r2
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	e709      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001630:	2400      	movs	r4, #0
 8001632:	2200      	movs	r2, #0
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <__aeabi_dmul+0x314>)
 8001636:	e735      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001638:	2300      	movs	r3, #0
 800163a:	2480      	movs	r4, #128	@ 0x80
 800163c:	469b      	mov	fp, r3
 800163e:	0324      	lsls	r4, r4, #12
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <__aeabi_dmul+0x314>)
 8001642:	e72f      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001644:	2202      	movs	r2, #2
 8001646:	4641      	mov	r1, r8
 8001648:	4311      	orrs	r1, r2
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	4694      	mov	ip, r2
 8001650:	002a      	movs	r2, r5
 8001652:	4462      	add	r2, ip
 8001654:	4688      	mov	r8, r1
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	290a      	cmp	r1, #10
 800165a:	dd00      	ble.n	800165e <__aeabi_dmul+0x266>
 800165c:	e752      	b.n	8001504 <__aeabi_dmul+0x10c>
 800165e:	465a      	mov	r2, fp
 8001660:	2000      	movs	r0, #0
 8001662:	9900      	ldr	r1, [sp, #0]
 8001664:	0004      	movs	r4, r0
 8001666:	404a      	eors	r2, r1
 8001668:	4693      	mov	fp, r2
 800166a:	2602      	movs	r6, #2
 800166c:	e70b      	b.n	8001486 <__aeabi_dmul+0x8e>
 800166e:	220c      	movs	r2, #12
 8001670:	001d      	movs	r5, r3
 8001672:	2303      	movs	r3, #3
 8001674:	4681      	mov	r9, r0
 8001676:	4690      	mov	r8, r2
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	e6e3      	b.n	8001444 <__aeabi_dmul+0x4c>
 800167c:	2300      	movs	r3, #0
 800167e:	469a      	mov	sl, r3
 8001680:	3304      	adds	r3, #4
 8001682:	4698      	mov	r8, r3
 8001684:	3b03      	subs	r3, #3
 8001686:	2500      	movs	r5, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e6db      	b.n	8001444 <__aeabi_dmul+0x4c>
 800168c:	4642      	mov	r2, r8
 800168e:	3301      	adds	r3, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	002b      	movs	r3, r5
 8001694:	4690      	mov	r8, r2
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	4642      	mov	r2, r8
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2601      	movs	r6, #1
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_dmul+0x2b0>
 80016a6:	e6ea      	b.n	800147e <__aeabi_dmul+0x86>
 80016a8:	e72c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80016aa:	2201      	movs	r2, #1
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	2a38      	cmp	r2, #56	@ 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dmul+0x2bc>
 80016b2:	e6f4      	b.n	800149e <__aeabi_dmul+0xa6>
 80016b4:	2a1f      	cmp	r2, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dmul+0x2c2>
 80016b8:	e12a      	b.n	8001910 <__aeabi_dmul+0x518>
 80016ba:	211f      	movs	r1, #31
 80016bc:	4249      	negs	r1, r1
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	0021      	movs	r1, r4
 80016c2:	40d9      	lsrs	r1, r3
 80016c4:	000b      	movs	r3, r1
 80016c6:	2a20      	cmp	r2, #32
 80016c8:	d005      	beq.n	80016d6 <__aeabi_dmul+0x2de>
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <__aeabi_dmul+0x32c>)
 80016cc:	9d01      	ldr	r5, [sp, #4]
 80016ce:	4694      	mov	ip, r2
 80016d0:	4465      	add	r5, ip
 80016d2:	40ac      	lsls	r4, r5
 80016d4:	4320      	orrs	r0, r4
 80016d6:	1e42      	subs	r2, r0, #1
 80016d8:	4190      	sbcs	r0, r2
 80016da:	4318      	orrs	r0, r3
 80016dc:	2307      	movs	r3, #7
 80016de:	0019      	movs	r1, r3
 80016e0:	2400      	movs	r4, #0
 80016e2:	4001      	ands	r1, r0
 80016e4:	4203      	tst	r3, r0
 80016e6:	d00c      	beq.n	8001702 <__aeabi_dmul+0x30a>
 80016e8:	230f      	movs	r3, #15
 80016ea:	4003      	ands	r3, r0
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2fa>
 80016f0:	e140      	b.n	8001974 <__aeabi_dmul+0x57c>
 80016f2:	1d03      	adds	r3, r0, #4
 80016f4:	4283      	cmp	r3, r0
 80016f6:	41a4      	sbcs	r4, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	4264      	negs	r4, r4
 80016fc:	0761      	lsls	r1, r4, #29
 80016fe:	0264      	lsls	r4, r4, #9
 8001700:	0b24      	lsrs	r4, r4, #12
 8001702:	08c2      	lsrs	r2, r0, #3
 8001704:	2300      	movs	r3, #0
 8001706:	430a      	orrs	r2, r1
 8001708:	e6cc      	b.n	80014a4 <__aeabi_dmul+0xac>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff
 8001710:	fffffc01 	.word	0xfffffc01
 8001714:	000003ff 	.word	0x000003ff
 8001718:	feffffff 	.word	0xfeffffff
 800171c:	000007fe 	.word	0x000007fe
 8001720:	fffffc0d 	.word	0xfffffc0d
 8001724:	0000043e 	.word	0x0000043e
 8001728:	4649      	mov	r1, r9
 800172a:	464a      	mov	r2, r9
 800172c:	0409      	lsls	r1, r1, #16
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	000d      	movs	r5, r1
 8001732:	0c16      	lsrs	r6, r2, #16
 8001734:	0c02      	lsrs	r2, r0, #16
 8001736:	0400      	lsls	r0, r0, #16
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	4345      	muls	r5, r0
 800173c:	46ac      	mov	ip, r5
 800173e:	0005      	movs	r5, r0
 8001740:	4375      	muls	r5, r6
 8001742:	46a8      	mov	r8, r5
 8001744:	0015      	movs	r5, r2
 8001746:	000f      	movs	r7, r1
 8001748:	4375      	muls	r5, r6
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9502      	str	r5, [sp, #8]
 800174e:	002a      	movs	r2, r5
 8001750:	9d00      	ldr	r5, [sp, #0]
 8001752:	436f      	muls	r7, r5
 8001754:	4665      	mov	r5, ip
 8001756:	0c2d      	lsrs	r5, r5, #16
 8001758:	46a9      	mov	r9, r5
 800175a:	4447      	add	r7, r8
 800175c:	444f      	add	r7, r9
 800175e:	45b8      	cmp	r8, r7
 8001760:	d905      	bls.n	800176e <__aeabi_dmul+0x376>
 8001762:	0015      	movs	r5, r2
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0252      	lsls	r2, r2, #9
 8001768:	4690      	mov	r8, r2
 800176a:	4445      	add	r5, r8
 800176c:	9502      	str	r5, [sp, #8]
 800176e:	0c3d      	lsrs	r5, r7, #16
 8001770:	9503      	str	r5, [sp, #12]
 8001772:	4665      	mov	r5, ip
 8001774:	042d      	lsls	r5, r5, #16
 8001776:	043f      	lsls	r7, r7, #16
 8001778:	0c2d      	lsrs	r5, r5, #16
 800177a:	46ac      	mov	ip, r5
 800177c:	003d      	movs	r5, r7
 800177e:	4465      	add	r5, ip
 8001780:	9504      	str	r5, [sp, #16]
 8001782:	0c25      	lsrs	r5, r4, #16
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	46ac      	mov	ip, r5
 800178a:	0025      	movs	r5, r4
 800178c:	4375      	muls	r5, r6
 800178e:	46a8      	mov	r8, r5
 8001790:	4665      	mov	r5, ip
 8001792:	000f      	movs	r7, r1
 8001794:	4369      	muls	r1, r5
 8001796:	4441      	add	r1, r8
 8001798:	4689      	mov	r9, r1
 800179a:	4367      	muls	r7, r4
 800179c:	0c39      	lsrs	r1, r7, #16
 800179e:	4449      	add	r1, r9
 80017a0:	436e      	muls	r6, r5
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x3b6>
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0252      	lsls	r2, r2, #9
 80017aa:	4690      	mov	r8, r2
 80017ac:	4446      	add	r6, r8
 80017ae:	0c0d      	lsrs	r5, r1, #16
 80017b0:	46a8      	mov	r8, r5
 80017b2:	0035      	movs	r5, r6
 80017b4:	4445      	add	r5, r8
 80017b6:	9505      	str	r5, [sp, #20]
 80017b8:	9d03      	ldr	r5, [sp, #12]
 80017ba:	043f      	lsls	r7, r7, #16
 80017bc:	46a8      	mov	r8, r5
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	19c9      	adds	r1, r1, r7
 80017c4:	4488      	add	r8, r1
 80017c6:	4645      	mov	r5, r8
 80017c8:	9503      	str	r5, [sp, #12]
 80017ca:	4655      	mov	r5, sl
 80017cc:	042e      	lsls	r6, r5, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	0c2f      	lsrs	r7, r5, #16
 80017d2:	0035      	movs	r5, r6
 80017d4:	4345      	muls	r5, r0
 80017d6:	4378      	muls	r0, r7
 80017d8:	4681      	mov	r9, r0
 80017da:	0038      	movs	r0, r7
 80017dc:	46a8      	mov	r8, r5
 80017de:	0c2d      	lsrs	r5, r5, #16
 80017e0:	46aa      	mov	sl, r5
 80017e2:	9a00      	ldr	r2, [sp, #0]
 80017e4:	4350      	muls	r0, r2
 80017e6:	4372      	muls	r2, r6
 80017e8:	444a      	add	r2, r9
 80017ea:	4452      	add	r2, sl
 80017ec:	4591      	cmp	r9, r2
 80017ee:	d903      	bls.n	80017f8 <__aeabi_dmul+0x400>
 80017f0:	2580      	movs	r5, #128	@ 0x80
 80017f2:	026d      	lsls	r5, r5, #9
 80017f4:	46a9      	mov	r9, r5
 80017f6:	4448      	add	r0, r9
 80017f8:	0c15      	lsrs	r5, r2, #16
 80017fa:	46a9      	mov	r9, r5
 80017fc:	4645      	mov	r5, r8
 80017fe:	042d      	lsls	r5, r5, #16
 8001800:	0c2d      	lsrs	r5, r5, #16
 8001802:	46a8      	mov	r8, r5
 8001804:	4665      	mov	r5, ip
 8001806:	437d      	muls	r5, r7
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	4448      	add	r0, r9
 800180c:	4490      	add	r8, r2
 800180e:	46a9      	mov	r9, r5
 8001810:	0032      	movs	r2, r6
 8001812:	4665      	mov	r5, ip
 8001814:	4362      	muls	r2, r4
 8001816:	436e      	muls	r6, r5
 8001818:	437c      	muls	r4, r7
 800181a:	0c17      	lsrs	r7, r2, #16
 800181c:	1936      	adds	r6, r6, r4
 800181e:	19bf      	adds	r7, r7, r6
 8001820:	42bc      	cmp	r4, r7
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x434>
 8001824:	2480      	movs	r4, #128	@ 0x80
 8001826:	0264      	lsls	r4, r4, #9
 8001828:	46a4      	mov	ip, r4
 800182a:	44e1      	add	r9, ip
 800182c:	9c02      	ldr	r4, [sp, #8]
 800182e:	9e03      	ldr	r6, [sp, #12]
 8001830:	46a4      	mov	ip, r4
 8001832:	9d05      	ldr	r5, [sp, #20]
 8001834:	4466      	add	r6, ip
 8001836:	428e      	cmp	r6, r1
 8001838:	4189      	sbcs	r1, r1
 800183a:	46ac      	mov	ip, r5
 800183c:	0412      	lsls	r2, r2, #16
 800183e:	043c      	lsls	r4, r7, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	18a2      	adds	r2, r4, r2
 8001844:	4462      	add	r2, ip
 8001846:	4249      	negs	r1, r1
 8001848:	1854      	adds	r4, r2, r1
 800184a:	4446      	add	r6, r8
 800184c:	46a4      	mov	ip, r4
 800184e:	4546      	cmp	r6, r8
 8001850:	41a4      	sbcs	r4, r4
 8001852:	4682      	mov	sl, r0
 8001854:	4264      	negs	r4, r4
 8001856:	46a0      	mov	r8, r4
 8001858:	42aa      	cmp	r2, r5
 800185a:	4192      	sbcs	r2, r2
 800185c:	458c      	cmp	ip, r1
 800185e:	4189      	sbcs	r1, r1
 8001860:	44e2      	add	sl, ip
 8001862:	44d0      	add	r8, sl
 8001864:	4249      	negs	r1, r1
 8001866:	4252      	negs	r2, r2
 8001868:	430a      	orrs	r2, r1
 800186a:	45a0      	cmp	r8, r4
 800186c:	41a4      	sbcs	r4, r4
 800186e:	4582      	cmp	sl, r0
 8001870:	4189      	sbcs	r1, r1
 8001872:	4264      	negs	r4, r4
 8001874:	4249      	negs	r1, r1
 8001876:	430c      	orrs	r4, r1
 8001878:	4641      	mov	r1, r8
 800187a:	0c3f      	lsrs	r7, r7, #16
 800187c:	19d2      	adds	r2, r2, r7
 800187e:	1912      	adds	r2, r2, r4
 8001880:	0dcc      	lsrs	r4, r1, #23
 8001882:	9904      	ldr	r1, [sp, #16]
 8001884:	0270      	lsls	r0, r6, #9
 8001886:	4308      	orrs	r0, r1
 8001888:	1e41      	subs	r1, r0, #1
 800188a:	4188      	sbcs	r0, r1
 800188c:	4641      	mov	r1, r8
 800188e:	444a      	add	r2, r9
 8001890:	0df6      	lsrs	r6, r6, #23
 8001892:	0252      	lsls	r2, r2, #9
 8001894:	4330      	orrs	r0, r6
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	4314      	orrs	r4, r2
 800189a:	4308      	orrs	r0, r1
 800189c:	01d2      	lsls	r2, r2, #7
 800189e:	d535      	bpl.n	800190c <__aeabi_dmul+0x514>
 80018a0:	2201      	movs	r2, #1
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	4002      	ands	r2, r0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	07e0      	lsls	r0, r4, #31
 80018aa:	4318      	orrs	r0, r3
 80018ac:	0864      	lsrs	r4, r4, #1
 80018ae:	e634      	b.n	800151a <__aeabi_dmul+0x122>
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	46a2      	mov	sl, r4
 80018b4:	469b      	mov	fp, r3
 80018b6:	4681      	mov	r9, r0
 80018b8:	2480      	movs	r4, #128	@ 0x80
 80018ba:	4653      	mov	r3, sl
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	464a      	mov	r2, r9
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <__aeabi_dmul+0x588>)
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	e5ec      	b.n	80014a4 <__aeabi_dmul+0xac>
 80018ca:	f000 fd2f 	bl	800232c <__clzsi2>
 80018ce:	2315      	movs	r3, #21
 80018d0:	469c      	mov	ip, r3
 80018d2:	4484      	add	ip, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	4663      	mov	r3, ip
 80018d8:	3220      	adds	r2, #32
 80018da:	2b1c      	cmp	r3, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x4e8>
 80018de:	e684      	b.n	80015ea <__aeabi_dmul+0x1f2>
 80018e0:	2300      	movs	r3, #0
 80018e2:	4699      	mov	r9, r3
 80018e4:	0023      	movs	r3, r4
 80018e6:	3808      	subs	r0, #8
 80018e8:	4083      	lsls	r3, r0
 80018ea:	469a      	mov	sl, r3
 80018ec:	e68e      	b.n	800160c <__aeabi_dmul+0x214>
 80018ee:	f000 fd1d 	bl	800232c <__clzsi2>
 80018f2:	0002      	movs	r2, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	3215      	adds	r2, #21
 80018f8:	3320      	adds	r3, #32
 80018fa:	2a1c      	cmp	r2, #28
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dmul+0x508>
 80018fe:	e64e      	b.n	800159e <__aeabi_dmul+0x1a6>
 8001900:	0002      	movs	r2, r0
 8001902:	0034      	movs	r4, r6
 8001904:	3a08      	subs	r2, #8
 8001906:	2000      	movs	r0, #0
 8001908:	4094      	lsls	r4, r2
 800190a:	e652      	b.n	80015b2 <__aeabi_dmul+0x1ba>
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	e604      	b.n	800151a <__aeabi_dmul+0x122>
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <__aeabi_dmul+0x58c>)
 8001912:	0021      	movs	r1, r4
 8001914:	469c      	mov	ip, r3
 8001916:	0003      	movs	r3, r0
 8001918:	9d01      	ldr	r5, [sp, #4]
 800191a:	40d3      	lsrs	r3, r2
 800191c:	4465      	add	r5, ip
 800191e:	40a9      	lsls	r1, r5
 8001920:	4319      	orrs	r1, r3
 8001922:	0003      	movs	r3, r0
 8001924:	40ab      	lsls	r3, r5
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	4183      	sbcs	r3, r0
 800192a:	4319      	orrs	r1, r3
 800192c:	0008      	movs	r0, r1
 800192e:	40d4      	lsrs	r4, r2
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	d009      	beq.n	8001948 <__aeabi_dmul+0x550>
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <__aeabi_dmul+0x550>
 800193c:	1d0b      	adds	r3, r1, #4
 800193e:	428b      	cmp	r3, r1
 8001940:	4180      	sbcs	r0, r0
 8001942:	4240      	negs	r0, r0
 8001944:	1824      	adds	r4, r4, r0
 8001946:	0018      	movs	r0, r3
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dmul+0x556>
 800194c:	e6d6      	b.n	80016fc <__aeabi_dmul+0x304>
 800194e:	2301      	movs	r3, #1
 8001950:	2400      	movs	r4, #0
 8001952:	2200      	movs	r2, #0
 8001954:	e5a6      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001956:	290f      	cmp	r1, #15
 8001958:	d1aa      	bne.n	80018b0 <__aeabi_dmul+0x4b8>
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	4652      	mov	r2, sl
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	421a      	tst	r2, r3
 8001962:	d0a9      	beq.n	80018b8 <__aeabi_dmul+0x4c0>
 8001964:	421c      	tst	r4, r3
 8001966:	d1a7      	bne.n	80018b8 <__aeabi_dmul+0x4c0>
 8001968:	431c      	orrs	r4, r3
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	0002      	movs	r2, r0
 800196e:	469b      	mov	fp, r3
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <__aeabi_dmul+0x588>)
 8001972:	e597      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001974:	2400      	movs	r4, #0
 8001976:	e6c1      	b.n	80016fc <__aeabi_dmul+0x304>
 8001978:	2400      	movs	r4, #0
 800197a:	4b01      	ldr	r3, [pc, #4]	@ (8001980 <__aeabi_dmul+0x588>)
 800197c:	0022      	movs	r2, r4
 800197e:	e591      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001980:	000007ff 	.word	0x000007ff
 8001984:	0000041e 	.word	0x0000041e

08001988 <__aeabi_dsub>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	464e      	mov	r6, r9
 800198c:	4645      	mov	r5, r8
 800198e:	46de      	mov	lr, fp
 8001990:	4657      	mov	r7, sl
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	b085      	sub	sp, #20
 8001996:	9000      	str	r0, [sp, #0]
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	030c      	lsls	r4, r1, #12
 800199c:	004f      	lsls	r7, r1, #1
 800199e:	0fce      	lsrs	r6, r1, #31
 80019a0:	0a61      	lsrs	r1, r4, #9
 80019a2:	9c00      	ldr	r4, [sp, #0]
 80019a4:	46b0      	mov	r8, r6
 80019a6:	0f64      	lsrs	r4, r4, #29
 80019a8:	430c      	orrs	r4, r1
 80019aa:	9900      	ldr	r1, [sp, #0]
 80019ac:	0d7f      	lsrs	r7, r7, #21
 80019ae:	00c8      	lsls	r0, r1, #3
 80019b0:	0011      	movs	r1, r2
 80019b2:	001a      	movs	r2, r3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	469c      	mov	ip, r3
 80019b8:	9100      	str	r1, [sp, #0]
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	0051      	lsls	r1, r2, #1
 80019be:	0d4b      	lsrs	r3, r1, #21
 80019c0:	4699      	mov	r9, r3
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	9d00      	ldr	r5, [sp, #0]
 80019c6:	0fd9      	lsrs	r1, r3, #31
 80019c8:	4663      	mov	r3, ip
 80019ca:	0f6a      	lsrs	r2, r5, #29
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	00ea      	lsls	r2, r5, #3
 80019d2:	4694      	mov	ip, r2
 80019d4:	4693      	mov	fp, r2
 80019d6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cdc <__aeabi_dsub+0x354>)
 80019d8:	9003      	str	r0, [sp, #12]
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	4591      	cmp	r9, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x5a>
 80019e0:	e0cd      	b.n	8001b7e <__aeabi_dsub+0x1f6>
 80019e2:	2501      	movs	r5, #1
 80019e4:	4069      	eors	r1, r5
 80019e6:	464d      	mov	r5, r9
 80019e8:	1b7d      	subs	r5, r7, r5
 80019ea:	46aa      	mov	sl, r5
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x6a>
 80019f0:	e080      	b.n	8001af4 <__aeabi_dsub+0x16c>
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e335      	b.n	8002064 <__aeabi_dsub+0x6dc>
 80019f8:	4649      	mov	r1, r9
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x78>
 80019fe:	e0df      	b.n	8001bc0 <__aeabi_dsub+0x238>
 8001a00:	4297      	cmp	r7, r2
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x7e>
 8001a04:	e194      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001a06:	4652      	mov	r2, sl
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2a38      	cmp	r2, #56	@ 0x38
 8001a0c:	dc19      	bgt.n	8001a42 <__aeabi_dsub+0xba>
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	9b02      	ldr	r3, [sp, #8]
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	4652      	mov	r2, sl
 8001a1a:	2a1f      	cmp	r2, #31
 8001a1c:	dd00      	ble.n	8001a20 <__aeabi_dsub+0x98>
 8001a1e:	e1e3      	b.n	8001de8 <__aeabi_dsub+0x460>
 8001a20:	4653      	mov	r3, sl
 8001a22:	2220      	movs	r2, #32
 8001a24:	4661      	mov	r1, ip
 8001a26:	9d02      	ldr	r5, [sp, #8]
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	4095      	lsls	r5, r2
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	430d      	orrs	r5, r1
 8001a30:	4661      	mov	r1, ip
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	1e51      	subs	r1, r2, #1
 8001a38:	418a      	sbcs	r2, r1
 8001a3a:	4315      	orrs	r5, r2
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1aa4      	subs	r4, r4, r2
 8001a42:	1b45      	subs	r5, r0, r5
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1a24      	subs	r4, r4, r0
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d400      	bmi.n	8001a52 <__aeabi_dsub+0xca>
 8001a50:	e13d      	b.n	8001cce <__aeabi_dsub+0x346>
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0a64      	lsrs	r4, r4, #9
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0xd4>
 8001a5a:	e147      	b.n	8001cec <__aeabi_dsub+0x364>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f000 fc65 	bl	800232c <__clzsi2>
 8001a62:	0003      	movs	r3, r0
 8001a64:	3b08      	subs	r3, #8
 8001a66:	2120      	movs	r1, #32
 8001a68:	0028      	movs	r0, r5
 8001a6a:	1aca      	subs	r2, r1, r3
 8001a6c:	40d0      	lsrs	r0, r2
 8001a6e:	409c      	lsls	r4, r3
 8001a70:	0002      	movs	r2, r0
 8001a72:	409d      	lsls	r5, r3
 8001a74:	4322      	orrs	r2, r4
 8001a76:	429f      	cmp	r7, r3
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xf4>
 8001a7a:	e177      	b.n	8001d6c <__aeabi_dsub+0x3e4>
 8001a7c:	1bd8      	subs	r0, r3, r7
 8001a7e:	3001      	adds	r0, #1
 8001a80:	1a09      	subs	r1, r1, r0
 8001a82:	002c      	movs	r4, r5
 8001a84:	408d      	lsls	r5, r1
 8001a86:	40c4      	lsrs	r4, r0
 8001a88:	1e6b      	subs	r3, r5, #1
 8001a8a:	419d      	sbcs	r5, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	40c2      	lsrs	r2, r0
 8001a90:	408b      	lsls	r3, r1
 8001a92:	4325      	orrs	r5, r4
 8001a94:	2700      	movs	r7, #0
 8001a96:	0014      	movs	r4, r2
 8001a98:	431d      	orrs	r5, r3
 8001a9a:	076b      	lsls	r3, r5, #29
 8001a9c:	d009      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	402b      	ands	r3, r5
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d005      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001aa6:	1d2b      	adds	r3, r5, #4
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	41ad      	sbcs	r5, r5
 8001aac:	426d      	negs	r5, r5
 8001aae:	1964      	adds	r4, r4, r5
 8001ab0:	001d      	movs	r5, r3
 8001ab2:	0223      	lsls	r3, r4, #8
 8001ab4:	d400      	bmi.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e140      	b.n	8001d3a <__aeabi_dsub+0x3b2>
 8001ab8:	4a88      	ldr	r2, [pc, #544]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001aba:	3701      	adds	r7, #1
 8001abc:	4297      	cmp	r7, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x13a>
 8001ac0:	e101      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001ac2:	2601      	movs	r6, #1
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4986      	ldr	r1, [pc, #536]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001ac8:	08ed      	lsrs	r5, r5, #3
 8001aca:	4021      	ands	r1, r4
 8001acc:	074a      	lsls	r2, r1, #29
 8001ace:	432a      	orrs	r2, r5
 8001ad0:	057c      	lsls	r4, r7, #21
 8001ad2:	024d      	lsls	r5, r1, #9
 8001ad4:	0b2d      	lsrs	r5, r5, #12
 8001ad6:	0d64      	lsrs	r4, r4, #21
 8001ad8:	401e      	ands	r6, r3
 8001ada:	0524      	lsls	r4, r4, #20
 8001adc:	432c      	orrs	r4, r5
 8001ade:	07f6      	lsls	r6, r6, #31
 8001ae0:	4334      	orrs	r4, r6
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	b005      	add	sp, #20
 8001ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aea:	46bb      	mov	fp, r7
 8001aec:	46b2      	mov	sl, r6
 8001aee:	46a9      	mov	r9, r5
 8001af0:	46a0      	mov	r8, r4
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	2d00      	cmp	r5, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e2d0      	b.n	800209c <__aeabi_dsub+0x714>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d000      	beq.n	8001b02 <__aeabi_dsub+0x17a>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_dsub+0x324>
 8001b02:	4661      	mov	r1, ip
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	4319      	orrs	r1, r3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e12b      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	2d01      	cmp	r5, #1
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x18c>
 8001b12:	e1d9      	b.n	8001ec8 <__aeabi_dsub+0x540>
 8001b14:	4295      	cmp	r5, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x192>
 8001b18:	e10a      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	2938      	cmp	r1, #56	@ 0x38
 8001b1e:	dc17      	bgt.n	8001b50 <__aeabi_dsub+0x1c8>
 8001b20:	468a      	mov	sl, r1
 8001b22:	4653      	mov	r3, sl
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0x1a2>
 8001b28:	e1e7      	b.n	8001efa <__aeabi_dsub+0x572>
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	9b02      	ldr	r3, [sp, #8]
 8001b30:	4661      	mov	r1, ip
 8001b32:	4093      	lsls	r3, r2
 8001b34:	001d      	movs	r5, r3
 8001b36:	4653      	mov	r3, sl
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	001a      	movs	r2, r3
 8001b40:	430d      	orrs	r5, r1
 8001b42:	1e51      	subs	r1, r2, #1
 8001b44:	418a      	sbcs	r2, r1
 8001b46:	4653      	mov	r3, sl
 8001b48:	4315      	orrs	r5, r2
 8001b4a:	9a02      	ldr	r2, [sp, #8]
 8001b4c:	40da      	lsrs	r2, r3
 8001b4e:	18a4      	adds	r4, r4, r2
 8001b50:	182d      	adds	r5, r5, r0
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0223      	lsls	r3, r4, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x1d8>
 8001b5e:	e0b6      	b.n	8001cce <__aeabi_dsub+0x346>
 8001b60:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001b62:	3701      	adds	r7, #1
 8001b64:	429f      	cmp	r7, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x1e2>
 8001b68:	e0ad      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001b6e:	086a      	lsrs	r2, r5, #1
 8001b70:	401c      	ands	r4, r3
 8001b72:	4029      	ands	r1, r5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	07e5      	lsls	r5, r4, #31
 8001b78:	4315      	orrs	r5, r2
 8001b7a:	0864      	lsrs	r4, r4, #1
 8001b7c:	e78d      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <__aeabi_dsub+0x35c>)
 8001b80:	9b02      	ldr	r3, [sp, #8]
 8001b82:	4692      	mov	sl, r2
 8001b84:	4662      	mov	r2, ip
 8001b86:	44ba      	add	sl, r7
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	d02c      	beq.n	8001be6 <__aeabi_dsub+0x25e>
 8001b8c:	428e      	cmp	r6, r1
 8001b8e:	d02e      	beq.n	8001bee <__aeabi_dsub+0x266>
 8001b90:	4652      	mov	r2, sl
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d060      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x214>
 8001b9a:	e0db      	b.n	8001d54 <__aeabi_dsub+0x3cc>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	000e      	movs	r6, r1
 8001ba0:	9c02      	ldr	r4, [sp, #8]
 8001ba2:	08d8      	lsrs	r0, r3, #3
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	4302      	orrs	r2, r0
 8001ba8:	08e4      	lsrs	r4, r4, #3
 8001baa:	0013      	movs	r3, r2
 8001bac:	4323      	orrs	r3, r4
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x22a>
 8001bb0:	e254      	b.n	800205c <__aeabi_dsub+0x6d4>
 8001bb2:	2580      	movs	r5, #128	@ 0x80
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	4325      	orrs	r5, r4
 8001bb8:	032d      	lsls	r5, r5, #12
 8001bba:	4c48      	ldr	r4, [pc, #288]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001bbc:	0b2d      	lsrs	r5, r5, #12
 8001bbe:	e78c      	b.n	8001ada <__aeabi_dsub+0x152>
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x242>
 8001bc8:	e0cc      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001bca:	0029      	movs	r1, r5
 8001bcc:	3901      	subs	r1, #1
 8001bce:	2d01      	cmp	r5, #1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x24c>
 8001bd2:	e188      	b.n	8001ee6 <__aeabi_dsub+0x55e>
 8001bd4:	4295      	cmp	r5, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x252>
 8001bd8:	e0aa      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001bda:	2501      	movs	r5, #1
 8001bdc:	2938      	cmp	r1, #56	@ 0x38
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_dsub+0x25a>
 8001be0:	e72f      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001be2:	468a      	mov	sl, r1
 8001be4:	e718      	b.n	8001a18 <__aeabi_dsub+0x90>
 8001be6:	2201      	movs	r2, #1
 8001be8:	4051      	eors	r1, r2
 8001bea:	428e      	cmp	r6, r1
 8001bec:	d1d0      	bne.n	8001b90 <__aeabi_dsub+0x208>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x26e>
 8001bf4:	e0be      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001bfa:	e138      	b.n	8001e6e <__aeabi_dsub+0x4e6>
 8001bfc:	46ca      	mov	sl, r9
 8001bfe:	0022      	movs	r2, r4
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x27e>
 8001c04:	e1e2      	b.n	8001fcc <__aeabi_dsub+0x644>
 8001c06:	4653      	mov	r3, sl
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e20d      	b.n	800202c <__aeabi_dsub+0x6a4>
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001c12:	4592      	cmp	sl, r2
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e1d2      	b.n	8001fbe <__aeabi_dsub+0x636>
 8001c18:	2701      	movs	r7, #1
 8001c1a:	2938      	cmp	r1, #56	@ 0x38
 8001c1c:	dc13      	bgt.n	8001c46 <__aeabi_dsub+0x2be>
 8001c1e:	291f      	cmp	r1, #31
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x29c>
 8001c22:	e1ee      	b.n	8002002 <__aeabi_dsub+0x67a>
 8001c24:	2220      	movs	r2, #32
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	1a52      	subs	r2, r2, r1
 8001c2a:	0025      	movs	r5, r4
 8001c2c:	0007      	movs	r7, r0
 8001c2e:	469a      	mov	sl, r3
 8001c30:	40cc      	lsrs	r4, r1
 8001c32:	4090      	lsls	r0, r2
 8001c34:	4095      	lsls	r5, r2
 8001c36:	40cf      	lsrs	r7, r1
 8001c38:	44a2      	add	sl, r4
 8001c3a:	1e42      	subs	r2, r0, #1
 8001c3c:	4190      	sbcs	r0, r2
 8001c3e:	4653      	mov	r3, sl
 8001c40:	432f      	orrs	r7, r5
 8001c42:	4307      	orrs	r7, r0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	003d      	movs	r5, r7
 8001c48:	4465      	add	r5, ip
 8001c4a:	4565      	cmp	r5, ip
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	9b02      	ldr	r3, [sp, #8]
 8001c50:	4252      	negs	r2, r2
 8001c52:	464f      	mov	r7, r9
 8001c54:	18d4      	adds	r4, r2, r3
 8001c56:	e780      	b.n	8001b5a <__aeabi_dsub+0x1d2>
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <__aeabi_dsub+0x360>)
 8001c5a:	1c7d      	adds	r5, r7, #1
 8001c5c:	4215      	tst	r5, r2
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x2da>
 8001c60:	e0aa      	b.n	8001db8 <__aeabi_dsub+0x430>
 8001c62:	4662      	mov	r2, ip
 8001c64:	0025      	movs	r5, r4
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4305      	orrs	r5, r0
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2ea>
 8001c70:	e0f5      	b.n	8001e5e <__aeabi_dsub+0x4d6>
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x2f0>
 8001c76:	e16b      	b.n	8001f50 <__aeabi_dsub+0x5c8>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c7c:	e152      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001c7e:	4663      	mov	r3, ip
 8001c80:	1ac5      	subs	r5, r0, r3
 8001c82:	9b02      	ldr	r3, [sp, #8]
 8001c84:	1ae2      	subs	r2, r4, r3
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	419b      	sbcs	r3, r3
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0x30c>
 8001c92:	e1d5      	b.n	8002040 <__aeabi_dsub+0x6b8>
 8001c94:	4663      	mov	r3, ip
 8001c96:	1a1d      	subs	r5, r3, r0
 8001c98:	45ac      	cmp	ip, r5
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	2601      	movs	r6, #1
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	1b1c      	subs	r4, r3, r4
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	1aa4      	subs	r4, r4, r2
 8001ca8:	400e      	ands	r6, r1
 8001caa:	e6f6      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001cac:	4297      	cmp	r7, r2
 8001cae:	d03f      	beq.n	8001d30 <__aeabi_dsub+0x3a8>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	2a38      	cmp	r2, #56	@ 0x38
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x332>
 8001cb8:	e74a      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	9b02      	ldr	r3, [sp, #8]
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	e72d      	b.n	8001b22 <__aeabi_dsub+0x19a>
 8001cc6:	003c      	movs	r4, r7
 8001cc8:	2500      	movs	r5, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	e705      	b.n	8001ada <__aeabi_dsub+0x152>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	402b      	ands	r3, r5
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x350>
 8001cd6:	e6e2      	b.n	8001a9e <__aeabi_dsub+0x116>
 8001cd8:	e06b      	b.n	8001db2 <__aeabi_dsub+0x42a>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	fffff801 	.word	0xfffff801
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	0028      	movs	r0, r5
 8001cee:	f000 fb1d 	bl	800232c <__clzsi2>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	2b1f      	cmp	r3, #31
 8001cf8:	dc00      	bgt.n	8001cfc <__aeabi_dsub+0x374>
 8001cfa:	e6b4      	b.n	8001a66 <__aeabi_dsub+0xde>
 8001cfc:	002a      	movs	r2, r5
 8001cfe:	3808      	subs	r0, #8
 8001d00:	4082      	lsls	r2, r0
 8001d02:	429f      	cmp	r7, r3
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0x380>
 8001d06:	e0b9      	b.n	8001e7c <__aeabi_dsub+0x4f4>
 8001d08:	1bdb      	subs	r3, r3, r7
 8001d0a:	1c58      	adds	r0, r3, #1
 8001d0c:	281f      	cmp	r0, #31
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e1a0      	b.n	8002054 <__aeabi_dsub+0x6cc>
 8001d12:	0015      	movs	r5, r2
 8001d14:	3b1f      	subs	r3, #31
 8001d16:	40dd      	lsrs	r5, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dsub+0x3a0>
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	1a1b      	subs	r3, r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	1e53      	subs	r3, r2, #1
 8001d24:	419a      	sbcs	r2, r3
 8001d26:	4315      	orrs	r5, r2
 8001d28:	2307      	movs	r3, #7
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	402b      	ands	r3, r5
 8001d2e:	e7d0      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001d30:	08c0      	lsrs	r0, r0, #3
 8001d32:	0762      	lsls	r2, r4, #29
 8001d34:	4302      	orrs	r2, r0
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	e737      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d3a:	08ea      	lsrs	r2, r5, #3
 8001d3c:	0763      	lsls	r3, r4, #29
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4bd3      	ldr	r3, [pc, #844]	@ (8002090 <__aeabi_dsub+0x708>)
 8001d42:	08e4      	lsrs	r4, r4, #3
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x3c2>
 8001d48:	e72f      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	0b25      	lsrs	r5, r4, #12
 8001d4e:	057c      	lsls	r4, r7, #21
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	e6c2      	b.n	8001ada <__aeabi_dsub+0x152>
 8001d54:	46ca      	mov	sl, r9
 8001d56:	0022      	movs	r2, r4
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d158      	bne.n	8001e0e <__aeabi_dsub+0x486>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	000e      	movs	r6, r1
 8001d60:	9c02      	ldr	r4, [sp, #8]
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	4657      	mov	r7, sl
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	e7e7      	b.n	8001d3c <__aeabi_dsub+0x3b4>
 8001d6c:	4cc9      	ldr	r4, [pc, #804]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001d6e:	1aff      	subs	r7, r7, r3
 8001d70:	4014      	ands	r4, r2
 8001d72:	e692      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001d74:	4dc8      	ldr	r5, [pc, #800]	@ (8002098 <__aeabi_dsub+0x710>)
 8001d76:	1c7a      	adds	r2, r7, #1
 8001d78:	422a      	tst	r2, r5
 8001d7a:	d000      	beq.n	8001d7e <__aeabi_dsub+0x3f6>
 8001d7c:	e084      	b.n	8001e88 <__aeabi_dsub+0x500>
 8001d7e:	0022      	movs	r2, r4
 8001d80:	4302      	orrs	r2, r0
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x400>
 8001d86:	e0ef      	b.n	8001f68 <__aeabi_dsub+0x5e0>
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x406>
 8001d8c:	e0e5      	b.n	8001f5a <__aeabi_dsub+0x5d2>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	9902      	ldr	r1, [sp, #8]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x410>
 8001d96:	e0c5      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001d98:	4663      	mov	r3, ip
 8001d9a:	18c5      	adds	r5, r0, r3
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4285      	cmp	r5, r0
 8001da0:	4180      	sbcs	r0, r0
 8001da2:	4464      	add	r4, ip
 8001da4:	4240      	negs	r0, r0
 8001da6:	1824      	adds	r4, r4, r0
 8001da8:	0223      	lsls	r3, r4, #8
 8001daa:	d502      	bpl.n	8001db2 <__aeabi_dsub+0x42a>
 8001dac:	4bb9      	ldr	r3, [pc, #740]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001dae:	3701      	adds	r7, #1
 8001db0:	401c      	ands	r4, r3
 8001db2:	46ba      	mov	sl, r7
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	e7d5      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001db8:	4662      	mov	r2, ip
 8001dba:	1a85      	subs	r5, r0, r2
 8001dbc:	42a8      	cmp	r0, r5
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	1ae3      	subs	r3, r4, r3
 8001dc8:	001a      	movs	r2, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1ad2      	subs	r2, r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	021a      	lsls	r2, r3, #8
 8001dd4:	d46c      	bmi.n	8001eb0 <__aeabi_dsub+0x528>
 8001dd6:	464a      	mov	r2, r9
 8001dd8:	464c      	mov	r4, r9
 8001dda:	432a      	orrs	r2, r5
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x458>
 8001dde:	e63a      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001de0:	2600      	movs	r6, #0
 8001de2:	2400      	movs	r4, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	e678      	b.n	8001ada <__aeabi_dsub+0x152>
 8001de8:	9902      	ldr	r1, [sp, #8]
 8001dea:	4653      	mov	r3, sl
 8001dec:	000d      	movs	r5, r1
 8001dee:	3a20      	subs	r2, #32
 8001df0:	40d5      	lsrs	r5, r2
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d006      	beq.n	8001e04 <__aeabi_dsub+0x47c>
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	4662      	mov	r2, ip
 8001e00:	431a      	orrs	r2, r3
 8001e02:	4693      	mov	fp, r2
 8001e04:	465b      	mov	r3, fp
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	4193      	sbcs	r3, r2
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	e619      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001e0e:	4653      	mov	r3, sl
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x490>
 8001e16:	e0c6      	b.n	8001fa6 <__aeabi_dsub+0x61e>
 8001e18:	4e9d      	ldr	r6, [pc, #628]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e1a:	45b2      	cmp	sl, r6
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e6bd      	b.n	8001b9c <__aeabi_dsub+0x214>
 8001e20:	4688      	mov	r8, r1
 8001e22:	000e      	movs	r6, r1
 8001e24:	2501      	movs	r5, #1
 8001e26:	2a38      	cmp	r2, #56	@ 0x38
 8001e28:	dc10      	bgt.n	8001e4c <__aeabi_dsub+0x4c4>
 8001e2a:	2a1f      	cmp	r2, #31
 8001e2c:	dc7f      	bgt.n	8001f2e <__aeabi_dsub+0x5a6>
 8001e2e:	2120      	movs	r1, #32
 8001e30:	0025      	movs	r5, r4
 8001e32:	1a89      	subs	r1, r1, r2
 8001e34:	0007      	movs	r7, r0
 8001e36:	4088      	lsls	r0, r1
 8001e38:	408d      	lsls	r5, r1
 8001e3a:	40d7      	lsrs	r7, r2
 8001e3c:	40d4      	lsrs	r4, r2
 8001e3e:	1e41      	subs	r1, r0, #1
 8001e40:	4188      	sbcs	r0, r1
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	433d      	orrs	r5, r7
 8001e46:	1b1b      	subs	r3, r3, r4
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	1b55      	subs	r5, r2, r5
 8001e50:	45ac      	cmp	ip, r5
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	4252      	negs	r2, r2
 8001e58:	464f      	mov	r7, r9
 8001e5a:	1a9c      	subs	r4, r3, r2
 8001e5c:	e5f6      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x4dc>
 8001e62:	e0b7      	b.n	8001fd4 <__aeabi_dsub+0x64c>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x4e2>
 8001e68:	e0f0      	b.n	800204c <__aeabi_dsub+0x6c4>
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	400e      	ands	r6, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	9802      	ldr	r0, [sp, #8]
 8001e72:	08d9      	lsrs	r1, r3, #3
 8001e74:	0742      	lsls	r2, r0, #29
 8001e76:	430a      	orrs	r2, r1
 8001e78:	08c4      	lsrs	r4, r0, #3
 8001e7a:	e696      	b.n	8001baa <__aeabi_dsub+0x222>
 8001e7c:	4c85      	ldr	r4, [pc, #532]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001e7e:	1aff      	subs	r7, r7, r3
 8001e80:	4014      	ands	r4, r2
 8001e82:	0762      	lsls	r2, r4, #29
 8001e84:	08e4      	lsrs	r4, r4, #3
 8001e86:	e760      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001e88:	4981      	ldr	r1, [pc, #516]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e8a:	428a      	cmp	r2, r1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x508>
 8001e8e:	e0c9      	b.n	8002024 <__aeabi_dsub+0x69c>
 8001e90:	4663      	mov	r3, ip
 8001e92:	18c1      	adds	r1, r0, r3
 8001e94:	4281      	cmp	r1, r0
 8001e96:	4180      	sbcs	r0, r0
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	18e3      	adds	r3, r4, r3
 8001e9e:	181b      	adds	r3, r3, r0
 8001ea0:	07dd      	lsls	r5, r3, #31
 8001ea2:	085c      	lsrs	r4, r3, #1
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	430d      	orrs	r5, r1
 8001eaa:	0017      	movs	r7, r2
 8001eac:	402b      	ands	r3, r5
 8001eae:	e710      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	1a1d      	subs	r5, r3, r0
 8001eb4:	45ac      	cmp	ip, r5
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	2601      	movs	r6, #1
 8001eba:	9b02      	ldr	r3, [sp, #8]
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	1b1c      	subs	r4, r3, r4
 8001ec0:	4688      	mov	r8, r1
 8001ec2:	1aa4      	subs	r4, r4, r2
 8001ec4:	400e      	ands	r6, r1
 8001ec6:	e5c6      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001ec8:	4663      	mov	r3, ip
 8001eca:	18c5      	adds	r5, r0, r3
 8001ecc:	9b02      	ldr	r3, [sp, #8]
 8001ece:	4285      	cmp	r5, r0
 8001ed0:	4180      	sbcs	r0, r0
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4464      	add	r4, ip
 8001ed8:	1824      	adds	r4, r4, r0
 8001eda:	2701      	movs	r7, #1
 8001edc:	0223      	lsls	r3, r4, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0x55a>
 8001ee0:	e6f5      	b.n	8001cce <__aeabi_dsub+0x346>
 8001ee2:	2702      	movs	r7, #2
 8001ee4:	e641      	b.n	8001b6a <__aeabi_dsub+0x1e2>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	1ac5      	subs	r5, r0, r3
 8001eea:	42a8      	cmp	r0, r5
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	1ae4      	subs	r4, r4, r3
 8001ef4:	2701      	movs	r7, #1
 8001ef6:	1a24      	subs	r4, r4, r0
 8001ef8:	e5a8      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001efa:	9d02      	ldr	r5, [sp, #8]
 8001efc:	4652      	mov	r2, sl
 8001efe:	002b      	movs	r3, r5
 8001f00:	3a20      	subs	r2, #32
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	4653      	mov	r3, sl
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d006      	beq.n	8001f1a <__aeabi_dsub+0x592>
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	002b      	movs	r3, r5
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4662      	mov	r2, ip
 8001f16:	431a      	orrs	r2, r3
 8001f18:	4693      	mov	fp, r2
 8001f1a:	465d      	mov	r5, fp
 8001f1c:	1e6b      	subs	r3, r5, #1
 8001f1e:	419d      	sbcs	r5, r3
 8001f20:	430d      	orrs	r5, r1
 8001f22:	e615      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001f24:	0762      	lsls	r2, r4, #29
 8001f26:	08c0      	lsrs	r0, r0, #3
 8001f28:	4302      	orrs	r2, r0
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	e70d      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0027      	movs	r7, r4
 8001f32:	3920      	subs	r1, #32
 8001f34:	40cf      	lsrs	r7, r1
 8001f36:	2a20      	cmp	r2, #32
 8001f38:	d005      	beq.n	8001f46 <__aeabi_dsub+0x5be>
 8001f3a:	2140      	movs	r1, #64	@ 0x40
 8001f3c:	1a8a      	subs	r2, r1, r2
 8001f3e:	4094      	lsls	r4, r2
 8001f40:	0025      	movs	r5, r4
 8001f42:	4305      	orrs	r5, r0
 8001f44:	9503      	str	r5, [sp, #12]
 8001f46:	9d03      	ldr	r5, [sp, #12]
 8001f48:	1e6a      	subs	r2, r5, #1
 8001f4a:	4195      	sbcs	r5, r2
 8001f4c:	433d      	orrs	r5, r7
 8001f4e:	e77d      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x5ce>
 8001f54:	e744      	b.n	8001de0 <__aeabi_dsub+0x458>
 8001f56:	2601      	movs	r6, #1
 8001f58:	400e      	ands	r6, r1
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	08d9      	lsrs	r1, r3, #3
 8001f5e:	9b02      	ldr	r3, [sp, #8]
 8001f60:	075a      	lsls	r2, r3, #29
 8001f62:	430a      	orrs	r2, r1
 8001f64:	08dc      	lsrs	r4, r3, #3
 8001f66:	e6f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d028      	beq.n	8001fbe <__aeabi_dsub+0x636>
 8001f6c:	4662      	mov	r2, ip
 8001f6e:	9f02      	ldr	r7, [sp, #8]
 8001f70:	08c0      	lsrs	r0, r0, #3
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x5f0>
 8001f76:	e6dc      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001f78:	0762      	lsls	r2, r4, #29
 8001f7a:	4310      	orrs	r0, r2
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	4214      	tst	r4, r2
 8001f84:	d009      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001f86:	08fd      	lsrs	r5, r7, #3
 8001f88:	4215      	tst	r5, r2
 8001f8a:	d106      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	2601      	movs	r6, #1
 8001f90:	002c      	movs	r4, r5
 8001f92:	08d8      	lsrs	r0, r3, #3
 8001f94:	077b      	lsls	r3, r7, #29
 8001f96:	4318      	orrs	r0, r3
 8001f98:	400e      	ands	r6, r1
 8001f9a:	0f42      	lsrs	r2, r0, #29
 8001f9c:	00c0      	lsls	r0, r0, #3
 8001f9e:	08c0      	lsrs	r0, r0, #3
 8001fa0:	0752      	lsls	r2, r2, #29
 8001fa2:	4302      	orrs	r2, r0
 8001fa4:	e601      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	1a1d      	subs	r5, r3, r0
 8001faa:	45ac      	cmp	ip, r5
 8001fac:	4192      	sbcs	r2, r2
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	1b1c      	subs	r4, r3, r4
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	2701      	movs	r7, #1
 8001fba:	1aa4      	subs	r4, r4, r2
 8001fbc:	e546      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	075a      	lsls	r2, r3, #29
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	08dc      	lsrs	r4, r3, #3
 8001fca:	e5ee      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fcc:	4663      	mov	r3, ip
 8001fce:	9c02      	ldr	r4, [sp, #8]
 8001fd0:	9303      	str	r3, [sp, #12]
 8001fd2:	e6c7      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001fd4:	08c0      	lsrs	r0, r0, #3
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x654>
 8001fda:	e6aa      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001fdc:	0762      	lsls	r2, r4, #29
 8001fde:	4310      	orrs	r0, r2
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	08e4      	lsrs	r4, r4, #3
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d0d7      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001fea:	9f02      	ldr	r7, [sp, #8]
 8001fec:	08fd      	lsrs	r5, r7, #3
 8001fee:	4215      	tst	r5, r2
 8001ff0:	d1d3      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001ff2:	4663      	mov	r3, ip
 8001ff4:	2601      	movs	r6, #1
 8001ff6:	08d8      	lsrs	r0, r3, #3
 8001ff8:	077b      	lsls	r3, r7, #29
 8001ffa:	002c      	movs	r4, r5
 8001ffc:	4318      	orrs	r0, r3
 8001ffe:	400e      	ands	r6, r1
 8002000:	e7cb      	b.n	8001f9a <__aeabi_dsub+0x612>
 8002002:	000a      	movs	r2, r1
 8002004:	0027      	movs	r7, r4
 8002006:	3a20      	subs	r2, #32
 8002008:	40d7      	lsrs	r7, r2
 800200a:	2920      	cmp	r1, #32
 800200c:	d005      	beq.n	800201a <__aeabi_dsub+0x692>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1a52      	subs	r2, r2, r1
 8002012:	4094      	lsls	r4, r2
 8002014:	0025      	movs	r5, r4
 8002016:	4305      	orrs	r5, r0
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	9d03      	ldr	r5, [sp, #12]
 800201c:	1e6a      	subs	r2, r5, #1
 800201e:	4195      	sbcs	r5, r2
 8002020:	432f      	orrs	r7, r5
 8002022:	e610      	b.n	8001c46 <__aeabi_dsub+0x2be>
 8002024:	0014      	movs	r4, r2
 8002026:	2500      	movs	r5, #0
 8002028:	2200      	movs	r2, #0
 800202a:	e556      	b.n	8001ada <__aeabi_dsub+0x152>
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	4460      	add	r0, ip
 8002030:	4699      	mov	r9, r3
 8002032:	4560      	cmp	r0, ip
 8002034:	4192      	sbcs	r2, r2
 8002036:	444c      	add	r4, r9
 8002038:	4252      	negs	r2, r2
 800203a:	0005      	movs	r5, r0
 800203c:	18a4      	adds	r4, r4, r2
 800203e:	e74c      	b.n	8001eda <__aeabi_dsub+0x552>
 8002040:	001a      	movs	r2, r3
 8002042:	001c      	movs	r4, r3
 8002044:	432a      	orrs	r2, r5
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x6c2>
 8002048:	e6b3      	b.n	8001db2 <__aeabi_dsub+0x42a>
 800204a:	e6c9      	b.n	8001de0 <__aeabi_dsub+0x458>
 800204c:	2480      	movs	r4, #128	@ 0x80
 800204e:	2600      	movs	r6, #0
 8002050:	0324      	lsls	r4, r4, #12
 8002052:	e5ae      	b.n	8001bb2 <__aeabi_dsub+0x22a>
 8002054:	2120      	movs	r1, #32
 8002056:	2500      	movs	r5, #0
 8002058:	1a09      	subs	r1, r1, r0
 800205a:	e517      	b.n	8001a8c <__aeabi_dsub+0x104>
 800205c:	2200      	movs	r2, #0
 800205e:	2500      	movs	r5, #0
 8002060:	4c0b      	ldr	r4, [pc, #44]	@ (8002090 <__aeabi_dsub+0x708>)
 8002062:	e53a      	b.n	8001ada <__aeabi_dsub+0x152>
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x6e2>
 8002068:	e5f6      	b.n	8001c58 <__aeabi_dsub+0x2d0>
 800206a:	464b      	mov	r3, r9
 800206c:	1bda      	subs	r2, r3, r7
 800206e:	4692      	mov	sl, r2
 8002070:	2f00      	cmp	r7, #0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x6ee>
 8002074:	e66f      	b.n	8001d56 <__aeabi_dsub+0x3ce>
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc05      	bgt.n	8002086 <__aeabi_dsub+0x6fe>
 800207a:	2680      	movs	r6, #128	@ 0x80
 800207c:	0436      	lsls	r6, r6, #16
 800207e:	4334      	orrs	r4, r6
 8002080:	4688      	mov	r8, r1
 8002082:	000e      	movs	r6, r1
 8002084:	e6d1      	b.n	8001e2a <__aeabi_dsub+0x4a2>
 8002086:	4688      	mov	r8, r1
 8002088:	000e      	movs	r6, r1
 800208a:	2501      	movs	r5, #1
 800208c:	e6de      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff
 8002094:	ff7fffff 	.word	0xff7fffff
 8002098:	000007fe 	.word	0x000007fe
 800209c:	2d00      	cmp	r5, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x71a>
 80020a0:	e668      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 80020a2:	464b      	mov	r3, r9
 80020a4:	1bd9      	subs	r1, r3, r7
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	d101      	bne.n	80020ae <__aeabi_dsub+0x726>
 80020aa:	468a      	mov	sl, r1
 80020ac:	e5a7      	b.n	8001bfe <__aeabi_dsub+0x276>
 80020ae:	2701      	movs	r7, #1
 80020b0:	2938      	cmp	r1, #56	@ 0x38
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dsub+0x72e>
 80020b4:	e5c7      	b.n	8001c46 <__aeabi_dsub+0x2be>
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	0412      	lsls	r2, r2, #16
 80020ba:	4314      	orrs	r4, r2
 80020bc:	e5af      	b.n	8001c1e <__aeabi_dsub+0x296>
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <__aeabi_d2iz>:
 80020c0:	000b      	movs	r3, r1
 80020c2:	0002      	movs	r2, r0
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	4d16      	ldr	r5, [pc, #88]	@ (8002120 <__aeabi_d2iz+0x60>)
 80020c8:	030c      	lsls	r4, r1, #12
 80020ca:	b082      	sub	sp, #8
 80020cc:	0049      	lsls	r1, r1, #1
 80020ce:	2000      	movs	r0, #0
 80020d0:	9200      	str	r2, [sp, #0]
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0d49      	lsrs	r1, r1, #21
 80020d8:	0fde      	lsrs	r6, r3, #31
 80020da:	42a9      	cmp	r1, r5
 80020dc:	dd04      	ble.n	80020e8 <__aeabi_d2iz+0x28>
 80020de:	4811      	ldr	r0, [pc, #68]	@ (8002124 <__aeabi_d2iz+0x64>)
 80020e0:	4281      	cmp	r1, r0
 80020e2:	dd03      	ble.n	80020ec <__aeabi_d2iz+0x2c>
 80020e4:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <__aeabi_d2iz+0x68>)
 80020e6:	18f0      	adds	r0, r6, r3
 80020e8:	b002      	add	sp, #8
 80020ea:	bd70      	pop	{r4, r5, r6, pc}
 80020ec:	2080      	movs	r0, #128	@ 0x80
 80020ee:	0340      	lsls	r0, r0, #13
 80020f0:	4320      	orrs	r0, r4
 80020f2:	4c0e      	ldr	r4, [pc, #56]	@ (800212c <__aeabi_d2iz+0x6c>)
 80020f4:	1a64      	subs	r4, r4, r1
 80020f6:	2c1f      	cmp	r4, #31
 80020f8:	dd08      	ble.n	800210c <__aeabi_d2iz+0x4c>
 80020fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <__aeabi_d2iz+0x70>)
 80020fc:	1a5b      	subs	r3, r3, r1
 80020fe:	40d8      	lsrs	r0, r3
 8002100:	0003      	movs	r3, r0
 8002102:	4258      	negs	r0, r3
 8002104:	2e00      	cmp	r6, #0
 8002106:	d1ef      	bne.n	80020e8 <__aeabi_d2iz+0x28>
 8002108:	0018      	movs	r0, r3
 800210a:	e7ed      	b.n	80020e8 <__aeabi_d2iz+0x28>
 800210c:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <__aeabi_d2iz+0x74>)
 800210e:	9a00      	ldr	r2, [sp, #0]
 8002110:	469c      	mov	ip, r3
 8002112:	0003      	movs	r3, r0
 8002114:	4461      	add	r1, ip
 8002116:	408b      	lsls	r3, r1
 8002118:	40e2      	lsrs	r2, r4
 800211a:	4313      	orrs	r3, r2
 800211c:	e7f1      	b.n	8002102 <__aeabi_d2iz+0x42>
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	000003fe 	.word	0x000003fe
 8002124:	0000041d 	.word	0x0000041d
 8002128:	7fffffff 	.word	0x7fffffff
 800212c:	00000433 	.word	0x00000433
 8002130:	00000413 	.word	0x00000413
 8002134:	fffffbed 	.word	0xfffffbed

08002138 <__aeabi_i2d>:
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	2800      	cmp	r0, #0
 800213c:	d016      	beq.n	800216c <__aeabi_i2d+0x34>
 800213e:	17c3      	asrs	r3, r0, #31
 8002140:	18c5      	adds	r5, r0, r3
 8002142:	405d      	eors	r5, r3
 8002144:	0fc4      	lsrs	r4, r0, #31
 8002146:	0028      	movs	r0, r5
 8002148:	f000 f8f0 	bl	800232c <__clzsi2>
 800214c:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <__aeabi_i2d+0x58>)
 800214e:	1a1b      	subs	r3, r3, r0
 8002150:	055b      	lsls	r3, r3, #21
 8002152:	0d5b      	lsrs	r3, r3, #21
 8002154:	280a      	cmp	r0, #10
 8002156:	dc14      	bgt.n	8002182 <__aeabi_i2d+0x4a>
 8002158:	0002      	movs	r2, r0
 800215a:	002e      	movs	r6, r5
 800215c:	3215      	adds	r2, #21
 800215e:	4096      	lsls	r6, r2
 8002160:	220b      	movs	r2, #11
 8002162:	1a12      	subs	r2, r2, r0
 8002164:	40d5      	lsrs	r5, r2
 8002166:	032d      	lsls	r5, r5, #12
 8002168:	0b2d      	lsrs	r5, r5, #12
 800216a:	e003      	b.n	8002174 <__aeabi_i2d+0x3c>
 800216c:	2400      	movs	r4, #0
 800216e:	2300      	movs	r3, #0
 8002170:	2500      	movs	r5, #0
 8002172:	2600      	movs	r6, #0
 8002174:	051b      	lsls	r3, r3, #20
 8002176:	432b      	orrs	r3, r5
 8002178:	07e4      	lsls	r4, r4, #31
 800217a:	4323      	orrs	r3, r4
 800217c:	0030      	movs	r0, r6
 800217e:	0019      	movs	r1, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	380b      	subs	r0, #11
 8002184:	4085      	lsls	r5, r0
 8002186:	032d      	lsls	r5, r5, #12
 8002188:	2600      	movs	r6, #0
 800218a:	0b2d      	lsrs	r5, r5, #12
 800218c:	e7f2      	b.n	8002174 <__aeabi_i2d+0x3c>
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	0000041e 	.word	0x0000041e

08002194 <__aeabi_f2d>:
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	0242      	lsls	r2, r0, #9
 8002198:	0043      	lsls	r3, r0, #1
 800219a:	0fc4      	lsrs	r4, r0, #31
 800219c:	20fe      	movs	r0, #254	@ 0xfe
 800219e:	0e1b      	lsrs	r3, r3, #24
 80021a0:	1c59      	adds	r1, r3, #1
 80021a2:	0a55      	lsrs	r5, r2, #9
 80021a4:	4208      	tst	r0, r1
 80021a6:	d00c      	beq.n	80021c2 <__aeabi_f2d+0x2e>
 80021a8:	21e0      	movs	r1, #224	@ 0xe0
 80021aa:	0089      	lsls	r1, r1, #2
 80021ac:	468c      	mov	ip, r1
 80021ae:	076d      	lsls	r5, r5, #29
 80021b0:	0b12      	lsrs	r2, r2, #12
 80021b2:	4463      	add	r3, ip
 80021b4:	051b      	lsls	r3, r3, #20
 80021b6:	4313      	orrs	r3, r2
 80021b8:	07e4      	lsls	r4, r4, #31
 80021ba:	4323      	orrs	r3, r4
 80021bc:	0028      	movs	r0, r5
 80021be:	0019      	movs	r1, r3
 80021c0:	bd70      	pop	{r4, r5, r6, pc}
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d114      	bne.n	80021f0 <__aeabi_f2d+0x5c>
 80021c6:	2d00      	cmp	r5, #0
 80021c8:	d01b      	beq.n	8002202 <__aeabi_f2d+0x6e>
 80021ca:	0028      	movs	r0, r5
 80021cc:	f000 f8ae 	bl	800232c <__clzsi2>
 80021d0:	280a      	cmp	r0, #10
 80021d2:	dc1c      	bgt.n	800220e <__aeabi_f2d+0x7a>
 80021d4:	230b      	movs	r3, #11
 80021d6:	002a      	movs	r2, r5
 80021d8:	1a1b      	subs	r3, r3, r0
 80021da:	40da      	lsrs	r2, r3
 80021dc:	0003      	movs	r3, r0
 80021de:	3315      	adds	r3, #21
 80021e0:	409d      	lsls	r5, r3
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <__aeabi_f2d+0x88>)
 80021e4:	0312      	lsls	r2, r2, #12
 80021e6:	1a1b      	subs	r3, r3, r0
 80021e8:	055b      	lsls	r3, r3, #21
 80021ea:	0b12      	lsrs	r2, r2, #12
 80021ec:	0d5b      	lsrs	r3, r3, #21
 80021ee:	e7e1      	b.n	80021b4 <__aeabi_f2d+0x20>
 80021f0:	2d00      	cmp	r5, #0
 80021f2:	d009      	beq.n	8002208 <__aeabi_f2d+0x74>
 80021f4:	0b13      	lsrs	r3, r2, #12
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	0312      	lsls	r2, r2, #12
 80021fa:	431a      	orrs	r2, r3
 80021fc:	076d      	lsls	r5, r5, #29
 80021fe:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <__aeabi_f2d+0x8c>)
 8002200:	e7d8      	b.n	80021b4 <__aeabi_f2d+0x20>
 8002202:	2300      	movs	r3, #0
 8002204:	2200      	movs	r2, #0
 8002206:	e7d5      	b.n	80021b4 <__aeabi_f2d+0x20>
 8002208:	2200      	movs	r2, #0
 800220a:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <__aeabi_f2d+0x8c>)
 800220c:	e7d2      	b.n	80021b4 <__aeabi_f2d+0x20>
 800220e:	0003      	movs	r3, r0
 8002210:	002a      	movs	r2, r5
 8002212:	3b0b      	subs	r3, #11
 8002214:	409a      	lsls	r2, r3
 8002216:	2500      	movs	r5, #0
 8002218:	e7e3      	b.n	80021e2 <__aeabi_f2d+0x4e>
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	00000389 	.word	0x00000389
 8002220:	000007ff 	.word	0x000007ff

08002224 <__aeabi_d2f>:
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002226:	004b      	lsls	r3, r1, #1
 8002228:	030f      	lsls	r7, r1, #12
 800222a:	0d5b      	lsrs	r3, r3, #21
 800222c:	4c3b      	ldr	r4, [pc, #236]	@ (800231c <__aeabi_d2f+0xf8>)
 800222e:	0f45      	lsrs	r5, r0, #29
 8002230:	b083      	sub	sp, #12
 8002232:	0a7f      	lsrs	r7, r7, #9
 8002234:	1c5e      	adds	r6, r3, #1
 8002236:	432f      	orrs	r7, r5
 8002238:	9000      	str	r0, [sp, #0]
 800223a:	9101      	str	r1, [sp, #4]
 800223c:	0fca      	lsrs	r2, r1, #31
 800223e:	00c5      	lsls	r5, r0, #3
 8002240:	4226      	tst	r6, r4
 8002242:	d00b      	beq.n	800225c <__aeabi_d2f+0x38>
 8002244:	4936      	ldr	r1, [pc, #216]	@ (8002320 <__aeabi_d2f+0xfc>)
 8002246:	185c      	adds	r4, r3, r1
 8002248:	2cfe      	cmp	r4, #254	@ 0xfe
 800224a:	dd13      	ble.n	8002274 <__aeabi_d2f+0x50>
 800224c:	20ff      	movs	r0, #255	@ 0xff
 800224e:	2300      	movs	r3, #0
 8002250:	05c0      	lsls	r0, r0, #23
 8002252:	4318      	orrs	r0, r3
 8002254:	07d2      	lsls	r2, r2, #31
 8002256:	4310      	orrs	r0, r2
 8002258:	b003      	add	sp, #12
 800225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <__aeabi_d2f+0x42>
 8002260:	2000      	movs	r0, #0
 8002262:	2300      	movs	r3, #0
 8002264:	e7f4      	b.n	8002250 <__aeabi_d2f+0x2c>
 8002266:	433d      	orrs	r5, r7
 8002268:	d0f0      	beq.n	800224c <__aeabi_d2f+0x28>
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	03db      	lsls	r3, r3, #15
 800226e:	20ff      	movs	r0, #255	@ 0xff
 8002270:	433b      	orrs	r3, r7
 8002272:	e7ed      	b.n	8002250 <__aeabi_d2f+0x2c>
 8002274:	2c00      	cmp	r4, #0
 8002276:	dd14      	ble.n	80022a2 <__aeabi_d2f+0x7e>
 8002278:	9b00      	ldr	r3, [sp, #0]
 800227a:	00ff      	lsls	r7, r7, #3
 800227c:	019b      	lsls	r3, r3, #6
 800227e:	1e58      	subs	r0, r3, #1
 8002280:	4183      	sbcs	r3, r0
 8002282:	0f69      	lsrs	r1, r5, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	430b      	orrs	r3, r1
 8002288:	0759      	lsls	r1, r3, #29
 800228a:	d041      	beq.n	8002310 <__aeabi_d2f+0xec>
 800228c:	210f      	movs	r1, #15
 800228e:	4019      	ands	r1, r3
 8002290:	2904      	cmp	r1, #4
 8002292:	d028      	beq.n	80022e6 <__aeabi_d2f+0xc2>
 8002294:	3304      	adds	r3, #4
 8002296:	0159      	lsls	r1, r3, #5
 8002298:	d525      	bpl.n	80022e6 <__aeabi_d2f+0xc2>
 800229a:	3401      	adds	r4, #1
 800229c:	2300      	movs	r3, #0
 800229e:	b2e0      	uxtb	r0, r4
 80022a0:	e7d6      	b.n	8002250 <__aeabi_d2f+0x2c>
 80022a2:	0021      	movs	r1, r4
 80022a4:	3117      	adds	r1, #23
 80022a6:	dbdb      	blt.n	8002260 <__aeabi_d2f+0x3c>
 80022a8:	2180      	movs	r1, #128	@ 0x80
 80022aa:	201e      	movs	r0, #30
 80022ac:	0409      	lsls	r1, r1, #16
 80022ae:	4339      	orrs	r1, r7
 80022b0:	1b00      	subs	r0, r0, r4
 80022b2:	281f      	cmp	r0, #31
 80022b4:	dd1b      	ble.n	80022ee <__aeabi_d2f+0xca>
 80022b6:	2602      	movs	r6, #2
 80022b8:	4276      	negs	r6, r6
 80022ba:	1b34      	subs	r4, r6, r4
 80022bc:	000e      	movs	r6, r1
 80022be:	40e6      	lsrs	r6, r4
 80022c0:	0034      	movs	r4, r6
 80022c2:	2820      	cmp	r0, #32
 80022c4:	d004      	beq.n	80022d0 <__aeabi_d2f+0xac>
 80022c6:	4817      	ldr	r0, [pc, #92]	@ (8002324 <__aeabi_d2f+0x100>)
 80022c8:	4684      	mov	ip, r0
 80022ca:	4463      	add	r3, ip
 80022cc:	4099      	lsls	r1, r3
 80022ce:	430d      	orrs	r5, r1
 80022d0:	002b      	movs	r3, r5
 80022d2:	1e59      	subs	r1, r3, #1
 80022d4:	418b      	sbcs	r3, r1
 80022d6:	4323      	orrs	r3, r4
 80022d8:	0759      	lsls	r1, r3, #29
 80022da:	d015      	beq.n	8002308 <__aeabi_d2f+0xe4>
 80022dc:	210f      	movs	r1, #15
 80022de:	2400      	movs	r4, #0
 80022e0:	4019      	ands	r1, r3
 80022e2:	2904      	cmp	r1, #4
 80022e4:	d117      	bne.n	8002316 <__aeabi_d2f+0xf2>
 80022e6:	019b      	lsls	r3, r3, #6
 80022e8:	0a5b      	lsrs	r3, r3, #9
 80022ea:	b2e0      	uxtb	r0, r4
 80022ec:	e7b0      	b.n	8002250 <__aeabi_d2f+0x2c>
 80022ee:	4c0e      	ldr	r4, [pc, #56]	@ (8002328 <__aeabi_d2f+0x104>)
 80022f0:	191c      	adds	r4, r3, r4
 80022f2:	002b      	movs	r3, r5
 80022f4:	40a5      	lsls	r5, r4
 80022f6:	40c3      	lsrs	r3, r0
 80022f8:	40a1      	lsls	r1, r4
 80022fa:	1e68      	subs	r0, r5, #1
 80022fc:	4185      	sbcs	r5, r0
 80022fe:	4329      	orrs	r1, r5
 8002300:	430b      	orrs	r3, r1
 8002302:	2400      	movs	r4, #0
 8002304:	0759      	lsls	r1, r3, #29
 8002306:	d1c1      	bne.n	800228c <__aeabi_d2f+0x68>
 8002308:	019b      	lsls	r3, r3, #6
 800230a:	2000      	movs	r0, #0
 800230c:	0a5b      	lsrs	r3, r3, #9
 800230e:	e79f      	b.n	8002250 <__aeabi_d2f+0x2c>
 8002310:	08db      	lsrs	r3, r3, #3
 8002312:	b2e0      	uxtb	r0, r4
 8002314:	e79c      	b.n	8002250 <__aeabi_d2f+0x2c>
 8002316:	3304      	adds	r3, #4
 8002318:	e7e5      	b.n	80022e6 <__aeabi_d2f+0xc2>
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	000007fe 	.word	0x000007fe
 8002320:	fffffc80 	.word	0xfffffc80
 8002324:	fffffca2 	.word	0xfffffca2
 8002328:	fffffc82 	.word	0xfffffc82

0800232c <__clzsi2>:
 800232c:	211c      	movs	r1, #28
 800232e:	2301      	movs	r3, #1
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	4298      	cmp	r0, r3
 8002334:	d301      	bcc.n	800233a <__clzsi2+0xe>
 8002336:	0c00      	lsrs	r0, r0, #16
 8002338:	3910      	subs	r1, #16
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	4298      	cmp	r0, r3
 800233e:	d301      	bcc.n	8002344 <__clzsi2+0x18>
 8002340:	0a00      	lsrs	r0, r0, #8
 8002342:	3908      	subs	r1, #8
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	4298      	cmp	r0, r3
 8002348:	d301      	bcc.n	800234e <__clzsi2+0x22>
 800234a:	0900      	lsrs	r0, r0, #4
 800234c:	3904      	subs	r1, #4
 800234e:	a202      	add	r2, pc, #8	@ (adr r2, 8002358 <__clzsi2+0x2c>)
 8002350:	5c10      	ldrb	r0, [r2, r0]
 8002352:	1840      	adds	r0, r0, r1
 8002354:	4770      	bx	lr
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	02020304 	.word	0x02020304
 800235c:	01010101 	.word	0x01010101
	...

08002368 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800236e:	003b      	movs	r3, r7
 8002370:	0018      	movs	r0, r3
 8002372:	2308      	movs	r3, #8
 8002374:	001a      	movs	r2, r3
 8002376:	2100      	movs	r1, #0
 8002378:	f003 fa44 	bl	8005804 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800237c:	4b0f      	ldr	r3, [pc, #60]	@ (80023bc <MX_DAC_Init+0x54>)
 800237e:	4a10      	ldr	r2, [pc, #64]	@ (80023c0 <MX_DAC_Init+0x58>)
 8002380:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002382:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <MX_DAC_Init+0x54>)
 8002384:	0018      	movs	r0, r3
 8002386:	f000 fccf 	bl	8002d28 <HAL_DAC_Init>
 800238a:	1e03      	subs	r3, r0, #0
 800238c:	d001      	beq.n	8002392 <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 800238e:	f000 fa5f 	bl	8002850 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002392:	003b      	movs	r3, r7
 8002394:	2204      	movs	r2, #4
 8002396:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002398:	003b      	movs	r3, r7
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800239e:	0039      	movs	r1, r7
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <MX_DAC_Init+0x54>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fd05 	bl	8002db4 <HAL_DAC_ConfigChannel>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d001      	beq.n	80023b2 <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 80023ae:	f000 fa4f 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b002      	add	sp, #8
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	20000458 	.word	0x20000458
 80023c0:	40007400 	.word	0x40007400

080023c4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b08b      	sub	sp, #44	@ 0x2c
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	2414      	movs	r4, #20
 80023ce:	193b      	adds	r3, r7, r4
 80023d0:	0018      	movs	r0, r3
 80023d2:	2314      	movs	r3, #20
 80023d4:	001a      	movs	r2, r3
 80023d6:	2100      	movs	r1, #0
 80023d8:	f003 fa14 	bl	8005804 <memset>
  if(dacHandle->Instance==DAC)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a39      	ldr	r2, [pc, #228]	@ (80024c8 <HAL_DAC_MspInit+0x104>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d16c      	bne.n	80024c0 <HAL_DAC_MspInit+0xfc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80023e6:	4b39      	ldr	r3, [pc, #228]	@ (80024cc <HAL_DAC_MspInit+0x108>)
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <HAL_DAC_MspInit+0x108>)
 80023ec:	2180      	movs	r1, #128	@ 0x80
 80023ee:	0589      	lsls	r1, r1, #22
 80023f0:	430a      	orrs	r2, r1
 80023f2:	61da      	str	r2, [r3, #28]
 80023f4:	4b35      	ldr	r3, [pc, #212]	@ (80024cc <HAL_DAC_MspInit+0x108>)
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	059b      	lsls	r3, r3, #22
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	4b32      	ldr	r3, [pc, #200]	@ (80024cc <HAL_DAC_MspInit+0x108>)
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	4b31      	ldr	r3, [pc, #196]	@ (80024cc <HAL_DAC_MspInit+0x108>)
 8002408:	2180      	movs	r1, #128	@ 0x80
 800240a:	0289      	lsls	r1, r1, #10
 800240c:	430a      	orrs	r2, r1
 800240e:	615a      	str	r2, [r3, #20]
 8002410:	4b2e      	ldr	r3, [pc, #184]	@ (80024cc <HAL_DAC_MspInit+0x108>)
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	029b      	lsls	r3, r3, #10
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800241e:	193b      	adds	r3, r7, r4
 8002420:	2210      	movs	r2, #16
 8002422:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002424:	193b      	adds	r3, r7, r4
 8002426:	2203      	movs	r2, #3
 8002428:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	193b      	adds	r3, r7, r4
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002430:	193a      	adds	r2, r7, r4
 8002432:	2390      	movs	r3, #144	@ 0x90
 8002434:	05db      	lsls	r3, r3, #23
 8002436:	0011      	movs	r1, r2
 8002438:	0018      	movs	r0, r3
 800243a:	f001 f86b 	bl	8003514 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800243e:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <HAL_DAC_MspInit+0x10c>)
 8002440:	4a24      	ldr	r2, [pc, #144]	@ (80024d4 <HAL_DAC_MspInit+0x110>)
 8002442:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002444:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <HAL_DAC_MspInit+0x10c>)
 8002446:	2210      	movs	r2, #16
 8002448:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800244a:	4b21      	ldr	r3, [pc, #132]	@ (80024d0 <HAL_DAC_MspInit+0x10c>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002450:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <HAL_DAC_MspInit+0x10c>)
 8002452:	2280      	movs	r2, #128	@ 0x80
 8002454:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002456:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <HAL_DAC_MspInit+0x10c>)
 8002458:	2280      	movs	r2, #128	@ 0x80
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800245e:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <HAL_DAC_MspInit+0x10c>)
 8002460:	2280      	movs	r2, #128	@ 0x80
 8002462:	0112      	lsls	r2, r2, #4
 8002464:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002466:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <HAL_DAC_MspInit+0x10c>)
 8002468:	2220      	movs	r2, #32
 800246a:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800246c:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <HAL_DAC_MspInit+0x10c>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002472:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <HAL_DAC_MspInit+0x10c>)
 8002474:	0018      	movs	r0, r3
 8002476:	f000 fe97 	bl	80031a8 <HAL_DMA_Init>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d001      	beq.n	8002482 <HAL_DAC_MspInit+0xbe>
    {
      Error_Handler();
 800247e:	f000 f9e7 	bl	8002850 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_DAC_CH1);
 8002482:	4a15      	ldr	r2, [pc, #84]	@ (80024d8 <HAL_DAC_MspInit+0x114>)
 8002484:	23a8      	movs	r3, #168	@ 0xa8
 8002486:	58d3      	ldr	r3, [r2, r3]
 8002488:	4913      	ldr	r1, [pc, #76]	@ (80024d8 <HAL_DAC_MspInit+0x114>)
 800248a:	4a14      	ldr	r2, [pc, #80]	@ (80024dc <HAL_DAC_MspInit+0x118>)
 800248c:	4013      	ands	r3, r2
 800248e:	22a8      	movs	r2, #168	@ 0xa8
 8002490:	508b      	str	r3, [r1, r2]
 8002492:	4a11      	ldr	r2, [pc, #68]	@ (80024d8 <HAL_DAC_MspInit+0x114>)
 8002494:	23a8      	movs	r3, #168	@ 0xa8
 8002496:	58d3      	ldr	r3, [r2, r3]
 8002498:	490f      	ldr	r1, [pc, #60]	@ (80024d8 <HAL_DAC_MspInit+0x114>)
 800249a:	2280      	movs	r2, #128	@ 0x80
 800249c:	0052      	lsls	r2, r2, #1
 800249e:	4313      	orrs	r3, r2
 80024a0:	22a8      	movs	r2, #168	@ 0xa8
 80024a2:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <HAL_DAC_MspInit+0x10c>)
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_DAC_MspInit+0x10c>)
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	2011      	movs	r0, #17
 80024b6:	f000 fc05 	bl	8002cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024ba:	2011      	movs	r0, #17
 80024bc:	f000 fc17 	bl	8002cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b00b      	add	sp, #44	@ 0x2c
 80024c6:	bd90      	pop	{r4, r7, pc}
 80024c8:	40007400 	.word	0x40007400
 80024cc:	40021000 	.word	0x40021000
 80024d0:	2000046c 	.word	0x2000046c
 80024d4:	40020030 	.word	0x40020030
 80024d8:	40020000 	.word	0x40020000
 80024dc:	fffff0ff 	.word	0xfffff0ff

080024e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <MX_DMA_Init+0x38>)
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <MX_DMA_Init+0x38>)
 80024ec:	2101      	movs	r1, #1
 80024ee:	430a      	orrs	r2, r1
 80024f0:	615a      	str	r2, [r3, #20]
 80024f2:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <MX_DMA_Init+0x38>)
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	2201      	movs	r2, #1
 80024f8:	4013      	ands	r3, r2
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2100      	movs	r1, #0
 8002502:	200a      	movs	r0, #10
 8002504:	f000 fbde 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8002508:	200a      	movs	r0, #10
 800250a:	f000 fbf0 	bl	8002cee <HAL_NVIC_EnableIRQ>

}
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b002      	add	sp, #8
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	40021000 	.word	0x40021000

0800251c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <MX_GPIO_Init+0x2c>)
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <MX_GPIO_Init+0x2c>)
 8002528:	2180      	movs	r1, #128	@ 0x80
 800252a:	0289      	lsls	r1, r1, #10
 800252c:	430a      	orrs	r2, r1
 800252e:	615a      	str	r2, [r3, #20]
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <MX_GPIO_Init+0x2c>)
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	4013      	ands	r3, r2
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]

}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	40021000 	.word	0x40021000

0800254c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002552:	f000 faa7 	bl	8002aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002556:	f000 f833 	bl	80025c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800255a:	f7ff ffdf 	bl	800251c <MX_GPIO_Init>
  MX_DMA_Init();
 800255e:	f7ff ffbf 	bl	80024e0 <MX_DMA_Init>
  MX_DAC_Init();
 8002562:	f7ff ff01 	bl	8002368 <MX_DAC_Init>
  MX_TIM6_Init();
 8002566:	f000 fa11 	bl	800298c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  uint32_t* data = audioCPFSK(input, BIT_STREAM_LEN, SAMPLE_FREQ);
 800256a:	2396      	movs	r3, #150	@ 0x96
 800256c:	021a      	lsls	r2, r3, #8
 800256e:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <main+0x64>)
 8002570:	2180      	movs	r1, #128	@ 0x80
 8002572:	0018      	movs	r0, r3
 8002574:	f000 f860 	bl	8002638 <audioCPFSK>
 8002578:	0003      	movs	r3, r0
 800257a:	607b      	str	r3, [r7, #4]


  HAL_TIM_Base_Start(&htim6);
 800257c:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <main+0x68>)
 800257e:	0018      	movs	r0, r3
 8002580:	f001 fe62 	bl	8004248 <HAL_TIM_Base_Start>
  if(HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)data, BIT_STREAM_LEN*STEPS, DAC_ALIGN_12B_R)== HAL_OK){
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	015b      	lsls	r3, r3, #5
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	480b      	ldr	r0, [pc, #44]	@ (80025b8 <main+0x6c>)
 800258c:	2100      	movs	r1, #0
 800258e:	9100      	str	r1, [sp, #0]
 8002590:	2100      	movs	r1, #0
 8002592:	f000 fc4f 	bl	8002e34 <HAL_DAC_Start_DMA>
 8002596:	1e03      	subs	r3, r0, #0
 8002598:	d007      	beq.n	80025aa <main+0x5e>
  }
  else {
	  errorValue = HAL_DAC_GetError(&hdac);
 800259a:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <main+0x6c>)
 800259c:	0018      	movs	r0, r3
 800259e:	f000 fbfe 	bl	8002d9e <HAL_DAC_GetError>
 80025a2:	0002      	movs	r2, r0
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <main+0x70>)
 80025a6:	601a      	str	r2, [r3, #0]
  }

  while(1){
 80025a8:	46c0      	nop			@ (mov r8, r8)
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	e7fd      	b.n	80025aa <main+0x5e>
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	20000000 	.word	0x20000000
 80025b4:	200004b8 	.word	0x200004b8
 80025b8:	20000458 	.word	0x20000458
 80025bc:	200004b0 	.word	0x200004b0

080025c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b093      	sub	sp, #76	@ 0x4c
 80025c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025c6:	2414      	movs	r4, #20
 80025c8:	193b      	adds	r3, r7, r4
 80025ca:	0018      	movs	r0, r3
 80025cc:	2334      	movs	r3, #52	@ 0x34
 80025ce:	001a      	movs	r2, r3
 80025d0:	2100      	movs	r1, #0
 80025d2:	f003 f917 	bl	8005804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	0018      	movs	r0, r3
 80025da:	2310      	movs	r3, #16
 80025dc:	001a      	movs	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	f003 f910 	bl	8005804 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	2220      	movs	r2, #32
 80025e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	2201      	movs	r2, #1
 80025ee:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025f0:	193b      	adds	r3, r7, r4
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f6:	193b      	adds	r3, r7, r4
 80025f8:	0018      	movs	r0, r3
 80025fa:	f001 f903 	bl	8003804 <HAL_RCC_OscConfig>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d001      	beq.n	8002606 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002602:	f000 f925 	bl	8002850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	2207      	movs	r2, #7
 800260a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2203      	movs	r2, #3
 8002610:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2101      	movs	r1, #1
 8002622:	0018      	movs	r0, r3
 8002624:	f001 fc74 	bl	8003f10 <HAL_RCC_ClockConfig>
 8002628:	1e03      	subs	r3, r0, #0
 800262a:	d001      	beq.n	8002630 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800262c:	f000 f910 	bl	8002850 <Error_Handler>
  }
}
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b013      	add	sp, #76	@ 0x4c
 8002636:	bd90      	pop	{r4, r7, pc}

08002638 <audioCPFSK>:

/* USER CODE BEGIN 4 */
uint32_t* audioCPFSK(int* bitstream, int bitstreamLength, int samplingFreq) {
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b094      	sub	sp, #80	@ 0x50
 800263c:	af00      	add	r7, sp, #0
 800263e:	61f8      	str	r0, [r7, #28]
 8002640:	61b9      	str	r1, [r7, #24]
 8002642:	617a      	str	r2, [r7, #20]
    int fCenter = 1700;
 8002644:	4b78      	ldr	r3, [pc, #480]	@ (8002828 <audioCPFSK+0x1f0>)
 8002646:	643b      	str	r3, [r7, #64]	@ 0x40
    int fDelta = 500;
 8002648:	23fa      	movs	r3, #250	@ 0xfa
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int bitrate = 1200;
 800264e:	2396      	movs	r3, #150	@ 0x96
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	63bb      	str	r3, [r7, #56]	@ 0x38
    int steps = samplingFreq / bitrate;
 8002654:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7fd fdde 	bl	8000218 <__divsi3>
 800265c:	0003      	movs	r3, r0
 800265e:	637b      	str	r3, [r7, #52]	@ 0x34
    int totalSamples = bitstreamLength * steps;
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002664:	4353      	muls	r3, r2
 8002666:	633b      	str	r3, [r7, #48]	@ 0x30
    //uint32_t dummy[16384] = {0};

    size_t size = (totalSamples * sizeof(uint32_t));
 8002668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint32_t* result = (uint32_t*)malloc(size);
 800266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002670:	0018      	movs	r0, r3
 8002672:	f003 f80b 	bl	800568c <malloc>
 8002676:	0003      	movs	r3, r0
 8002678:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Allocate memory for the output array
    //float* y = (float*)malloc(totalSamples * sizeof(float));



    if(result == NULL){
 800267a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <audioCPFSK+0x4c>
    	return NULL;
 8002680:	2300      	movs	r3, #0
 8002682:	e0cd      	b.n	8002820 <audioCPFSK+0x1e8>
    }

    //Convert bitstream to NRZ format
    for (int i = 0; i < bitstreamLength; i++) {
 8002684:	2300      	movs	r3, #0
 8002686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002688:	e00e      	b.n	80026a8 <audioCPFSK+0x70>
        bitstream[i] = bitstream[i] * 2 - 1;
 800268a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	18d3      	adds	r3, r2, r3
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	005a      	lsls	r2, r3, #1
 8002696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	69f9      	ldr	r1, [r7, #28]
 800269c:	18cb      	adds	r3, r1, r3
 800269e:	3a01      	subs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < bitstreamLength; i++) {
 80026a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026a4:	3301      	adds	r3, #1
 80026a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbec      	blt.n	800268a <audioCPFSK+0x52>
    }


    result[0] = 0;
 80026b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    float m = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	64bb      	str	r3, [r7, #72]	@ 0x48

    for (int i = 1; i < totalSamples; i++) {
 80026ba:	2301      	movs	r3, #1
 80026bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80026be:	e0a9      	b.n	8002814 <audioCPFSK+0x1dc>
        // Interpolate the bitstream to steps points per bit
        int index = (i + steps - 1) / steps;
 80026c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7fd fda4 	bl	8000218 <__divsi3>
 80026d0:	0003      	movs	r3, r0
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
        int indexPrev = (i - 1 + steps - 1) / steps;
 80026d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026da:	18d3      	adds	r3, r2, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fd fd99 	bl	8000218 <__divsi3>
 80026e6:	0003      	movs	r3, r0
 80026e8:	623b      	str	r3, [r7, #32]

        // Integration of the bitstream with trapezoidal rule
        m += (bitstream[indexPrev - 1] + bitstream[index - 1]) / 2.0;
 80026ea:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80026ec:	f7ff fd52 	bl	8002194 <__aeabi_f2d>
 80026f0:	0004      	movs	r4, r0
 80026f2:	000d      	movs	r5, r1
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	4a4d      	ldr	r2, [pc, #308]	@ (800282c <audioCPFSK+0x1f4>)
 80026f8:	4694      	mov	ip, r2
 80026fa:	4463      	add	r3, ip
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	18d3      	adds	r3, r2, r3
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	4949      	ldr	r1, [pc, #292]	@ (800282c <audioCPFSK+0x1f4>)
 8002708:	468c      	mov	ip, r1
 800270a:	4463      	add	r3, ip
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	69f9      	ldr	r1, [r7, #28]
 8002710:	18cb      	adds	r3, r1, r3
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	18d3      	adds	r3, r2, r3
 8002716:	0018      	movs	r0, r3
 8002718:	f7ff fd0e 	bl	8002138 <__aeabi_i2d>
 800271c:	2200      	movs	r2, #0
 800271e:	2380      	movs	r3, #128	@ 0x80
 8002720:	05db      	lsls	r3, r3, #23
 8002722:	f7fe fa25 	bl	8000b70 <__aeabi_ddiv>
 8002726:	0002      	movs	r2, r0
 8002728:	000b      	movs	r3, r1
 800272a:	0020      	movs	r0, r4
 800272c:	0029      	movs	r1, r5
 800272e:	f7fd febb 	bl	80004a8 <__aeabi_dadd>
 8002732:	0002      	movs	r2, r0
 8002734:	000b      	movs	r3, r1
 8002736:	0010      	movs	r0, r2
 8002738:	0019      	movs	r1, r3
 800273a:	f7ff fd73 	bl	8002224 <__aeabi_d2f>
 800273e:	1c03      	adds	r3, r0, #0
 8002740:	64bb      	str	r3, [r7, #72]	@ 0x48

        // FM Modulation
        result[i] = (uint32_t)(2047.5*(1+(cos(2 * M_PI * i * (fCenter / (double)samplingFreq) - 2 * M_PI * m * (fDelta / (double)samplingFreq)))));
 8002742:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002744:	f7ff fcf8 	bl	8002138 <__aeabi_i2d>
 8002748:	4a39      	ldr	r2, [pc, #228]	@ (8002830 <audioCPFSK+0x1f8>)
 800274a:	4b3a      	ldr	r3, [pc, #232]	@ (8002834 <audioCPFSK+0x1fc>)
 800274c:	f7fe fe54 	bl	80013f8 <__aeabi_dmul>
 8002750:	0002      	movs	r2, r0
 8002752:	000b      	movs	r3, r1
 8002754:	60ba      	str	r2, [r7, #8]
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800275a:	f7ff fced 	bl	8002138 <__aeabi_i2d>
 800275e:	0004      	movs	r4, r0
 8002760:	000d      	movs	r5, r1
 8002762:	6978      	ldr	r0, [r7, #20]
 8002764:	f7ff fce8 	bl	8002138 <__aeabi_i2d>
 8002768:	0002      	movs	r2, r0
 800276a:	000b      	movs	r3, r1
 800276c:	0020      	movs	r0, r4
 800276e:	0029      	movs	r1, r5
 8002770:	f7fe f9fe 	bl	8000b70 <__aeabi_ddiv>
 8002774:	0002      	movs	r2, r0
 8002776:	000b      	movs	r3, r1
 8002778:	68b8      	ldr	r0, [r7, #8]
 800277a:	68f9      	ldr	r1, [r7, #12]
 800277c:	f7fe fe3c 	bl	80013f8 <__aeabi_dmul>
 8002780:	0002      	movs	r2, r0
 8002782:	000b      	movs	r3, r1
 8002784:	60ba      	str	r2, [r7, #8]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800278a:	f7ff fd03 	bl	8002194 <__aeabi_f2d>
 800278e:	4a28      	ldr	r2, [pc, #160]	@ (8002830 <audioCPFSK+0x1f8>)
 8002790:	4b28      	ldr	r3, [pc, #160]	@ (8002834 <audioCPFSK+0x1fc>)
 8002792:	f7fe fe31 	bl	80013f8 <__aeabi_dmul>
 8002796:	0002      	movs	r2, r0
 8002798:	000b      	movs	r3, r1
 800279a:	603a      	str	r2, [r7, #0]
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80027a0:	f7ff fcca 	bl	8002138 <__aeabi_i2d>
 80027a4:	0004      	movs	r4, r0
 80027a6:	000d      	movs	r5, r1
 80027a8:	6978      	ldr	r0, [r7, #20]
 80027aa:	f7ff fcc5 	bl	8002138 <__aeabi_i2d>
 80027ae:	0002      	movs	r2, r0
 80027b0:	000b      	movs	r3, r1
 80027b2:	0020      	movs	r0, r4
 80027b4:	0029      	movs	r1, r5
 80027b6:	f7fe f9db 	bl	8000b70 <__aeabi_ddiv>
 80027ba:	0002      	movs	r2, r0
 80027bc:	000b      	movs	r3, r1
 80027be:	6838      	ldr	r0, [r7, #0]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	f7fe fe19 	bl	80013f8 <__aeabi_dmul>
 80027c6:	0002      	movs	r2, r0
 80027c8:	000b      	movs	r3, r1
 80027ca:	68b8      	ldr	r0, [r7, #8]
 80027cc:	68f9      	ldr	r1, [r7, #12]
 80027ce:	f7ff f8db 	bl	8001988 <__aeabi_dsub>
 80027d2:	0002      	movs	r2, r0
 80027d4:	000b      	movs	r3, r1
 80027d6:	0010      	movs	r0, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	f001 ff91 	bl	8004700 <cos>
 80027de:	2200      	movs	r2, #0
 80027e0:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <audioCPFSK+0x200>)
 80027e2:	f7fd fe61 	bl	80004a8 <__aeabi_dadd>
 80027e6:	0002      	movs	r2, r0
 80027e8:	000b      	movs	r3, r1
 80027ea:	0010      	movs	r0, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	2200      	movs	r2, #0
 80027f0:	4b12      	ldr	r3, [pc, #72]	@ (800283c <audioCPFSK+0x204>)
 80027f2:	f7fe fe01 	bl	80013f8 <__aeabi_dmul>
 80027f6:	0002      	movs	r2, r0
 80027f8:	000b      	movs	r3, r1
 80027fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80027fc:	0089      	lsls	r1, r1, #2
 80027fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002800:	1844      	adds	r4, r0, r1
 8002802:	0010      	movs	r0, r2
 8002804:	0019      	movs	r1, r3
 8002806:	f7fd fe31 	bl	800046c <__aeabi_d2uiz>
 800280a:	0003      	movs	r3, r0
 800280c:	6023      	str	r3, [r4, #0]
    for (int i = 1; i < totalSamples; i++) {
 800280e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002810:	3301      	adds	r3, #1
 8002812:	647b      	str	r3, [r7, #68]	@ 0x44
 8002814:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002818:	429a      	cmp	r2, r3
 800281a:	da00      	bge.n	800281e <audioCPFSK+0x1e6>
 800281c:	e750      	b.n	80026c0 <audioCPFSK+0x88>
        //result[i] = ((result[i]+1) * 2047);

    }


    return result;
 800281e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b014      	add	sp, #80	@ 0x50
 8002826:	bdb0      	pop	{r4, r5, r7, pc}
 8002828:	000006a4 	.word	0x000006a4
 800282c:	3fffffff 	.word	0x3fffffff
 8002830:	54442d18 	.word	0x54442d18
 8002834:	401921fb 	.word	0x401921fb
 8002838:	3ff00000 	.word	0x3ff00000
 800283c:	409ffe00 	.word	0x409ffe00

08002840 <HAL_DAC_ConvCpltCallbackCh1>:
   // *outputLength = totalSamples;




void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]


	//HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*) sine_wave_array, 32,DAC_ALIGN_12B_R);

}
 8002848:	46c0      	nop			@ (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}

08002850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002854:	b672      	cpsid	i
}
 8002856:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002858:	46c0      	nop			@ (mov r8, r8)
 800285a:	e7fd      	b.n	8002858 <Error_Handler+0x8>

0800285c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <HAL_MspInit+0x44>)
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_MspInit+0x44>)
 8002868:	2101      	movs	r1, #1
 800286a:	430a      	orrs	r2, r1
 800286c:	619a      	str	r2, [r3, #24]
 800286e:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <HAL_MspInit+0x44>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2201      	movs	r2, #1
 8002874:	4013      	ands	r3, r2
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <HAL_MspInit+0x44>)
 800287c:	69da      	ldr	r2, [r3, #28]
 800287e:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <HAL_MspInit+0x44>)
 8002880:	2180      	movs	r1, #128	@ 0x80
 8002882:	0549      	lsls	r1, r1, #21
 8002884:	430a      	orrs	r2, r1
 8002886:	61da      	str	r2, [r3, #28]
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <HAL_MspInit+0x44>)
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	055b      	lsls	r3, r3, #21
 8002890:	4013      	ands	r3, r2
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b002      	add	sp, #8
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	40021000 	.word	0x40021000

080028a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028a8:	46c0      	nop			@ (mov r8, r8)
 80028aa:	e7fd      	b.n	80028a8 <NMI_Handler+0x4>

080028ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b0:	46c0      	nop			@ (mov r8, r8)
 80028b2:	e7fd      	b.n	80028b0 <HardFault_Handler+0x4>

080028b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028b8:	46c0      	nop			@ (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028cc:	f000 f932 	bl	8002b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d0:	46c0      	nop			@ (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80028dc:	4b03      	ldr	r3, [pc, #12]	@ (80028ec <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 fd10 	bl	8003304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 80028e4:	46c0      	nop			@ (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	2000046c 	.word	0x2000046c

080028f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028f4:	4b05      	ldr	r3, [pc, #20]	@ (800290c <TIM6_DAC_IRQHandler+0x1c>)
 80028f6:	0018      	movs	r0, r3
 80028f8:	f001 fcf0 	bl	80042dc <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 80028fc:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <TIM6_DAC_IRQHandler+0x20>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 fb58 	bl	8002fb4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002904:	46c0      	nop			@ (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	200004b8 	.word	0x200004b8
 8002910:	20000458 	.word	0x20000458

08002914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800291c:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <_sbrk+0x5c>)
 800291e:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <_sbrk+0x60>)
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <_sbrk+0x64>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <_sbrk+0x64>)
 8002932:	4a12      	ldr	r2, [pc, #72]	@ (800297c <_sbrk+0x68>)
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	18d3      	adds	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	d207      	bcs.n	8002954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002944:	f002 ff78 	bl	8005838 <__errno>
 8002948:	0003      	movs	r3, r0
 800294a:	220c      	movs	r2, #12
 800294c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294e:	2301      	movs	r3, #1
 8002950:	425b      	negs	r3, r3
 8002952:	e009      	b.n	8002968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002954:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800295a:	4b07      	ldr	r3, [pc, #28]	@ (8002978 <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	18d2      	adds	r2, r2, r3
 8002962:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <_sbrk+0x64>)
 8002964:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b006      	add	sp, #24
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20008000 	.word	0x20008000
 8002974:	00000400 	.word	0x00000400
 8002978:	200004b4 	.word	0x200004b4
 800297c:	20000650 	.word	0x20000650

08002980 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002984:	46c0      	nop			@ (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002992:	003b      	movs	r3, r7
 8002994:	0018      	movs	r0, r3
 8002996:	2308      	movs	r3, #8
 8002998:	001a      	movs	r2, r3
 800299a:	2100      	movs	r1, #0
 800299c:	f002 ff32 	bl	8005804 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80029a0:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <MX_TIM6_Init+0x6c>)
 80029a2:	4a16      	ldr	r2, [pc, #88]	@ (80029fc <MX_TIM6_Init+0x70>)
 80029a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 625;
 80029a6:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <MX_TIM6_Init+0x6c>)
 80029a8:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <MX_TIM6_Init+0x74>)
 80029aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ac:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <MX_TIM6_Init+0x6c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80029b2:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <MX_TIM6_Init+0x6c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029b8:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <MX_TIM6_Init+0x6c>)
 80029ba:	2280      	movs	r2, #128	@ 0x80
 80029bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029be:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <MX_TIM6_Init+0x6c>)
 80029c0:	0018      	movs	r0, r3
 80029c2:	f001 fbf1 	bl	80041a8 <HAL_TIM_Base_Init>
 80029c6:	1e03      	subs	r3, r0, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80029ca:	f7ff ff41 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029ce:	003b      	movs	r3, r7
 80029d0:	2220      	movs	r2, #32
 80029d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d4:	003b      	movs	r3, r7
 80029d6:	2200      	movs	r2, #0
 80029d8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029da:	003a      	movs	r2, r7
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <MX_TIM6_Init+0x6c>)
 80029de:	0011      	movs	r1, r2
 80029e0:	0018      	movs	r0, r3
 80029e2:	f001 fe1f 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 80029e6:	1e03      	subs	r3, r0, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80029ea:	f7ff ff31 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	200004b8 	.word	0x200004b8
 80029fc:	40001000 	.word	0x40001000
 8002a00:	00000271 	.word	0x00000271

08002a04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0d      	ldr	r2, [pc, #52]	@ (8002a48 <HAL_TIM_Base_MspInit+0x44>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d113      	bne.n	8002a3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a16:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <HAL_TIM_Base_MspInit+0x48>)
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <HAL_TIM_Base_MspInit+0x48>)
 8002a1c:	2110      	movs	r1, #16
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	61da      	str	r2, [r3, #28]
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_TIM_Base_MspInit+0x48>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	2210      	movs	r2, #16
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	2011      	movs	r0, #17
 8002a34:	f000 f946 	bl	8002cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a38:	2011      	movs	r0, #17
 8002a3a:	f000 f958 	bl	8002cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b004      	add	sp, #16
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	40001000 	.word	0x40001000
 8002a4c:	40021000 	.word	0x40021000

08002a50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a50:	480d      	ldr	r0, [pc, #52]	@ (8002a88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a52:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a54:	f7ff ff94 	bl	8002980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a58:	480c      	ldr	r0, [pc, #48]	@ (8002a8c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a5a:	490d      	ldr	r1, [pc, #52]	@ (8002a90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a94 <LoopForever+0xe>)
  movs r3, #0
 8002a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a60:	e002      	b.n	8002a68 <LoopCopyDataInit>

08002a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a66:	3304      	adds	r3, #4

08002a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a6c:	d3f9      	bcc.n	8002a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a70:	4c0a      	ldr	r4, [pc, #40]	@ (8002a9c <LoopForever+0x16>)
  movs r3, #0
 8002a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a74:	e001      	b.n	8002a7a <LoopFillZerobss>

08002a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a78:	3204      	adds	r2, #4

08002a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a7c:	d3fb      	bcc.n	8002a76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a7e:	f002 fee1 	bl	8005844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a82:	f7ff fd63 	bl	800254c <main>

08002a86 <LoopForever>:

LoopForever:
    b LoopForever
 8002a86:	e7fe      	b.n	8002a86 <LoopForever>
  ldr   r0, =_estack
 8002a88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a90:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8002a94:	08005af8 	.word	0x08005af8
  ldr r2, =_sbss
 8002a98:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 8002a9c:	2000064c 	.word	0x2000064c

08002aa0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002aa0:	e7fe      	b.n	8002aa0 <ADC1_COMP_IRQHandler>
	...

08002aa4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa8:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <HAL_Init+0x24>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_Init+0x24>)
 8002aae:	2110      	movs	r1, #16
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f000 f809 	bl	8002acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aba:	f7ff fecf 	bl	800285c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	40022000 	.word	0x40022000

08002acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad4:	4b14      	ldr	r3, [pc, #80]	@ (8002b28 <HAL_InitTick+0x5c>)
 8002ad6:	681c      	ldr	r4, [r3, #0]
 8002ad8:	4b14      	ldr	r3, [pc, #80]	@ (8002b2c <HAL_InitTick+0x60>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	0019      	movs	r1, r3
 8002ade:	23fa      	movs	r3, #250	@ 0xfa
 8002ae0:	0098      	lsls	r0, r3, #2
 8002ae2:	f7fd fb0f 	bl	8000104 <__udivsi3>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	0019      	movs	r1, r3
 8002aea:	0020      	movs	r0, r4
 8002aec:	f7fd fb0a 	bl	8000104 <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f90b 	bl	8002d0e <HAL_SYSTICK_Config>
 8002af8:	1e03      	subs	r3, r0, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e00f      	b.n	8002b20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d80b      	bhi.n	8002b1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	425b      	negs	r3, r3
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f000 f8d8 	bl	8002cc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_InitTick+0x64>)
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b003      	add	sp, #12
 8002b26:	bd90      	pop	{r4, r7, pc}
 8002b28:	200003e0 	.word	0x200003e0
 8002b2c:	200003e8 	.word	0x200003e8
 8002b30:	200003e4 	.word	0x200003e4

08002b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_IncTick+0x1c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_IncTick+0x20>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	18d2      	adds	r2, r2, r3
 8002b44:	4b03      	ldr	r3, [pc, #12]	@ (8002b54 <HAL_IncTick+0x20>)
 8002b46:	601a      	str	r2, [r3, #0]
}
 8002b48:	46c0      	nop			@ (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	200003e8 	.word	0x200003e8
 8002b54:	20000500 	.word	0x20000500

08002b58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b02      	ldr	r3, [pc, #8]	@ (8002b68 <HAL_GetTick+0x10>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	20000500 	.word	0x20000500

08002b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	0002      	movs	r2, r0
 8002b74:	1dfb      	adds	r3, r7, #7
 8002b76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b78:	1dfb      	adds	r3, r7, #7
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b7e:	d809      	bhi.n	8002b94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	001a      	movs	r2, r3
 8002b86:	231f      	movs	r3, #31
 8002b88:	401a      	ands	r2, r3
 8002b8a:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <__NVIC_EnableIRQ+0x30>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4091      	lsls	r1, r2
 8002b90:	000a      	movs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]
  }
}
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	1dfb      	adds	r3, r7, #7
 8002bac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bae:	1dfb      	adds	r3, r7, #7
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bb4:	d828      	bhi.n	8002c08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8002c74 <__NVIC_SetPriority+0xd4>)
 8002bb8:	1dfb      	adds	r3, r7, #7
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	33c0      	adds	r3, #192	@ 0xc0
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	589b      	ldr	r3, [r3, r2]
 8002bc6:	1dfa      	adds	r2, r7, #7
 8002bc8:	7812      	ldrb	r2, [r2, #0]
 8002bca:	0011      	movs	r1, r2
 8002bcc:	2203      	movs	r2, #3
 8002bce:	400a      	ands	r2, r1
 8002bd0:	00d2      	lsls	r2, r2, #3
 8002bd2:	21ff      	movs	r1, #255	@ 0xff
 8002bd4:	4091      	lsls	r1, r2
 8002bd6:	000a      	movs	r2, r1
 8002bd8:	43d2      	mvns	r2, r2
 8002bda:	401a      	ands	r2, r3
 8002bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	019b      	lsls	r3, r3, #6
 8002be2:	22ff      	movs	r2, #255	@ 0xff
 8002be4:	401a      	ands	r2, r3
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	0018      	movs	r0, r3
 8002bec:	2303      	movs	r3, #3
 8002bee:	4003      	ands	r3, r0
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bf4:	481f      	ldr	r0, [pc, #124]	@ (8002c74 <__NVIC_SetPriority+0xd4>)
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b25b      	sxtb	r3, r3
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	33c0      	adds	r3, #192	@ 0xc0
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c06:	e031      	b.n	8002c6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c08:	4a1b      	ldr	r2, [pc, #108]	@ (8002c78 <__NVIC_SetPriority+0xd8>)
 8002c0a:	1dfb      	adds	r3, r7, #7
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	0019      	movs	r1, r3
 8002c10:	230f      	movs	r3, #15
 8002c12:	400b      	ands	r3, r1
 8002c14:	3b08      	subs	r3, #8
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3306      	adds	r3, #6
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	18d3      	adds	r3, r2, r3
 8002c1e:	3304      	adds	r3, #4
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	1dfa      	adds	r2, r7, #7
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	0011      	movs	r1, r2
 8002c28:	2203      	movs	r2, #3
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	00d2      	lsls	r2, r2, #3
 8002c2e:	21ff      	movs	r1, #255	@ 0xff
 8002c30:	4091      	lsls	r1, r2
 8002c32:	000a      	movs	r2, r1
 8002c34:	43d2      	mvns	r2, r2
 8002c36:	401a      	ands	r2, r3
 8002c38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	019b      	lsls	r3, r3, #6
 8002c3e:	22ff      	movs	r2, #255	@ 0xff
 8002c40:	401a      	ands	r2, r3
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	0018      	movs	r0, r3
 8002c48:	2303      	movs	r3, #3
 8002c4a:	4003      	ands	r3, r0
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c50:	4809      	ldr	r0, [pc, #36]	@ (8002c78 <__NVIC_SetPriority+0xd8>)
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	001c      	movs	r4, r3
 8002c58:	230f      	movs	r3, #15
 8002c5a:	4023      	ands	r3, r4
 8002c5c:	3b08      	subs	r3, #8
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	430a      	orrs	r2, r1
 8002c62:	3306      	adds	r3, #6
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	18c3      	adds	r3, r0, r3
 8002c68:	3304      	adds	r3, #4
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b003      	add	sp, #12
 8002c72:	bd90      	pop	{r4, r7, pc}
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	1e5a      	subs	r2, r3, #1
 8002c88:	2380      	movs	r3, #128	@ 0x80
 8002c8a:	045b      	lsls	r3, r3, #17
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d301      	bcc.n	8002c94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c90:	2301      	movs	r3, #1
 8002c92:	e010      	b.n	8002cb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c94:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc0 <SysTick_Config+0x44>)
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	425b      	negs	r3, r3
 8002ca0:	2103      	movs	r1, #3
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff ff7c 	bl	8002ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca8:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <SysTick_Config+0x44>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cae:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <SysTick_Config+0x44>)
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b002      	add	sp, #8
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	e000e010 	.word	0xe000e010

08002cc4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	210f      	movs	r1, #15
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	1c02      	adds	r2, r0, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	0011      	movs	r1, r2
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7ff ff5d 	bl	8002ba0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002ce6:	46c0      	nop			@ (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b004      	add	sp, #16
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfa:	1dfb      	adds	r3, r7, #7
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7ff ff33 	bl	8002b6c <__NVIC_EnableIRQ>
}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b002      	add	sp, #8
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7ff ffaf 	bl	8002c7c <SysTick_Config>
 8002d1e:	0003      	movs	r3, r0
}
 8002d20:	0018      	movs	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b002      	add	sp, #8
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e015      	b.n	8002d66 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	791b      	ldrb	r3, [r3, #4]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7ff fb39 	bl	80023c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b002      	add	sp, #8
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b002      	add	sp, #8
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b002      	add	sp, #8
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	795b      	ldrb	r3, [r3, #5]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_DAC_ConfigChannel+0x20>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e029      	b.n	8002e28 <HAL_DAC_ConfigChannel+0x74>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002de8:	4a11      	ldr	r2, [pc, #68]	@ (8002e30 <HAL_DAC_ConfigChannel+0x7c>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	409a      	lsls	r2, r3
 8002dee:	0013      	movs	r3, r2
 8002df0:	43da      	mvns	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	4013      	ands	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	0013      	movs	r3, r2
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b006      	add	sp, #24
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	00000ffe 	.word	0x00000ffe

08002e34 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	795b      	ldrb	r3, [r3, #5]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_DAC_Start_DMA+0x1e>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e09f      	b.n	8002f92 <HAL_DAC_Start_DMA+0x15e>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	711a      	strb	r2, [r3, #4]
  
  if(Channel == DAC_CHANNEL_1)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d130      	bne.n	8002ec6 <HAL_DAC_Start_DMA+0x92>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a4c      	ldr	r2, [pc, #304]	@ (8002f9c <HAL_DAC_Start_DMA+0x168>)
 8002e6a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa0 <HAL_DAC_Start_DMA+0x16c>)
 8002e72:	62da      	str	r2, [r3, #44]	@ 0x2c
       
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa4 <HAL_DAC_Start_DMA+0x170>)
 8002e7a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2180      	movs	r1, #128	@ 0x80
 8002e88:	0149      	lsls	r1, r1, #5
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d013      	beq.n	8002ebc <HAL_DAC_Start_DMA+0x88>
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d846      	bhi.n	8002f28 <HAL_DAC_Start_DMA+0xf4>
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_DAC_Start_DMA+0x74>
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d005      	beq.n	8002eb2 <HAL_DAC_Start_DMA+0x7e>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002ea6:	e03f      	b.n	8002f28 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3308      	adds	r3, #8
 8002eae:	617b      	str	r3, [r7, #20]
        break;
 8002eb0:	e03d      	b.n	8002f2e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	617b      	str	r3, [r7, #20]
        break;
 8002eba:	e038      	b.n	8002f2e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	617b      	str	r3, [r7, #20]
        break;
 8002ec4:	e033      	b.n	8002f2e <HAL_DAC_Start_DMA+0xfa>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4a37      	ldr	r2, [pc, #220]	@ (8002fa8 <HAL_DAC_Start_DMA+0x174>)
 8002ecc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4a36      	ldr	r2, [pc, #216]	@ (8002fac <HAL_DAC_Start_DMA+0x178>)
 8002ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	4a35      	ldr	r2, [pc, #212]	@ (8002fb0 <HAL_DAC_Start_DMA+0x17c>)
 8002edc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2180      	movs	r1, #128	@ 0x80
 8002eea:	0549      	lsls	r1, r1, #21
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 2 */
    switch(Alignment)
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d013      	beq.n	8002f1e <HAL_DAC_Start_DMA+0xea>
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d817      	bhi.n	8002f2c <HAL_DAC_Start_DMA+0xf8>
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_DAC_Start_DMA+0xd6>
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d005      	beq.n	8002f14 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002f08:	e010      	b.n	8002f2c <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3314      	adds	r3, #20
 8002f10:	617b      	str	r3, [r7, #20]
        break;
 8002f12:	e00c      	b.n	8002f2e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3318      	adds	r3, #24
 8002f1a:	617b      	str	r3, [r7, #20]
        break;
 8002f1c:	e007      	b.n	8002f2e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	331c      	adds	r3, #28
 8002f24:	617b      	str	r3, [r7, #20]
        break;
 8002f26:	e002      	b.n	8002f2e <HAL_DAC_Start_DMA+0xfa>
        break;
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	e000      	b.n	8002f2e <HAL_DAC_Start_DMA+0xfa>
        break;
 8002f2c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d110      	bne.n	8002f56 <HAL_DAC_Start_DMA+0x122>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2180      	movs	r1, #128	@ 0x80
 8002f40:	0189      	lsls	r1, r1, #6
 8002f42:	430a      	orrs	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6898      	ldr	r0, [r3, #8]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	f000 f972 	bl	8003238 <HAL_DMA_Start_IT>
 8002f54:	e00f      	b.n	8002f76 <HAL_DAC_Start_DMA+0x142>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2180      	movs	r1, #128	@ 0x80
 8002f62:	0589      	lsls	r1, r1, #22
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68d8      	ldr	r0, [r3, #12]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	f000 f961 	bl	8003238 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6819      	ldr	r1, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	409a      	lsls	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b006      	add	sp, #24
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	08003085 	.word	0x08003085
 8002fa0:	080030a9 	.word	0x080030a9
 8002fa4:	080030c7 	.word	0x080030c7
 8002fa8:	080030f7 	.word	0x080030f7
 8002fac:	0800311b 	.word	0x0800311b
 8002fb0:	08003139 	.word	0x08003139

08002fb4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	@ 0x80
 8002fc4:	019b      	lsls	r3, r3, #6
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	019b      	lsls	r3, r3, #6
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d123      	bne.n	8003018 <HAL_DAC_IRQHandler+0x64>
  { 
    /* Check underrun channel 1 flag */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fd6:	2380      	movs	r3, #128	@ 0x80
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	401a      	ands	r2, r3
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	019b      	lsls	r3, r3, #6
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d119      	bne.n	8003018 <HAL_DAC_IRQHandler+0x64>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel1 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2280      	movs	r2, #128	@ 0x80
 8002ffc:	0192      	lsls	r2, r2, #6
 8002ffe:	635a      	str	r2, [r3, #52]	@ 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	491c      	ldr	r1, [pc, #112]	@ (800307c <HAL_DAC_IRQHandler+0xc8>)
 800300c:	400a      	ands	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f7ff febb 	bl	8002d8e <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	2380      	movs	r3, #128	@ 0x80
 8003020:	059b      	lsls	r3, r3, #22
 8003022:	401a      	ands	r2, r3
 8003024:	2380      	movs	r3, #128	@ 0x80
 8003026:	059b      	lsls	r3, r3, #22
 8003028:	429a      	cmp	r2, r3
 800302a:	d123      	bne.n	8003074 <HAL_DAC_IRQHandler+0xc0>
  {
    /* Check underrun channel 2 flag */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003032:	2380      	movs	r3, #128	@ 0x80
 8003034:	059b      	lsls	r3, r3, #22
 8003036:	401a      	ands	r2, r3
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	059b      	lsls	r3, r3, #22
 800303c:	429a      	cmp	r2, r3
 800303e:	d119      	bne.n	8003074 <HAL_DAC_IRQHandler+0xc0>
    { 
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2204      	movs	r2, #4
 8003044:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2202      	movs	r2, #2
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2280      	movs	r2, #128	@ 0x80
 8003058:	0592      	lsls	r2, r2, #22
 800305a:	635a      	str	r2, [r3, #52]	@ 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4906      	ldr	r1, [pc, #24]	@ (8003080 <HAL_DAC_IRQHandler+0xcc>)
 8003068:	400a      	ands	r2, r1
 800306a:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	0018      	movs	r0, r3
 8003070:	f000 f892 	bl	8003198 <HAL_DACEx_DMAUnderrunCallbackCh2>
    }
  }
}
 8003074:	46c0      	nop			@ (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b002      	add	sp, #8
 800307a:	bd80      	pop	{r7, pc}
 800307c:	ffffefff 	.word	0xffffefff
 8003080:	efffffff 	.word	0xefffffff

08003084 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	60fb      	str	r3, [r7, #12]
  
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	0018      	movs	r0, r3
 8003096:	f7ff fbd3 	bl	8002840 <HAL_DAC_ConvCpltCallbackCh1>
  
  hdac->State= HAL_DAC_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	711a      	strb	r2, [r3, #4]
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b004      	add	sp, #16
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7ff fe58 	bl	8002d6e <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b004      	add	sp, #16
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	2204      	movs	r2, #4
 80030da:	431a      	orrs	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	611a      	str	r2, [r3, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7ff fe4b 	bl	8002d7e <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	711a      	strb	r2, [r3, #4]
}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b004      	add	sp, #16
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	0018      	movs	r0, r3
 8003108:	f000 f82e 	bl	8003168 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	711a      	strb	r2, [r3, #4]
}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b004      	add	sp, #16
 8003118:	bd80      	pop	{r7, pc}

0800311a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	0018      	movs	r0, r3
 800312c:	f000 f824 	bl	8003178 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8003130:	46c0      	nop			@ (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	b004      	add	sp, #16
 8003136:	bd80      	pop	{r7, pc}

08003138 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2204      	movs	r2, #4
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0018      	movs	r0, r3
 8003156:	f000 f817 	bl	8003188 <HAL_DACEx_ErrorCallbackCh2>
#endif 
  hdac->State= HAL_DAC_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	711a      	strb	r2, [r3, #4]
}
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b004      	add	sp, #16
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8003170:	46c0      	nop			@ (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003180:	46c0      	nop			@ (mov r8, r8)
 8003182:	46bd      	mov	sp, r7
 8003184:	b002      	add	sp, #8
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003190:	46c0      	nop			@ (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e036      	b.n	800322c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2221      	movs	r2, #33	@ 0x21
 80031c2:	2102      	movs	r1, #2
 80031c4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a18      	ldr	r2, [pc, #96]	@ (8003234 <HAL_DMA_Init+0x8c>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f946 	bl	80034a0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2221      	movs	r2, #33	@ 0x21
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	2100      	movs	r1, #0
 8003228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b004      	add	sp, #16
 8003232:	bd80      	pop	{r7, pc}
 8003234:	ffffc00f 	.word	0xffffc00f

08003238 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003246:	2317      	movs	r3, #23
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	5c9b      	ldrb	r3, [r3, r2]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_DMA_Start_IT+0x24>
 8003258:	2302      	movs	r3, #2
 800325a:	e04f      	b.n	80032fc <HAL_DMA_Start_IT+0xc4>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	2101      	movs	r1, #1
 8003262:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2221      	movs	r2, #33	@ 0x21
 8003268:	5c9b      	ldrb	r3, [r3, r2]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d13a      	bne.n	80032e6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2221      	movs	r2, #33	@ 0x21
 8003274:	2102      	movs	r1, #2
 8003276:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2101      	movs	r1, #1
 800328a:	438a      	bics	r2, r1
 800328c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f8d7 	bl	8003448 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	210e      	movs	r1, #14
 80032ae:	430a      	orrs	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e00f      	b.n	80032d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	210a      	movs	r1, #10
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2104      	movs	r1, #4
 80032d0:	438a      	bics	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2101      	movs	r1, #1
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e007      	b.n	80032f6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	2100      	movs	r1, #0
 80032ec:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80032ee:	2317      	movs	r3, #23
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2202      	movs	r2, #2
 80032f4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80032f6:	2317      	movs	r3, #23
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	781b      	ldrb	r3, [r3, #0]
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b006      	add	sp, #24
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	2204      	movs	r2, #4
 8003322:	409a      	lsls	r2, r3
 8003324:	0013      	movs	r3, r2
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4013      	ands	r3, r2
 800332a:	d024      	beq.n	8003376 <HAL_DMA_IRQHandler+0x72>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2204      	movs	r2, #4
 8003330:	4013      	ands	r3, r2
 8003332:	d020      	beq.n	8003376 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2220      	movs	r2, #32
 800333c:	4013      	ands	r3, r2
 800333e:	d107      	bne.n	8003350 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2104      	movs	r1, #4
 800334c:	438a      	bics	r2, r1
 800334e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003358:	2104      	movs	r1, #4
 800335a:	4091      	lsls	r1, r2
 800335c:	000a      	movs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d100      	bne.n	800336a <HAL_DMA_IRQHandler+0x66>
 8003368:	e06a      	b.n	8003440 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	0010      	movs	r0, r2
 8003372:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003374:	e064      	b.n	8003440 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	2202      	movs	r2, #2
 800337c:	409a      	lsls	r2, r3
 800337e:	0013      	movs	r3, r2
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	d02b      	beq.n	80033de <HAL_DMA_IRQHandler+0xda>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2202      	movs	r2, #2
 800338a:	4013      	ands	r3, r2
 800338c:	d027      	beq.n	80033de <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2220      	movs	r2, #32
 8003396:	4013      	ands	r3, r2
 8003398:	d10b      	bne.n	80033b2 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	210a      	movs	r1, #10
 80033a6:	438a      	bics	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2221      	movs	r2, #33	@ 0x21
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ba:	2102      	movs	r1, #2
 80033bc:	4091      	lsls	r1, r2
 80033be:	000a      	movs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	2100      	movs	r1, #0
 80033c8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d036      	beq.n	8003440 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	0010      	movs	r0, r2
 80033da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033dc:	e030      	b.n	8003440 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	2208      	movs	r2, #8
 80033e4:	409a      	lsls	r2, r3
 80033e6:	0013      	movs	r3, r2
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	d028      	beq.n	8003440 <HAL_DMA_IRQHandler+0x13c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2208      	movs	r2, #8
 80033f2:	4013      	ands	r3, r2
 80033f4:	d024      	beq.n	8003440 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	210e      	movs	r1, #14
 8003402:	438a      	bics	r2, r1
 8003404:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340e:	2101      	movs	r1, #1
 8003410:	4091      	lsls	r1, r2
 8003412:	000a      	movs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2221      	movs	r2, #33	@ 0x21
 8003420:	2101      	movs	r1, #1
 8003422:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	2100      	movs	r1, #0
 800342a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	0010      	movs	r0, r2
 800343c:	4798      	blx	r3
    }
  }
}
 800343e:	e7ff      	b.n	8003440 <HAL_DMA_IRQHandler+0x13c>
 8003440:	46c0      	nop			@ (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b004      	add	sp, #16
 8003446:	bd80      	pop	{r7, pc}

08003448 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345e:	2101      	movs	r1, #1
 8003460:	4091      	lsls	r1, r2
 8003462:	000a      	movs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b10      	cmp	r3, #16
 8003474:	d108      	bne.n	8003488 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003486:	e007      	b.n	8003498 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	60da      	str	r2, [r3, #12]
}
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b004      	add	sp, #16
 800349e:	bd80      	pop	{r7, pc}

080034a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	001a      	movs	r2, r3
 80034ae:	4b14      	ldr	r3, [pc, #80]	@ (8003500 <DMA_CalcBaseAndBitshift+0x60>)
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d810      	bhi.n	80034d6 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a12      	ldr	r2, [pc, #72]	@ (8003504 <DMA_CalcBaseAndBitshift+0x64>)
 80034ba:	4694      	mov	ip, r2
 80034bc:	4463      	add	r3, ip
 80034be:	2114      	movs	r1, #20
 80034c0:	0018      	movs	r0, r3
 80034c2:	f7fc fe1f 	bl	8000104 <__udivsi3>
 80034c6:	0003      	movs	r3, r0
 80034c8:	009a      	lsls	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003508 <DMA_CalcBaseAndBitshift+0x68>)
 80034d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80034d4:	e00f      	b.n	80034f6 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a0c      	ldr	r2, [pc, #48]	@ (800350c <DMA_CalcBaseAndBitshift+0x6c>)
 80034dc:	4694      	mov	ip, r2
 80034de:	4463      	add	r3, ip
 80034e0:	2114      	movs	r1, #20
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7fc fe0e 	bl	8000104 <__udivsi3>
 80034e8:	0003      	movs	r3, r0
 80034ea:	009a      	lsls	r2, r3, #2
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a07      	ldr	r2, [pc, #28]	@ (8003510 <DMA_CalcBaseAndBitshift+0x70>)
 80034f4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b002      	add	sp, #8
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	40020407 	.word	0x40020407
 8003504:	bffdfff8 	.word	0xbffdfff8
 8003508:	40020000 	.word	0x40020000
 800350c:	bffdfbf8 	.word	0xbffdfbf8
 8003510:	40020400 	.word	0x40020400

08003514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003522:	e155      	b.n	80037d0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4091      	lsls	r1, r2
 800352e:	000a      	movs	r2, r1
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d100      	bne.n	800353c <HAL_GPIO_Init+0x28>
 800353a:	e146      	b.n	80037ca <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2203      	movs	r2, #3
 8003542:	4013      	ands	r3, r2
 8003544:	2b01      	cmp	r3, #1
 8003546:	d005      	beq.n	8003554 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2203      	movs	r2, #3
 800354e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003550:	2b02      	cmp	r3, #2
 8003552:	d130      	bne.n	80035b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	409a      	lsls	r2, r3
 8003562:	0013      	movs	r3, r2
 8003564:	43da      	mvns	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	409a      	lsls	r2, r3
 8003576:	0013      	movs	r3, r2
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800358a:	2201      	movs	r2, #1
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	409a      	lsls	r2, r3
 8003590:	0013      	movs	r3, r2
 8003592:	43da      	mvns	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	2201      	movs	r2, #1
 80035a2:	401a      	ands	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
 80035a8:	0013      	movs	r3, r2
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	4013      	ands	r3, r2
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d017      	beq.n	80035f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	2203      	movs	r2, #3
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	43da      	mvns	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2203      	movs	r2, #3
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d123      	bne.n	8003646 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	08da      	lsrs	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3208      	adds	r2, #8
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	58d3      	ldr	r3, [r2, r3]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2207      	movs	r2, #7
 8003610:	4013      	ands	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	409a      	lsls	r2, r3
 8003618:	0013      	movs	r3, r2
 800361a:	43da      	mvns	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2107      	movs	r1, #7
 800362a:	400b      	ands	r3, r1
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	409a      	lsls	r2, r3
 8003630:	0013      	movs	r3, r2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	08da      	lsrs	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3208      	adds	r2, #8
 8003640:	0092      	lsls	r2, r2, #2
 8003642:	6939      	ldr	r1, [r7, #16]
 8003644:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	409a      	lsls	r2, r3
 8003654:	0013      	movs	r3, r2
 8003656:	43da      	mvns	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2203      	movs	r2, #3
 8003664:	401a      	ands	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	409a      	lsls	r2, r3
 800366c:	0013      	movs	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	23c0      	movs	r3, #192	@ 0xc0
 8003680:	029b      	lsls	r3, r3, #10
 8003682:	4013      	ands	r3, r2
 8003684:	d100      	bne.n	8003688 <HAL_GPIO_Init+0x174>
 8003686:	e0a0      	b.n	80037ca <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003688:	4b57      	ldr	r3, [pc, #348]	@ (80037e8 <HAL_GPIO_Init+0x2d4>)
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	4b56      	ldr	r3, [pc, #344]	@ (80037e8 <HAL_GPIO_Init+0x2d4>)
 800368e:	2101      	movs	r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	619a      	str	r2, [r3, #24]
 8003694:	4b54      	ldr	r3, [pc, #336]	@ (80037e8 <HAL_GPIO_Init+0x2d4>)
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2201      	movs	r2, #1
 800369a:	4013      	ands	r3, r2
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036a0:	4a52      	ldr	r2, [pc, #328]	@ (80037ec <HAL_GPIO_Init+0x2d8>)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	3302      	adds	r3, #2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	589b      	ldr	r3, [r3, r2]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2203      	movs	r2, #3
 80036b2:	4013      	ands	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	220f      	movs	r2, #15
 80036b8:	409a      	lsls	r2, r3
 80036ba:	0013      	movs	r3, r2
 80036bc:	43da      	mvns	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	2390      	movs	r3, #144	@ 0x90
 80036c8:	05db      	lsls	r3, r3, #23
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d019      	beq.n	8003702 <HAL_GPIO_Init+0x1ee>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a47      	ldr	r2, [pc, #284]	@ (80037f0 <HAL_GPIO_Init+0x2dc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_GPIO_Init+0x1ea>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a46      	ldr	r2, [pc, #280]	@ (80037f4 <HAL_GPIO_Init+0x2e0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00d      	beq.n	80036fa <HAL_GPIO_Init+0x1e6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a45      	ldr	r2, [pc, #276]	@ (80037f8 <HAL_GPIO_Init+0x2e4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <HAL_GPIO_Init+0x1e2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a44      	ldr	r2, [pc, #272]	@ (80037fc <HAL_GPIO_Init+0x2e8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_GPIO_Init+0x1de>
 80036ee:	2304      	movs	r3, #4
 80036f0:	e008      	b.n	8003704 <HAL_GPIO_Init+0x1f0>
 80036f2:	2305      	movs	r3, #5
 80036f4:	e006      	b.n	8003704 <HAL_GPIO_Init+0x1f0>
 80036f6:	2303      	movs	r3, #3
 80036f8:	e004      	b.n	8003704 <HAL_GPIO_Init+0x1f0>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e002      	b.n	8003704 <HAL_GPIO_Init+0x1f0>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_GPIO_Init+0x1f0>
 8003702:	2300      	movs	r3, #0
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	2103      	movs	r1, #3
 8003708:	400a      	ands	r2, r1
 800370a:	0092      	lsls	r2, r2, #2
 800370c:	4093      	lsls	r3, r2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003714:	4935      	ldr	r1, [pc, #212]	@ (80037ec <HAL_GPIO_Init+0x2d8>)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3302      	adds	r3, #2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003722:	4b37      	ldr	r3, [pc, #220]	@ (8003800 <HAL_GPIO_Init+0x2ec>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43da      	mvns	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	035b      	lsls	r3, r3, #13
 800373a:	4013      	ands	r3, r2
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003746:	4b2e      	ldr	r3, [pc, #184]	@ (8003800 <HAL_GPIO_Init+0x2ec>)
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800374c:	4b2c      	ldr	r3, [pc, #176]	@ (8003800 <HAL_GPIO_Init+0x2ec>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43da      	mvns	r2, r3
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	2380      	movs	r3, #128	@ 0x80
 8003762:	039b      	lsls	r3, r3, #14
 8003764:	4013      	ands	r3, r2
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003770:	4b23      	ldr	r3, [pc, #140]	@ (8003800 <HAL_GPIO_Init+0x2ec>)
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003776:	4b22      	ldr	r3, [pc, #136]	@ (8003800 <HAL_GPIO_Init+0x2ec>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	43da      	mvns	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	029b      	lsls	r3, r3, #10
 800378e:	4013      	ands	r3, r2
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800379a:	4b19      	ldr	r3, [pc, #100]	@ (8003800 <HAL_GPIO_Init+0x2ec>)
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80037a0:	4b17      	ldr	r3, [pc, #92]	@ (8003800 <HAL_GPIO_Init+0x2ec>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43da      	mvns	r2, r3
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	2380      	movs	r3, #128	@ 0x80
 80037b6:	025b      	lsls	r3, r3, #9
 80037b8:	4013      	ands	r3, r2
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <HAL_GPIO_Init+0x2ec>)
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3301      	adds	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	40da      	lsrs	r2, r3
 80037d8:	1e13      	subs	r3, r2, #0
 80037da:	d000      	beq.n	80037de <HAL_GPIO_Init+0x2ca>
 80037dc:	e6a2      	b.n	8003524 <HAL_GPIO_Init+0x10>
  } 
}
 80037de:	46c0      	nop			@ (mov r8, r8)
 80037e0:	46c0      	nop			@ (mov r8, r8)
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b006      	add	sp, #24
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40010000 	.word	0x40010000
 80037f0:	48000400 	.word	0x48000400
 80037f4:	48000800 	.word	0x48000800
 80037f8:	48000c00 	.word	0x48000c00
 80037fc:	48001000 	.word	0x48001000
 8003800:	40010400 	.word	0x40010400

08003804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f000 fb76 	bl	8003f04 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2201      	movs	r2, #1
 800381e:	4013      	ands	r3, r2
 8003820:	d100      	bne.n	8003824 <HAL_RCC_OscConfig+0x20>
 8003822:	e08e      	b.n	8003942 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003824:	4bc5      	ldr	r3, [pc, #788]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	220c      	movs	r2, #12
 800382a:	4013      	ands	r3, r2
 800382c:	2b04      	cmp	r3, #4
 800382e:	d00e      	beq.n	800384e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003830:	4bc2      	ldr	r3, [pc, #776]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	220c      	movs	r2, #12
 8003836:	4013      	ands	r3, r2
 8003838:	2b08      	cmp	r3, #8
 800383a:	d117      	bne.n	800386c <HAL_RCC_OscConfig+0x68>
 800383c:	4bbf      	ldr	r3, [pc, #764]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	23c0      	movs	r3, #192	@ 0xc0
 8003842:	025b      	lsls	r3, r3, #9
 8003844:	401a      	ands	r2, r3
 8003846:	2380      	movs	r3, #128	@ 0x80
 8003848:	025b      	lsls	r3, r3, #9
 800384a:	429a      	cmp	r2, r3
 800384c:	d10e      	bne.n	800386c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384e:	4bbb      	ldr	r3, [pc, #748]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	029b      	lsls	r3, r3, #10
 8003856:	4013      	ands	r3, r2
 8003858:	d100      	bne.n	800385c <HAL_RCC_OscConfig+0x58>
 800385a:	e071      	b.n	8003940 <HAL_RCC_OscConfig+0x13c>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d000      	beq.n	8003866 <HAL_RCC_OscConfig+0x62>
 8003864:	e06c      	b.n	8003940 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f000 fb4c 	bl	8003f04 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d107      	bne.n	8003884 <HAL_RCC_OscConfig+0x80>
 8003874:	4bb1      	ldr	r3, [pc, #708]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4bb0      	ldr	r3, [pc, #704]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 800387a:	2180      	movs	r1, #128	@ 0x80
 800387c:	0249      	lsls	r1, r1, #9
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e02f      	b.n	80038e4 <HAL_RCC_OscConfig+0xe0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10c      	bne.n	80038a6 <HAL_RCC_OscConfig+0xa2>
 800388c:	4bab      	ldr	r3, [pc, #684]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4baa      	ldr	r3, [pc, #680]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003892:	49ab      	ldr	r1, [pc, #684]	@ (8003b40 <HAL_RCC_OscConfig+0x33c>)
 8003894:	400a      	ands	r2, r1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	4ba8      	ldr	r3, [pc, #672]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	4ba7      	ldr	r3, [pc, #668]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 800389e:	49a9      	ldr	r1, [pc, #676]	@ (8003b44 <HAL_RCC_OscConfig+0x340>)
 80038a0:	400a      	ands	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	e01e      	b.n	80038e4 <HAL_RCC_OscConfig+0xe0>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d10e      	bne.n	80038cc <HAL_RCC_OscConfig+0xc8>
 80038ae:	4ba3      	ldr	r3, [pc, #652]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4ba2      	ldr	r3, [pc, #648]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80038b4:	2180      	movs	r1, #128	@ 0x80
 80038b6:	02c9      	lsls	r1, r1, #11
 80038b8:	430a      	orrs	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	4b9f      	ldr	r3, [pc, #636]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b9e      	ldr	r3, [pc, #632]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80038c2:	2180      	movs	r1, #128	@ 0x80
 80038c4:	0249      	lsls	r1, r1, #9
 80038c6:	430a      	orrs	r2, r1
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0xe0>
 80038cc:	4b9b      	ldr	r3, [pc, #620]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b9a      	ldr	r3, [pc, #616]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80038d2:	499b      	ldr	r1, [pc, #620]	@ (8003b40 <HAL_RCC_OscConfig+0x33c>)
 80038d4:	400a      	ands	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	4b98      	ldr	r3, [pc, #608]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b97      	ldr	r3, [pc, #604]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80038de:	4999      	ldr	r1, [pc, #612]	@ (8003b44 <HAL_RCC_OscConfig+0x340>)
 80038e0:	400a      	ands	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d014      	beq.n	8003916 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7ff f934 	bl	8002b58 <HAL_GetTick>
 80038f0:	0003      	movs	r3, r0
 80038f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f6:	f7ff f92f 	bl	8002b58 <HAL_GetTick>
 80038fa:	0002      	movs	r2, r0
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b64      	cmp	r3, #100	@ 0x64
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e2fd      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003908:	4b8c      	ldr	r3, [pc, #560]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	2380      	movs	r3, #128	@ 0x80
 800390e:	029b      	lsls	r3, r3, #10
 8003910:	4013      	ands	r3, r2
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0xf2>
 8003914:	e015      	b.n	8003942 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7ff f91f 	bl	8002b58 <HAL_GetTick>
 800391a:	0003      	movs	r3, r0
 800391c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003920:	f7ff f91a 	bl	8002b58 <HAL_GetTick>
 8003924:	0002      	movs	r2, r0
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	@ 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e2e8      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003932:	4b82      	ldr	r3, [pc, #520]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	2380      	movs	r3, #128	@ 0x80
 8003938:	029b      	lsls	r3, r3, #10
 800393a:	4013      	ands	r3, r2
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x11c>
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2202      	movs	r2, #2
 8003948:	4013      	ands	r3, r2
 800394a:	d100      	bne.n	800394e <HAL_RCC_OscConfig+0x14a>
 800394c:	e06c      	b.n	8003a28 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800394e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	220c      	movs	r2, #12
 8003954:	4013      	ands	r3, r2
 8003956:	d00e      	beq.n	8003976 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003958:	4b78      	ldr	r3, [pc, #480]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	220c      	movs	r2, #12
 800395e:	4013      	ands	r3, r2
 8003960:	2b08      	cmp	r3, #8
 8003962:	d11f      	bne.n	80039a4 <HAL_RCC_OscConfig+0x1a0>
 8003964:	4b75      	ldr	r3, [pc, #468]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	23c0      	movs	r3, #192	@ 0xc0
 800396a:	025b      	lsls	r3, r3, #9
 800396c:	401a      	ands	r2, r3
 800396e:	2380      	movs	r3, #128	@ 0x80
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	429a      	cmp	r2, r3
 8003974:	d116      	bne.n	80039a4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003976:	4b71      	ldr	r3, [pc, #452]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2202      	movs	r2, #2
 800397c:	4013      	ands	r3, r2
 800397e:	d005      	beq.n	800398c <HAL_RCC_OscConfig+0x188>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d001      	beq.n	800398c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e2bb      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398c:	4b6b      	ldr	r3, [pc, #428]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	22f8      	movs	r2, #248	@ 0xf8
 8003992:	4393      	bics	r3, r2
 8003994:	0019      	movs	r1, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00da      	lsls	r2, r3, #3
 800399c:	4b67      	ldr	r3, [pc, #412]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 800399e:	430a      	orrs	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a2:	e041      	b.n	8003a28 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d024      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ac:	4b63      	ldr	r3, [pc, #396]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b62      	ldr	r3, [pc, #392]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80039b2:	2101      	movs	r1, #1
 80039b4:	430a      	orrs	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7ff f8ce 	bl	8002b58 <HAL_GetTick>
 80039bc:	0003      	movs	r3, r0
 80039be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c2:	f7ff f8c9 	bl	8002b58 <HAL_GetTick>
 80039c6:	0002      	movs	r2, r0
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e297      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	4b59      	ldr	r3, [pc, #356]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2202      	movs	r2, #2
 80039da:	4013      	ands	r3, r2
 80039dc:	d0f1      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b57      	ldr	r3, [pc, #348]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	22f8      	movs	r2, #248	@ 0xf8
 80039e4:	4393      	bics	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	00da      	lsls	r2, r3, #3
 80039ee:	4b53      	ldr	r3, [pc, #332]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80039f0:	430a      	orrs	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	e018      	b.n	8003a28 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f6:	4b51      	ldr	r3, [pc, #324]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b50      	ldr	r3, [pc, #320]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 80039fc:	2101      	movs	r1, #1
 80039fe:	438a      	bics	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7ff f8a9 	bl	8002b58 <HAL_GetTick>
 8003a06:	0003      	movs	r3, r0
 8003a08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a0c:	f7ff f8a4 	bl	8002b58 <HAL_GetTick>
 8003a10:	0002      	movs	r2, r0
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e272      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1e:	4b47      	ldr	r3, [pc, #284]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2202      	movs	r2, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	d1f1      	bne.n	8003a0c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d036      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d019      	beq.n	8003a6e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3a:	4b40      	ldr	r3, [pc, #256]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003a3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003a40:	2101      	movs	r1, #1
 8003a42:	430a      	orrs	r2, r1
 8003a44:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a46:	f7ff f887 	bl	8002b58 <HAL_GetTick>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a50:	f7ff f882 	bl	8002b58 <HAL_GetTick>
 8003a54:	0002      	movs	r2, r0
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e250      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a62:	4b36      	ldr	r3, [pc, #216]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	2202      	movs	r2, #2
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d0f1      	beq.n	8003a50 <HAL_RCC_OscConfig+0x24c>
 8003a6c:	e018      	b.n	8003aa0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a6e:	4b33      	ldr	r3, [pc, #204]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003a70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a72:	4b32      	ldr	r3, [pc, #200]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003a74:	2101      	movs	r1, #1
 8003a76:	438a      	bics	r2, r1
 8003a78:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7a:	f7ff f86d 	bl	8002b58 <HAL_GetTick>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a84:	f7ff f868 	bl	8002b58 <HAL_GetTick>
 8003a88:	0002      	movs	r2, r0
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e236      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a96:	4b29      	ldr	r3, [pc, #164]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d1f1      	bne.n	8003a84 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d100      	bne.n	8003aac <HAL_RCC_OscConfig+0x2a8>
 8003aaa:	e0b5      	b.n	8003c18 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aac:	201f      	movs	r0, #31
 8003aae:	183b      	adds	r3, r7, r0
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab4:	4b21      	ldr	r3, [pc, #132]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	2380      	movs	r3, #128	@ 0x80
 8003aba:	055b      	lsls	r3, r3, #21
 8003abc:	4013      	ands	r3, r2
 8003abe:	d110      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003ac6:	2180      	movs	r1, #128	@ 0x80
 8003ac8:	0549      	lsls	r1, r1, #21
 8003aca:	430a      	orrs	r2, r1
 8003acc:	61da      	str	r2, [r3, #28]
 8003ace:	4b1b      	ldr	r3, [pc, #108]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003ad0:	69da      	ldr	r2, [r3, #28]
 8003ad2:	2380      	movs	r3, #128	@ 0x80
 8003ad4:	055b      	lsls	r3, r3, #21
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003adc:	183b      	adds	r3, r7, r0
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae2:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <HAL_RCC_OscConfig+0x344>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	2380      	movs	r3, #128	@ 0x80
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	4013      	ands	r3, r2
 8003aec:	d11a      	bne.n	8003b24 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aee:	4b16      	ldr	r3, [pc, #88]	@ (8003b48 <HAL_RCC_OscConfig+0x344>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <HAL_RCC_OscConfig+0x344>)
 8003af4:	2180      	movs	r1, #128	@ 0x80
 8003af6:	0049      	lsls	r1, r1, #1
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afc:	f7ff f82c 	bl	8002b58 <HAL_GetTick>
 8003b00:	0003      	movs	r3, r0
 8003b02:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b06:	f7ff f827 	bl	8002b58 <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b64      	cmp	r3, #100	@ 0x64
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e1f5      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b18:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <HAL_RCC_OscConfig+0x344>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	@ 0x80
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4013      	ands	r3, r2
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d10f      	bne.n	8003b4c <HAL_RCC_OscConfig+0x348>
 8003b2c:	4b03      	ldr	r3, [pc, #12]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003b2e:	6a1a      	ldr	r2, [r3, #32]
 8003b30:	4b02      	ldr	r3, [pc, #8]	@ (8003b3c <HAL_RCC_OscConfig+0x338>)
 8003b32:	2101      	movs	r1, #1
 8003b34:	430a      	orrs	r2, r1
 8003b36:	621a      	str	r2, [r3, #32]
 8003b38:	e036      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3a4>
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	fffeffff 	.word	0xfffeffff
 8003b44:	fffbffff 	.word	0xfffbffff
 8003b48:	40007000 	.word	0x40007000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCC_OscConfig+0x36a>
 8003b54:	4bca      	ldr	r3, [pc, #808]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003b56:	6a1a      	ldr	r2, [r3, #32]
 8003b58:	4bc9      	ldr	r3, [pc, #804]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	438a      	bics	r2, r1
 8003b5e:	621a      	str	r2, [r3, #32]
 8003b60:	4bc7      	ldr	r3, [pc, #796]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003b62:	6a1a      	ldr	r2, [r3, #32]
 8003b64:	4bc6      	ldr	r3, [pc, #792]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003b66:	2104      	movs	r1, #4
 8003b68:	438a      	bics	r2, r1
 8003b6a:	621a      	str	r2, [r3, #32]
 8003b6c:	e01c      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3a4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x38c>
 8003b76:	4bc2      	ldr	r3, [pc, #776]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003b78:	6a1a      	ldr	r2, [r3, #32]
 8003b7a:	4bc1      	ldr	r3, [pc, #772]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003b7c:	2104      	movs	r1, #4
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	621a      	str	r2, [r3, #32]
 8003b82:	4bbf      	ldr	r3, [pc, #764]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003b84:	6a1a      	ldr	r2, [r3, #32]
 8003b86:	4bbe      	ldr	r3, [pc, #760]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003b88:	2101      	movs	r1, #1
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	621a      	str	r2, [r3, #32]
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3a4>
 8003b90:	4bbb      	ldr	r3, [pc, #748]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003b92:	6a1a      	ldr	r2, [r3, #32]
 8003b94:	4bba      	ldr	r3, [pc, #744]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003b96:	2101      	movs	r1, #1
 8003b98:	438a      	bics	r2, r1
 8003b9a:	621a      	str	r2, [r3, #32]
 8003b9c:	4bb8      	ldr	r3, [pc, #736]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	4bb7      	ldr	r3, [pc, #732]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003ba2:	2104      	movs	r1, #4
 8003ba4:	438a      	bics	r2, r1
 8003ba6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d014      	beq.n	8003bda <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb0:	f7fe ffd2 	bl	8002b58 <HAL_GetTick>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb8:	e009      	b.n	8003bce <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fe ffcd 	bl	8002b58 <HAL_GetTick>
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	4aaf      	ldr	r2, [pc, #700]	@ (8003e84 <HAL_RCC_OscConfig+0x680>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e19a      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bce:	4bac      	ldr	r3, [pc, #688]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x3b6>
 8003bd8:	e013      	b.n	8003c02 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7fe ffbd 	bl	8002b58 <HAL_GetTick>
 8003bde:	0003      	movs	r3, r0
 8003be0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be2:	e009      	b.n	8003bf8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be4:	f7fe ffb8 	bl	8002b58 <HAL_GetTick>
 8003be8:	0002      	movs	r2, r0
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	4aa5      	ldr	r2, [pc, #660]	@ (8003e84 <HAL_RCC_OscConfig+0x680>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e185      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf8:	4ba1      	ldr	r3, [pc, #644]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c02:	231f      	movs	r3, #31
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d105      	bne.n	8003c18 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0c:	4b9c      	ldr	r3, [pc, #624]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	4b9b      	ldr	r3, [pc, #620]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c12:	499d      	ldr	r1, [pc, #628]	@ (8003e88 <HAL_RCC_OscConfig+0x684>)
 8003c14:	400a      	ands	r2, r1
 8003c16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d063      	beq.n	8003cea <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d12a      	bne.n	8003c80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c2a:	4b95      	ldr	r3, [pc, #596]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c2e:	4b94      	ldr	r3, [pc, #592]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c30:	2104      	movs	r1, #4
 8003c32:	430a      	orrs	r2, r1
 8003c34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003c36:	4b92      	ldr	r3, [pc, #584]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c3a:	4b91      	ldr	r3, [pc, #580]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fe ff89 	bl	8002b58 <HAL_GetTick>
 8003c46:	0003      	movs	r3, r0
 8003c48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c4c:	f7fe ff84 	bl	8002b58 <HAL_GetTick>
 8003c50:	0002      	movs	r2, r0
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e152      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c5e:	4b88      	ldr	r3, [pc, #544]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d0f1      	beq.n	8003c4c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c68:	4b85      	ldr	r3, [pc, #532]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6c:	22f8      	movs	r2, #248	@ 0xf8
 8003c6e:	4393      	bics	r3, r2
 8003c70:	0019      	movs	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	00da      	lsls	r2, r3, #3
 8003c78:	4b81      	ldr	r3, [pc, #516]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c7e:	e034      	b.n	8003cea <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	3305      	adds	r3, #5
 8003c86:	d111      	bne.n	8003cac <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003c88:	4b7d      	ldr	r3, [pc, #500]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c8c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c8e:	2104      	movs	r1, #4
 8003c90:	438a      	bics	r2, r1
 8003c92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c94:	4b7a      	ldr	r3, [pc, #488]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c98:	22f8      	movs	r2, #248	@ 0xf8
 8003c9a:	4393      	bics	r3, r2
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	00da      	lsls	r2, r3, #3
 8003ca4:	4b76      	ldr	r3, [pc, #472]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003caa:	e01e      	b.n	8003cea <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003cac:	4b74      	ldr	r3, [pc, #464]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003cae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cb0:	4b73      	ldr	r3, [pc, #460]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003cb2:	2104      	movs	r1, #4
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003cb8:	4b71      	ldr	r3, [pc, #452]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cbc:	4b70      	ldr	r3, [pc, #448]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc4:	f7fe ff48 	bl	8002b58 <HAL_GetTick>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003cce:	f7fe ff43 	bl	8002b58 <HAL_GetTick>
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e111      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ce0:	4b67      	ldr	r3, [pc, #412]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d1f1      	bne.n	8003cce <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d05c      	beq.n	8003dae <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003cf4:	4b62      	ldr	r3, [pc, #392]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	220c      	movs	r2, #12
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	d00e      	beq.n	8003d1e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d00:	4b5f      	ldr	r3, [pc, #380]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	220c      	movs	r2, #12
 8003d06:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d114      	bne.n	8003d36 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d0c:	4b5c      	ldr	r3, [pc, #368]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	23c0      	movs	r3, #192	@ 0xc0
 8003d12:	025b      	lsls	r3, r3, #9
 8003d14:	401a      	ands	r2, r3
 8003d16:	23c0      	movs	r3, #192	@ 0xc0
 8003d18:	025b      	lsls	r3, r3, #9
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d10b      	bne.n	8003d36 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003d1e:	4b58      	ldr	r3, [pc, #352]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	029b      	lsls	r3, r3, #10
 8003d26:	4013      	ands	r3, r2
 8003d28:	d040      	beq.n	8003dac <HAL_RCC_OscConfig+0x5a8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d03c      	beq.n	8003dac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0e6      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01b      	beq.n	8003d76 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003d3e:	4b50      	ldr	r3, [pc, #320]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d42:	4b4f      	ldr	r3, [pc, #316]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003d44:	2180      	movs	r1, #128	@ 0x80
 8003d46:	0249      	lsls	r1, r1, #9
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fe ff04 	bl	8002b58 <HAL_GetTick>
 8003d50:	0003      	movs	r3, r0
 8003d52:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d56:	f7fe feff 	bl	8002b58 <HAL_GetTick>
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0cd      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003d68:	4b45      	ldr	r3, [pc, #276]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003d6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d6c:	2380      	movs	r3, #128	@ 0x80
 8003d6e:	029b      	lsls	r3, r3, #10
 8003d70:	4013      	ands	r3, r2
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x552>
 8003d74:	e01b      	b.n	8003dae <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003d76:	4b42      	ldr	r3, [pc, #264]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d7a:	4b41      	ldr	r3, [pc, #260]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003d7c:	4943      	ldr	r1, [pc, #268]	@ (8003e8c <HAL_RCC_OscConfig+0x688>)
 8003d7e:	400a      	ands	r2, r1
 8003d80:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7fe fee9 	bl	8002b58 <HAL_GetTick>
 8003d86:	0003      	movs	r3, r0
 8003d88:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d8c:	f7fe fee4 	bl	8002b58 <HAL_GetTick>
 8003d90:	0002      	movs	r2, r0
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0b2      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003d9e:	4b38      	ldr	r3, [pc, #224]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003da2:	2380      	movs	r3, #128	@ 0x80
 8003da4:	029b      	lsls	r3, r3, #10
 8003da6:	4013      	ands	r3, r2
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x588>
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003dac:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d100      	bne.n	8003db8 <HAL_RCC_OscConfig+0x5b4>
 8003db6:	e0a4      	b.n	8003f02 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003db8:	4b31      	ldr	r3, [pc, #196]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	220c      	movs	r2, #12
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d100      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x5c2>
 8003dc4:	e078      	b.n	8003eb8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d14c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dce:	4b2c      	ldr	r3, [pc, #176]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003dd4:	492e      	ldr	r1, [pc, #184]	@ (8003e90 <HAL_RCC_OscConfig+0x68c>)
 8003dd6:	400a      	ands	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fe febd 	bl	8002b58 <HAL_GetTick>
 8003dde:	0003      	movs	r3, r0
 8003de0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fe feb8 	bl	8002b58 <HAL_GetTick>
 8003de8:	0002      	movs	r2, r0
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e086      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df6:	4b22      	ldr	r3, [pc, #136]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	2380      	movs	r3, #128	@ 0x80
 8003dfc:	049b      	lsls	r3, r3, #18
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e02:	4b1f      	ldr	r3, [pc, #124]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	220f      	movs	r2, #15
 8003e08:	4393      	bics	r3, r2
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e10:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003e12:	430a      	orrs	r2, r1
 8003e14:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e16:	4b1a      	ldr	r3, [pc, #104]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003e94 <HAL_RCC_OscConfig+0x690>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	4b15      	ldr	r3, [pc, #84]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e30:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003e36:	2180      	movs	r1, #128	@ 0x80
 8003e38:	0449      	lsls	r1, r1, #17
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3e:	f7fe fe8b 	bl	8002b58 <HAL_GetTick>
 8003e42:	0003      	movs	r3, r0
 8003e44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fe fe86 	bl	8002b58 <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e054      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e5a:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	2380      	movs	r3, #128	@ 0x80
 8003e60:	049b      	lsls	r3, r3, #18
 8003e62:	4013      	ands	r3, r2
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x644>
 8003e66:	e04c      	b.n	8003f02 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e68:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b04      	ldr	r3, [pc, #16]	@ (8003e80 <HAL_RCC_OscConfig+0x67c>)
 8003e6e:	4908      	ldr	r1, [pc, #32]	@ (8003e90 <HAL_RCC_OscConfig+0x68c>)
 8003e70:	400a      	ands	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fe fe70 	bl	8002b58 <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7c:	e015      	b.n	8003eaa <HAL_RCC_OscConfig+0x6a6>
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	40021000 	.word	0x40021000
 8003e84:	00001388 	.word	0x00001388
 8003e88:	efffffff 	.word	0xefffffff
 8003e8c:	fffeffff 	.word	0xfffeffff
 8003e90:	feffffff 	.word	0xfeffffff
 8003e94:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e98:	f7fe fe5e 	bl	8002b58 <HAL_GetTick>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e02c      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eaa:	4b18      	ldr	r3, [pc, #96]	@ (8003f0c <HAL_RCC_OscConfig+0x708>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	2380      	movs	r3, #128	@ 0x80
 8003eb0:	049b      	lsls	r3, r3, #18
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x694>
 8003eb6:	e024      	b.n	8003f02 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e01f      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003ec4:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <HAL_RCC_OscConfig+0x708>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003eca:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <HAL_RCC_OscConfig+0x708>)
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	23c0      	movs	r3, #192	@ 0xc0
 8003ed4:	025b      	lsls	r3, r3, #9
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d10e      	bne.n	8003efe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	220f      	movs	r2, #15
 8003ee4:	401a      	ands	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	23f0      	movs	r3, #240	@ 0xf0
 8003ef2:	039b      	lsls	r3, r3, #14
 8003ef4:	401a      	ands	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b008      	add	sp, #32
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000

08003f10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0bf      	b.n	80040a4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f24:	4b61      	ldr	r3, [pc, #388]	@ (80040ac <HAL_RCC_ClockConfig+0x19c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d911      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b5e      	ldr	r3, [pc, #376]	@ (80040ac <HAL_RCC_ClockConfig+0x19c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2201      	movs	r2, #1
 8003f38:	4393      	bics	r3, r2
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	4b5b      	ldr	r3, [pc, #364]	@ (80040ac <HAL_RCC_ClockConfig+0x19c>)
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f44:	4b59      	ldr	r3, [pc, #356]	@ (80040ac <HAL_RCC_ClockConfig+0x19c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0a6      	b.n	80040a4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d015      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2204      	movs	r2, #4
 8003f66:	4013      	ands	r3, r2
 8003f68:	d006      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f6a:	4b51      	ldr	r3, [pc, #324]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	4b50      	ldr	r3, [pc, #320]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8003f70:	21e0      	movs	r1, #224	@ 0xe0
 8003f72:	00c9      	lsls	r1, r1, #3
 8003f74:	430a      	orrs	r2, r1
 8003f76:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b4d      	ldr	r3, [pc, #308]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	22f0      	movs	r2, #240	@ 0xf0
 8003f7e:	4393      	bics	r3, r2
 8003f80:	0019      	movs	r1, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	4b4a      	ldr	r3, [pc, #296]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4013      	ands	r3, r2
 8003f94:	d04c      	beq.n	8004030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b44      	ldr	r3, [pc, #272]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	2380      	movs	r3, #128	@ 0x80
 8003fa4:	029b      	lsls	r3, r3, #10
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d120      	bne.n	8003fec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07a      	b.n	80040a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	2380      	movs	r3, #128	@ 0x80
 8003fbc:	049b      	lsls	r3, r3, #18
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d114      	bne.n	8003fec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e06e      	b.n	80040a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003fce:	4b38      	ldr	r3, [pc, #224]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8003fd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fd2:	2380      	movs	r3, #128	@ 0x80
 8003fd4:	029b      	lsls	r3, r3, #10
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d108      	bne.n	8003fec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e062      	b.n	80040a4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fde:	4b34      	ldr	r3, [pc, #208]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e05b      	b.n	80040a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fec:	4b30      	ldr	r3, [pc, #192]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	4393      	bics	r3, r2
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004000:	f7fe fdaa 	bl	8002b58 <HAL_GetTick>
 8004004:	0003      	movs	r3, r0
 8004006:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004008:	e009      	b.n	800401e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800400a:	f7fe fda5 	bl	8002b58 <HAL_GetTick>
 800400e:	0002      	movs	r2, r0
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	4a27      	ldr	r2, [pc, #156]	@ (80040b4 <HAL_RCC_ClockConfig+0x1a4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e042      	b.n	80040a4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	4b24      	ldr	r3, [pc, #144]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	220c      	movs	r2, #12
 8004024:	401a      	ands	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	429a      	cmp	r2, r3
 800402e:	d1ec      	bne.n	800400a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004030:	4b1e      	ldr	r3, [pc, #120]	@ (80040ac <HAL_RCC_ClockConfig+0x19c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2201      	movs	r2, #1
 8004036:	4013      	ands	r3, r2
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d211      	bcs.n	8004062 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403e:	4b1b      	ldr	r3, [pc, #108]	@ (80040ac <HAL_RCC_ClockConfig+0x19c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2201      	movs	r2, #1
 8004044:	4393      	bics	r3, r2
 8004046:	0019      	movs	r1, r3
 8004048:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <HAL_RCC_ClockConfig+0x19c>)
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004050:	4b16      	ldr	r3, [pc, #88]	@ (80040ac <HAL_RCC_ClockConfig+0x19c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2201      	movs	r2, #1
 8004056:	4013      	ands	r3, r2
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d001      	beq.n	8004062 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e020      	b.n	80040a4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2204      	movs	r2, #4
 8004068:	4013      	ands	r3, r2
 800406a:	d009      	beq.n	8004080 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800406c:	4b10      	ldr	r3, [pc, #64]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4a11      	ldr	r2, [pc, #68]	@ (80040b8 <HAL_RCC_ClockConfig+0x1a8>)
 8004072:	4013      	ands	r3, r2
 8004074:	0019      	movs	r1, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004080:	f000 f820 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8004084:	0001      	movs	r1, r0
 8004086:	4b0a      	ldr	r3, [pc, #40]	@ (80040b0 <HAL_RCC_ClockConfig+0x1a0>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	220f      	movs	r2, #15
 800408e:	4013      	ands	r3, r2
 8004090:	4a0a      	ldr	r2, [pc, #40]	@ (80040bc <HAL_RCC_ClockConfig+0x1ac>)
 8004092:	5cd3      	ldrb	r3, [r2, r3]
 8004094:	000a      	movs	r2, r1
 8004096:	40da      	lsrs	r2, r3
 8004098:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <HAL_RCC_ClockConfig+0x1b0>)
 800409a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800409c:	2003      	movs	r0, #3
 800409e:	f7fe fd15 	bl	8002acc <HAL_InitTick>
  
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b004      	add	sp, #16
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40022000 	.word	0x40022000
 80040b0:	40021000 	.word	0x40021000
 80040b4:	00001388 	.word	0x00001388
 80040b8:	fffff8ff 	.word	0xfffff8ff
 80040bc:	080058e8 	.word	0x080058e8
 80040c0:	200003e0 	.word	0x200003e0

080040c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	2300      	movs	r3, #0
 80040d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80040de:	4b2d      	ldr	r3, [pc, #180]	@ (8004194 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	220c      	movs	r2, #12
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b0c      	cmp	r3, #12
 80040ec:	d046      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0xb8>
 80040ee:	d848      	bhi.n	8004182 <HAL_RCC_GetSysClockFreq+0xbe>
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d002      	beq.n	80040fa <HAL_RCC_GetSysClockFreq+0x36>
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d003      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x3c>
 80040f8:	e043      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040fa:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <HAL_RCC_GetSysClockFreq+0xd4>)
 80040fc:	613b      	str	r3, [r7, #16]
      break;
 80040fe:	e043      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	0c9b      	lsrs	r3, r3, #18
 8004104:	220f      	movs	r2, #15
 8004106:	4013      	ands	r3, r2
 8004108:	4a24      	ldr	r2, [pc, #144]	@ (800419c <HAL_RCC_GetSysClockFreq+0xd8>)
 800410a:	5cd3      	ldrb	r3, [r2, r3]
 800410c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800410e:	4b21      	ldr	r3, [pc, #132]	@ (8004194 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004112:	220f      	movs	r2, #15
 8004114:	4013      	ands	r3, r2
 8004116:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004118:	5cd3      	ldrb	r3, [r2, r3]
 800411a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	23c0      	movs	r3, #192	@ 0xc0
 8004120:	025b      	lsls	r3, r3, #9
 8004122:	401a      	ands	r2, r3
 8004124:	2380      	movs	r3, #128	@ 0x80
 8004126:	025b      	lsls	r3, r3, #9
 8004128:	429a      	cmp	r2, r3
 800412a:	d109      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	481a      	ldr	r0, [pc, #104]	@ (8004198 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004130:	f7fb ffe8 	bl	8000104 <__udivsi3>
 8004134:	0003      	movs	r3, r0
 8004136:	001a      	movs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4353      	muls	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e01a      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	23c0      	movs	r3, #192	@ 0xc0
 8004144:	025b      	lsls	r3, r3, #9
 8004146:	401a      	ands	r2, r3
 8004148:	23c0      	movs	r3, #192	@ 0xc0
 800414a:	025b      	lsls	r3, r3, #9
 800414c:	429a      	cmp	r2, r3
 800414e:	d109      	bne.n	8004164 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	4814      	ldr	r0, [pc, #80]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004154:	f7fb ffd6 	bl	8000104 <__udivsi3>
 8004158:	0003      	movs	r3, r0
 800415a:	001a      	movs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4353      	muls	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e008      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	480c      	ldr	r0, [pc, #48]	@ (8004198 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004168:	f7fb ffcc 	bl	8000104 <__udivsi3>
 800416c:	0003      	movs	r3, r0
 800416e:	001a      	movs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4353      	muls	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	613b      	str	r3, [r7, #16]
      break;
 800417a:	e005      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800417c:	4b09      	ldr	r3, [pc, #36]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800417e:	613b      	str	r3, [r7, #16]
      break;
 8004180:	e002      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004182:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004184:	613b      	str	r3, [r7, #16]
      break;
 8004186:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004188:	693b      	ldr	r3, [r7, #16]
}
 800418a:	0018      	movs	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	b006      	add	sp, #24
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			@ (mov r8, r8)
 8004194:	40021000 	.word	0x40021000
 8004198:	007a1200 	.word	0x007a1200
 800419c:	080058f8 	.word	0x080058f8
 80041a0:	08005908 	.word	0x08005908
 80041a4:	02dc6c00 	.word	0x02dc6c00

080041a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e042      	b.n	8004240 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	223d      	movs	r2, #61	@ 0x3d
 80041be:	5c9b      	ldrb	r3, [r3, r2]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d107      	bne.n	80041d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	223c      	movs	r2, #60	@ 0x3c
 80041ca:	2100      	movs	r1, #0
 80041cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f7fe fc17 	bl	8002a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	223d      	movs	r2, #61	@ 0x3d
 80041da:	2102      	movs	r1, #2
 80041dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3304      	adds	r3, #4
 80041e6:	0019      	movs	r1, r3
 80041e8:	0010      	movs	r0, r2
 80041ea:	f000 f98d 	bl	8004508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2246      	movs	r2, #70	@ 0x46
 80041f2:	2101      	movs	r1, #1
 80041f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	223e      	movs	r2, #62	@ 0x3e
 80041fa:	2101      	movs	r1, #1
 80041fc:	5499      	strb	r1, [r3, r2]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	223f      	movs	r2, #63	@ 0x3f
 8004202:	2101      	movs	r1, #1
 8004204:	5499      	strb	r1, [r3, r2]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2240      	movs	r2, #64	@ 0x40
 800420a:	2101      	movs	r1, #1
 800420c:	5499      	strb	r1, [r3, r2]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2241      	movs	r2, #65	@ 0x41
 8004212:	2101      	movs	r1, #1
 8004214:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2242      	movs	r2, #66	@ 0x42
 800421a:	2101      	movs	r1, #1
 800421c:	5499      	strb	r1, [r3, r2]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2243      	movs	r2, #67	@ 0x43
 8004222:	2101      	movs	r1, #1
 8004224:	5499      	strb	r1, [r3, r2]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2244      	movs	r2, #68	@ 0x44
 800422a:	2101      	movs	r1, #1
 800422c:	5499      	strb	r1, [r3, r2]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2245      	movs	r2, #69	@ 0x45
 8004232:	2101      	movs	r1, #1
 8004234:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	223d      	movs	r2, #61	@ 0x3d
 800423a:	2101      	movs	r1, #1
 800423c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	223d      	movs	r2, #61	@ 0x3d
 8004254:	5c9b      	ldrb	r3, [r3, r2]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d001      	beq.n	8004260 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e033      	b.n	80042c8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	223d      	movs	r2, #61	@ 0x3d
 8004264:	2102      	movs	r1, #2
 8004266:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a18      	ldr	r2, [pc, #96]	@ (80042d0 <HAL_TIM_Base_Start+0x88>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00f      	beq.n	8004292 <HAL_TIM_Base_Start+0x4a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	05db      	lsls	r3, r3, #23
 800427a:	429a      	cmp	r2, r3
 800427c:	d009      	beq.n	8004292 <HAL_TIM_Base_Start+0x4a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a14      	ldr	r2, [pc, #80]	@ (80042d4 <HAL_TIM_Base_Start+0x8c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_TIM_Base_Start+0x4a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a12      	ldr	r2, [pc, #72]	@ (80042d8 <HAL_TIM_Base_Start+0x90>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d111      	bne.n	80042b6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2207      	movs	r2, #7
 800429a:	4013      	ands	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b06      	cmp	r3, #6
 80042a2:	d010      	beq.n	80042c6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2101      	movs	r1, #1
 80042b0:	430a      	orrs	r2, r1
 80042b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b4:	e007      	b.n	80042c6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2101      	movs	r1, #1
 80042c2:	430a      	orrs	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b004      	add	sp, #16
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40014000 	.word	0x40014000

080042dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2202      	movs	r2, #2
 80042f8:	4013      	ands	r3, r2
 80042fa:	d021      	beq.n	8004340 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2202      	movs	r2, #2
 8004300:	4013      	ands	r3, r2
 8004302:	d01d      	beq.n	8004340 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2203      	movs	r2, #3
 800430a:	4252      	negs	r2, r2
 800430c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2203      	movs	r2, #3
 800431c:	4013      	ands	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	0018      	movs	r0, r3
 8004324:	f000 f8d8 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 8004328:	e007      	b.n	800433a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0018      	movs	r0, r3
 800432e:	f000 f8cb 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	0018      	movs	r0, r3
 8004336:	f000 f8d7 	bl	80044e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2204      	movs	r2, #4
 8004344:	4013      	ands	r3, r2
 8004346:	d022      	beq.n	800438e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2204      	movs	r2, #4
 800434c:	4013      	ands	r3, r2
 800434e:	d01e      	beq.n	800438e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2205      	movs	r2, #5
 8004356:	4252      	negs	r2, r2
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	23c0      	movs	r3, #192	@ 0xc0
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4013      	ands	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0018      	movs	r0, r3
 8004372:	f000 f8b1 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 8004376:	e007      	b.n	8004388 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	0018      	movs	r0, r3
 800437c:	f000 f8a4 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	0018      	movs	r0, r3
 8004384:	f000 f8b0 	bl	80044e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2208      	movs	r2, #8
 8004392:	4013      	ands	r3, r2
 8004394:	d021      	beq.n	80043da <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2208      	movs	r2, #8
 800439a:	4013      	ands	r3, r2
 800439c:	d01d      	beq.n	80043da <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2209      	movs	r2, #9
 80043a4:	4252      	negs	r2, r2
 80043a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2204      	movs	r2, #4
 80043ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	2203      	movs	r2, #3
 80043b6:	4013      	ands	r3, r2
 80043b8:	d004      	beq.n	80043c4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0018      	movs	r0, r3
 80043be:	f000 f88b 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 80043c2:	e007      	b.n	80043d4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	0018      	movs	r0, r3
 80043c8:	f000 f87e 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f000 f88a 	bl	80044e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2210      	movs	r2, #16
 80043de:	4013      	ands	r3, r2
 80043e0:	d022      	beq.n	8004428 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2210      	movs	r2, #16
 80043e6:	4013      	ands	r3, r2
 80043e8:	d01e      	beq.n	8004428 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2211      	movs	r2, #17
 80043f0:	4252      	negs	r2, r2
 80043f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2208      	movs	r2, #8
 80043f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	23c0      	movs	r3, #192	@ 0xc0
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4013      	ands	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	0018      	movs	r0, r3
 800440c:	f000 f864 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 8004410:	e007      	b.n	8004422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0018      	movs	r0, r3
 8004416:	f000 f857 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	0018      	movs	r0, r3
 800441e:	f000 f863 	bl	80044e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2201      	movs	r2, #1
 800442c:	4013      	ands	r3, r2
 800442e:	d00c      	beq.n	800444a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	4013      	ands	r3, r2
 8004436:	d008      	beq.n	800444a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2202      	movs	r2, #2
 800443e:	4252      	negs	r2, r2
 8004440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	0018      	movs	r0, r3
 8004446:	f000 f837 	bl	80044b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2280      	movs	r2, #128	@ 0x80
 800444e:	4013      	ands	r3, r2
 8004450:	d00c      	beq.n	800446c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2280      	movs	r2, #128	@ 0x80
 8004456:	4013      	ands	r3, r2
 8004458:	d008      	beq.n	800446c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2281      	movs	r2, #129	@ 0x81
 8004460:	4252      	negs	r2, r2
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	0018      	movs	r0, r3
 8004468:	f000 f942 	bl	80046f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2240      	movs	r2, #64	@ 0x40
 8004470:	4013      	ands	r3, r2
 8004472:	d00c      	beq.n	800448e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2240      	movs	r2, #64	@ 0x40
 8004478:	4013      	ands	r3, r2
 800447a:	d008      	beq.n	800448e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2241      	movs	r2, #65	@ 0x41
 8004482:	4252      	negs	r2, r2
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f000 f835 	bl	80044f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2220      	movs	r2, #32
 8004492:	4013      	ands	r3, r2
 8004494:	d00c      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	4013      	ands	r3, r2
 800449c:	d008      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2221      	movs	r2, #33	@ 0x21
 80044a4:	4252      	negs	r2, r2
 80044a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f000 f918 	bl	80046e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b0:	46c0      	nop			@ (mov r8, r8)
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b004      	add	sp, #16
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044c0:	46c0      	nop			@ (mov r8, r8)
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d0:	46c0      	nop			@ (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e0:	46c0      	nop			@ (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b002      	add	sp, #8
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044f0:	46c0      	nop			@ (mov r8, r8)
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b002      	add	sp, #8
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004500:	46c0      	nop			@ (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}

08004508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a3b      	ldr	r2, [pc, #236]	@ (8004608 <TIM_Base_SetConfig+0x100>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d008      	beq.n	8004532 <TIM_Base_SetConfig+0x2a>
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	2380      	movs	r3, #128	@ 0x80
 8004524:	05db      	lsls	r3, r3, #23
 8004526:	429a      	cmp	r2, r3
 8004528:	d003      	beq.n	8004532 <TIM_Base_SetConfig+0x2a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a37      	ldr	r2, [pc, #220]	@ (800460c <TIM_Base_SetConfig+0x104>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2270      	movs	r2, #112	@ 0x70
 8004536:	4393      	bics	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a30      	ldr	r2, [pc, #192]	@ (8004608 <TIM_Base_SetConfig+0x100>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d018      	beq.n	800457e <TIM_Base_SetConfig+0x76>
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	2380      	movs	r3, #128	@ 0x80
 8004550:	05db      	lsls	r3, r3, #23
 8004552:	429a      	cmp	r2, r3
 8004554:	d013      	beq.n	800457e <TIM_Base_SetConfig+0x76>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a2c      	ldr	r2, [pc, #176]	@ (800460c <TIM_Base_SetConfig+0x104>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00f      	beq.n	800457e <TIM_Base_SetConfig+0x76>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2b      	ldr	r2, [pc, #172]	@ (8004610 <TIM_Base_SetConfig+0x108>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00b      	beq.n	800457e <TIM_Base_SetConfig+0x76>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a2a      	ldr	r2, [pc, #168]	@ (8004614 <TIM_Base_SetConfig+0x10c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d007      	beq.n	800457e <TIM_Base_SetConfig+0x76>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a29      	ldr	r2, [pc, #164]	@ (8004618 <TIM_Base_SetConfig+0x110>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d003      	beq.n	800457e <TIM_Base_SetConfig+0x76>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a28      	ldr	r2, [pc, #160]	@ (800461c <TIM_Base_SetConfig+0x114>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d108      	bne.n	8004590 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a27      	ldr	r2, [pc, #156]	@ (8004620 <TIM_Base_SetConfig+0x118>)
 8004582:	4013      	ands	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2280      	movs	r2, #128	@ 0x80
 8004594:	4393      	bics	r3, r2
 8004596:	001a      	movs	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a13      	ldr	r2, [pc, #76]	@ (8004608 <TIM_Base_SetConfig+0x100>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <TIM_Base_SetConfig+0xce>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a14      	ldr	r2, [pc, #80]	@ (8004614 <TIM_Base_SetConfig+0x10c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_Base_SetConfig+0xce>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a13      	ldr	r2, [pc, #76]	@ (8004618 <TIM_Base_SetConfig+0x110>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_Base_SetConfig+0xce>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a12      	ldr	r2, [pc, #72]	@ (800461c <TIM_Base_SetConfig+0x114>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d103      	bne.n	80045de <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2201      	movs	r2, #1
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d106      	bne.n	80045fe <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2201      	movs	r2, #1
 80045f6:	4393      	bics	r3, r2
 80045f8:	001a      	movs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	611a      	str	r2, [r3, #16]
  }
}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b004      	add	sp, #16
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40000400 	.word	0x40000400
 8004610:	40002000 	.word	0x40002000
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800
 8004620:	fffffcff 	.word	0xfffffcff

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	223c      	movs	r2, #60	@ 0x3c
 8004632:	5c9b      	ldrb	r3, [r3, r2]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e047      	b.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	223c      	movs	r2, #60	@ 0x3c
 8004640:	2101      	movs	r1, #1
 8004642:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	223d      	movs	r2, #61	@ 0x3d
 8004648:	2102      	movs	r1, #2
 800464a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2270      	movs	r2, #112	@ 0x70
 8004660:	4393      	bics	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a16      	ldr	r2, [pc, #88]	@ (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00f      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	05db      	lsls	r3, r3, #23
 8004688:	429a      	cmp	r2, r3
 800468a:	d009      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a11      	ldr	r2, [pc, #68]	@ (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a10      	ldr	r2, [pc, #64]	@ (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10c      	bne.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2280      	movs	r2, #128	@ 0x80
 80046a4:	4393      	bics	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	223d      	movs	r2, #61	@ 0x3d
 80046be:	2101      	movs	r1, #1
 80046c0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	223c      	movs	r2, #60	@ 0x3c
 80046c6:	2100      	movs	r1, #0
 80046c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40014000 	.word	0x40014000

080046e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e8:	46c0      	nop			@ (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <cos>:
 8004700:	b530      	push	{r4, r5, lr}
 8004702:	4a1d      	ldr	r2, [pc, #116]	@ (8004778 <cos+0x78>)
 8004704:	004b      	lsls	r3, r1, #1
 8004706:	b087      	sub	sp, #28
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	4293      	cmp	r3, r2
 800470c:	d804      	bhi.n	8004718 <cos+0x18>
 800470e:	2200      	movs	r2, #0
 8004710:	2300      	movs	r3, #0
 8004712:	f000 f835 	bl	8004780 <__kernel_cos>
 8004716:	e006      	b.n	8004726 <cos+0x26>
 8004718:	4a18      	ldr	r2, [pc, #96]	@ (800477c <cos+0x7c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d905      	bls.n	800472a <cos+0x2a>
 800471e:	0002      	movs	r2, r0
 8004720:	000b      	movs	r3, r1
 8004722:	f7fd f931 	bl	8001988 <__aeabi_dsub>
 8004726:	b007      	add	sp, #28
 8004728:	bd30      	pop	{r4, r5, pc}
 800472a:	aa02      	add	r2, sp, #8
 800472c:	f000 f994 	bl	8004a58 <__ieee754_rem_pio2>
 8004730:	9c04      	ldr	r4, [sp, #16]
 8004732:	9d05      	ldr	r5, [sp, #20]
 8004734:	2303      	movs	r3, #3
 8004736:	4003      	ands	r3, r0
 8004738:	9802      	ldr	r0, [sp, #8]
 800473a:	9903      	ldr	r1, [sp, #12]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d006      	beq.n	800474e <cos+0x4e>
 8004740:	2b02      	cmp	r3, #2
 8004742:	d00d      	beq.n	8004760 <cos+0x60>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d110      	bne.n	800476a <cos+0x6a>
 8004748:	0022      	movs	r2, r4
 800474a:	002b      	movs	r3, r5
 800474c:	e7e1      	b.n	8004712 <cos+0x12>
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	0022      	movs	r2, r4
 8004752:	002b      	movs	r3, r5
 8004754:	f000 f8d4 	bl	8004900 <__kernel_sin>
 8004758:	2380      	movs	r3, #128	@ 0x80
 800475a:	061b      	lsls	r3, r3, #24
 800475c:	18c9      	adds	r1, r1, r3
 800475e:	e7e2      	b.n	8004726 <cos+0x26>
 8004760:	0022      	movs	r2, r4
 8004762:	002b      	movs	r3, r5
 8004764:	f000 f80c 	bl	8004780 <__kernel_cos>
 8004768:	e7f6      	b.n	8004758 <cos+0x58>
 800476a:	2301      	movs	r3, #1
 800476c:	0022      	movs	r2, r4
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	002b      	movs	r3, r5
 8004772:	f000 f8c5 	bl	8004900 <__kernel_sin>
 8004776:	e7d6      	b.n	8004726 <cos+0x26>
 8004778:	3fe921fb 	.word	0x3fe921fb
 800477c:	7fefffff 	.word	0x7fefffff

08004780 <__kernel_cos>:
 8004780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004782:	b087      	sub	sp, #28
 8004784:	9204      	str	r2, [sp, #16]
 8004786:	9305      	str	r3, [sp, #20]
 8004788:	004b      	lsls	r3, r1, #1
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	23f9      	movs	r3, #249	@ 0xf9
 8004790:	9a01      	ldr	r2, [sp, #4]
 8004792:	0004      	movs	r4, r0
 8004794:	000d      	movs	r5, r1
 8004796:	059b      	lsls	r3, r3, #22
 8004798:	429a      	cmp	r2, r3
 800479a:	d204      	bcs.n	80047a6 <__kernel_cos+0x26>
 800479c:	f7fd fc90 	bl	80020c0 <__aeabi_d2iz>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d100      	bne.n	80047a6 <__kernel_cos+0x26>
 80047a4:	e084      	b.n	80048b0 <__kernel_cos+0x130>
 80047a6:	0022      	movs	r2, r4
 80047a8:	002b      	movs	r3, r5
 80047aa:	0020      	movs	r0, r4
 80047ac:	0029      	movs	r1, r5
 80047ae:	f7fc fe23 	bl	80013f8 <__aeabi_dmul>
 80047b2:	2200      	movs	r2, #0
 80047b4:	4b40      	ldr	r3, [pc, #256]	@ (80048b8 <__kernel_cos+0x138>)
 80047b6:	0006      	movs	r6, r0
 80047b8:	000f      	movs	r7, r1
 80047ba:	f7fc fe1d 	bl	80013f8 <__aeabi_dmul>
 80047be:	4a3f      	ldr	r2, [pc, #252]	@ (80048bc <__kernel_cos+0x13c>)
 80047c0:	9002      	str	r0, [sp, #8]
 80047c2:	9103      	str	r1, [sp, #12]
 80047c4:	4b3e      	ldr	r3, [pc, #248]	@ (80048c0 <__kernel_cos+0x140>)
 80047c6:	0030      	movs	r0, r6
 80047c8:	0039      	movs	r1, r7
 80047ca:	f7fc fe15 	bl	80013f8 <__aeabi_dmul>
 80047ce:	4a3d      	ldr	r2, [pc, #244]	@ (80048c4 <__kernel_cos+0x144>)
 80047d0:	4b3d      	ldr	r3, [pc, #244]	@ (80048c8 <__kernel_cos+0x148>)
 80047d2:	f7fb fe69 	bl	80004a8 <__aeabi_dadd>
 80047d6:	0032      	movs	r2, r6
 80047d8:	003b      	movs	r3, r7
 80047da:	f7fc fe0d 	bl	80013f8 <__aeabi_dmul>
 80047de:	4a3b      	ldr	r2, [pc, #236]	@ (80048cc <__kernel_cos+0x14c>)
 80047e0:	4b3b      	ldr	r3, [pc, #236]	@ (80048d0 <__kernel_cos+0x150>)
 80047e2:	f7fd f8d1 	bl	8001988 <__aeabi_dsub>
 80047e6:	0032      	movs	r2, r6
 80047e8:	003b      	movs	r3, r7
 80047ea:	f7fc fe05 	bl	80013f8 <__aeabi_dmul>
 80047ee:	4a39      	ldr	r2, [pc, #228]	@ (80048d4 <__kernel_cos+0x154>)
 80047f0:	4b39      	ldr	r3, [pc, #228]	@ (80048d8 <__kernel_cos+0x158>)
 80047f2:	f7fb fe59 	bl	80004a8 <__aeabi_dadd>
 80047f6:	0032      	movs	r2, r6
 80047f8:	003b      	movs	r3, r7
 80047fa:	f7fc fdfd 	bl	80013f8 <__aeabi_dmul>
 80047fe:	4a37      	ldr	r2, [pc, #220]	@ (80048dc <__kernel_cos+0x15c>)
 8004800:	4b37      	ldr	r3, [pc, #220]	@ (80048e0 <__kernel_cos+0x160>)
 8004802:	f7fd f8c1 	bl	8001988 <__aeabi_dsub>
 8004806:	0032      	movs	r2, r6
 8004808:	003b      	movs	r3, r7
 800480a:	f7fc fdf5 	bl	80013f8 <__aeabi_dmul>
 800480e:	4a35      	ldr	r2, [pc, #212]	@ (80048e4 <__kernel_cos+0x164>)
 8004810:	4b35      	ldr	r3, [pc, #212]	@ (80048e8 <__kernel_cos+0x168>)
 8004812:	f7fb fe49 	bl	80004a8 <__aeabi_dadd>
 8004816:	0032      	movs	r2, r6
 8004818:	003b      	movs	r3, r7
 800481a:	f7fc fded 	bl	80013f8 <__aeabi_dmul>
 800481e:	0032      	movs	r2, r6
 8004820:	003b      	movs	r3, r7
 8004822:	f7fc fde9 	bl	80013f8 <__aeabi_dmul>
 8004826:	9a04      	ldr	r2, [sp, #16]
 8004828:	9b05      	ldr	r3, [sp, #20]
 800482a:	0006      	movs	r6, r0
 800482c:	000f      	movs	r7, r1
 800482e:	0020      	movs	r0, r4
 8004830:	0029      	movs	r1, r5
 8004832:	f7fc fde1 	bl	80013f8 <__aeabi_dmul>
 8004836:	0002      	movs	r2, r0
 8004838:	000b      	movs	r3, r1
 800483a:	0030      	movs	r0, r6
 800483c:	0039      	movs	r1, r7
 800483e:	f7fd f8a3 	bl	8001988 <__aeabi_dsub>
 8004842:	4b2a      	ldr	r3, [pc, #168]	@ (80048ec <__kernel_cos+0x16c>)
 8004844:	9a01      	ldr	r2, [sp, #4]
 8004846:	9004      	str	r0, [sp, #16]
 8004848:	9105      	str	r1, [sp, #20]
 800484a:	429a      	cmp	r2, r3
 800484c:	d80d      	bhi.n	800486a <__kernel_cos+0xea>
 800484e:	0002      	movs	r2, r0
 8004850:	000b      	movs	r3, r1
 8004852:	9802      	ldr	r0, [sp, #8]
 8004854:	9903      	ldr	r1, [sp, #12]
 8004856:	f7fd f897 	bl	8001988 <__aeabi_dsub>
 800485a:	0002      	movs	r2, r0
 800485c:	2000      	movs	r0, #0
 800485e:	000b      	movs	r3, r1
 8004860:	4923      	ldr	r1, [pc, #140]	@ (80048f0 <__kernel_cos+0x170>)
 8004862:	f7fd f891 	bl	8001988 <__aeabi_dsub>
 8004866:	b007      	add	sp, #28
 8004868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800486a:	4b22      	ldr	r3, [pc, #136]	@ (80048f4 <__kernel_cos+0x174>)
 800486c:	9a01      	ldr	r2, [sp, #4]
 800486e:	2600      	movs	r6, #0
 8004870:	429a      	cmp	r2, r3
 8004872:	d81b      	bhi.n	80048ac <__kernel_cos+0x12c>
 8004874:	0013      	movs	r3, r2
 8004876:	4a20      	ldr	r2, [pc, #128]	@ (80048f8 <__kernel_cos+0x178>)
 8004878:	4694      	mov	ip, r2
 800487a:	4463      	add	r3, ip
 800487c:	001f      	movs	r7, r3
 800487e:	0032      	movs	r2, r6
 8004880:	003b      	movs	r3, r7
 8004882:	2000      	movs	r0, #0
 8004884:	491a      	ldr	r1, [pc, #104]	@ (80048f0 <__kernel_cos+0x170>)
 8004886:	f7fd f87f 	bl	8001988 <__aeabi_dsub>
 800488a:	0032      	movs	r2, r6
 800488c:	0004      	movs	r4, r0
 800488e:	000d      	movs	r5, r1
 8004890:	9802      	ldr	r0, [sp, #8]
 8004892:	9903      	ldr	r1, [sp, #12]
 8004894:	003b      	movs	r3, r7
 8004896:	f7fd f877 	bl	8001988 <__aeabi_dsub>
 800489a:	9a04      	ldr	r2, [sp, #16]
 800489c:	9b05      	ldr	r3, [sp, #20]
 800489e:	f7fd f873 	bl	8001988 <__aeabi_dsub>
 80048a2:	0002      	movs	r2, r0
 80048a4:	000b      	movs	r3, r1
 80048a6:	0020      	movs	r0, r4
 80048a8:	0029      	movs	r1, r5
 80048aa:	e7da      	b.n	8004862 <__kernel_cos+0xe2>
 80048ac:	4f13      	ldr	r7, [pc, #76]	@ (80048fc <__kernel_cos+0x17c>)
 80048ae:	e7e6      	b.n	800487e <__kernel_cos+0xfe>
 80048b0:	2000      	movs	r0, #0
 80048b2:	490f      	ldr	r1, [pc, #60]	@ (80048f0 <__kernel_cos+0x170>)
 80048b4:	e7d7      	b.n	8004866 <__kernel_cos+0xe6>
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	3fe00000 	.word	0x3fe00000
 80048bc:	be8838d4 	.word	0xbe8838d4
 80048c0:	bda8fae9 	.word	0xbda8fae9
 80048c4:	bdb4b1c4 	.word	0xbdb4b1c4
 80048c8:	3e21ee9e 	.word	0x3e21ee9e
 80048cc:	809c52ad 	.word	0x809c52ad
 80048d0:	3e927e4f 	.word	0x3e927e4f
 80048d4:	19cb1590 	.word	0x19cb1590
 80048d8:	3efa01a0 	.word	0x3efa01a0
 80048dc:	16c15177 	.word	0x16c15177
 80048e0:	3f56c16c 	.word	0x3f56c16c
 80048e4:	5555554c 	.word	0x5555554c
 80048e8:	3fa55555 	.word	0x3fa55555
 80048ec:	3fd33332 	.word	0x3fd33332
 80048f0:	3ff00000 	.word	0x3ff00000
 80048f4:	3fe90000 	.word	0x3fe90000
 80048f8:	ffe00000 	.word	0xffe00000
 80048fc:	3fd20000 	.word	0x3fd20000

08004900 <__kernel_sin>:
 8004900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004902:	b089      	sub	sp, #36	@ 0x24
 8004904:	9202      	str	r2, [sp, #8]
 8004906:	9303      	str	r3, [sp, #12]
 8004908:	22f9      	movs	r2, #249	@ 0xf9
 800490a:	004b      	lsls	r3, r1, #1
 800490c:	0006      	movs	r6, r0
 800490e:	000f      	movs	r7, r1
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	0592      	lsls	r2, r2, #22
 8004914:	4293      	cmp	r3, r2
 8004916:	d203      	bcs.n	8004920 <__kernel_sin+0x20>
 8004918:	f7fd fbd2 	bl	80020c0 <__aeabi_d2iz>
 800491c:	2800      	cmp	r0, #0
 800491e:	d04c      	beq.n	80049ba <__kernel_sin+0xba>
 8004920:	0032      	movs	r2, r6
 8004922:	003b      	movs	r3, r7
 8004924:	0030      	movs	r0, r6
 8004926:	0039      	movs	r1, r7
 8004928:	f7fc fd66 	bl	80013f8 <__aeabi_dmul>
 800492c:	0004      	movs	r4, r0
 800492e:	000d      	movs	r5, r1
 8004930:	0002      	movs	r2, r0
 8004932:	000b      	movs	r3, r1
 8004934:	0030      	movs	r0, r6
 8004936:	0039      	movs	r1, r7
 8004938:	f7fc fd5e 	bl	80013f8 <__aeabi_dmul>
 800493c:	4a39      	ldr	r2, [pc, #228]	@ (8004a24 <__kernel_sin+0x124>)
 800493e:	9000      	str	r0, [sp, #0]
 8004940:	9101      	str	r1, [sp, #4]
 8004942:	4b39      	ldr	r3, [pc, #228]	@ (8004a28 <__kernel_sin+0x128>)
 8004944:	0020      	movs	r0, r4
 8004946:	0029      	movs	r1, r5
 8004948:	f7fc fd56 	bl	80013f8 <__aeabi_dmul>
 800494c:	4a37      	ldr	r2, [pc, #220]	@ (8004a2c <__kernel_sin+0x12c>)
 800494e:	4b38      	ldr	r3, [pc, #224]	@ (8004a30 <__kernel_sin+0x130>)
 8004950:	f7fd f81a 	bl	8001988 <__aeabi_dsub>
 8004954:	0022      	movs	r2, r4
 8004956:	002b      	movs	r3, r5
 8004958:	f7fc fd4e 	bl	80013f8 <__aeabi_dmul>
 800495c:	4a35      	ldr	r2, [pc, #212]	@ (8004a34 <__kernel_sin+0x134>)
 800495e:	4b36      	ldr	r3, [pc, #216]	@ (8004a38 <__kernel_sin+0x138>)
 8004960:	f7fb fda2 	bl	80004a8 <__aeabi_dadd>
 8004964:	0022      	movs	r2, r4
 8004966:	002b      	movs	r3, r5
 8004968:	f7fc fd46 	bl	80013f8 <__aeabi_dmul>
 800496c:	4a33      	ldr	r2, [pc, #204]	@ (8004a3c <__kernel_sin+0x13c>)
 800496e:	4b34      	ldr	r3, [pc, #208]	@ (8004a40 <__kernel_sin+0x140>)
 8004970:	f7fd f80a 	bl	8001988 <__aeabi_dsub>
 8004974:	0022      	movs	r2, r4
 8004976:	002b      	movs	r3, r5
 8004978:	f7fc fd3e 	bl	80013f8 <__aeabi_dmul>
 800497c:	4b31      	ldr	r3, [pc, #196]	@ (8004a44 <__kernel_sin+0x144>)
 800497e:	4a32      	ldr	r2, [pc, #200]	@ (8004a48 <__kernel_sin+0x148>)
 8004980:	f7fb fd92 	bl	80004a8 <__aeabi_dadd>
 8004984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004986:	9004      	str	r0, [sp, #16]
 8004988:	9105      	str	r1, [sp, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d119      	bne.n	80049c2 <__kernel_sin+0xc2>
 800498e:	0002      	movs	r2, r0
 8004990:	000b      	movs	r3, r1
 8004992:	0020      	movs	r0, r4
 8004994:	0029      	movs	r1, r5
 8004996:	f7fc fd2f 	bl	80013f8 <__aeabi_dmul>
 800499a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a4c <__kernel_sin+0x14c>)
 800499c:	4b2c      	ldr	r3, [pc, #176]	@ (8004a50 <__kernel_sin+0x150>)
 800499e:	f7fc fff3 	bl	8001988 <__aeabi_dsub>
 80049a2:	9a00      	ldr	r2, [sp, #0]
 80049a4:	9b01      	ldr	r3, [sp, #4]
 80049a6:	f7fc fd27 	bl	80013f8 <__aeabi_dmul>
 80049aa:	0002      	movs	r2, r0
 80049ac:	000b      	movs	r3, r1
 80049ae:	0030      	movs	r0, r6
 80049b0:	0039      	movs	r1, r7
 80049b2:	f7fb fd79 	bl	80004a8 <__aeabi_dadd>
 80049b6:	0006      	movs	r6, r0
 80049b8:	000f      	movs	r7, r1
 80049ba:	0030      	movs	r0, r6
 80049bc:	0039      	movs	r1, r7
 80049be:	b009      	add	sp, #36	@ 0x24
 80049c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c2:	2200      	movs	r2, #0
 80049c4:	9802      	ldr	r0, [sp, #8]
 80049c6:	9903      	ldr	r1, [sp, #12]
 80049c8:	4b22      	ldr	r3, [pc, #136]	@ (8004a54 <__kernel_sin+0x154>)
 80049ca:	f7fc fd15 	bl	80013f8 <__aeabi_dmul>
 80049ce:	9a04      	ldr	r2, [sp, #16]
 80049d0:	9b05      	ldr	r3, [sp, #20]
 80049d2:	9006      	str	r0, [sp, #24]
 80049d4:	9107      	str	r1, [sp, #28]
 80049d6:	9800      	ldr	r0, [sp, #0]
 80049d8:	9901      	ldr	r1, [sp, #4]
 80049da:	f7fc fd0d 	bl	80013f8 <__aeabi_dmul>
 80049de:	0002      	movs	r2, r0
 80049e0:	000b      	movs	r3, r1
 80049e2:	9806      	ldr	r0, [sp, #24]
 80049e4:	9907      	ldr	r1, [sp, #28]
 80049e6:	f7fc ffcf 	bl	8001988 <__aeabi_dsub>
 80049ea:	0022      	movs	r2, r4
 80049ec:	002b      	movs	r3, r5
 80049ee:	f7fc fd03 	bl	80013f8 <__aeabi_dmul>
 80049f2:	9a02      	ldr	r2, [sp, #8]
 80049f4:	9b03      	ldr	r3, [sp, #12]
 80049f6:	f7fc ffc7 	bl	8001988 <__aeabi_dsub>
 80049fa:	4a14      	ldr	r2, [pc, #80]	@ (8004a4c <__kernel_sin+0x14c>)
 80049fc:	0004      	movs	r4, r0
 80049fe:	000d      	movs	r5, r1
 8004a00:	9800      	ldr	r0, [sp, #0]
 8004a02:	9901      	ldr	r1, [sp, #4]
 8004a04:	4b12      	ldr	r3, [pc, #72]	@ (8004a50 <__kernel_sin+0x150>)
 8004a06:	f7fc fcf7 	bl	80013f8 <__aeabi_dmul>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	000b      	movs	r3, r1
 8004a0e:	0020      	movs	r0, r4
 8004a10:	0029      	movs	r1, r5
 8004a12:	f7fb fd49 	bl	80004a8 <__aeabi_dadd>
 8004a16:	0002      	movs	r2, r0
 8004a18:	000b      	movs	r3, r1
 8004a1a:	0030      	movs	r0, r6
 8004a1c:	0039      	movs	r1, r7
 8004a1e:	f7fc ffb3 	bl	8001988 <__aeabi_dsub>
 8004a22:	e7c8      	b.n	80049b6 <__kernel_sin+0xb6>
 8004a24:	5acfd57c 	.word	0x5acfd57c
 8004a28:	3de5d93a 	.word	0x3de5d93a
 8004a2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004a30:	3e5ae5e6 	.word	0x3e5ae5e6
 8004a34:	57b1fe7d 	.word	0x57b1fe7d
 8004a38:	3ec71de3 	.word	0x3ec71de3
 8004a3c:	19c161d5 	.word	0x19c161d5
 8004a40:	3f2a01a0 	.word	0x3f2a01a0
 8004a44:	3f811111 	.word	0x3f811111
 8004a48:	1110f8a6 	.word	0x1110f8a6
 8004a4c:	55555549 	.word	0x55555549
 8004a50:	3fc55555 	.word	0x3fc55555
 8004a54:	3fe00000 	.word	0x3fe00000

08004a58 <__ieee754_rem_pio2>:
 8004a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a5a:	4baf      	ldr	r3, [pc, #700]	@ (8004d18 <__ieee754_rem_pio2+0x2c0>)
 8004a5c:	b095      	sub	sp, #84	@ 0x54
 8004a5e:	004d      	lsls	r5, r1, #1
 8004a60:	0017      	movs	r7, r2
 8004a62:	910d      	str	r1, [sp, #52]	@ 0x34
 8004a64:	086d      	lsrs	r5, r5, #1
 8004a66:	429d      	cmp	r5, r3
 8004a68:	d807      	bhi.n	8004a7a <__ieee754_rem_pio2+0x22>
 8004a6a:	6010      	str	r0, [r2, #0]
 8004a6c:	6051      	str	r1, [r2, #4]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2200      	movs	r2, #0
 8004a72:	60ba      	str	r2, [r7, #8]
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	2300      	movs	r3, #0
 8004a78:	e024      	b.n	8004ac4 <__ieee754_rem_pio2+0x6c>
 8004a7a:	4ba8      	ldr	r3, [pc, #672]	@ (8004d1c <__ieee754_rem_pio2+0x2c4>)
 8004a7c:	429d      	cmp	r5, r3
 8004a7e:	d900      	bls.n	8004a82 <__ieee754_rem_pio2+0x2a>
 8004a80:	e072      	b.n	8004b68 <__ieee754_rem_pio2+0x110>
 8004a82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a84:	4ca6      	ldr	r4, [pc, #664]	@ (8004d20 <__ieee754_rem_pio2+0x2c8>)
 8004a86:	4aa7      	ldr	r2, [pc, #668]	@ (8004d24 <__ieee754_rem_pio2+0x2cc>)
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	dd37      	ble.n	8004afc <__ieee754_rem_pio2+0xa4>
 8004a8c:	4ba4      	ldr	r3, [pc, #656]	@ (8004d20 <__ieee754_rem_pio2+0x2c8>)
 8004a8e:	f7fc ff7b 	bl	8001988 <__aeabi_dsub>
 8004a92:	9002      	str	r0, [sp, #8]
 8004a94:	9103      	str	r1, [sp, #12]
 8004a96:	42a5      	cmp	r5, r4
 8004a98:	d018      	beq.n	8004acc <__ieee754_rem_pio2+0x74>
 8004a9a:	4aa3      	ldr	r2, [pc, #652]	@ (8004d28 <__ieee754_rem_pio2+0x2d0>)
 8004a9c:	4ba3      	ldr	r3, [pc, #652]	@ (8004d2c <__ieee754_rem_pio2+0x2d4>)
 8004a9e:	f7fc ff73 	bl	8001988 <__aeabi_dsub>
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	000b      	movs	r3, r1
 8004aa6:	0004      	movs	r4, r0
 8004aa8:	000d      	movs	r5, r1
 8004aaa:	9802      	ldr	r0, [sp, #8]
 8004aac:	9903      	ldr	r1, [sp, #12]
 8004aae:	f7fc ff6b 	bl	8001988 <__aeabi_dsub>
 8004ab2:	4a9d      	ldr	r2, [pc, #628]	@ (8004d28 <__ieee754_rem_pio2+0x2d0>)
 8004ab4:	4b9d      	ldr	r3, [pc, #628]	@ (8004d2c <__ieee754_rem_pio2+0x2d4>)
 8004ab6:	f7fc ff67 	bl	8001988 <__aeabi_dsub>
 8004aba:	2301      	movs	r3, #1
 8004abc:	603c      	str	r4, [r7, #0]
 8004abe:	607d      	str	r5, [r7, #4]
 8004ac0:	60b8      	str	r0, [r7, #8]
 8004ac2:	60f9      	str	r1, [r7, #12]
 8004ac4:	9302      	str	r3, [sp, #8]
 8004ac6:	9802      	ldr	r0, [sp, #8]
 8004ac8:	b015      	add	sp, #84	@ 0x54
 8004aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004acc:	22d3      	movs	r2, #211	@ 0xd3
 8004ace:	9802      	ldr	r0, [sp, #8]
 8004ad0:	9903      	ldr	r1, [sp, #12]
 8004ad2:	4b96      	ldr	r3, [pc, #600]	@ (8004d2c <__ieee754_rem_pio2+0x2d4>)
 8004ad4:	0552      	lsls	r2, r2, #21
 8004ad6:	f7fc ff57 	bl	8001988 <__aeabi_dsub>
 8004ada:	4a95      	ldr	r2, [pc, #596]	@ (8004d30 <__ieee754_rem_pio2+0x2d8>)
 8004adc:	4b95      	ldr	r3, [pc, #596]	@ (8004d34 <__ieee754_rem_pio2+0x2dc>)
 8004ade:	9002      	str	r0, [sp, #8]
 8004ae0:	9103      	str	r1, [sp, #12]
 8004ae2:	f7fc ff51 	bl	8001988 <__aeabi_dsub>
 8004ae6:	0002      	movs	r2, r0
 8004ae8:	000b      	movs	r3, r1
 8004aea:	0004      	movs	r4, r0
 8004aec:	000d      	movs	r5, r1
 8004aee:	9802      	ldr	r0, [sp, #8]
 8004af0:	9903      	ldr	r1, [sp, #12]
 8004af2:	f7fc ff49 	bl	8001988 <__aeabi_dsub>
 8004af6:	4a8e      	ldr	r2, [pc, #568]	@ (8004d30 <__ieee754_rem_pio2+0x2d8>)
 8004af8:	4b8e      	ldr	r3, [pc, #568]	@ (8004d34 <__ieee754_rem_pio2+0x2dc>)
 8004afa:	e7dc      	b.n	8004ab6 <__ieee754_rem_pio2+0x5e>
 8004afc:	4b88      	ldr	r3, [pc, #544]	@ (8004d20 <__ieee754_rem_pio2+0x2c8>)
 8004afe:	f7fb fcd3 	bl	80004a8 <__aeabi_dadd>
 8004b02:	9002      	str	r0, [sp, #8]
 8004b04:	9103      	str	r1, [sp, #12]
 8004b06:	42a5      	cmp	r5, r4
 8004b08:	d016      	beq.n	8004b38 <__ieee754_rem_pio2+0xe0>
 8004b0a:	4a87      	ldr	r2, [pc, #540]	@ (8004d28 <__ieee754_rem_pio2+0x2d0>)
 8004b0c:	4b87      	ldr	r3, [pc, #540]	@ (8004d2c <__ieee754_rem_pio2+0x2d4>)
 8004b0e:	f7fb fccb 	bl	80004a8 <__aeabi_dadd>
 8004b12:	0002      	movs	r2, r0
 8004b14:	000b      	movs	r3, r1
 8004b16:	0004      	movs	r4, r0
 8004b18:	000d      	movs	r5, r1
 8004b1a:	9802      	ldr	r0, [sp, #8]
 8004b1c:	9903      	ldr	r1, [sp, #12]
 8004b1e:	f7fc ff33 	bl	8001988 <__aeabi_dsub>
 8004b22:	4a81      	ldr	r2, [pc, #516]	@ (8004d28 <__ieee754_rem_pio2+0x2d0>)
 8004b24:	4b81      	ldr	r3, [pc, #516]	@ (8004d2c <__ieee754_rem_pio2+0x2d4>)
 8004b26:	f7fb fcbf 	bl	80004a8 <__aeabi_dadd>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	603c      	str	r4, [r7, #0]
 8004b2e:	607d      	str	r5, [r7, #4]
 8004b30:	60b8      	str	r0, [r7, #8]
 8004b32:	60f9      	str	r1, [r7, #12]
 8004b34:	425b      	negs	r3, r3
 8004b36:	e7c5      	b.n	8004ac4 <__ieee754_rem_pio2+0x6c>
 8004b38:	22d3      	movs	r2, #211	@ 0xd3
 8004b3a:	9802      	ldr	r0, [sp, #8]
 8004b3c:	9903      	ldr	r1, [sp, #12]
 8004b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8004d2c <__ieee754_rem_pio2+0x2d4>)
 8004b40:	0552      	lsls	r2, r2, #21
 8004b42:	f7fb fcb1 	bl	80004a8 <__aeabi_dadd>
 8004b46:	4a7a      	ldr	r2, [pc, #488]	@ (8004d30 <__ieee754_rem_pio2+0x2d8>)
 8004b48:	4b7a      	ldr	r3, [pc, #488]	@ (8004d34 <__ieee754_rem_pio2+0x2dc>)
 8004b4a:	9002      	str	r0, [sp, #8]
 8004b4c:	9103      	str	r1, [sp, #12]
 8004b4e:	f7fb fcab 	bl	80004a8 <__aeabi_dadd>
 8004b52:	0002      	movs	r2, r0
 8004b54:	000b      	movs	r3, r1
 8004b56:	0004      	movs	r4, r0
 8004b58:	000d      	movs	r5, r1
 8004b5a:	9802      	ldr	r0, [sp, #8]
 8004b5c:	9903      	ldr	r1, [sp, #12]
 8004b5e:	f7fc ff13 	bl	8001988 <__aeabi_dsub>
 8004b62:	4a73      	ldr	r2, [pc, #460]	@ (8004d30 <__ieee754_rem_pio2+0x2d8>)
 8004b64:	4b73      	ldr	r3, [pc, #460]	@ (8004d34 <__ieee754_rem_pio2+0x2dc>)
 8004b66:	e7de      	b.n	8004b26 <__ieee754_rem_pio2+0xce>
 8004b68:	4b73      	ldr	r3, [pc, #460]	@ (8004d38 <__ieee754_rem_pio2+0x2e0>)
 8004b6a:	429d      	cmp	r5, r3
 8004b6c:	d900      	bls.n	8004b70 <__ieee754_rem_pio2+0x118>
 8004b6e:	e0c6      	b.n	8004cfe <__ieee754_rem_pio2+0x2a6>
 8004b70:	f000 f94e 	bl	8004e10 <fabs>
 8004b74:	4a71      	ldr	r2, [pc, #452]	@ (8004d3c <__ieee754_rem_pio2+0x2e4>)
 8004b76:	4b72      	ldr	r3, [pc, #456]	@ (8004d40 <__ieee754_rem_pio2+0x2e8>)
 8004b78:	9004      	str	r0, [sp, #16]
 8004b7a:	9105      	str	r1, [sp, #20]
 8004b7c:	f7fc fc3c 	bl	80013f8 <__aeabi_dmul>
 8004b80:	2200      	movs	r2, #0
 8004b82:	4b70      	ldr	r3, [pc, #448]	@ (8004d44 <__ieee754_rem_pio2+0x2ec>)
 8004b84:	f7fb fc90 	bl	80004a8 <__aeabi_dadd>
 8004b88:	f7fd fa9a 	bl	80020c0 <__aeabi_d2iz>
 8004b8c:	9002      	str	r0, [sp, #8]
 8004b8e:	f7fd fad3 	bl	8002138 <__aeabi_i2d>
 8004b92:	4a64      	ldr	r2, [pc, #400]	@ (8004d24 <__ieee754_rem_pio2+0x2cc>)
 8004b94:	4b62      	ldr	r3, [pc, #392]	@ (8004d20 <__ieee754_rem_pio2+0x2c8>)
 8004b96:	9008      	str	r0, [sp, #32]
 8004b98:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b9a:	f7fc fc2d 	bl	80013f8 <__aeabi_dmul>
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	000b      	movs	r3, r1
 8004ba2:	9804      	ldr	r0, [sp, #16]
 8004ba4:	9905      	ldr	r1, [sp, #20]
 8004ba6:	f7fc feef 	bl	8001988 <__aeabi_dsub>
 8004baa:	4b60      	ldr	r3, [pc, #384]	@ (8004d2c <__ieee754_rem_pio2+0x2d4>)
 8004bac:	9004      	str	r0, [sp, #16]
 8004bae:	9105      	str	r1, [sp, #20]
 8004bb0:	9808      	ldr	r0, [sp, #32]
 8004bb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004bb4:	4a5c      	ldr	r2, [pc, #368]	@ (8004d28 <__ieee754_rem_pio2+0x2d0>)
 8004bb6:	f7fc fc1f 	bl	80013f8 <__aeabi_dmul>
 8004bba:	9b02      	ldr	r3, [sp, #8]
 8004bbc:	9006      	str	r0, [sp, #24]
 8004bbe:	9107      	str	r1, [sp, #28]
 8004bc0:	2b1f      	cmp	r3, #31
 8004bc2:	dc0d      	bgt.n	8004be0 <__ieee754_rem_pio2+0x188>
 8004bc4:	9a02      	ldr	r2, [sp, #8]
 8004bc6:	4b60      	ldr	r3, [pc, #384]	@ (8004d48 <__ieee754_rem_pio2+0x2f0>)
 8004bc8:	3a01      	subs	r2, #1
 8004bca:	0092      	lsls	r2, r2, #2
 8004bcc:	58d3      	ldr	r3, [r2, r3]
 8004bce:	42ab      	cmp	r3, r5
 8004bd0:	d006      	beq.n	8004be0 <__ieee754_rem_pio2+0x188>
 8004bd2:	0002      	movs	r2, r0
 8004bd4:	000b      	movs	r3, r1
 8004bd6:	9804      	ldr	r0, [sp, #16]
 8004bd8:	9905      	ldr	r1, [sp, #20]
 8004bda:	f7fc fed5 	bl	8001988 <__aeabi_dsub>
 8004bde:	e00b      	b.n	8004bf8 <__ieee754_rem_pio2+0x1a0>
 8004be0:	9a06      	ldr	r2, [sp, #24]
 8004be2:	9b07      	ldr	r3, [sp, #28]
 8004be4:	9804      	ldr	r0, [sp, #16]
 8004be6:	9905      	ldr	r1, [sp, #20]
 8004be8:	f7fc fece 	bl	8001988 <__aeabi_dsub>
 8004bec:	004b      	lsls	r3, r1, #1
 8004bee:	152e      	asrs	r6, r5, #20
 8004bf0:	0d5b      	lsrs	r3, r3, #21
 8004bf2:	1af3      	subs	r3, r6, r3
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	dc02      	bgt.n	8004bfe <__ieee754_rem_pio2+0x1a6>
 8004bf8:	6038      	str	r0, [r7, #0]
 8004bfa:	6079      	str	r1, [r7, #4]
 8004bfc:	e039      	b.n	8004c72 <__ieee754_rem_pio2+0x21a>
 8004bfe:	22d3      	movs	r2, #211	@ 0xd3
 8004c00:	9808      	ldr	r0, [sp, #32]
 8004c02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c04:	4b49      	ldr	r3, [pc, #292]	@ (8004d2c <__ieee754_rem_pio2+0x2d4>)
 8004c06:	0552      	lsls	r2, r2, #21
 8004c08:	f7fc fbf6 	bl	80013f8 <__aeabi_dmul>
 8004c0c:	0004      	movs	r4, r0
 8004c0e:	000d      	movs	r5, r1
 8004c10:	0002      	movs	r2, r0
 8004c12:	000b      	movs	r3, r1
 8004c14:	9804      	ldr	r0, [sp, #16]
 8004c16:	9905      	ldr	r1, [sp, #20]
 8004c18:	f7fc feb6 	bl	8001988 <__aeabi_dsub>
 8004c1c:	0002      	movs	r2, r0
 8004c1e:	000b      	movs	r3, r1
 8004c20:	900a      	str	r0, [sp, #40]	@ 0x28
 8004c22:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004c24:	9804      	ldr	r0, [sp, #16]
 8004c26:	9905      	ldr	r1, [sp, #20]
 8004c28:	f7fc feae 	bl	8001988 <__aeabi_dsub>
 8004c2c:	0022      	movs	r2, r4
 8004c2e:	002b      	movs	r3, r5
 8004c30:	f7fc feaa 	bl	8001988 <__aeabi_dsub>
 8004c34:	0004      	movs	r4, r0
 8004c36:	000d      	movs	r5, r1
 8004c38:	9808      	ldr	r0, [sp, #32]
 8004c3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d30 <__ieee754_rem_pio2+0x2d8>)
 8004c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d34 <__ieee754_rem_pio2+0x2dc>)
 8004c40:	f7fc fbda 	bl	80013f8 <__aeabi_dmul>
 8004c44:	0022      	movs	r2, r4
 8004c46:	002b      	movs	r3, r5
 8004c48:	f7fc fe9e 	bl	8001988 <__aeabi_dsub>
 8004c4c:	000b      	movs	r3, r1
 8004c4e:	0002      	movs	r2, r0
 8004c50:	9006      	str	r0, [sp, #24]
 8004c52:	9107      	str	r1, [sp, #28]
 8004c54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004c56:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c58:	f7fc fe96 	bl	8001988 <__aeabi_dsub>
 8004c5c:	004b      	lsls	r3, r1, #1
 8004c5e:	0d5b      	lsrs	r3, r3, #21
 8004c60:	1af3      	subs	r3, r6, r3
 8004c62:	2b31      	cmp	r3, #49	@ 0x31
 8004c64:	dc21      	bgt.n	8004caa <__ieee754_rem_pio2+0x252>
 8004c66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c68:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004c6a:	6038      	str	r0, [r7, #0]
 8004c6c:	6079      	str	r1, [r7, #4]
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	9405      	str	r4, [sp, #20]
 8004c72:	683c      	ldr	r4, [r7, #0]
 8004c74:	687d      	ldr	r5, [r7, #4]
 8004c76:	9804      	ldr	r0, [sp, #16]
 8004c78:	9905      	ldr	r1, [sp, #20]
 8004c7a:	0022      	movs	r2, r4
 8004c7c:	002b      	movs	r3, r5
 8004c7e:	f7fc fe83 	bl	8001988 <__aeabi_dsub>
 8004c82:	9a06      	ldr	r2, [sp, #24]
 8004c84:	9b07      	ldr	r3, [sp, #28]
 8004c86:	f7fc fe7f 	bl	8001988 <__aeabi_dsub>
 8004c8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c8c:	60b8      	str	r0, [r7, #8]
 8004c8e:	60f9      	str	r1, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	db00      	blt.n	8004c96 <__ieee754_rem_pio2+0x23e>
 8004c94:	e717      	b.n	8004ac6 <__ieee754_rem_pio2+0x6e>
 8004c96:	2280      	movs	r2, #128	@ 0x80
 8004c98:	0612      	lsls	r2, r2, #24
 8004c9a:	18ab      	adds	r3, r5, r2
 8004c9c:	607b      	str	r3, [r7, #4]
 8004c9e:	188b      	adds	r3, r1, r2
 8004ca0:	603c      	str	r4, [r7, #0]
 8004ca2:	60b8      	str	r0, [r7, #8]
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	9b02      	ldr	r3, [sp, #8]
 8004ca8:	e744      	b.n	8004b34 <__ieee754_rem_pio2+0xdc>
 8004caa:	22b8      	movs	r2, #184	@ 0xb8
 8004cac:	9808      	ldr	r0, [sp, #32]
 8004cae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004cb0:	4b20      	ldr	r3, [pc, #128]	@ (8004d34 <__ieee754_rem_pio2+0x2dc>)
 8004cb2:	0592      	lsls	r2, r2, #22
 8004cb4:	f7fc fba0 	bl	80013f8 <__aeabi_dmul>
 8004cb8:	0004      	movs	r4, r0
 8004cba:	000d      	movs	r5, r1
 8004cbc:	0002      	movs	r2, r0
 8004cbe:	000b      	movs	r3, r1
 8004cc0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004cc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004cc4:	f7fc fe60 	bl	8001988 <__aeabi_dsub>
 8004cc8:	0002      	movs	r2, r0
 8004cca:	000b      	movs	r3, r1
 8004ccc:	9004      	str	r0, [sp, #16]
 8004cce:	9105      	str	r1, [sp, #20]
 8004cd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004cd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004cd4:	f7fc fe58 	bl	8001988 <__aeabi_dsub>
 8004cd8:	0022      	movs	r2, r4
 8004cda:	002b      	movs	r3, r5
 8004cdc:	f7fc fe54 	bl	8001988 <__aeabi_dsub>
 8004ce0:	0004      	movs	r4, r0
 8004ce2:	000d      	movs	r5, r1
 8004ce4:	9808      	ldr	r0, [sp, #32]
 8004ce6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ce8:	4a18      	ldr	r2, [pc, #96]	@ (8004d4c <__ieee754_rem_pio2+0x2f4>)
 8004cea:	4b19      	ldr	r3, [pc, #100]	@ (8004d50 <__ieee754_rem_pio2+0x2f8>)
 8004cec:	f7fc fb84 	bl	80013f8 <__aeabi_dmul>
 8004cf0:	0022      	movs	r2, r4
 8004cf2:	002b      	movs	r3, r5
 8004cf4:	f7fc fe48 	bl	8001988 <__aeabi_dsub>
 8004cf8:	9006      	str	r0, [sp, #24]
 8004cfa:	9107      	str	r1, [sp, #28]
 8004cfc:	e769      	b.n	8004bd2 <__ieee754_rem_pio2+0x17a>
 8004cfe:	4b15      	ldr	r3, [pc, #84]	@ (8004d54 <__ieee754_rem_pio2+0x2fc>)
 8004d00:	429d      	cmp	r5, r3
 8004d02:	d929      	bls.n	8004d58 <__ieee754_rem_pio2+0x300>
 8004d04:	0002      	movs	r2, r0
 8004d06:	000b      	movs	r3, r1
 8004d08:	f7fc fe3e 	bl	8001988 <__aeabi_dsub>
 8004d0c:	60b8      	str	r0, [r7, #8]
 8004d0e:	60f9      	str	r1, [r7, #12]
 8004d10:	6038      	str	r0, [r7, #0]
 8004d12:	6079      	str	r1, [r7, #4]
 8004d14:	e6af      	b.n	8004a76 <__ieee754_rem_pio2+0x1e>
 8004d16:	46c0      	nop			@ (mov r8, r8)
 8004d18:	3fe921fb 	.word	0x3fe921fb
 8004d1c:	4002d97b 	.word	0x4002d97b
 8004d20:	3ff921fb 	.word	0x3ff921fb
 8004d24:	54400000 	.word	0x54400000
 8004d28:	1a626331 	.word	0x1a626331
 8004d2c:	3dd0b461 	.word	0x3dd0b461
 8004d30:	2e037073 	.word	0x2e037073
 8004d34:	3ba3198a 	.word	0x3ba3198a
 8004d38:	413921fb 	.word	0x413921fb
 8004d3c:	6dc9c883 	.word	0x6dc9c883
 8004d40:	3fe45f30 	.word	0x3fe45f30
 8004d44:	3fe00000 	.word	0x3fe00000
 8004d48:	08005918 	.word	0x08005918
 8004d4c:	252049c1 	.word	0x252049c1
 8004d50:	397b839a 	.word	0x397b839a
 8004d54:	7fefffff 	.word	0x7fefffff
 8004d58:	4b2a      	ldr	r3, [pc, #168]	@ (8004e04 <__ieee754_rem_pio2+0x3ac>)
 8004d5a:	152e      	asrs	r6, r5, #20
 8004d5c:	18f6      	adds	r6, r6, r3
 8004d5e:	0531      	lsls	r1, r6, #20
 8004d60:	1a6b      	subs	r3, r5, r1
 8004d62:	0019      	movs	r1, r3
 8004d64:	001d      	movs	r5, r3
 8004d66:	0004      	movs	r4, r0
 8004d68:	f7fd f9aa 	bl	80020c0 <__aeabi_d2iz>
 8004d6c:	f7fd f9e4 	bl	8002138 <__aeabi_i2d>
 8004d70:	0002      	movs	r2, r0
 8004d72:	000b      	movs	r3, r1
 8004d74:	0020      	movs	r0, r4
 8004d76:	0029      	movs	r1, r5
 8004d78:	920e      	str	r2, [sp, #56]	@ 0x38
 8004d7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d7c:	f7fc fe04 	bl	8001988 <__aeabi_dsub>
 8004d80:	2200      	movs	r2, #0
 8004d82:	4b21      	ldr	r3, [pc, #132]	@ (8004e08 <__ieee754_rem_pio2+0x3b0>)
 8004d84:	f7fc fb38 	bl	80013f8 <__aeabi_dmul>
 8004d88:	000d      	movs	r5, r1
 8004d8a:	0004      	movs	r4, r0
 8004d8c:	f7fd f998 	bl	80020c0 <__aeabi_d2iz>
 8004d90:	f7fd f9d2 	bl	8002138 <__aeabi_i2d>
 8004d94:	0002      	movs	r2, r0
 8004d96:	000b      	movs	r3, r1
 8004d98:	0020      	movs	r0, r4
 8004d9a:	0029      	movs	r1, r5
 8004d9c:	9210      	str	r2, [sp, #64]	@ 0x40
 8004d9e:	9311      	str	r3, [sp, #68]	@ 0x44
 8004da0:	f7fc fdf2 	bl	8001988 <__aeabi_dsub>
 8004da4:	2200      	movs	r2, #0
 8004da6:	4b18      	ldr	r3, [pc, #96]	@ (8004e08 <__ieee754_rem_pio2+0x3b0>)
 8004da8:	f7fc fb26 	bl	80013f8 <__aeabi_dmul>
 8004dac:	2503      	movs	r5, #3
 8004dae:	9012      	str	r0, [sp, #72]	@ 0x48
 8004db0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004db2:	ac0e      	add	r4, sp, #56	@ 0x38
 8004db4:	2200      	movs	r2, #0
 8004db6:	6920      	ldr	r0, [r4, #16]
 8004db8:	6961      	ldr	r1, [r4, #20]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9502      	str	r5, [sp, #8]
 8004dbe:	3c08      	subs	r4, #8
 8004dc0:	3d01      	subs	r5, #1
 8004dc2:	f7fb fb25 	bl	8000410 <__aeabi_dcmpeq>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d1f4      	bne.n	8004db4 <__ieee754_rem_pio2+0x35c>
 8004dca:	4b10      	ldr	r3, [pc, #64]	@ (8004e0c <__ieee754_rem_pio2+0x3b4>)
 8004dcc:	0032      	movs	r2, r6
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	0039      	movs	r1, r7
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	a80e      	add	r0, sp, #56	@ 0x38
 8004dd8:	9b02      	ldr	r3, [sp, #8]
 8004dda:	f000 f81d 	bl	8004e18 <__kernel_rem_pio2>
 8004dde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004de0:	9002      	str	r0, [sp, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	db00      	blt.n	8004de8 <__ieee754_rem_pio2+0x390>
 8004de6:	e66e      	b.n	8004ac6 <__ieee754_rem_pio2+0x6e>
 8004de8:	2080      	movs	r0, #128	@ 0x80
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	0600      	lsls	r0, r0, #24
 8004df0:	180b      	adds	r3, r1, r0
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	603a      	str	r2, [r7, #0]
 8004df6:	607b      	str	r3, [r7, #4]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	180b      	adds	r3, r1, r0
 8004dfc:	60ba      	str	r2, [r7, #8]
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e751      	b.n	8004ca6 <__ieee754_rem_pio2+0x24e>
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	fffffbea 	.word	0xfffffbea
 8004e08:	41700000 	.word	0x41700000
 8004e0c:	08005998 	.word	0x08005998

08004e10 <fabs>:
 8004e10:	0049      	lsls	r1, r1, #1
 8004e12:	084b      	lsrs	r3, r1, #1
 8004e14:	0019      	movs	r1, r3
 8004e16:	4770      	bx	lr

08004e18 <__kernel_rem_pio2>:
 8004e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1a:	4cc6      	ldr	r4, [pc, #792]	@ (8005134 <__kernel_rem_pio2+0x31c>)
 8004e1c:	44a5      	add	sp, r4
 8004e1e:	0014      	movs	r4, r2
 8004e20:	9aa4      	ldr	r2, [sp, #656]	@ 0x290
 8004e22:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e24:	4bc4      	ldr	r3, [pc, #784]	@ (8005138 <__kernel_rem_pio2+0x320>)
 8004e26:	0092      	lsls	r2, r2, #2
 8004e28:	58d3      	ldr	r3, [r2, r3]
 8004e2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004e2c:	9308      	str	r3, [sp, #32]
 8004e2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e30:	9105      	str	r1, [sp, #20]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	930d      	str	r3, [sp, #52]	@ 0x34
 8004e36:	2300      	movs	r3, #0
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	0023      	movs	r3, r4
 8004e3c:	3314      	adds	r3, #20
 8004e3e:	db04      	blt.n	8004e4a <__kernel_rem_pio2+0x32>
 8004e40:	2118      	movs	r1, #24
 8004e42:	1ee0      	subs	r0, r4, #3
 8004e44:	f7fb f9e8 	bl	8000218 <__divsi3>
 8004e48:	9000      	str	r0, [sp, #0]
 8004e4a:	9b00      	ldr	r3, [sp, #0]
 8004e4c:	ae26      	add	r6, sp, #152	@ 0x98
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	2318      	movs	r3, #24
 8004e52:	425b      	negs	r3, r3
 8004e54:	4353      	muls	r3, r2
 8004e56:	191b      	adds	r3, r3, r4
 8004e58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004e5a:	9302      	str	r3, [sp, #8]
 8004e5c:	9b00      	ldr	r3, [sp, #0]
 8004e5e:	1a9d      	subs	r5, r3, r2
 8004e60:	002c      	movs	r4, r5
 8004e62:	9b08      	ldr	r3, [sp, #32]
 8004e64:	189f      	adds	r7, r3, r2
 8004e66:	1b63      	subs	r3, r4, r5
 8004e68:	429f      	cmp	r7, r3
 8004e6a:	da0f      	bge.n	8004e8c <__kernel_rem_pio2+0x74>
 8004e6c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8004e6e:	af76      	add	r7, sp, #472	@ 0x1d8
 8004e70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e72:	9a08      	ldr	r2, [sp, #32]
 8004e74:	1aeb      	subs	r3, r5, r3
 8004e76:	429a      	cmp	r2, r3
 8004e78:	db30      	blt.n	8004edc <__kernel_rem_pio2+0xc4>
 8004e7a:	00eb      	lsls	r3, r5, #3
 8004e7c:	aa26      	add	r2, sp, #152	@ 0x98
 8004e7e:	2400      	movs	r4, #0
 8004e80:	189e      	adds	r6, r3, r2
 8004e82:	2300      	movs	r3, #0
 8004e84:	9306      	str	r3, [sp, #24]
 8004e86:	9407      	str	r4, [sp, #28]
 8004e88:	2400      	movs	r4, #0
 8004e8a:	e01e      	b.n	8004eca <__kernel_rem_pio2+0xb2>
 8004e8c:	2c00      	cmp	r4, #0
 8004e8e:	db07      	blt.n	8004ea0 <__kernel_rem_pio2+0x88>
 8004e90:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 8004e92:	00a3      	lsls	r3, r4, #2
 8004e94:	58d0      	ldr	r0, [r2, r3]
 8004e96:	f7fd f94f 	bl	8002138 <__aeabi_i2d>
 8004e9a:	c603      	stmia	r6!, {r0, r1}
 8004e9c:	3401      	adds	r4, #1
 8004e9e:	e7e2      	b.n	8004e66 <__kernel_rem_pio2+0x4e>
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	e7f9      	b.n	8004e9a <__kernel_rem_pio2+0x82>
 8004ea6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ea8:	00e1      	lsls	r1, r4, #3
 8004eaa:	1859      	adds	r1, r3, r1
 8004eac:	6808      	ldr	r0, [r1, #0]
 8004eae:	6849      	ldr	r1, [r1, #4]
 8004eb0:	6832      	ldr	r2, [r6, #0]
 8004eb2:	6873      	ldr	r3, [r6, #4]
 8004eb4:	f7fc faa0 	bl	80013f8 <__aeabi_dmul>
 8004eb8:	0002      	movs	r2, r0
 8004eba:	000b      	movs	r3, r1
 8004ebc:	9806      	ldr	r0, [sp, #24]
 8004ebe:	9907      	ldr	r1, [sp, #28]
 8004ec0:	f7fb faf2 	bl	80004a8 <__aeabi_dadd>
 8004ec4:	9006      	str	r0, [sp, #24]
 8004ec6:	9107      	str	r1, [sp, #28]
 8004ec8:	3401      	adds	r4, #1
 8004eca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ecc:	3e08      	subs	r6, #8
 8004ece:	429c      	cmp	r4, r3
 8004ed0:	dde9      	ble.n	8004ea6 <__kernel_rem_pio2+0x8e>
 8004ed2:	9b06      	ldr	r3, [sp, #24]
 8004ed4:	9c07      	ldr	r4, [sp, #28]
 8004ed6:	3501      	adds	r5, #1
 8004ed8:	c718      	stmia	r7!, {r3, r4}
 8004eda:	e7c9      	b.n	8004e70 <__kernel_rem_pio2+0x58>
 8004edc:	9b08      	ldr	r3, [sp, #32]
 8004ede:	aa12      	add	r2, sp, #72	@ 0x48
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	189b      	adds	r3, r3, r2
 8004ee4:	9311      	str	r3, [sp, #68]	@ 0x44
 8004ee6:	9b00      	ldr	r3, [sp, #0]
 8004ee8:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	18d3      	adds	r3, r2, r3
 8004eee:	9310      	str	r3, [sp, #64]	@ 0x40
 8004ef0:	9b08      	ldr	r3, [sp, #32]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	9b00      	ldr	r3, [sp, #0]
 8004ef6:	aa76      	add	r2, sp, #472	@ 0x1d8
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	18d3      	adds	r3, r2, r3
 8004efc:	681e      	ldr	r6, [r3, #0]
 8004efe:	685f      	ldr	r7, [r3, #4]
 8004f00:	ab12      	add	r3, sp, #72	@ 0x48
 8004f02:	001d      	movs	r5, r3
 8004f04:	9c00      	ldr	r4, [sp, #0]
 8004f06:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f08:	2c00      	cmp	r4, #0
 8004f0a:	dc73      	bgt.n	8004ff4 <__kernel_rem_pio2+0x1dc>
 8004f0c:	0030      	movs	r0, r6
 8004f0e:	0039      	movs	r1, r7
 8004f10:	9a02      	ldr	r2, [sp, #8]
 8004f12:	f000 fad3 	bl	80054bc <scalbn>
 8004f16:	23ff      	movs	r3, #255	@ 0xff
 8004f18:	2200      	movs	r2, #0
 8004f1a:	059b      	lsls	r3, r3, #22
 8004f1c:	0004      	movs	r4, r0
 8004f1e:	000d      	movs	r5, r1
 8004f20:	f7fc fa6a 	bl	80013f8 <__aeabi_dmul>
 8004f24:	f000 fb36 	bl	8005594 <floor>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	4b84      	ldr	r3, [pc, #528]	@ (800513c <__kernel_rem_pio2+0x324>)
 8004f2c:	f7fc fa64 	bl	80013f8 <__aeabi_dmul>
 8004f30:	0002      	movs	r2, r0
 8004f32:	000b      	movs	r3, r1
 8004f34:	0020      	movs	r0, r4
 8004f36:	0029      	movs	r1, r5
 8004f38:	f7fc fd26 	bl	8001988 <__aeabi_dsub>
 8004f3c:	000d      	movs	r5, r1
 8004f3e:	0004      	movs	r4, r0
 8004f40:	f7fd f8be 	bl	80020c0 <__aeabi_d2iz>
 8004f44:	900c      	str	r0, [sp, #48]	@ 0x30
 8004f46:	f7fd f8f7 	bl	8002138 <__aeabi_i2d>
 8004f4a:	000b      	movs	r3, r1
 8004f4c:	0002      	movs	r2, r0
 8004f4e:	0029      	movs	r1, r5
 8004f50:	0020      	movs	r0, r4
 8004f52:	f7fc fd19 	bl	8001988 <__aeabi_dsub>
 8004f56:	9b02      	ldr	r3, [sp, #8]
 8004f58:	0006      	movs	r6, r0
 8004f5a:	000f      	movs	r7, r1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	dd6f      	ble.n	8005040 <__kernel_rem_pio2+0x228>
 8004f60:	2018      	movs	r0, #24
 8004f62:	9b00      	ldr	r3, [sp, #0]
 8004f64:	aa12      	add	r2, sp, #72	@ 0x48
 8004f66:	3b01      	subs	r3, #1
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	589a      	ldr	r2, [r3, r2]
 8004f6c:	9902      	ldr	r1, [sp, #8]
 8004f6e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8004f70:	1a40      	subs	r0, r0, r1
 8004f72:	0011      	movs	r1, r2
 8004f74:	4101      	asrs	r1, r0
 8004f76:	1864      	adds	r4, r4, r1
 8004f78:	4081      	lsls	r1, r0
 8004f7a:	1a52      	subs	r2, r2, r1
 8004f7c:	a912      	add	r1, sp, #72	@ 0x48
 8004f7e:	505a      	str	r2, [r3, r1]
 8004f80:	2317      	movs	r3, #23
 8004f82:	9902      	ldr	r1, [sp, #8]
 8004f84:	940c      	str	r4, [sp, #48]	@ 0x30
 8004f86:	1a5b      	subs	r3, r3, r1
 8004f88:	411a      	asrs	r2, r3
 8004f8a:	9206      	str	r2, [sp, #24]
 8004f8c:	9b06      	ldr	r3, [sp, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	dd68      	ble.n	8005064 <__kernel_rem_pio2+0x24c>
 8004f92:	2200      	movs	r2, #0
 8004f94:	2580      	movs	r5, #128	@ 0x80
 8004f96:	0014      	movs	r4, r2
 8004f98:	2001      	movs	r0, #1
 8004f9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f9c:	4968      	ldr	r1, [pc, #416]	@ (8005140 <__kernel_rem_pio2+0x328>)
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	930c      	str	r3, [sp, #48]	@ 0x30
 8004fa2:	046d      	lsls	r5, r5, #17
 8004fa4:	9b00      	ldr	r3, [sp, #0]
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	dd00      	ble.n	8004fac <__kernel_rem_pio2+0x194>
 8004faa:	e098      	b.n	80050de <__kernel_rem_pio2+0x2c6>
 8004fac:	9b02      	ldr	r3, [sp, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	dd05      	ble.n	8004fbe <__kernel_rem_pio2+0x1a6>
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d100      	bne.n	8004fb8 <__kernel_rem_pio2+0x1a0>
 8004fb6:	e0a4      	b.n	8005102 <__kernel_rem_pio2+0x2ea>
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d100      	bne.n	8004fbe <__kernel_rem_pio2+0x1a6>
 8004fbc:	e0ab      	b.n	8005116 <__kernel_rem_pio2+0x2fe>
 8004fbe:	9b06      	ldr	r3, [sp, #24]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d14f      	bne.n	8005064 <__kernel_rem_pio2+0x24c>
 8004fc4:	0032      	movs	r2, r6
 8004fc6:	003b      	movs	r3, r7
 8004fc8:	2000      	movs	r0, #0
 8004fca:	495e      	ldr	r1, [pc, #376]	@ (8005144 <__kernel_rem_pio2+0x32c>)
 8004fcc:	f7fc fcdc 	bl	8001988 <__aeabi_dsub>
 8004fd0:	0006      	movs	r6, r0
 8004fd2:	000f      	movs	r7, r1
 8004fd4:	2c00      	cmp	r4, #0
 8004fd6:	d045      	beq.n	8005064 <__kernel_rem_pio2+0x24c>
 8004fd8:	9a02      	ldr	r2, [sp, #8]
 8004fda:	2000      	movs	r0, #0
 8004fdc:	4959      	ldr	r1, [pc, #356]	@ (8005144 <__kernel_rem_pio2+0x32c>)
 8004fde:	f000 fa6d 	bl	80054bc <scalbn>
 8004fe2:	0002      	movs	r2, r0
 8004fe4:	000b      	movs	r3, r1
 8004fe6:	0030      	movs	r0, r6
 8004fe8:	0039      	movs	r1, r7
 8004fea:	f7fc fccd 	bl	8001988 <__aeabi_dsub>
 8004fee:	0006      	movs	r6, r0
 8004ff0:	000f      	movs	r7, r1
 8004ff2:	e037      	b.n	8005064 <__kernel_rem_pio2+0x24c>
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	4b54      	ldr	r3, [pc, #336]	@ (8005148 <__kernel_rem_pio2+0x330>)
 8004ff8:	0030      	movs	r0, r6
 8004ffa:	0039      	movs	r1, r7
 8004ffc:	f7fc f9fc 	bl	80013f8 <__aeabi_dmul>
 8005000:	f7fd f85e 	bl	80020c0 <__aeabi_d2iz>
 8005004:	f7fd f898 	bl	8002138 <__aeabi_i2d>
 8005008:	2200      	movs	r2, #0
 800500a:	4b50      	ldr	r3, [pc, #320]	@ (800514c <__kernel_rem_pio2+0x334>)
 800500c:	9006      	str	r0, [sp, #24]
 800500e:	9107      	str	r1, [sp, #28]
 8005010:	f7fc f9f2 	bl	80013f8 <__aeabi_dmul>
 8005014:	0002      	movs	r2, r0
 8005016:	000b      	movs	r3, r1
 8005018:	0030      	movs	r0, r6
 800501a:	0039      	movs	r1, r7
 800501c:	f7fc fcb4 	bl	8001988 <__aeabi_dsub>
 8005020:	f7fd f84e 	bl	80020c0 <__aeabi_d2iz>
 8005024:	3c01      	subs	r4, #1
 8005026:	aa76      	add	r2, sp, #472	@ 0x1d8
 8005028:	00e3      	lsls	r3, r4, #3
 800502a:	18d3      	adds	r3, r2, r3
 800502c:	c501      	stmia	r5!, {r0}
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	9806      	ldr	r0, [sp, #24]
 8005034:	9907      	ldr	r1, [sp, #28]
 8005036:	f7fb fa37 	bl	80004a8 <__aeabi_dadd>
 800503a:	0006      	movs	r6, r0
 800503c:	000f      	movs	r7, r1
 800503e:	e763      	b.n	8004f08 <__kernel_rem_pio2+0xf0>
 8005040:	9b02      	ldr	r3, [sp, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d107      	bne.n	8005056 <__kernel_rem_pio2+0x23e>
 8005046:	9b00      	ldr	r3, [sp, #0]
 8005048:	aa12      	add	r2, sp, #72	@ 0x48
 800504a:	3b01      	subs	r3, #1
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	589b      	ldr	r3, [r3, r2]
 8005050:	15db      	asrs	r3, r3, #23
 8005052:	9306      	str	r3, [sp, #24]
 8005054:	e79a      	b.n	8004f8c <__kernel_rem_pio2+0x174>
 8005056:	2200      	movs	r2, #0
 8005058:	4b3d      	ldr	r3, [pc, #244]	@ (8005150 <__kernel_rem_pio2+0x338>)
 800505a:	f7fb f9fd 	bl	8000458 <__aeabi_dcmpge>
 800505e:	2800      	cmp	r0, #0
 8005060:	d13a      	bne.n	80050d8 <__kernel_rem_pio2+0x2c0>
 8005062:	9006      	str	r0, [sp, #24]
 8005064:	2200      	movs	r2, #0
 8005066:	2300      	movs	r3, #0
 8005068:	0030      	movs	r0, r6
 800506a:	0039      	movs	r1, r7
 800506c:	f7fb f9d0 	bl	8000410 <__aeabi_dcmpeq>
 8005070:	2800      	cmp	r0, #0
 8005072:	d100      	bne.n	8005076 <__kernel_rem_pio2+0x25e>
 8005074:	e0b5      	b.n	80051e2 <__kernel_rem_pio2+0x3ca>
 8005076:	2200      	movs	r2, #0
 8005078:	9b00      	ldr	r3, [sp, #0]
 800507a:	3b01      	subs	r3, #1
 800507c:	9908      	ldr	r1, [sp, #32]
 800507e:	428b      	cmp	r3, r1
 8005080:	da51      	bge.n	8005126 <__kernel_rem_pio2+0x30e>
 8005082:	2a00      	cmp	r2, #0
 8005084:	d100      	bne.n	8005088 <__kernel_rem_pio2+0x270>
 8005086:	e096      	b.n	80051b6 <__kernel_rem_pio2+0x39e>
 8005088:	9b00      	ldr	r3, [sp, #0]
 800508a:	aa12      	add	r2, sp, #72	@ 0x48
 800508c:	3b01      	subs	r3, #1
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	9b02      	ldr	r3, [sp, #8]
 8005092:	3b18      	subs	r3, #24
 8005094:	9302      	str	r3, [sp, #8]
 8005096:	9b00      	ldr	r3, [sp, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	589b      	ldr	r3, [r3, r2]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f3      	beq.n	8005088 <__kernel_rem_pio2+0x270>
 80050a0:	2000      	movs	r0, #0
 80050a2:	9a02      	ldr	r2, [sp, #8]
 80050a4:	4927      	ldr	r1, [pc, #156]	@ (8005144 <__kernel_rem_pio2+0x32c>)
 80050a6:	f000 fa09 	bl	80054bc <scalbn>
 80050aa:	0004      	movs	r4, r0
 80050ac:	000d      	movs	r5, r1
 80050ae:	9e00      	ldr	r6, [sp, #0]
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	db00      	blt.n	80050b6 <__kernel_rem_pio2+0x29e>
 80050b4:	e0d2      	b.n	800525c <__kernel_rem_pio2+0x444>
 80050b6:	4b27      	ldr	r3, [pc, #156]	@ (8005154 <__kernel_rem_pio2+0x33c>)
 80050b8:	9c00      	ldr	r4, [sp, #0]
 80050ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80050bc:	2c00      	cmp	r4, #0
 80050be:	da00      	bge.n	80050c2 <__kernel_rem_pio2+0x2aa>
 80050c0:	e103      	b.n	80052ca <__kernel_rem_pio2+0x4b2>
 80050c2:	00e3      	lsls	r3, r4, #3
 80050c4:	aa76      	add	r2, sp, #472	@ 0x1d8
 80050c6:	189f      	adds	r7, r3, r2
 80050c8:	2300      	movs	r3, #0
 80050ca:	2200      	movs	r2, #0
 80050cc:	9202      	str	r2, [sp, #8]
 80050ce:	9303      	str	r3, [sp, #12]
 80050d0:	9b00      	ldr	r3, [sp, #0]
 80050d2:	2500      	movs	r5, #0
 80050d4:	1b1e      	subs	r6, r3, r4
 80050d6:	e0ea      	b.n	80052ae <__kernel_rem_pio2+0x496>
 80050d8:	2302      	movs	r3, #2
 80050da:	9306      	str	r3, [sp, #24]
 80050dc:	e759      	b.n	8004f92 <__kernel_rem_pio2+0x17a>
 80050de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2c00      	cmp	r4, #0
 80050e4:	d10b      	bne.n	80050fe <__kernel_rem_pio2+0x2e6>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <__kernel_rem_pio2+0x2da>
 80050ea:	1aeb      	subs	r3, r5, r3
 80050ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	0003      	movs	r3, r0
 80050f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80050f4:	3201      	adds	r2, #1
 80050f6:	3404      	adds	r4, #4
 80050f8:	940a      	str	r4, [sp, #40]	@ 0x28
 80050fa:	001c      	movs	r4, r3
 80050fc:	e752      	b.n	8004fa4 <__kernel_rem_pio2+0x18c>
 80050fe:	1acb      	subs	r3, r1, r3
 8005100:	e7f4      	b.n	80050ec <__kernel_rem_pio2+0x2d4>
 8005102:	9b00      	ldr	r3, [sp, #0]
 8005104:	aa12      	add	r2, sp, #72	@ 0x48
 8005106:	3b01      	subs	r3, #1
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	589a      	ldr	r2, [r3, r2]
 800510c:	0252      	lsls	r2, r2, #9
 800510e:	0a52      	lsrs	r2, r2, #9
 8005110:	a912      	add	r1, sp, #72	@ 0x48
 8005112:	505a      	str	r2, [r3, r1]
 8005114:	e753      	b.n	8004fbe <__kernel_rem_pio2+0x1a6>
 8005116:	9b00      	ldr	r3, [sp, #0]
 8005118:	aa12      	add	r2, sp, #72	@ 0x48
 800511a:	3b01      	subs	r3, #1
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	589a      	ldr	r2, [r3, r2]
 8005120:	0292      	lsls	r2, r2, #10
 8005122:	0a92      	lsrs	r2, r2, #10
 8005124:	e7f4      	b.n	8005110 <__kernel_rem_pio2+0x2f8>
 8005126:	0099      	lsls	r1, r3, #2
 8005128:	a812      	add	r0, sp, #72	@ 0x48
 800512a:	5809      	ldr	r1, [r1, r0]
 800512c:	3b01      	subs	r3, #1
 800512e:	430a      	orrs	r2, r1
 8005130:	e7a4      	b.n	800507c <__kernel_rem_pio2+0x264>
 8005132:	46c0      	nop			@ (mov r8, r8)
 8005134:	fffffd84 	.word	0xfffffd84
 8005138:	08005ae0 	.word	0x08005ae0
 800513c:	40200000 	.word	0x40200000
 8005140:	00ffffff 	.word	0x00ffffff
 8005144:	3ff00000 	.word	0x3ff00000
 8005148:	3e700000 	.word	0x3e700000
 800514c:	41700000 	.word	0x41700000
 8005150:	3fe00000 	.word	0x3fe00000
 8005154:	08005aa0 	.word	0x08005aa0
 8005158:	3301      	adds	r3, #1
 800515a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800515c:	009a      	lsls	r2, r3, #2
 800515e:	4252      	negs	r2, r2
 8005160:	588a      	ldr	r2, [r1, r2]
 8005162:	2a00      	cmp	r2, #0
 8005164:	d0f8      	beq.n	8005158 <__kernel_rem_pio2+0x340>
 8005166:	9a00      	ldr	r2, [sp, #0]
 8005168:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800516a:	1c55      	adds	r5, r2, #1
 800516c:	1852      	adds	r2, r2, r1
 800516e:	00d2      	lsls	r2, r2, #3
 8005170:	a926      	add	r1, sp, #152	@ 0x98
 8005172:	188c      	adds	r4, r1, r2
 8005174:	9a00      	ldr	r2, [sp, #0]
 8005176:	18d3      	adds	r3, r2, r3
 8005178:	9306      	str	r3, [sp, #24]
 800517a:	9b06      	ldr	r3, [sp, #24]
 800517c:	42ab      	cmp	r3, r5
 800517e:	da00      	bge.n	8005182 <__kernel_rem_pio2+0x36a>
 8005180:	e6b7      	b.n	8004ef2 <__kernel_rem_pio2+0xda>
 8005182:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005184:	00ab      	lsls	r3, r5, #2
 8005186:	58d0      	ldr	r0, [r2, r3]
 8005188:	f7fc ffd6 	bl	8002138 <__aeabi_i2d>
 800518c:	2200      	movs	r2, #0
 800518e:	2300      	movs	r3, #0
 8005190:	0027      	movs	r7, r4
 8005192:	2600      	movs	r6, #0
 8005194:	6020      	str	r0, [r4, #0]
 8005196:	6061      	str	r1, [r4, #4]
 8005198:	9200      	str	r2, [sp, #0]
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800519e:	429e      	cmp	r6, r3
 80051a0:	dd0b      	ble.n	80051ba <__kernel_rem_pio2+0x3a2>
 80051a2:	00eb      	lsls	r3, r5, #3
 80051a4:	aa76      	add	r2, sp, #472	@ 0x1d8
 80051a6:	18d3      	adds	r3, r2, r3
 80051a8:	3501      	adds	r5, #1
 80051aa:	9900      	ldr	r1, [sp, #0]
 80051ac:	9a01      	ldr	r2, [sp, #4]
 80051ae:	3408      	adds	r4, #8
 80051b0:	6019      	str	r1, [r3, #0]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	e7e1      	b.n	800517a <__kernel_rem_pio2+0x362>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e7cf      	b.n	800515a <__kernel_rem_pio2+0x342>
 80051ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051bc:	00f1      	lsls	r1, r6, #3
 80051be:	1859      	adds	r1, r3, r1
 80051c0:	6808      	ldr	r0, [r1, #0]
 80051c2:	6849      	ldr	r1, [r1, #4]
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f7fc f916 	bl	80013f8 <__aeabi_dmul>
 80051cc:	0002      	movs	r2, r0
 80051ce:	000b      	movs	r3, r1
 80051d0:	9800      	ldr	r0, [sp, #0]
 80051d2:	9901      	ldr	r1, [sp, #4]
 80051d4:	f7fb f968 	bl	80004a8 <__aeabi_dadd>
 80051d8:	3601      	adds	r6, #1
 80051da:	9000      	str	r0, [sp, #0]
 80051dc:	9101      	str	r1, [sp, #4]
 80051de:	3f08      	subs	r7, #8
 80051e0:	e7dc      	b.n	800519c <__kernel_rem_pio2+0x384>
 80051e2:	9b02      	ldr	r3, [sp, #8]
 80051e4:	0030      	movs	r0, r6
 80051e6:	425a      	negs	r2, r3
 80051e8:	0039      	movs	r1, r7
 80051ea:	f000 f967 	bl	80054bc <scalbn>
 80051ee:	2200      	movs	r2, #0
 80051f0:	4bb0      	ldr	r3, [pc, #704]	@ (80054b4 <__kernel_rem_pio2+0x69c>)
 80051f2:	0006      	movs	r6, r0
 80051f4:	000f      	movs	r7, r1
 80051f6:	f7fb f92f 	bl	8000458 <__aeabi_dcmpge>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d025      	beq.n	800524a <__kernel_rem_pio2+0x432>
 80051fe:	2200      	movs	r2, #0
 8005200:	4bad      	ldr	r3, [pc, #692]	@ (80054b8 <__kernel_rem_pio2+0x6a0>)
 8005202:	0030      	movs	r0, r6
 8005204:	0039      	movs	r1, r7
 8005206:	f7fc f8f7 	bl	80013f8 <__aeabi_dmul>
 800520a:	f7fc ff59 	bl	80020c0 <__aeabi_d2iz>
 800520e:	9b00      	ldr	r3, [sp, #0]
 8005210:	0004      	movs	r4, r0
 8005212:	009d      	lsls	r5, r3, #2
 8005214:	f7fc ff90 	bl	8002138 <__aeabi_i2d>
 8005218:	2200      	movs	r2, #0
 800521a:	4ba6      	ldr	r3, [pc, #664]	@ (80054b4 <__kernel_rem_pio2+0x69c>)
 800521c:	f7fc f8ec 	bl	80013f8 <__aeabi_dmul>
 8005220:	0002      	movs	r2, r0
 8005222:	000b      	movs	r3, r1
 8005224:	0030      	movs	r0, r6
 8005226:	0039      	movs	r1, r7
 8005228:	f7fc fbae 	bl	8001988 <__aeabi_dsub>
 800522c:	f7fc ff48 	bl	80020c0 <__aeabi_d2iz>
 8005230:	ab12      	add	r3, sp, #72	@ 0x48
 8005232:	5158      	str	r0, [r3, r5]
 8005234:	9b00      	ldr	r3, [sp, #0]
 8005236:	aa12      	add	r2, sp, #72	@ 0x48
 8005238:	3301      	adds	r3, #1
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	9b02      	ldr	r3, [sp, #8]
 800523e:	3318      	adds	r3, #24
 8005240:	9302      	str	r3, [sp, #8]
 8005242:	9b00      	ldr	r3, [sp, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	509c      	str	r4, [r3, r2]
 8005248:	e72a      	b.n	80050a0 <__kernel_rem_pio2+0x288>
 800524a:	9b00      	ldr	r3, [sp, #0]
 800524c:	0030      	movs	r0, r6
 800524e:	0039      	movs	r1, r7
 8005250:	009c      	lsls	r4, r3, #2
 8005252:	f7fc ff35 	bl	80020c0 <__aeabi_d2iz>
 8005256:	ab12      	add	r3, sp, #72	@ 0x48
 8005258:	5118      	str	r0, [r3, r4]
 800525a:	e721      	b.n	80050a0 <__kernel_rem_pio2+0x288>
 800525c:	00f3      	lsls	r3, r6, #3
 800525e:	aa76      	add	r2, sp, #472	@ 0x1d8
 8005260:	18d7      	adds	r7, r2, r3
 8005262:	00b3      	lsls	r3, r6, #2
 8005264:	aa12      	add	r2, sp, #72	@ 0x48
 8005266:	5898      	ldr	r0, [r3, r2]
 8005268:	f7fc ff66 	bl	8002138 <__aeabi_i2d>
 800526c:	0022      	movs	r2, r4
 800526e:	002b      	movs	r3, r5
 8005270:	f7fc f8c2 	bl	80013f8 <__aeabi_dmul>
 8005274:	2200      	movs	r2, #0
 8005276:	6038      	str	r0, [r7, #0]
 8005278:	6079      	str	r1, [r7, #4]
 800527a:	4b8f      	ldr	r3, [pc, #572]	@ (80054b8 <__kernel_rem_pio2+0x6a0>)
 800527c:	0020      	movs	r0, r4
 800527e:	0029      	movs	r1, r5
 8005280:	f7fc f8ba 	bl	80013f8 <__aeabi_dmul>
 8005284:	3e01      	subs	r6, #1
 8005286:	0004      	movs	r4, r0
 8005288:	000d      	movs	r5, r1
 800528a:	e711      	b.n	80050b0 <__kernel_rem_pio2+0x298>
 800528c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800528e:	00e9      	lsls	r1, r5, #3
 8005290:	18c9      	adds	r1, r1, r3
 8005292:	6808      	ldr	r0, [r1, #0]
 8005294:	6849      	ldr	r1, [r1, #4]
 8005296:	cf0c      	ldmia	r7!, {r2, r3}
 8005298:	f7fc f8ae 	bl	80013f8 <__aeabi_dmul>
 800529c:	0002      	movs	r2, r0
 800529e:	000b      	movs	r3, r1
 80052a0:	9802      	ldr	r0, [sp, #8]
 80052a2:	9903      	ldr	r1, [sp, #12]
 80052a4:	f7fb f900 	bl	80004a8 <__aeabi_dadd>
 80052a8:	9002      	str	r0, [sp, #8]
 80052aa:	9103      	str	r1, [sp, #12]
 80052ac:	3501      	adds	r5, #1
 80052ae:	9b08      	ldr	r3, [sp, #32]
 80052b0:	429d      	cmp	r5, r3
 80052b2:	dc01      	bgt.n	80052b8 <__kernel_rem_pio2+0x4a0>
 80052b4:	42ae      	cmp	r6, r5
 80052b6:	dae9      	bge.n	800528c <__kernel_rem_pio2+0x474>
 80052b8:	00f6      	lsls	r6, r6, #3
 80052ba:	ab4e      	add	r3, sp, #312	@ 0x138
 80052bc:	199b      	adds	r3, r3, r6
 80052be:	9902      	ldr	r1, [sp, #8]
 80052c0:	9a03      	ldr	r2, [sp, #12]
 80052c2:	3c01      	subs	r4, #1
 80052c4:	6019      	str	r1, [r3, #0]
 80052c6:	605a      	str	r2, [r3, #4]
 80052c8:	e6f8      	b.n	80050bc <__kernel_rem_pio2+0x2a4>
 80052ca:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	dc0b      	bgt.n	80052e8 <__kernel_rem_pio2+0x4d0>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dd00      	ble.n	80052d6 <__kernel_rem_pio2+0x4be>
 80052d4:	e084      	b.n	80053e0 <__kernel_rem_pio2+0x5c8>
 80052d6:	d052      	beq.n	800537e <__kernel_rem_pio2+0x566>
 80052d8:	2007      	movs	r0, #7
 80052da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052dc:	4003      	ands	r3, r0
 80052de:	0018      	movs	r0, r3
 80052e0:	239f      	movs	r3, #159	@ 0x9f
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	449d      	add	sp, r3
 80052e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e8:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d1f4      	bne.n	80052d8 <__kernel_rem_pio2+0x4c0>
 80052ee:	9b00      	ldr	r3, [sp, #0]
 80052f0:	aa4e      	add	r2, sp, #312	@ 0x138
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	18d4      	adds	r4, r2, r3
 80052f6:	0025      	movs	r5, r4
 80052f8:	9b00      	ldr	r3, [sp, #0]
 80052fa:	9302      	str	r3, [sp, #8]
 80052fc:	9b02      	ldr	r3, [sp, #8]
 80052fe:	3d08      	subs	r5, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	dd00      	ble.n	8005306 <__kernel_rem_pio2+0x4ee>
 8005304:	e07a      	b.n	80053fc <__kernel_rem_pio2+0x5e4>
 8005306:	9d00      	ldr	r5, [sp, #0]
 8005308:	3c08      	subs	r4, #8
 800530a:	2d01      	cmp	r5, #1
 800530c:	dd00      	ble.n	8005310 <__kernel_rem_pio2+0x4f8>
 800530e:	e095      	b.n	800543c <__kernel_rem_pio2+0x624>
 8005310:	2000      	movs	r0, #0
 8005312:	2100      	movs	r1, #0
 8005314:	9b00      	ldr	r3, [sp, #0]
 8005316:	2b01      	cmp	r3, #1
 8005318:	dd00      	ble.n	800531c <__kernel_rem_pio2+0x504>
 800531a:	e0ad      	b.n	8005478 <__kernel_rem_pio2+0x660>
 800531c:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 800531e:	9c4f      	ldr	r4, [sp, #316]	@ 0x13c
 8005320:	9e50      	ldr	r6, [sp, #320]	@ 0x140
 8005322:	9f51      	ldr	r7, [sp, #324]	@ 0x144
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	9401      	str	r4, [sp, #4]
 8005328:	9b06      	ldr	r3, [sp, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d000      	beq.n	8005330 <__kernel_rem_pio2+0x518>
 800532e:	e0af      	b.n	8005490 <__kernel_rem_pio2+0x678>
 8005330:	9c00      	ldr	r4, [sp, #0]
 8005332:	9d01      	ldr	r5, [sp, #4]
 8005334:	9b05      	ldr	r3, [sp, #20]
 8005336:	601c      	str	r4, [r3, #0]
 8005338:	605d      	str	r5, [r3, #4]
 800533a:	609e      	str	r6, [r3, #8]
 800533c:	60df      	str	r7, [r3, #12]
 800533e:	6118      	str	r0, [r3, #16]
 8005340:	6159      	str	r1, [r3, #20]
 8005342:	e7c9      	b.n	80052d8 <__kernel_rem_pio2+0x4c0>
 8005344:	9b00      	ldr	r3, [sp, #0]
 8005346:	aa4e      	add	r2, sp, #312	@ 0x138
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	18d3      	adds	r3, r2, r3
 800534c:	0020      	movs	r0, r4
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	0029      	movs	r1, r5
 8005354:	f7fb f8a8 	bl	80004a8 <__aeabi_dadd>
 8005358:	0004      	movs	r4, r0
 800535a:	000d      	movs	r5, r1
 800535c:	9b00      	ldr	r3, [sp, #0]
 800535e:	3b01      	subs	r3, #1
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	9b00      	ldr	r3, [sp, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	daed      	bge.n	8005344 <__kernel_rem_pio2+0x52c>
 8005368:	9b06      	ldr	r3, [sp, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <__kernel_rem_pio2+0x55e>
 800536e:	2180      	movs	r1, #128	@ 0x80
 8005370:	0609      	lsls	r1, r1, #24
 8005372:	186b      	adds	r3, r5, r1
 8005374:	001d      	movs	r5, r3
 8005376:	9b05      	ldr	r3, [sp, #20]
 8005378:	601c      	str	r4, [r3, #0]
 800537a:	605d      	str	r5, [r3, #4]
 800537c:	e7ac      	b.n	80052d8 <__kernel_rem_pio2+0x4c0>
 800537e:	2400      	movs	r4, #0
 8005380:	2500      	movs	r5, #0
 8005382:	e7ee      	b.n	8005362 <__kernel_rem_pio2+0x54a>
 8005384:	00e3      	lsls	r3, r4, #3
 8005386:	aa4e      	add	r2, sp, #312	@ 0x138
 8005388:	18d3      	adds	r3, r2, r3
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f7fb f88b 	bl	80004a8 <__aeabi_dadd>
 8005392:	3c01      	subs	r4, #1
 8005394:	2c00      	cmp	r4, #0
 8005396:	daf5      	bge.n	8005384 <__kernel_rem_pio2+0x56c>
 8005398:	9c06      	ldr	r4, [sp, #24]
 800539a:	0002      	movs	r2, r0
 800539c:	000b      	movs	r3, r1
 800539e:	2c00      	cmp	r4, #0
 80053a0:	d002      	beq.n	80053a8 <__kernel_rem_pio2+0x590>
 80053a2:	2480      	movs	r4, #128	@ 0x80
 80053a4:	0624      	lsls	r4, r4, #24
 80053a6:	190b      	adds	r3, r1, r4
 80053a8:	9c05      	ldr	r4, [sp, #20]
 80053aa:	2501      	movs	r5, #1
 80053ac:	6022      	str	r2, [r4, #0]
 80053ae:	6063      	str	r3, [r4, #4]
 80053b0:	0002      	movs	r2, r0
 80053b2:	000b      	movs	r3, r1
 80053b4:	984e      	ldr	r0, [sp, #312]	@ 0x138
 80053b6:	994f      	ldr	r1, [sp, #316]	@ 0x13c
 80053b8:	f7fc fae6 	bl	8001988 <__aeabi_dsub>
 80053bc:	0006      	movs	r6, r0
 80053be:	000f      	movs	r7, r1
 80053c0:	ac4e      	add	r4, sp, #312	@ 0x138
 80053c2:	9b00      	ldr	r3, [sp, #0]
 80053c4:	3408      	adds	r4, #8
 80053c6:	42ab      	cmp	r3, r5
 80053c8:	da0e      	bge.n	80053e8 <__kernel_rem_pio2+0x5d0>
 80053ca:	9b06      	ldr	r3, [sp, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <__kernel_rem_pio2+0x5c0>
 80053d0:	2180      	movs	r1, #128	@ 0x80
 80053d2:	0609      	lsls	r1, r1, #24
 80053d4:	187b      	adds	r3, r7, r1
 80053d6:	001f      	movs	r7, r3
 80053d8:	9b05      	ldr	r3, [sp, #20]
 80053da:	609e      	str	r6, [r3, #8]
 80053dc:	60df      	str	r7, [r3, #12]
 80053de:	e77b      	b.n	80052d8 <__kernel_rem_pio2+0x4c0>
 80053e0:	2000      	movs	r0, #0
 80053e2:	2100      	movs	r1, #0
 80053e4:	9c00      	ldr	r4, [sp, #0]
 80053e6:	e7d5      	b.n	8005394 <__kernel_rem_pio2+0x57c>
 80053e8:	0030      	movs	r0, r6
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	6863      	ldr	r3, [r4, #4]
 80053ee:	0039      	movs	r1, r7
 80053f0:	f7fb f85a 	bl	80004a8 <__aeabi_dadd>
 80053f4:	3501      	adds	r5, #1
 80053f6:	0006      	movs	r6, r0
 80053f8:	000f      	movs	r7, r1
 80053fa:	e7e2      	b.n	80053c2 <__kernel_rem_pio2+0x5aa>
 80053fc:	9b02      	ldr	r3, [sp, #8]
 80053fe:	3b01      	subs	r3, #1
 8005400:	9302      	str	r3, [sp, #8]
 8005402:	682a      	ldr	r2, [r5, #0]
 8005404:	686b      	ldr	r3, [r5, #4]
 8005406:	9208      	str	r2, [sp, #32]
 8005408:	9309      	str	r3, [sp, #36]	@ 0x24
 800540a:	9808      	ldr	r0, [sp, #32]
 800540c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800540e:	68aa      	ldr	r2, [r5, #8]
 8005410:	68eb      	ldr	r3, [r5, #12]
 8005412:	920a      	str	r2, [sp, #40]	@ 0x28
 8005414:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005416:	f7fb f847 	bl	80004a8 <__aeabi_dadd>
 800541a:	0002      	movs	r2, r0
 800541c:	000b      	movs	r3, r1
 800541e:	0006      	movs	r6, r0
 8005420:	000f      	movs	r7, r1
 8005422:	9808      	ldr	r0, [sp, #32]
 8005424:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005426:	f7fc faaf 	bl	8001988 <__aeabi_dsub>
 800542a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800542c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800542e:	f7fb f83b 	bl	80004a8 <__aeabi_dadd>
 8005432:	602e      	str	r6, [r5, #0]
 8005434:	606f      	str	r7, [r5, #4]
 8005436:	60a8      	str	r0, [r5, #8]
 8005438:	60e9      	str	r1, [r5, #12]
 800543a:	e75f      	b.n	80052fc <__kernel_rem_pio2+0x4e4>
 800543c:	6822      	ldr	r2, [r4, #0]
 800543e:	6863      	ldr	r3, [r4, #4]
 8005440:	9202      	str	r2, [sp, #8]
 8005442:	9303      	str	r3, [sp, #12]
 8005444:	9802      	ldr	r0, [sp, #8]
 8005446:	9903      	ldr	r1, [sp, #12]
 8005448:	68a2      	ldr	r2, [r4, #8]
 800544a:	68e3      	ldr	r3, [r4, #12]
 800544c:	9208      	str	r2, [sp, #32]
 800544e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005450:	f7fb f82a 	bl	80004a8 <__aeabi_dadd>
 8005454:	0002      	movs	r2, r0
 8005456:	000b      	movs	r3, r1
 8005458:	0006      	movs	r6, r0
 800545a:	000f      	movs	r7, r1
 800545c:	9802      	ldr	r0, [sp, #8]
 800545e:	9903      	ldr	r1, [sp, #12]
 8005460:	f7fc fa92 	bl	8001988 <__aeabi_dsub>
 8005464:	9a08      	ldr	r2, [sp, #32]
 8005466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005468:	f7fb f81e 	bl	80004a8 <__aeabi_dadd>
 800546c:	3d01      	subs	r5, #1
 800546e:	60a0      	str	r0, [r4, #8]
 8005470:	60e1      	str	r1, [r4, #12]
 8005472:	6026      	str	r6, [r4, #0]
 8005474:	6067      	str	r7, [r4, #4]
 8005476:	e747      	b.n	8005308 <__kernel_rem_pio2+0x4f0>
 8005478:	9b00      	ldr	r3, [sp, #0]
 800547a:	aa4e      	add	r2, sp, #312	@ 0x138
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	18d3      	adds	r3, r2, r3
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f7fb f810 	bl	80004a8 <__aeabi_dadd>
 8005488:	9b00      	ldr	r3, [sp, #0]
 800548a:	3b01      	subs	r3, #1
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	e741      	b.n	8005314 <__kernel_rem_pio2+0x4fc>
 8005490:	9c00      	ldr	r4, [sp, #0]
 8005492:	9b05      	ldr	r3, [sp, #20]
 8005494:	9a01      	ldr	r2, [sp, #4]
 8005496:	601c      	str	r4, [r3, #0]
 8005498:	2380      	movs	r3, #128	@ 0x80
 800549a:	061b      	lsls	r3, r3, #24
 800549c:	18d4      	adds	r4, r2, r3
 800549e:	9a05      	ldr	r2, [sp, #20]
 80054a0:	6054      	str	r4, [r2, #4]
 80054a2:	001a      	movs	r2, r3
 80054a4:	9c05      	ldr	r4, [sp, #20]
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	60e3      	str	r3, [r4, #12]
 80054aa:	188b      	adds	r3, r1, r2
 80054ac:	60a6      	str	r6, [r4, #8]
 80054ae:	6120      	str	r0, [r4, #16]
 80054b0:	6163      	str	r3, [r4, #20]
 80054b2:	e711      	b.n	80052d8 <__kernel_rem_pio2+0x4c0>
 80054b4:	41700000 	.word	0x41700000
 80054b8:	3e700000 	.word	0x3e700000

080054bc <scalbn>:
 80054bc:	004b      	lsls	r3, r1, #1
 80054be:	b570      	push	{r4, r5, r6, lr}
 80054c0:	0d5b      	lsrs	r3, r3, #21
 80054c2:	0014      	movs	r4, r2
 80054c4:	000d      	movs	r5, r1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <scalbn+0x2e>
 80054ca:	004b      	lsls	r3, r1, #1
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	4303      	orrs	r3, r0
 80054d0:	d012      	beq.n	80054f8 <scalbn+0x3c>
 80054d2:	4b23      	ldr	r3, [pc, #140]	@ (8005560 <scalbn+0xa4>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	f7fb ff8f 	bl	80013f8 <__aeabi_dmul>
 80054da:	4b22      	ldr	r3, [pc, #136]	@ (8005564 <scalbn+0xa8>)
 80054dc:	429c      	cmp	r4, r3
 80054de:	da0c      	bge.n	80054fa <scalbn+0x3e>
 80054e0:	4a21      	ldr	r2, [pc, #132]	@ (8005568 <scalbn+0xac>)
 80054e2:	4b22      	ldr	r3, [pc, #136]	@ (800556c <scalbn+0xb0>)
 80054e4:	f7fb ff88 	bl	80013f8 <__aeabi_dmul>
 80054e8:	e006      	b.n	80054f8 <scalbn+0x3c>
 80054ea:	4a21      	ldr	r2, [pc, #132]	@ (8005570 <scalbn+0xb4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d108      	bne.n	8005502 <scalbn+0x46>
 80054f0:	0002      	movs	r2, r0
 80054f2:	000b      	movs	r3, r1
 80054f4:	f7fa ffd8 	bl	80004a8 <__aeabi_dadd>
 80054f8:	bd70      	pop	{r4, r5, r6, pc}
 80054fa:	000d      	movs	r5, r1
 80054fc:	004b      	lsls	r3, r1, #1
 80054fe:	0d5b      	lsrs	r3, r3, #21
 8005500:	3b36      	subs	r3, #54	@ 0x36
 8005502:	4a1c      	ldr	r2, [pc, #112]	@ (8005574 <scalbn+0xb8>)
 8005504:	4294      	cmp	r4, r2
 8005506:	dd0a      	ble.n	800551e <scalbn+0x62>
 8005508:	4c1b      	ldr	r4, [pc, #108]	@ (8005578 <scalbn+0xbc>)
 800550a:	4d1c      	ldr	r5, [pc, #112]	@ (800557c <scalbn+0xc0>)
 800550c:	2900      	cmp	r1, #0
 800550e:	da01      	bge.n	8005514 <scalbn+0x58>
 8005510:	4c19      	ldr	r4, [pc, #100]	@ (8005578 <scalbn+0xbc>)
 8005512:	4d1b      	ldr	r5, [pc, #108]	@ (8005580 <scalbn+0xc4>)
 8005514:	4a18      	ldr	r2, [pc, #96]	@ (8005578 <scalbn+0xbc>)
 8005516:	4b19      	ldr	r3, [pc, #100]	@ (800557c <scalbn+0xc0>)
 8005518:	0020      	movs	r0, r4
 800551a:	0029      	movs	r1, r5
 800551c:	e7e2      	b.n	80054e4 <scalbn+0x28>
 800551e:	18e2      	adds	r2, r4, r3
 8005520:	4b18      	ldr	r3, [pc, #96]	@ (8005584 <scalbn+0xc8>)
 8005522:	429a      	cmp	r2, r3
 8005524:	dcf0      	bgt.n	8005508 <scalbn+0x4c>
 8005526:	2a00      	cmp	r2, #0
 8005528:	dd05      	ble.n	8005536 <scalbn+0x7a>
 800552a:	4b17      	ldr	r3, [pc, #92]	@ (8005588 <scalbn+0xcc>)
 800552c:	0512      	lsls	r2, r2, #20
 800552e:	402b      	ands	r3, r5
 8005530:	431a      	orrs	r2, r3
 8005532:	0011      	movs	r1, r2
 8005534:	e7e0      	b.n	80054f8 <scalbn+0x3c>
 8005536:	0013      	movs	r3, r2
 8005538:	3335      	adds	r3, #53	@ 0x35
 800553a:	da08      	bge.n	800554e <scalbn+0x92>
 800553c:	4c0a      	ldr	r4, [pc, #40]	@ (8005568 <scalbn+0xac>)
 800553e:	4d0b      	ldr	r5, [pc, #44]	@ (800556c <scalbn+0xb0>)
 8005540:	2900      	cmp	r1, #0
 8005542:	da01      	bge.n	8005548 <scalbn+0x8c>
 8005544:	4c08      	ldr	r4, [pc, #32]	@ (8005568 <scalbn+0xac>)
 8005546:	4d11      	ldr	r5, [pc, #68]	@ (800558c <scalbn+0xd0>)
 8005548:	4a07      	ldr	r2, [pc, #28]	@ (8005568 <scalbn+0xac>)
 800554a:	4b08      	ldr	r3, [pc, #32]	@ (800556c <scalbn+0xb0>)
 800554c:	e7e4      	b.n	8005518 <scalbn+0x5c>
 800554e:	4b0e      	ldr	r3, [pc, #56]	@ (8005588 <scalbn+0xcc>)
 8005550:	3236      	adds	r2, #54	@ 0x36
 8005552:	401d      	ands	r5, r3
 8005554:	0512      	lsls	r2, r2, #20
 8005556:	432a      	orrs	r2, r5
 8005558:	0011      	movs	r1, r2
 800555a:	4b0d      	ldr	r3, [pc, #52]	@ (8005590 <scalbn+0xd4>)
 800555c:	2200      	movs	r2, #0
 800555e:	e7c1      	b.n	80054e4 <scalbn+0x28>
 8005560:	43500000 	.word	0x43500000
 8005564:	ffff3cb0 	.word	0xffff3cb0
 8005568:	c2f8f359 	.word	0xc2f8f359
 800556c:	01a56e1f 	.word	0x01a56e1f
 8005570:	000007ff 	.word	0x000007ff
 8005574:	0000c350 	.word	0x0000c350
 8005578:	8800759c 	.word	0x8800759c
 800557c:	7e37e43c 	.word	0x7e37e43c
 8005580:	fe37e43c 	.word	0xfe37e43c
 8005584:	000007fe 	.word	0x000007fe
 8005588:	800fffff 	.word	0x800fffff
 800558c:	81a56e1f 	.word	0x81a56e1f
 8005590:	3c900000 	.word	0x3c900000

08005594 <floor>:
 8005594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005596:	004b      	lsls	r3, r1, #1
 8005598:	4a36      	ldr	r2, [pc, #216]	@ (8005674 <floor+0xe0>)
 800559a:	0d5b      	lsrs	r3, r3, #21
 800559c:	189e      	adds	r6, r3, r2
 800559e:	000c      	movs	r4, r1
 80055a0:	0005      	movs	r5, r0
 80055a2:	9001      	str	r0, [sp, #4]
 80055a4:	2e13      	cmp	r6, #19
 80055a6:	dc2f      	bgt.n	8005608 <floor+0x74>
 80055a8:	2e00      	cmp	r6, #0
 80055aa:	da14      	bge.n	80055d6 <floor+0x42>
 80055ac:	4a32      	ldr	r2, [pc, #200]	@ (8005678 <floor+0xe4>)
 80055ae:	4b33      	ldr	r3, [pc, #204]	@ (800567c <floor+0xe8>)
 80055b0:	f7fa ff7a 	bl	80004a8 <__aeabi_dadd>
 80055b4:	2200      	movs	r2, #0
 80055b6:	2300      	movs	r3, #0
 80055b8:	f7fa ff44 	bl	8000444 <__aeabi_dcmpgt>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d007      	beq.n	80055d0 <floor+0x3c>
 80055c0:	2c00      	cmp	r4, #0
 80055c2:	da50      	bge.n	8005666 <floor+0xd2>
 80055c4:	0064      	lsls	r4, r4, #1
 80055c6:	0864      	lsrs	r4, r4, #1
 80055c8:	4325      	orrs	r5, r4
 80055ca:	d14f      	bne.n	800566c <floor+0xd8>
 80055cc:	2480      	movs	r4, #128	@ 0x80
 80055ce:	0624      	lsls	r4, r4, #24
 80055d0:	0021      	movs	r1, r4
 80055d2:	0028      	movs	r0, r5
 80055d4:	e022      	b.n	800561c <floor+0x88>
 80055d6:	4f2a      	ldr	r7, [pc, #168]	@ (8005680 <floor+0xec>)
 80055d8:	4137      	asrs	r7, r6
 80055da:	003b      	movs	r3, r7
 80055dc:	400b      	ands	r3, r1
 80055de:	4303      	orrs	r3, r0
 80055e0:	d01c      	beq.n	800561c <floor+0x88>
 80055e2:	4a25      	ldr	r2, [pc, #148]	@ (8005678 <floor+0xe4>)
 80055e4:	4b25      	ldr	r3, [pc, #148]	@ (800567c <floor+0xe8>)
 80055e6:	f7fa ff5f 	bl	80004a8 <__aeabi_dadd>
 80055ea:	2200      	movs	r2, #0
 80055ec:	2300      	movs	r3, #0
 80055ee:	f7fa ff29 	bl	8000444 <__aeabi_dcmpgt>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d0ec      	beq.n	80055d0 <floor+0x3c>
 80055f6:	2c00      	cmp	r4, #0
 80055f8:	da03      	bge.n	8005602 <floor+0x6e>
 80055fa:	2380      	movs	r3, #128	@ 0x80
 80055fc:	035b      	lsls	r3, r3, #13
 80055fe:	4133      	asrs	r3, r6
 8005600:	18e4      	adds	r4, r4, r3
 8005602:	2500      	movs	r5, #0
 8005604:	43bc      	bics	r4, r7
 8005606:	e7e3      	b.n	80055d0 <floor+0x3c>
 8005608:	2e33      	cmp	r6, #51	@ 0x33
 800560a:	dd09      	ble.n	8005620 <floor+0x8c>
 800560c:	2380      	movs	r3, #128	@ 0x80
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	429e      	cmp	r6, r3
 8005612:	d103      	bne.n	800561c <floor+0x88>
 8005614:	0002      	movs	r2, r0
 8005616:	000b      	movs	r3, r1
 8005618:	f7fa ff46 	bl	80004a8 <__aeabi_dadd>
 800561c:	b003      	add	sp, #12
 800561e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005620:	2701      	movs	r7, #1
 8005622:	4a18      	ldr	r2, [pc, #96]	@ (8005684 <floor+0xf0>)
 8005624:	427f      	negs	r7, r7
 8005626:	189b      	adds	r3, r3, r2
 8005628:	40df      	lsrs	r7, r3
 800562a:	4238      	tst	r0, r7
 800562c:	d0f6      	beq.n	800561c <floor+0x88>
 800562e:	4a12      	ldr	r2, [pc, #72]	@ (8005678 <floor+0xe4>)
 8005630:	4b12      	ldr	r3, [pc, #72]	@ (800567c <floor+0xe8>)
 8005632:	f7fa ff39 	bl	80004a8 <__aeabi_dadd>
 8005636:	2200      	movs	r2, #0
 8005638:	2300      	movs	r3, #0
 800563a:	f7fa ff03 	bl	8000444 <__aeabi_dcmpgt>
 800563e:	2800      	cmp	r0, #0
 8005640:	d0c6      	beq.n	80055d0 <floor+0x3c>
 8005642:	2c00      	cmp	r4, #0
 8005644:	da02      	bge.n	800564c <floor+0xb8>
 8005646:	2e14      	cmp	r6, #20
 8005648:	d102      	bne.n	8005650 <floor+0xbc>
 800564a:	3401      	adds	r4, #1
 800564c:	43bd      	bics	r5, r7
 800564e:	e7bf      	b.n	80055d0 <floor+0x3c>
 8005650:	2234      	movs	r2, #52	@ 0x34
 8005652:	2301      	movs	r3, #1
 8005654:	1b92      	subs	r2, r2, r6
 8005656:	4093      	lsls	r3, r2
 8005658:	18ed      	adds	r5, r5, r3
 800565a:	9b01      	ldr	r3, [sp, #4]
 800565c:	429d      	cmp	r5, r3
 800565e:	419b      	sbcs	r3, r3
 8005660:	425b      	negs	r3, r3
 8005662:	18e4      	adds	r4, r4, r3
 8005664:	e7f2      	b.n	800564c <floor+0xb8>
 8005666:	2500      	movs	r5, #0
 8005668:	002c      	movs	r4, r5
 800566a:	e7b1      	b.n	80055d0 <floor+0x3c>
 800566c:	2500      	movs	r5, #0
 800566e:	4c06      	ldr	r4, [pc, #24]	@ (8005688 <floor+0xf4>)
 8005670:	e7ae      	b.n	80055d0 <floor+0x3c>
 8005672:	46c0      	nop			@ (mov r8, r8)
 8005674:	fffffc01 	.word	0xfffffc01
 8005678:	8800759c 	.word	0x8800759c
 800567c:	7e37e43c 	.word	0x7e37e43c
 8005680:	000fffff 	.word	0x000fffff
 8005684:	fffffbed 	.word	0xfffffbed
 8005688:	bff00000 	.word	0xbff00000

0800568c <malloc>:
 800568c:	b510      	push	{r4, lr}
 800568e:	4b03      	ldr	r3, [pc, #12]	@ (800569c <malloc+0x10>)
 8005690:	0001      	movs	r1, r0
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	f000 f826 	bl	80056e4 <_malloc_r>
 8005698:	bd10      	pop	{r4, pc}
 800569a:	46c0      	nop			@ (mov r8, r8)
 800569c:	200003ec 	.word	0x200003ec

080056a0 <sbrk_aligned>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	4e0f      	ldr	r6, [pc, #60]	@ (80056e0 <sbrk_aligned+0x40>)
 80056a4:	000d      	movs	r5, r1
 80056a6:	6831      	ldr	r1, [r6, #0]
 80056a8:	0004      	movs	r4, r0
 80056aa:	2900      	cmp	r1, #0
 80056ac:	d102      	bne.n	80056b4 <sbrk_aligned+0x14>
 80056ae:	f000 f8b1 	bl	8005814 <_sbrk_r>
 80056b2:	6030      	str	r0, [r6, #0]
 80056b4:	0029      	movs	r1, r5
 80056b6:	0020      	movs	r0, r4
 80056b8:	f000 f8ac 	bl	8005814 <_sbrk_r>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d103      	bne.n	80056c8 <sbrk_aligned+0x28>
 80056c0:	2501      	movs	r5, #1
 80056c2:	426d      	negs	r5, r5
 80056c4:	0028      	movs	r0, r5
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	2303      	movs	r3, #3
 80056ca:	1cc5      	adds	r5, r0, #3
 80056cc:	439d      	bics	r5, r3
 80056ce:	42a8      	cmp	r0, r5
 80056d0:	d0f8      	beq.n	80056c4 <sbrk_aligned+0x24>
 80056d2:	1a29      	subs	r1, r5, r0
 80056d4:	0020      	movs	r0, r4
 80056d6:	f000 f89d 	bl	8005814 <_sbrk_r>
 80056da:	3001      	adds	r0, #1
 80056dc:	d1f2      	bne.n	80056c4 <sbrk_aligned+0x24>
 80056de:	e7ef      	b.n	80056c0 <sbrk_aligned+0x20>
 80056e0:	20000504 	.word	0x20000504

080056e4 <_malloc_r>:
 80056e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056e6:	2203      	movs	r2, #3
 80056e8:	1ccb      	adds	r3, r1, #3
 80056ea:	4393      	bics	r3, r2
 80056ec:	3308      	adds	r3, #8
 80056ee:	0005      	movs	r5, r0
 80056f0:	001f      	movs	r7, r3
 80056f2:	2b0c      	cmp	r3, #12
 80056f4:	d234      	bcs.n	8005760 <_malloc_r+0x7c>
 80056f6:	270c      	movs	r7, #12
 80056f8:	42b9      	cmp	r1, r7
 80056fa:	d833      	bhi.n	8005764 <_malloc_r+0x80>
 80056fc:	0028      	movs	r0, r5
 80056fe:	f000 f871 	bl	80057e4 <__malloc_lock>
 8005702:	4e37      	ldr	r6, [pc, #220]	@ (80057e0 <_malloc_r+0xfc>)
 8005704:	6833      	ldr	r3, [r6, #0]
 8005706:	001c      	movs	r4, r3
 8005708:	2c00      	cmp	r4, #0
 800570a:	d12f      	bne.n	800576c <_malloc_r+0x88>
 800570c:	0039      	movs	r1, r7
 800570e:	0028      	movs	r0, r5
 8005710:	f7ff ffc6 	bl	80056a0 <sbrk_aligned>
 8005714:	0004      	movs	r4, r0
 8005716:	1c43      	adds	r3, r0, #1
 8005718:	d15f      	bne.n	80057da <_malloc_r+0xf6>
 800571a:	6834      	ldr	r4, [r6, #0]
 800571c:	9400      	str	r4, [sp, #0]
 800571e:	9b00      	ldr	r3, [sp, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d14a      	bne.n	80057ba <_malloc_r+0xd6>
 8005724:	2c00      	cmp	r4, #0
 8005726:	d052      	beq.n	80057ce <_malloc_r+0xea>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	0028      	movs	r0, r5
 800572c:	18e3      	adds	r3, r4, r3
 800572e:	9900      	ldr	r1, [sp, #0]
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	f000 f86f 	bl	8005814 <_sbrk_r>
 8005736:	9b01      	ldr	r3, [sp, #4]
 8005738:	4283      	cmp	r3, r0
 800573a:	d148      	bne.n	80057ce <_malloc_r+0xea>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	0028      	movs	r0, r5
 8005740:	1aff      	subs	r7, r7, r3
 8005742:	0039      	movs	r1, r7
 8005744:	f7ff ffac 	bl	80056a0 <sbrk_aligned>
 8005748:	3001      	adds	r0, #1
 800574a:	d040      	beq.n	80057ce <_malloc_r+0xea>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	19db      	adds	r3, r3, r7
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	6833      	ldr	r3, [r6, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	2a00      	cmp	r2, #0
 8005758:	d133      	bne.n	80057c2 <_malloc_r+0xde>
 800575a:	9b00      	ldr	r3, [sp, #0]
 800575c:	6033      	str	r3, [r6, #0]
 800575e:	e019      	b.n	8005794 <_malloc_r+0xb0>
 8005760:	2b00      	cmp	r3, #0
 8005762:	dac9      	bge.n	80056f8 <_malloc_r+0x14>
 8005764:	230c      	movs	r3, #12
 8005766:	602b      	str	r3, [r5, #0]
 8005768:	2000      	movs	r0, #0
 800576a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800576c:	6821      	ldr	r1, [r4, #0]
 800576e:	1bc9      	subs	r1, r1, r7
 8005770:	d420      	bmi.n	80057b4 <_malloc_r+0xd0>
 8005772:	290b      	cmp	r1, #11
 8005774:	d90a      	bls.n	800578c <_malloc_r+0xa8>
 8005776:	19e2      	adds	r2, r4, r7
 8005778:	6027      	str	r7, [r4, #0]
 800577a:	42a3      	cmp	r3, r4
 800577c:	d104      	bne.n	8005788 <_malloc_r+0xa4>
 800577e:	6032      	str	r2, [r6, #0]
 8005780:	6863      	ldr	r3, [r4, #4]
 8005782:	6011      	str	r1, [r2, #0]
 8005784:	6053      	str	r3, [r2, #4]
 8005786:	e005      	b.n	8005794 <_malloc_r+0xb0>
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	e7f9      	b.n	8005780 <_malloc_r+0x9c>
 800578c:	6862      	ldr	r2, [r4, #4]
 800578e:	42a3      	cmp	r3, r4
 8005790:	d10e      	bne.n	80057b0 <_malloc_r+0xcc>
 8005792:	6032      	str	r2, [r6, #0]
 8005794:	0028      	movs	r0, r5
 8005796:	f000 f82d 	bl	80057f4 <__malloc_unlock>
 800579a:	0020      	movs	r0, r4
 800579c:	2207      	movs	r2, #7
 800579e:	300b      	adds	r0, #11
 80057a0:	1d23      	adds	r3, r4, #4
 80057a2:	4390      	bics	r0, r2
 80057a4:	1ac2      	subs	r2, r0, r3
 80057a6:	4298      	cmp	r0, r3
 80057a8:	d0df      	beq.n	800576a <_malloc_r+0x86>
 80057aa:	1a1b      	subs	r3, r3, r0
 80057ac:	50a3      	str	r3, [r4, r2]
 80057ae:	e7dc      	b.n	800576a <_malloc_r+0x86>
 80057b0:	605a      	str	r2, [r3, #4]
 80057b2:	e7ef      	b.n	8005794 <_malloc_r+0xb0>
 80057b4:	0023      	movs	r3, r4
 80057b6:	6864      	ldr	r4, [r4, #4]
 80057b8:	e7a6      	b.n	8005708 <_malloc_r+0x24>
 80057ba:	9c00      	ldr	r4, [sp, #0]
 80057bc:	6863      	ldr	r3, [r4, #4]
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	e7ad      	b.n	800571e <_malloc_r+0x3a>
 80057c2:	001a      	movs	r2, r3
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	42a3      	cmp	r3, r4
 80057c8:	d1fb      	bne.n	80057c2 <_malloc_r+0xde>
 80057ca:	2300      	movs	r3, #0
 80057cc:	e7da      	b.n	8005784 <_malloc_r+0xa0>
 80057ce:	230c      	movs	r3, #12
 80057d0:	0028      	movs	r0, r5
 80057d2:	602b      	str	r3, [r5, #0]
 80057d4:	f000 f80e 	bl	80057f4 <__malloc_unlock>
 80057d8:	e7c6      	b.n	8005768 <_malloc_r+0x84>
 80057da:	6007      	str	r7, [r0, #0]
 80057dc:	e7da      	b.n	8005794 <_malloc_r+0xb0>
 80057de:	46c0      	nop			@ (mov r8, r8)
 80057e0:	20000508 	.word	0x20000508

080057e4 <__malloc_lock>:
 80057e4:	b510      	push	{r4, lr}
 80057e6:	4802      	ldr	r0, [pc, #8]	@ (80057f0 <__malloc_lock+0xc>)
 80057e8:	f000 f850 	bl	800588c <__retarget_lock_acquire_recursive>
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	20000648 	.word	0x20000648

080057f4 <__malloc_unlock>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	4802      	ldr	r0, [pc, #8]	@ (8005800 <__malloc_unlock+0xc>)
 80057f8:	f000 f849 	bl	800588e <__retarget_lock_release_recursive>
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	20000648 	.word	0x20000648

08005804 <memset>:
 8005804:	0003      	movs	r3, r0
 8005806:	1882      	adds	r2, r0, r2
 8005808:	4293      	cmp	r3, r2
 800580a:	d100      	bne.n	800580e <memset+0xa>
 800580c:	4770      	bx	lr
 800580e:	7019      	strb	r1, [r3, #0]
 8005810:	3301      	adds	r3, #1
 8005812:	e7f9      	b.n	8005808 <memset+0x4>

08005814 <_sbrk_r>:
 8005814:	2300      	movs	r3, #0
 8005816:	b570      	push	{r4, r5, r6, lr}
 8005818:	4d06      	ldr	r5, [pc, #24]	@ (8005834 <_sbrk_r+0x20>)
 800581a:	0004      	movs	r4, r0
 800581c:	0008      	movs	r0, r1
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	f7fd f878 	bl	8002914 <_sbrk>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d103      	bne.n	8005830 <_sbrk_r+0x1c>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d000      	beq.n	8005830 <_sbrk_r+0x1c>
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	bd70      	pop	{r4, r5, r6, pc}
 8005832:	46c0      	nop			@ (mov r8, r8)
 8005834:	20000644 	.word	0x20000644

08005838 <__errno>:
 8005838:	4b01      	ldr	r3, [pc, #4]	@ (8005840 <__errno+0x8>)
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	4770      	bx	lr
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	200003ec 	.word	0x200003ec

08005844 <__libc_init_array>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	2600      	movs	r6, #0
 8005848:	4c0c      	ldr	r4, [pc, #48]	@ (800587c <__libc_init_array+0x38>)
 800584a:	4d0d      	ldr	r5, [pc, #52]	@ (8005880 <__libc_init_array+0x3c>)
 800584c:	1b64      	subs	r4, r4, r5
 800584e:	10a4      	asrs	r4, r4, #2
 8005850:	42a6      	cmp	r6, r4
 8005852:	d109      	bne.n	8005868 <__libc_init_array+0x24>
 8005854:	2600      	movs	r6, #0
 8005856:	f000 f81b 	bl	8005890 <_init>
 800585a:	4c0a      	ldr	r4, [pc, #40]	@ (8005884 <__libc_init_array+0x40>)
 800585c:	4d0a      	ldr	r5, [pc, #40]	@ (8005888 <__libc_init_array+0x44>)
 800585e:	1b64      	subs	r4, r4, r5
 8005860:	10a4      	asrs	r4, r4, #2
 8005862:	42a6      	cmp	r6, r4
 8005864:	d105      	bne.n	8005872 <__libc_init_array+0x2e>
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	00b3      	lsls	r3, r6, #2
 800586a:	58eb      	ldr	r3, [r5, r3]
 800586c:	4798      	blx	r3
 800586e:	3601      	adds	r6, #1
 8005870:	e7ee      	b.n	8005850 <__libc_init_array+0xc>
 8005872:	00b3      	lsls	r3, r6, #2
 8005874:	58eb      	ldr	r3, [r5, r3]
 8005876:	4798      	blx	r3
 8005878:	3601      	adds	r6, #1
 800587a:	e7f2      	b.n	8005862 <__libc_init_array+0x1e>
 800587c:	08005af0 	.word	0x08005af0
 8005880:	08005af0 	.word	0x08005af0
 8005884:	08005af4 	.word	0x08005af4
 8005888:	08005af0 	.word	0x08005af0

0800588c <__retarget_lock_acquire_recursive>:
 800588c:	4770      	bx	lr

0800588e <__retarget_lock_release_recursive>:
 800588e:	4770      	bx	lr

08005890 <_init>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr

0800589c <_fini>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	46c0      	nop			@ (mov r8, r8)
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr
