
stmBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9d4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  0800ea90  0800ea90  0000fa90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f220  0800f220  0001121c  2**0
                  CONTENTS
  4 .ARM          00000000  0800f220  0800f220  0001121c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f220  0800f220  0001121c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f220  0800f220  00010220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f224  0800f224  00010224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800f228  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000021c  0800f444  0001121c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  0800f444  00011708  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001121c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018899  00000000  00000000  00011244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ded  00000000  00000000  00029add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0002d8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e3  00000000  00000000  0002ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f8fa  00000000  00000000  0002ff7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7fd  00000000  00000000  0004f875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6989  00000000  00000000  0006c072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001229fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c4  00000000  00000000  00122a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00128c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000021c 	.word	0x2000021c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ea78 	.word	0x0800ea78

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000220 	.word	0x20000220
 8000100:	0800ea78 	.word	0x0800ea78

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f000 ffd7 	bl	80013ec <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff17 	bl	800127c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffc9 	bl	80013ec <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffbf 	bl	80013ec <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff41 	bl	8001304 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff37 	bl	8001304 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_d2uiz>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	2200      	movs	r2, #0
 80004a8:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <__aeabi_d2uiz+0x38>)
 80004aa:	0004      	movs	r4, r0
 80004ac:	000d      	movs	r5, r1
 80004ae:	f7ff ffef 	bl	8000490 <__aeabi_dcmpge>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d104      	bne.n	80004c0 <__aeabi_d2uiz+0x1c>
 80004b6:	0020      	movs	r0, r4
 80004b8:	0029      	movs	r1, r5
 80004ba:	f001 fe8f 	bl	80021dc <__aeabi_d2iz>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <__aeabi_d2uiz+0x38>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	0020      	movs	r0, r4
 80004c6:	0029      	movs	r1, r5
 80004c8:	f001 faca 	bl	8001a60 <__aeabi_dsub>
 80004cc:	f001 fe86 	bl	80021dc <__aeabi_d2iz>
 80004d0:	2380      	movs	r3, #128	@ 0x80
 80004d2:	061b      	lsls	r3, r3, #24
 80004d4:	469c      	mov	ip, r3
 80004d6:	4460      	add	r0, ip
 80004d8:	e7f1      	b.n	80004be <__aeabi_d2uiz+0x1a>
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	41e00000 	.word	0x41e00000

080004e0 <__aeabi_d2lz>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	0004      	movs	r4, r0
 80004e8:	000d      	movs	r5, r1
 80004ea:	f7ff ffb3 	bl	8000454 <__aeabi_dcmplt>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d108      	bne.n	8000504 <__aeabi_d2lz+0x24>
 80004f2:	0020      	movs	r0, r4
 80004f4:	0029      	movs	r1, r5
 80004f6:	f000 f80f 	bl	8000518 <__aeabi_d2ulz>
 80004fa:	0002      	movs	r2, r0
 80004fc:	000b      	movs	r3, r1
 80004fe:	0010      	movs	r0, r2
 8000500:	0019      	movs	r1, r3
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	2380      	movs	r3, #128	@ 0x80
 8000506:	061b      	lsls	r3, r3, #24
 8000508:	18e9      	adds	r1, r5, r3
 800050a:	0020      	movs	r0, r4
 800050c:	f000 f804 	bl	8000518 <__aeabi_d2ulz>
 8000510:	2300      	movs	r3, #0
 8000512:	4242      	negs	r2, r0
 8000514:	418b      	sbcs	r3, r1
 8000516:	e7f2      	b.n	80004fe <__aeabi_d2lz+0x1e>

08000518 <__aeabi_d2ulz>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	2200      	movs	r2, #0
 800051c:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <__aeabi_d2ulz+0x34>)
 800051e:	000d      	movs	r5, r1
 8000520:	0004      	movs	r4, r0
 8000522:	f000 ffd5 	bl	80014d0 <__aeabi_dmul>
 8000526:	f7ff ffbd 	bl	80004a4 <__aeabi_d2uiz>
 800052a:	0006      	movs	r6, r0
 800052c:	f001 fec0 	bl	80022b0 <__aeabi_ui2d>
 8000530:	2200      	movs	r2, #0
 8000532:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <__aeabi_d2ulz+0x38>)
 8000534:	f000 ffcc 	bl	80014d0 <__aeabi_dmul>
 8000538:	0002      	movs	r2, r0
 800053a:	000b      	movs	r3, r1
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f001 fa8e 	bl	8001a60 <__aeabi_dsub>
 8000544:	f7ff ffae 	bl	80004a4 <__aeabi_d2uiz>
 8000548:	0031      	movs	r1, r6
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	3df00000 	.word	0x3df00000
 8000550:	41f00000 	.word	0x41f00000

08000554 <__aeabi_l2d>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	0006      	movs	r6, r0
 8000558:	0008      	movs	r0, r1
 800055a:	f001 fe7b 	bl	8002254 <__aeabi_i2d>
 800055e:	2200      	movs	r2, #0
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <__aeabi_l2d+0x28>)
 8000562:	f000 ffb5 	bl	80014d0 <__aeabi_dmul>
 8000566:	000d      	movs	r5, r1
 8000568:	0004      	movs	r4, r0
 800056a:	0030      	movs	r0, r6
 800056c:	f001 fea0 	bl	80022b0 <__aeabi_ui2d>
 8000570:	002b      	movs	r3, r5
 8000572:	0022      	movs	r2, r4
 8000574:	f000 f804 	bl	8000580 <__aeabi_dadd>
 8000578:	bd70      	pop	{r4, r5, r6, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	41f00000 	.word	0x41f00000

08000580 <__aeabi_dadd>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	4657      	mov	r7, sl
 8000584:	464e      	mov	r6, r9
 8000586:	4645      	mov	r5, r8
 8000588:	46de      	mov	lr, fp
 800058a:	b5e0      	push	{r5, r6, r7, lr}
 800058c:	b083      	sub	sp, #12
 800058e:	9000      	str	r0, [sp, #0]
 8000590:	9101      	str	r1, [sp, #4]
 8000592:	030c      	lsls	r4, r1, #12
 8000594:	004f      	lsls	r7, r1, #1
 8000596:	0fce      	lsrs	r6, r1, #31
 8000598:	0a61      	lsrs	r1, r4, #9
 800059a:	9c00      	ldr	r4, [sp, #0]
 800059c:	031d      	lsls	r5, r3, #12
 800059e:	0f64      	lsrs	r4, r4, #29
 80005a0:	430c      	orrs	r4, r1
 80005a2:	9900      	ldr	r1, [sp, #0]
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	00c8      	lsls	r0, r1, #3
 80005aa:	0059      	lsls	r1, r3, #1
 80005ac:	0d4b      	lsrs	r3, r1, #21
 80005ae:	4699      	mov	r9, r3
 80005b0:	9a00      	ldr	r2, [sp, #0]
 80005b2:	9b01      	ldr	r3, [sp, #4]
 80005b4:	0a6d      	lsrs	r5, r5, #9
 80005b6:	0fd9      	lsrs	r1, r3, #31
 80005b8:	0f53      	lsrs	r3, r2, #29
 80005ba:	432b      	orrs	r3, r5
 80005bc:	469a      	mov	sl, r3
 80005be:	9b00      	ldr	r3, [sp, #0]
 80005c0:	0d7f      	lsrs	r7, r7, #21
 80005c2:	00da      	lsls	r2, r3, #3
 80005c4:	4694      	mov	ip, r2
 80005c6:	464a      	mov	r2, r9
 80005c8:	46b0      	mov	r8, r6
 80005ca:	1aba      	subs	r2, r7, r2
 80005cc:	428e      	cmp	r6, r1
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x52>
 80005d0:	e0b0      	b.n	8000734 <__aeabi_dadd+0x1b4>
 80005d2:	2a00      	cmp	r2, #0
 80005d4:	dc00      	bgt.n	80005d8 <__aeabi_dadd+0x58>
 80005d6:	e078      	b.n	80006ca <__aeabi_dadd+0x14a>
 80005d8:	4649      	mov	r1, r9
 80005da:	2900      	cmp	r1, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_dadd+0x60>
 80005de:	e0e9      	b.n	80007b4 <__aeabi_dadd+0x234>
 80005e0:	49c9      	ldr	r1, [pc, #804]	@ (8000908 <__aeabi_dadd+0x388>)
 80005e2:	428f      	cmp	r7, r1
 80005e4:	d100      	bne.n	80005e8 <__aeabi_dadd+0x68>
 80005e6:	e195      	b.n	8000914 <__aeabi_dadd+0x394>
 80005e8:	2501      	movs	r5, #1
 80005ea:	2a38      	cmp	r2, #56	@ 0x38
 80005ec:	dc16      	bgt.n	800061c <__aeabi_dadd+0x9c>
 80005ee:	2180      	movs	r1, #128	@ 0x80
 80005f0:	4653      	mov	r3, sl
 80005f2:	0409      	lsls	r1, r1, #16
 80005f4:	430b      	orrs	r3, r1
 80005f6:	469a      	mov	sl, r3
 80005f8:	2a1f      	cmp	r2, #31
 80005fa:	dd00      	ble.n	80005fe <__aeabi_dadd+0x7e>
 80005fc:	e1e7      	b.n	80009ce <__aeabi_dadd+0x44e>
 80005fe:	2120      	movs	r1, #32
 8000600:	4655      	mov	r5, sl
 8000602:	1a8b      	subs	r3, r1, r2
 8000604:	4661      	mov	r1, ip
 8000606:	409d      	lsls	r5, r3
 8000608:	40d1      	lsrs	r1, r2
 800060a:	430d      	orrs	r5, r1
 800060c:	4661      	mov	r1, ip
 800060e:	4099      	lsls	r1, r3
 8000610:	1e4b      	subs	r3, r1, #1
 8000612:	4199      	sbcs	r1, r3
 8000614:	4653      	mov	r3, sl
 8000616:	40d3      	lsrs	r3, r2
 8000618:	430d      	orrs	r5, r1
 800061a:	1ae4      	subs	r4, r4, r3
 800061c:	1b45      	subs	r5, r0, r5
 800061e:	42a8      	cmp	r0, r5
 8000620:	4180      	sbcs	r0, r0
 8000622:	4240      	negs	r0, r0
 8000624:	1a24      	subs	r4, r4, r0
 8000626:	0223      	lsls	r3, r4, #8
 8000628:	d400      	bmi.n	800062c <__aeabi_dadd+0xac>
 800062a:	e10f      	b.n	800084c <__aeabi_dadd+0x2cc>
 800062c:	0264      	lsls	r4, r4, #9
 800062e:	0a64      	lsrs	r4, r4, #9
 8000630:	2c00      	cmp	r4, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0xb6>
 8000634:	e139      	b.n	80008aa <__aeabi_dadd+0x32a>
 8000636:	0020      	movs	r0, r4
 8000638:	f001 ff2a 	bl	8002490 <__clzsi2>
 800063c:	0003      	movs	r3, r0
 800063e:	3b08      	subs	r3, #8
 8000640:	2120      	movs	r1, #32
 8000642:	0028      	movs	r0, r5
 8000644:	1aca      	subs	r2, r1, r3
 8000646:	40d0      	lsrs	r0, r2
 8000648:	409c      	lsls	r4, r3
 800064a:	0002      	movs	r2, r0
 800064c:	409d      	lsls	r5, r3
 800064e:	4322      	orrs	r2, r4
 8000650:	429f      	cmp	r7, r3
 8000652:	dd00      	ble.n	8000656 <__aeabi_dadd+0xd6>
 8000654:	e173      	b.n	800093e <__aeabi_dadd+0x3be>
 8000656:	1bd8      	subs	r0, r3, r7
 8000658:	3001      	adds	r0, #1
 800065a:	1a09      	subs	r1, r1, r0
 800065c:	002c      	movs	r4, r5
 800065e:	408d      	lsls	r5, r1
 8000660:	40c4      	lsrs	r4, r0
 8000662:	1e6b      	subs	r3, r5, #1
 8000664:	419d      	sbcs	r5, r3
 8000666:	0013      	movs	r3, r2
 8000668:	40c2      	lsrs	r2, r0
 800066a:	408b      	lsls	r3, r1
 800066c:	4325      	orrs	r5, r4
 800066e:	2700      	movs	r7, #0
 8000670:	0014      	movs	r4, r2
 8000672:	431d      	orrs	r5, r3
 8000674:	076b      	lsls	r3, r5, #29
 8000676:	d009      	beq.n	800068c <__aeabi_dadd+0x10c>
 8000678:	230f      	movs	r3, #15
 800067a:	402b      	ands	r3, r5
 800067c:	2b04      	cmp	r3, #4
 800067e:	d005      	beq.n	800068c <__aeabi_dadd+0x10c>
 8000680:	1d2b      	adds	r3, r5, #4
 8000682:	42ab      	cmp	r3, r5
 8000684:	41ad      	sbcs	r5, r5
 8000686:	426d      	negs	r5, r5
 8000688:	1964      	adds	r4, r4, r5
 800068a:	001d      	movs	r5, r3
 800068c:	0223      	lsls	r3, r4, #8
 800068e:	d400      	bmi.n	8000692 <__aeabi_dadd+0x112>
 8000690:	e12d      	b.n	80008ee <__aeabi_dadd+0x36e>
 8000692:	4a9d      	ldr	r2, [pc, #628]	@ (8000908 <__aeabi_dadd+0x388>)
 8000694:	3701      	adds	r7, #1
 8000696:	4297      	cmp	r7, r2
 8000698:	d100      	bne.n	800069c <__aeabi_dadd+0x11c>
 800069a:	e0d3      	b.n	8000844 <__aeabi_dadd+0x2c4>
 800069c:	4646      	mov	r6, r8
 800069e:	499b      	ldr	r1, [pc, #620]	@ (800090c <__aeabi_dadd+0x38c>)
 80006a0:	08ed      	lsrs	r5, r5, #3
 80006a2:	4021      	ands	r1, r4
 80006a4:	074a      	lsls	r2, r1, #29
 80006a6:	432a      	orrs	r2, r5
 80006a8:	057c      	lsls	r4, r7, #21
 80006aa:	024d      	lsls	r5, r1, #9
 80006ac:	0b2d      	lsrs	r5, r5, #12
 80006ae:	0d64      	lsrs	r4, r4, #21
 80006b0:	0524      	lsls	r4, r4, #20
 80006b2:	432c      	orrs	r4, r5
 80006b4:	07f6      	lsls	r6, r6, #31
 80006b6:	4334      	orrs	r4, r6
 80006b8:	0010      	movs	r0, r2
 80006ba:	0021      	movs	r1, r4
 80006bc:	b003      	add	sp, #12
 80006be:	bcf0      	pop	{r4, r5, r6, r7}
 80006c0:	46bb      	mov	fp, r7
 80006c2:	46b2      	mov	sl, r6
 80006c4:	46a9      	mov	r9, r5
 80006c6:	46a0      	mov	r8, r4
 80006c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ca:	2a00      	cmp	r2, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x150>
 80006ce:	e084      	b.n	80007da <__aeabi_dadd+0x25a>
 80006d0:	464a      	mov	r2, r9
 80006d2:	1bd2      	subs	r2, r2, r7
 80006d4:	2f00      	cmp	r7, #0
 80006d6:	d000      	beq.n	80006da <__aeabi_dadd+0x15a>
 80006d8:	e16d      	b.n	80009b6 <__aeabi_dadd+0x436>
 80006da:	0025      	movs	r5, r4
 80006dc:	4305      	orrs	r5, r0
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x162>
 80006e0:	e127      	b.n	8000932 <__aeabi_dadd+0x3b2>
 80006e2:	1e56      	subs	r6, r2, #1
 80006e4:	2a01      	cmp	r2, #1
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x16a>
 80006e8:	e23b      	b.n	8000b62 <__aeabi_dadd+0x5e2>
 80006ea:	4d87      	ldr	r5, [pc, #540]	@ (8000908 <__aeabi_dadd+0x388>)
 80006ec:	42aa      	cmp	r2, r5
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x172>
 80006f0:	e26a      	b.n	8000bc8 <__aeabi_dadd+0x648>
 80006f2:	2501      	movs	r5, #1
 80006f4:	2e38      	cmp	r6, #56	@ 0x38
 80006f6:	dc12      	bgt.n	800071e <__aeabi_dadd+0x19e>
 80006f8:	0032      	movs	r2, r6
 80006fa:	2a1f      	cmp	r2, #31
 80006fc:	dd00      	ble.n	8000700 <__aeabi_dadd+0x180>
 80006fe:	e1f8      	b.n	8000af2 <__aeabi_dadd+0x572>
 8000700:	2620      	movs	r6, #32
 8000702:	0025      	movs	r5, r4
 8000704:	1ab6      	subs	r6, r6, r2
 8000706:	0007      	movs	r7, r0
 8000708:	4653      	mov	r3, sl
 800070a:	40b0      	lsls	r0, r6
 800070c:	40d4      	lsrs	r4, r2
 800070e:	40b5      	lsls	r5, r6
 8000710:	40d7      	lsrs	r7, r2
 8000712:	1e46      	subs	r6, r0, #1
 8000714:	41b0      	sbcs	r0, r6
 8000716:	1b1b      	subs	r3, r3, r4
 8000718:	469a      	mov	sl, r3
 800071a:	433d      	orrs	r5, r7
 800071c:	4305      	orrs	r5, r0
 800071e:	4662      	mov	r2, ip
 8000720:	1b55      	subs	r5, r2, r5
 8000722:	45ac      	cmp	ip, r5
 8000724:	4192      	sbcs	r2, r2
 8000726:	4653      	mov	r3, sl
 8000728:	4252      	negs	r2, r2
 800072a:	000e      	movs	r6, r1
 800072c:	464f      	mov	r7, r9
 800072e:	4688      	mov	r8, r1
 8000730:	1a9c      	subs	r4, r3, r2
 8000732:	e778      	b.n	8000626 <__aeabi_dadd+0xa6>
 8000734:	2a00      	cmp	r2, #0
 8000736:	dc00      	bgt.n	800073a <__aeabi_dadd+0x1ba>
 8000738:	e08e      	b.n	8000858 <__aeabi_dadd+0x2d8>
 800073a:	4649      	mov	r1, r9
 800073c:	2900      	cmp	r1, #0
 800073e:	d175      	bne.n	800082c <__aeabi_dadd+0x2ac>
 8000740:	4661      	mov	r1, ip
 8000742:	4653      	mov	r3, sl
 8000744:	4319      	orrs	r1, r3
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x1ca>
 8000748:	e0f6      	b.n	8000938 <__aeabi_dadd+0x3b8>
 800074a:	1e51      	subs	r1, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x1d2>
 8000750:	e191      	b.n	8000a76 <__aeabi_dadd+0x4f6>
 8000752:	4d6d      	ldr	r5, [pc, #436]	@ (8000908 <__aeabi_dadd+0x388>)
 8000754:	42aa      	cmp	r2, r5
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x1da>
 8000758:	e0dc      	b.n	8000914 <__aeabi_dadd+0x394>
 800075a:	2501      	movs	r5, #1
 800075c:	2938      	cmp	r1, #56	@ 0x38
 800075e:	dc14      	bgt.n	800078a <__aeabi_dadd+0x20a>
 8000760:	000a      	movs	r2, r1
 8000762:	2a1f      	cmp	r2, #31
 8000764:	dd00      	ble.n	8000768 <__aeabi_dadd+0x1e8>
 8000766:	e1a2      	b.n	8000aae <__aeabi_dadd+0x52e>
 8000768:	2120      	movs	r1, #32
 800076a:	4653      	mov	r3, sl
 800076c:	1a89      	subs	r1, r1, r2
 800076e:	408b      	lsls	r3, r1
 8000770:	001d      	movs	r5, r3
 8000772:	4663      	mov	r3, ip
 8000774:	40d3      	lsrs	r3, r2
 8000776:	431d      	orrs	r5, r3
 8000778:	4663      	mov	r3, ip
 800077a:	408b      	lsls	r3, r1
 800077c:	0019      	movs	r1, r3
 800077e:	1e4b      	subs	r3, r1, #1
 8000780:	4199      	sbcs	r1, r3
 8000782:	4653      	mov	r3, sl
 8000784:	40d3      	lsrs	r3, r2
 8000786:	430d      	orrs	r5, r1
 8000788:	18e4      	adds	r4, r4, r3
 800078a:	182d      	adds	r5, r5, r0
 800078c:	4285      	cmp	r5, r0
 800078e:	4180      	sbcs	r0, r0
 8000790:	4240      	negs	r0, r0
 8000792:	1824      	adds	r4, r4, r0
 8000794:	0223      	lsls	r3, r4, #8
 8000796:	d559      	bpl.n	800084c <__aeabi_dadd+0x2cc>
 8000798:	4b5b      	ldr	r3, [pc, #364]	@ (8000908 <__aeabi_dadd+0x388>)
 800079a:	3701      	adds	r7, #1
 800079c:	429f      	cmp	r7, r3
 800079e:	d051      	beq.n	8000844 <__aeabi_dadd+0x2c4>
 80007a0:	2101      	movs	r1, #1
 80007a2:	4b5a      	ldr	r3, [pc, #360]	@ (800090c <__aeabi_dadd+0x38c>)
 80007a4:	086a      	lsrs	r2, r5, #1
 80007a6:	401c      	ands	r4, r3
 80007a8:	4029      	ands	r1, r5
 80007aa:	430a      	orrs	r2, r1
 80007ac:	07e5      	lsls	r5, r4, #31
 80007ae:	4315      	orrs	r5, r2
 80007b0:	0864      	lsrs	r4, r4, #1
 80007b2:	e75f      	b.n	8000674 <__aeabi_dadd+0xf4>
 80007b4:	4661      	mov	r1, ip
 80007b6:	4653      	mov	r3, sl
 80007b8:	4319      	orrs	r1, r3
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x23e>
 80007bc:	e0bc      	b.n	8000938 <__aeabi_dadd+0x3b8>
 80007be:	1e51      	subs	r1, r2, #1
 80007c0:	2a01      	cmp	r2, #1
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x246>
 80007c4:	e164      	b.n	8000a90 <__aeabi_dadd+0x510>
 80007c6:	4d50      	ldr	r5, [pc, #320]	@ (8000908 <__aeabi_dadd+0x388>)
 80007c8:	42aa      	cmp	r2, r5
 80007ca:	d100      	bne.n	80007ce <__aeabi_dadd+0x24e>
 80007cc:	e16a      	b.n	8000aa4 <__aeabi_dadd+0x524>
 80007ce:	2501      	movs	r5, #1
 80007d0:	2938      	cmp	r1, #56	@ 0x38
 80007d2:	dd00      	ble.n	80007d6 <__aeabi_dadd+0x256>
 80007d4:	e722      	b.n	800061c <__aeabi_dadd+0x9c>
 80007d6:	000a      	movs	r2, r1
 80007d8:	e70e      	b.n	80005f8 <__aeabi_dadd+0x78>
 80007da:	4a4d      	ldr	r2, [pc, #308]	@ (8000910 <__aeabi_dadd+0x390>)
 80007dc:	1c7d      	adds	r5, r7, #1
 80007de:	4215      	tst	r5, r2
 80007e0:	d000      	beq.n	80007e4 <__aeabi_dadd+0x264>
 80007e2:	e0d0      	b.n	8000986 <__aeabi_dadd+0x406>
 80007e4:	0025      	movs	r5, r4
 80007e6:	4662      	mov	r2, ip
 80007e8:	4653      	mov	r3, sl
 80007ea:	4305      	orrs	r5, r0
 80007ec:	431a      	orrs	r2, r3
 80007ee:	2f00      	cmp	r7, #0
 80007f0:	d000      	beq.n	80007f4 <__aeabi_dadd+0x274>
 80007f2:	e137      	b.n	8000a64 <__aeabi_dadd+0x4e4>
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x27a>
 80007f8:	e1a8      	b.n	8000b4c <__aeabi_dadd+0x5cc>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x280>
 80007fe:	e16a      	b.n	8000ad6 <__aeabi_dadd+0x556>
 8000800:	4663      	mov	r3, ip
 8000802:	1ac5      	subs	r5, r0, r3
 8000804:	4653      	mov	r3, sl
 8000806:	1ae2      	subs	r2, r4, r3
 8000808:	42a8      	cmp	r0, r5
 800080a:	419b      	sbcs	r3, r3
 800080c:	425b      	negs	r3, r3
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	021a      	lsls	r2, r3, #8
 8000812:	d400      	bmi.n	8000816 <__aeabi_dadd+0x296>
 8000814:	e203      	b.n	8000c1e <__aeabi_dadd+0x69e>
 8000816:	4663      	mov	r3, ip
 8000818:	1a1d      	subs	r5, r3, r0
 800081a:	45ac      	cmp	ip, r5
 800081c:	4192      	sbcs	r2, r2
 800081e:	4653      	mov	r3, sl
 8000820:	4252      	negs	r2, r2
 8000822:	1b1c      	subs	r4, r3, r4
 8000824:	000e      	movs	r6, r1
 8000826:	4688      	mov	r8, r1
 8000828:	1aa4      	subs	r4, r4, r2
 800082a:	e723      	b.n	8000674 <__aeabi_dadd+0xf4>
 800082c:	4936      	ldr	r1, [pc, #216]	@ (8000908 <__aeabi_dadd+0x388>)
 800082e:	428f      	cmp	r7, r1
 8000830:	d070      	beq.n	8000914 <__aeabi_dadd+0x394>
 8000832:	2501      	movs	r5, #1
 8000834:	2a38      	cmp	r2, #56	@ 0x38
 8000836:	dca8      	bgt.n	800078a <__aeabi_dadd+0x20a>
 8000838:	2180      	movs	r1, #128	@ 0x80
 800083a:	4653      	mov	r3, sl
 800083c:	0409      	lsls	r1, r1, #16
 800083e:	430b      	orrs	r3, r1
 8000840:	469a      	mov	sl, r3
 8000842:	e78e      	b.n	8000762 <__aeabi_dadd+0x1e2>
 8000844:	003c      	movs	r4, r7
 8000846:	2500      	movs	r5, #0
 8000848:	2200      	movs	r2, #0
 800084a:	e731      	b.n	80006b0 <__aeabi_dadd+0x130>
 800084c:	2307      	movs	r3, #7
 800084e:	402b      	ands	r3, r5
 8000850:	2b00      	cmp	r3, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_dadd+0x2d6>
 8000854:	e710      	b.n	8000678 <__aeabi_dadd+0xf8>
 8000856:	e093      	b.n	8000980 <__aeabi_dadd+0x400>
 8000858:	2a00      	cmp	r2, #0
 800085a:	d074      	beq.n	8000946 <__aeabi_dadd+0x3c6>
 800085c:	464a      	mov	r2, r9
 800085e:	1bd2      	subs	r2, r2, r7
 8000860:	2f00      	cmp	r7, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_dadd+0x2e6>
 8000864:	e0c7      	b.n	80009f6 <__aeabi_dadd+0x476>
 8000866:	4928      	ldr	r1, [pc, #160]	@ (8000908 <__aeabi_dadd+0x388>)
 8000868:	4589      	cmp	r9, r1
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x2ee>
 800086c:	e185      	b.n	8000b7a <__aeabi_dadd+0x5fa>
 800086e:	2501      	movs	r5, #1
 8000870:	2a38      	cmp	r2, #56	@ 0x38
 8000872:	dc12      	bgt.n	800089a <__aeabi_dadd+0x31a>
 8000874:	2180      	movs	r1, #128	@ 0x80
 8000876:	0409      	lsls	r1, r1, #16
 8000878:	430c      	orrs	r4, r1
 800087a:	2a1f      	cmp	r2, #31
 800087c:	dd00      	ble.n	8000880 <__aeabi_dadd+0x300>
 800087e:	e1ab      	b.n	8000bd8 <__aeabi_dadd+0x658>
 8000880:	2120      	movs	r1, #32
 8000882:	0025      	movs	r5, r4
 8000884:	1a89      	subs	r1, r1, r2
 8000886:	0007      	movs	r7, r0
 8000888:	4088      	lsls	r0, r1
 800088a:	408d      	lsls	r5, r1
 800088c:	40d7      	lsrs	r7, r2
 800088e:	1e41      	subs	r1, r0, #1
 8000890:	4188      	sbcs	r0, r1
 8000892:	40d4      	lsrs	r4, r2
 8000894:	433d      	orrs	r5, r7
 8000896:	4305      	orrs	r5, r0
 8000898:	44a2      	add	sl, r4
 800089a:	4465      	add	r5, ip
 800089c:	4565      	cmp	r5, ip
 800089e:	4192      	sbcs	r2, r2
 80008a0:	4252      	negs	r2, r2
 80008a2:	4452      	add	r2, sl
 80008a4:	0014      	movs	r4, r2
 80008a6:	464f      	mov	r7, r9
 80008a8:	e774      	b.n	8000794 <__aeabi_dadd+0x214>
 80008aa:	0028      	movs	r0, r5
 80008ac:	f001 fdf0 	bl	8002490 <__clzsi2>
 80008b0:	0003      	movs	r3, r0
 80008b2:	3318      	adds	r3, #24
 80008b4:	2b1f      	cmp	r3, #31
 80008b6:	dc00      	bgt.n	80008ba <__aeabi_dadd+0x33a>
 80008b8:	e6c2      	b.n	8000640 <__aeabi_dadd+0xc0>
 80008ba:	002a      	movs	r2, r5
 80008bc:	3808      	subs	r0, #8
 80008be:	4082      	lsls	r2, r0
 80008c0:	429f      	cmp	r7, r3
 80008c2:	dd00      	ble.n	80008c6 <__aeabi_dadd+0x346>
 80008c4:	e0a9      	b.n	8000a1a <__aeabi_dadd+0x49a>
 80008c6:	1bdb      	subs	r3, r3, r7
 80008c8:	1c58      	adds	r0, r3, #1
 80008ca:	281f      	cmp	r0, #31
 80008cc:	dc00      	bgt.n	80008d0 <__aeabi_dadd+0x350>
 80008ce:	e1ac      	b.n	8000c2a <__aeabi_dadd+0x6aa>
 80008d0:	0015      	movs	r5, r2
 80008d2:	3b1f      	subs	r3, #31
 80008d4:	40dd      	lsrs	r5, r3
 80008d6:	2820      	cmp	r0, #32
 80008d8:	d005      	beq.n	80008e6 <__aeabi_dadd+0x366>
 80008da:	2340      	movs	r3, #64	@ 0x40
 80008dc:	1a1b      	subs	r3, r3, r0
 80008de:	409a      	lsls	r2, r3
 80008e0:	1e53      	subs	r3, r2, #1
 80008e2:	419a      	sbcs	r2, r3
 80008e4:	4315      	orrs	r5, r2
 80008e6:	2307      	movs	r3, #7
 80008e8:	2700      	movs	r7, #0
 80008ea:	402b      	ands	r3, r5
 80008ec:	e7b0      	b.n	8000850 <__aeabi_dadd+0x2d0>
 80008ee:	08ed      	lsrs	r5, r5, #3
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <__aeabi_dadd+0x388>)
 80008f2:	0762      	lsls	r2, r4, #29
 80008f4:	432a      	orrs	r2, r5
 80008f6:	08e4      	lsrs	r4, r4, #3
 80008f8:	429f      	cmp	r7, r3
 80008fa:	d00f      	beq.n	800091c <__aeabi_dadd+0x39c>
 80008fc:	0324      	lsls	r4, r4, #12
 80008fe:	0b25      	lsrs	r5, r4, #12
 8000900:	057c      	lsls	r4, r7, #21
 8000902:	0d64      	lsrs	r4, r4, #21
 8000904:	e6d4      	b.n	80006b0 <__aeabi_dadd+0x130>
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	000007ff 	.word	0x000007ff
 800090c:	ff7fffff 	.word	0xff7fffff
 8000910:	000007fe 	.word	0x000007fe
 8000914:	08c0      	lsrs	r0, r0, #3
 8000916:	0762      	lsls	r2, r4, #29
 8000918:	4302      	orrs	r2, r0
 800091a:	08e4      	lsrs	r4, r4, #3
 800091c:	0013      	movs	r3, r2
 800091e:	4323      	orrs	r3, r4
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x3a4>
 8000922:	e186      	b.n	8000c32 <__aeabi_dadd+0x6b2>
 8000924:	2580      	movs	r5, #128	@ 0x80
 8000926:	032d      	lsls	r5, r5, #12
 8000928:	4325      	orrs	r5, r4
 800092a:	032d      	lsls	r5, r5, #12
 800092c:	4cc3      	ldr	r4, [pc, #780]	@ (8000c3c <__aeabi_dadd+0x6bc>)
 800092e:	0b2d      	lsrs	r5, r5, #12
 8000930:	e6be      	b.n	80006b0 <__aeabi_dadd+0x130>
 8000932:	4660      	mov	r0, ip
 8000934:	4654      	mov	r4, sl
 8000936:	000e      	movs	r6, r1
 8000938:	0017      	movs	r7, r2
 800093a:	08c5      	lsrs	r5, r0, #3
 800093c:	e7d8      	b.n	80008f0 <__aeabi_dadd+0x370>
 800093e:	4cc0      	ldr	r4, [pc, #768]	@ (8000c40 <__aeabi_dadd+0x6c0>)
 8000940:	1aff      	subs	r7, r7, r3
 8000942:	4014      	ands	r4, r2
 8000944:	e696      	b.n	8000674 <__aeabi_dadd+0xf4>
 8000946:	4abf      	ldr	r2, [pc, #764]	@ (8000c44 <__aeabi_dadd+0x6c4>)
 8000948:	1c79      	adds	r1, r7, #1
 800094a:	4211      	tst	r1, r2
 800094c:	d16b      	bne.n	8000a26 <__aeabi_dadd+0x4a6>
 800094e:	0022      	movs	r2, r4
 8000950:	4302      	orrs	r2, r0
 8000952:	2f00      	cmp	r7, #0
 8000954:	d000      	beq.n	8000958 <__aeabi_dadd+0x3d8>
 8000956:	e0db      	b.n	8000b10 <__aeabi_dadd+0x590>
 8000958:	2a00      	cmp	r2, #0
 800095a:	d100      	bne.n	800095e <__aeabi_dadd+0x3de>
 800095c:	e12d      	b.n	8000bba <__aeabi_dadd+0x63a>
 800095e:	4662      	mov	r2, ip
 8000960:	4653      	mov	r3, sl
 8000962:	431a      	orrs	r2, r3
 8000964:	d100      	bne.n	8000968 <__aeabi_dadd+0x3e8>
 8000966:	e0b6      	b.n	8000ad6 <__aeabi_dadd+0x556>
 8000968:	4663      	mov	r3, ip
 800096a:	18c5      	adds	r5, r0, r3
 800096c:	4285      	cmp	r5, r0
 800096e:	4180      	sbcs	r0, r0
 8000970:	4454      	add	r4, sl
 8000972:	4240      	negs	r0, r0
 8000974:	1824      	adds	r4, r4, r0
 8000976:	0223      	lsls	r3, r4, #8
 8000978:	d502      	bpl.n	8000980 <__aeabi_dadd+0x400>
 800097a:	000f      	movs	r7, r1
 800097c:	4bb0      	ldr	r3, [pc, #704]	@ (8000c40 <__aeabi_dadd+0x6c0>)
 800097e:	401c      	ands	r4, r3
 8000980:	003a      	movs	r2, r7
 8000982:	0028      	movs	r0, r5
 8000984:	e7d8      	b.n	8000938 <__aeabi_dadd+0x3b8>
 8000986:	4662      	mov	r2, ip
 8000988:	1a85      	subs	r5, r0, r2
 800098a:	42a8      	cmp	r0, r5
 800098c:	4192      	sbcs	r2, r2
 800098e:	4653      	mov	r3, sl
 8000990:	4252      	negs	r2, r2
 8000992:	4691      	mov	r9, r2
 8000994:	1ae3      	subs	r3, r4, r3
 8000996:	001a      	movs	r2, r3
 8000998:	464b      	mov	r3, r9
 800099a:	1ad2      	subs	r2, r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	4691      	mov	r9, r2
 80009a0:	021a      	lsls	r2, r3, #8
 80009a2:	d454      	bmi.n	8000a4e <__aeabi_dadd+0x4ce>
 80009a4:	464a      	mov	r2, r9
 80009a6:	464c      	mov	r4, r9
 80009a8:	432a      	orrs	r2, r5
 80009aa:	d000      	beq.n	80009ae <__aeabi_dadd+0x42e>
 80009ac:	e640      	b.n	8000630 <__aeabi_dadd+0xb0>
 80009ae:	2600      	movs	r6, #0
 80009b0:	2400      	movs	r4, #0
 80009b2:	2500      	movs	r5, #0
 80009b4:	e67c      	b.n	80006b0 <__aeabi_dadd+0x130>
 80009b6:	4da1      	ldr	r5, [pc, #644]	@ (8000c3c <__aeabi_dadd+0x6bc>)
 80009b8:	45a9      	cmp	r9, r5
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x43e>
 80009bc:	e090      	b.n	8000ae0 <__aeabi_dadd+0x560>
 80009be:	2501      	movs	r5, #1
 80009c0:	2a38      	cmp	r2, #56	@ 0x38
 80009c2:	dd00      	ble.n	80009c6 <__aeabi_dadd+0x446>
 80009c4:	e6ab      	b.n	800071e <__aeabi_dadd+0x19e>
 80009c6:	2580      	movs	r5, #128	@ 0x80
 80009c8:	042d      	lsls	r5, r5, #16
 80009ca:	432c      	orrs	r4, r5
 80009cc:	e695      	b.n	80006fa <__aeabi_dadd+0x17a>
 80009ce:	0011      	movs	r1, r2
 80009d0:	4655      	mov	r5, sl
 80009d2:	3920      	subs	r1, #32
 80009d4:	40cd      	lsrs	r5, r1
 80009d6:	46a9      	mov	r9, r5
 80009d8:	2a20      	cmp	r2, #32
 80009da:	d006      	beq.n	80009ea <__aeabi_dadd+0x46a>
 80009dc:	2140      	movs	r1, #64	@ 0x40
 80009de:	4653      	mov	r3, sl
 80009e0:	1a8a      	subs	r2, r1, r2
 80009e2:	4093      	lsls	r3, r2
 80009e4:	4662      	mov	r2, ip
 80009e6:	431a      	orrs	r2, r3
 80009e8:	4694      	mov	ip, r2
 80009ea:	4665      	mov	r5, ip
 80009ec:	1e6b      	subs	r3, r5, #1
 80009ee:	419d      	sbcs	r5, r3
 80009f0:	464b      	mov	r3, r9
 80009f2:	431d      	orrs	r5, r3
 80009f4:	e612      	b.n	800061c <__aeabi_dadd+0x9c>
 80009f6:	0021      	movs	r1, r4
 80009f8:	4301      	orrs	r1, r0
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0x47e>
 80009fc:	e0c4      	b.n	8000b88 <__aeabi_dadd+0x608>
 80009fe:	1e51      	subs	r1, r2, #1
 8000a00:	2a01      	cmp	r2, #1
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x486>
 8000a04:	e0fb      	b.n	8000bfe <__aeabi_dadd+0x67e>
 8000a06:	4d8d      	ldr	r5, [pc, #564]	@ (8000c3c <__aeabi_dadd+0x6bc>)
 8000a08:	42aa      	cmp	r2, r5
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dadd+0x48e>
 8000a0c:	e0b5      	b.n	8000b7a <__aeabi_dadd+0x5fa>
 8000a0e:	2501      	movs	r5, #1
 8000a10:	2938      	cmp	r1, #56	@ 0x38
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_dadd+0x496>
 8000a14:	e741      	b.n	800089a <__aeabi_dadd+0x31a>
 8000a16:	000a      	movs	r2, r1
 8000a18:	e72f      	b.n	800087a <__aeabi_dadd+0x2fa>
 8000a1a:	4c89      	ldr	r4, [pc, #548]	@ (8000c40 <__aeabi_dadd+0x6c0>)
 8000a1c:	1aff      	subs	r7, r7, r3
 8000a1e:	4014      	ands	r4, r2
 8000a20:	0762      	lsls	r2, r4, #29
 8000a22:	08e4      	lsrs	r4, r4, #3
 8000a24:	e76a      	b.n	80008fc <__aeabi_dadd+0x37c>
 8000a26:	4a85      	ldr	r2, [pc, #532]	@ (8000c3c <__aeabi_dadd+0x6bc>)
 8000a28:	4291      	cmp	r1, r2
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x4ae>
 8000a2c:	e0e3      	b.n	8000bf6 <__aeabi_dadd+0x676>
 8000a2e:	4663      	mov	r3, ip
 8000a30:	18c2      	adds	r2, r0, r3
 8000a32:	4282      	cmp	r2, r0
 8000a34:	4180      	sbcs	r0, r0
 8000a36:	0023      	movs	r3, r4
 8000a38:	4240      	negs	r0, r0
 8000a3a:	4453      	add	r3, sl
 8000a3c:	181b      	adds	r3, r3, r0
 8000a3e:	07dd      	lsls	r5, r3, #31
 8000a40:	085c      	lsrs	r4, r3, #1
 8000a42:	2307      	movs	r3, #7
 8000a44:	0852      	lsrs	r2, r2, #1
 8000a46:	4315      	orrs	r5, r2
 8000a48:	000f      	movs	r7, r1
 8000a4a:	402b      	ands	r3, r5
 8000a4c:	e700      	b.n	8000850 <__aeabi_dadd+0x2d0>
 8000a4e:	4663      	mov	r3, ip
 8000a50:	1a1d      	subs	r5, r3, r0
 8000a52:	45ac      	cmp	ip, r5
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	4653      	mov	r3, sl
 8000a58:	4252      	negs	r2, r2
 8000a5a:	1b1c      	subs	r4, r3, r4
 8000a5c:	000e      	movs	r6, r1
 8000a5e:	4688      	mov	r8, r1
 8000a60:	1aa4      	subs	r4, r4, r2
 8000a62:	e5e5      	b.n	8000630 <__aeabi_dadd+0xb0>
 8000a64:	2d00      	cmp	r5, #0
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dadd+0x4ea>
 8000a68:	e091      	b.n	8000b8e <__aeabi_dadd+0x60e>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d138      	bne.n	8000ae0 <__aeabi_dadd+0x560>
 8000a6e:	2480      	movs	r4, #128	@ 0x80
 8000a70:	2600      	movs	r6, #0
 8000a72:	0324      	lsls	r4, r4, #12
 8000a74:	e756      	b.n	8000924 <__aeabi_dadd+0x3a4>
 8000a76:	4663      	mov	r3, ip
 8000a78:	18c5      	adds	r5, r0, r3
 8000a7a:	4285      	cmp	r5, r0
 8000a7c:	4180      	sbcs	r0, r0
 8000a7e:	4454      	add	r4, sl
 8000a80:	4240      	negs	r0, r0
 8000a82:	1824      	adds	r4, r4, r0
 8000a84:	2701      	movs	r7, #1
 8000a86:	0223      	lsls	r3, r4, #8
 8000a88:	d400      	bmi.n	8000a8c <__aeabi_dadd+0x50c>
 8000a8a:	e6df      	b.n	800084c <__aeabi_dadd+0x2cc>
 8000a8c:	2702      	movs	r7, #2
 8000a8e:	e687      	b.n	80007a0 <__aeabi_dadd+0x220>
 8000a90:	4663      	mov	r3, ip
 8000a92:	1ac5      	subs	r5, r0, r3
 8000a94:	42a8      	cmp	r0, r5
 8000a96:	4180      	sbcs	r0, r0
 8000a98:	4653      	mov	r3, sl
 8000a9a:	4240      	negs	r0, r0
 8000a9c:	1ae4      	subs	r4, r4, r3
 8000a9e:	2701      	movs	r7, #1
 8000aa0:	1a24      	subs	r4, r4, r0
 8000aa2:	e5c0      	b.n	8000626 <__aeabi_dadd+0xa6>
 8000aa4:	0762      	lsls	r2, r4, #29
 8000aa6:	08c0      	lsrs	r0, r0, #3
 8000aa8:	4302      	orrs	r2, r0
 8000aaa:	08e4      	lsrs	r4, r4, #3
 8000aac:	e736      	b.n	800091c <__aeabi_dadd+0x39c>
 8000aae:	0011      	movs	r1, r2
 8000ab0:	4653      	mov	r3, sl
 8000ab2:	3920      	subs	r1, #32
 8000ab4:	40cb      	lsrs	r3, r1
 8000ab6:	4699      	mov	r9, r3
 8000ab8:	2a20      	cmp	r2, #32
 8000aba:	d006      	beq.n	8000aca <__aeabi_dadd+0x54a>
 8000abc:	2140      	movs	r1, #64	@ 0x40
 8000abe:	4653      	mov	r3, sl
 8000ac0:	1a8a      	subs	r2, r1, r2
 8000ac2:	4093      	lsls	r3, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	4694      	mov	ip, r2
 8000aca:	4665      	mov	r5, ip
 8000acc:	1e6b      	subs	r3, r5, #1
 8000ace:	419d      	sbcs	r5, r3
 8000ad0:	464b      	mov	r3, r9
 8000ad2:	431d      	orrs	r5, r3
 8000ad4:	e659      	b.n	800078a <__aeabi_dadd+0x20a>
 8000ad6:	0762      	lsls	r2, r4, #29
 8000ad8:	08c0      	lsrs	r0, r0, #3
 8000ada:	4302      	orrs	r2, r0
 8000adc:	08e4      	lsrs	r4, r4, #3
 8000ade:	e70d      	b.n	80008fc <__aeabi_dadd+0x37c>
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	075a      	lsls	r2, r3, #29
 8000ae4:	4663      	mov	r3, ip
 8000ae6:	08d8      	lsrs	r0, r3, #3
 8000ae8:	4653      	mov	r3, sl
 8000aea:	000e      	movs	r6, r1
 8000aec:	4302      	orrs	r2, r0
 8000aee:	08dc      	lsrs	r4, r3, #3
 8000af0:	e714      	b.n	800091c <__aeabi_dadd+0x39c>
 8000af2:	0015      	movs	r5, r2
 8000af4:	0026      	movs	r6, r4
 8000af6:	3d20      	subs	r5, #32
 8000af8:	40ee      	lsrs	r6, r5
 8000afa:	2a20      	cmp	r2, #32
 8000afc:	d003      	beq.n	8000b06 <__aeabi_dadd+0x586>
 8000afe:	2540      	movs	r5, #64	@ 0x40
 8000b00:	1aaa      	subs	r2, r5, r2
 8000b02:	4094      	lsls	r4, r2
 8000b04:	4320      	orrs	r0, r4
 8000b06:	1e42      	subs	r2, r0, #1
 8000b08:	4190      	sbcs	r0, r2
 8000b0a:	0005      	movs	r5, r0
 8000b0c:	4335      	orrs	r5, r6
 8000b0e:	e606      	b.n	800071e <__aeabi_dadd+0x19e>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	d07c      	beq.n	8000c0e <__aeabi_dadd+0x68e>
 8000b14:	4662      	mov	r2, ip
 8000b16:	4653      	mov	r3, sl
 8000b18:	08c0      	lsrs	r0, r0, #3
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dadd+0x5a0>
 8000b1e:	e6fa      	b.n	8000916 <__aeabi_dadd+0x396>
 8000b20:	0762      	lsls	r2, r4, #29
 8000b22:	4310      	orrs	r0, r2
 8000b24:	2280      	movs	r2, #128	@ 0x80
 8000b26:	08e4      	lsrs	r4, r4, #3
 8000b28:	0312      	lsls	r2, r2, #12
 8000b2a:	4214      	tst	r4, r2
 8000b2c:	d008      	beq.n	8000b40 <__aeabi_dadd+0x5c0>
 8000b2e:	08d9      	lsrs	r1, r3, #3
 8000b30:	4211      	tst	r1, r2
 8000b32:	d105      	bne.n	8000b40 <__aeabi_dadd+0x5c0>
 8000b34:	4663      	mov	r3, ip
 8000b36:	08d8      	lsrs	r0, r3, #3
 8000b38:	4653      	mov	r3, sl
 8000b3a:	000c      	movs	r4, r1
 8000b3c:	075b      	lsls	r3, r3, #29
 8000b3e:	4318      	orrs	r0, r3
 8000b40:	0f42      	lsrs	r2, r0, #29
 8000b42:	00c0      	lsls	r0, r0, #3
 8000b44:	08c0      	lsrs	r0, r0, #3
 8000b46:	0752      	lsls	r2, r2, #29
 8000b48:	4302      	orrs	r2, r0
 8000b4a:	e6e7      	b.n	800091c <__aeabi_dadd+0x39c>
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_dadd+0x5d2>
 8000b50:	e72d      	b.n	80009ae <__aeabi_dadd+0x42e>
 8000b52:	4663      	mov	r3, ip
 8000b54:	08d8      	lsrs	r0, r3, #3
 8000b56:	4653      	mov	r3, sl
 8000b58:	075a      	lsls	r2, r3, #29
 8000b5a:	000e      	movs	r6, r1
 8000b5c:	4302      	orrs	r2, r0
 8000b5e:	08dc      	lsrs	r4, r3, #3
 8000b60:	e6cc      	b.n	80008fc <__aeabi_dadd+0x37c>
 8000b62:	4663      	mov	r3, ip
 8000b64:	1a1d      	subs	r5, r3, r0
 8000b66:	45ac      	cmp	ip, r5
 8000b68:	4192      	sbcs	r2, r2
 8000b6a:	4653      	mov	r3, sl
 8000b6c:	4252      	negs	r2, r2
 8000b6e:	1b1c      	subs	r4, r3, r4
 8000b70:	000e      	movs	r6, r1
 8000b72:	4688      	mov	r8, r1
 8000b74:	1aa4      	subs	r4, r4, r2
 8000b76:	3701      	adds	r7, #1
 8000b78:	e555      	b.n	8000626 <__aeabi_dadd+0xa6>
 8000b7a:	4663      	mov	r3, ip
 8000b7c:	08d9      	lsrs	r1, r3, #3
 8000b7e:	4653      	mov	r3, sl
 8000b80:	075a      	lsls	r2, r3, #29
 8000b82:	430a      	orrs	r2, r1
 8000b84:	08dc      	lsrs	r4, r3, #3
 8000b86:	e6c9      	b.n	800091c <__aeabi_dadd+0x39c>
 8000b88:	4660      	mov	r0, ip
 8000b8a:	4654      	mov	r4, sl
 8000b8c:	e6d4      	b.n	8000938 <__aeabi_dadd+0x3b8>
 8000b8e:	08c0      	lsrs	r0, r0, #3
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d100      	bne.n	8000b96 <__aeabi_dadd+0x616>
 8000b94:	e6bf      	b.n	8000916 <__aeabi_dadd+0x396>
 8000b96:	0762      	lsls	r2, r4, #29
 8000b98:	4310      	orrs	r0, r2
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	08e4      	lsrs	r4, r4, #3
 8000b9e:	0312      	lsls	r2, r2, #12
 8000ba0:	4214      	tst	r4, r2
 8000ba2:	d0cd      	beq.n	8000b40 <__aeabi_dadd+0x5c0>
 8000ba4:	08dd      	lsrs	r5, r3, #3
 8000ba6:	4215      	tst	r5, r2
 8000ba8:	d1ca      	bne.n	8000b40 <__aeabi_dadd+0x5c0>
 8000baa:	4663      	mov	r3, ip
 8000bac:	08d8      	lsrs	r0, r3, #3
 8000bae:	4653      	mov	r3, sl
 8000bb0:	075b      	lsls	r3, r3, #29
 8000bb2:	000e      	movs	r6, r1
 8000bb4:	002c      	movs	r4, r5
 8000bb6:	4318      	orrs	r0, r3
 8000bb8:	e7c2      	b.n	8000b40 <__aeabi_dadd+0x5c0>
 8000bba:	4663      	mov	r3, ip
 8000bbc:	08d9      	lsrs	r1, r3, #3
 8000bbe:	4653      	mov	r3, sl
 8000bc0:	075a      	lsls	r2, r3, #29
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	08dc      	lsrs	r4, r3, #3
 8000bc6:	e699      	b.n	80008fc <__aeabi_dadd+0x37c>
 8000bc8:	4663      	mov	r3, ip
 8000bca:	08d8      	lsrs	r0, r3, #3
 8000bcc:	4653      	mov	r3, sl
 8000bce:	075a      	lsls	r2, r3, #29
 8000bd0:	000e      	movs	r6, r1
 8000bd2:	4302      	orrs	r2, r0
 8000bd4:	08dc      	lsrs	r4, r3, #3
 8000bd6:	e6a1      	b.n	800091c <__aeabi_dadd+0x39c>
 8000bd8:	0011      	movs	r1, r2
 8000bda:	0027      	movs	r7, r4
 8000bdc:	3920      	subs	r1, #32
 8000bde:	40cf      	lsrs	r7, r1
 8000be0:	2a20      	cmp	r2, #32
 8000be2:	d003      	beq.n	8000bec <__aeabi_dadd+0x66c>
 8000be4:	2140      	movs	r1, #64	@ 0x40
 8000be6:	1a8a      	subs	r2, r1, r2
 8000be8:	4094      	lsls	r4, r2
 8000bea:	4320      	orrs	r0, r4
 8000bec:	1e42      	subs	r2, r0, #1
 8000bee:	4190      	sbcs	r0, r2
 8000bf0:	0005      	movs	r5, r0
 8000bf2:	433d      	orrs	r5, r7
 8000bf4:	e651      	b.n	800089a <__aeabi_dadd+0x31a>
 8000bf6:	000c      	movs	r4, r1
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	e558      	b.n	80006b0 <__aeabi_dadd+0x130>
 8000bfe:	4460      	add	r0, ip
 8000c00:	4560      	cmp	r0, ip
 8000c02:	4192      	sbcs	r2, r2
 8000c04:	4454      	add	r4, sl
 8000c06:	4252      	negs	r2, r2
 8000c08:	0005      	movs	r5, r0
 8000c0a:	18a4      	adds	r4, r4, r2
 8000c0c:	e73a      	b.n	8000a84 <__aeabi_dadd+0x504>
 8000c0e:	4653      	mov	r3, sl
 8000c10:	075a      	lsls	r2, r3, #29
 8000c12:	4663      	mov	r3, ip
 8000c14:	08d9      	lsrs	r1, r3, #3
 8000c16:	4653      	mov	r3, sl
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	08dc      	lsrs	r4, r3, #3
 8000c1c:	e67e      	b.n	800091c <__aeabi_dadd+0x39c>
 8000c1e:	001a      	movs	r2, r3
 8000c20:	001c      	movs	r4, r3
 8000c22:	432a      	orrs	r2, r5
 8000c24:	d000      	beq.n	8000c28 <__aeabi_dadd+0x6a8>
 8000c26:	e6ab      	b.n	8000980 <__aeabi_dadd+0x400>
 8000c28:	e6c1      	b.n	80009ae <__aeabi_dadd+0x42e>
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	2500      	movs	r5, #0
 8000c2e:	1a09      	subs	r1, r1, r0
 8000c30:	e519      	b.n	8000666 <__aeabi_dadd+0xe6>
 8000c32:	2200      	movs	r2, #0
 8000c34:	2500      	movs	r5, #0
 8000c36:	4c01      	ldr	r4, [pc, #4]	@ (8000c3c <__aeabi_dadd+0x6bc>)
 8000c38:	e53a      	b.n	80006b0 <__aeabi_dadd+0x130>
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	000007ff 	.word	0x000007ff
 8000c40:	ff7fffff 	.word	0xff7fffff
 8000c44:	000007fe 	.word	0x000007fe

08000c48 <__aeabi_ddiv>:
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	46de      	mov	lr, fp
 8000c4c:	4645      	mov	r5, r8
 8000c4e:	4657      	mov	r7, sl
 8000c50:	464e      	mov	r6, r9
 8000c52:	b5e0      	push	{r5, r6, r7, lr}
 8000c54:	b087      	sub	sp, #28
 8000c56:	9200      	str	r2, [sp, #0]
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	030b      	lsls	r3, r1, #12
 8000c5c:	0b1b      	lsrs	r3, r3, #12
 8000c5e:	469b      	mov	fp, r3
 8000c60:	0fca      	lsrs	r2, r1, #31
 8000c62:	004b      	lsls	r3, r1, #1
 8000c64:	0004      	movs	r4, r0
 8000c66:	4680      	mov	r8, r0
 8000c68:	0d5b      	lsrs	r3, r3, #21
 8000c6a:	9202      	str	r2, [sp, #8]
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_ddiv+0x28>
 8000c6e:	e16a      	b.n	8000f46 <__aeabi_ddiv+0x2fe>
 8000c70:	4ad4      	ldr	r2, [pc, #848]	@ (8000fc4 <__aeabi_ddiv+0x37c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d100      	bne.n	8000c78 <__aeabi_ddiv+0x30>
 8000c76:	e18c      	b.n	8000f92 <__aeabi_ddiv+0x34a>
 8000c78:	4659      	mov	r1, fp
 8000c7a:	0f42      	lsrs	r2, r0, #29
 8000c7c:	00c9      	lsls	r1, r1, #3
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	2180      	movs	r1, #128	@ 0x80
 8000c82:	0409      	lsls	r1, r1, #16
 8000c84:	4311      	orrs	r1, r2
 8000c86:	00c2      	lsls	r2, r0, #3
 8000c88:	4690      	mov	r8, r2
 8000c8a:	4acf      	ldr	r2, [pc, #828]	@ (8000fc8 <__aeabi_ddiv+0x380>)
 8000c8c:	4689      	mov	r9, r1
 8000c8e:	4692      	mov	sl, r2
 8000c90:	449a      	add	sl, r3
 8000c92:	2300      	movs	r3, #0
 8000c94:	2400      	movs	r4, #0
 8000c96:	9303      	str	r3, [sp, #12]
 8000c98:	9e00      	ldr	r6, [sp, #0]
 8000c9a:	9f01      	ldr	r7, [sp, #4]
 8000c9c:	033b      	lsls	r3, r7, #12
 8000c9e:	0b1b      	lsrs	r3, r3, #12
 8000ca0:	469b      	mov	fp, r3
 8000ca2:	007b      	lsls	r3, r7, #1
 8000ca4:	0030      	movs	r0, r6
 8000ca6:	0d5b      	lsrs	r3, r3, #21
 8000ca8:	0ffd      	lsrs	r5, r7, #31
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x68>
 8000cae:	e128      	b.n	8000f02 <__aeabi_ddiv+0x2ba>
 8000cb0:	4ac4      	ldr	r2, [pc, #784]	@ (8000fc4 <__aeabi_ddiv+0x37c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_ddiv+0x70>
 8000cb6:	e177      	b.n	8000fa8 <__aeabi_ddiv+0x360>
 8000cb8:	4659      	mov	r1, fp
 8000cba:	0f72      	lsrs	r2, r6, #29
 8000cbc:	00c9      	lsls	r1, r1, #3
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	2180      	movs	r1, #128	@ 0x80
 8000cc2:	0409      	lsls	r1, r1, #16
 8000cc4:	4311      	orrs	r1, r2
 8000cc6:	468b      	mov	fp, r1
 8000cc8:	49bf      	ldr	r1, [pc, #764]	@ (8000fc8 <__aeabi_ddiv+0x380>)
 8000cca:	00f2      	lsls	r2, r6, #3
 8000ccc:	468c      	mov	ip, r1
 8000cce:	4651      	mov	r1, sl
 8000cd0:	4463      	add	r3, ip
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	469a      	mov	sl, r3
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9e02      	ldr	r6, [sp, #8]
 8000cda:	406e      	eors	r6, r5
 8000cdc:	2c0f      	cmp	r4, #15
 8000cde:	d827      	bhi.n	8000d30 <__aeabi_ddiv+0xe8>
 8000ce0:	49ba      	ldr	r1, [pc, #744]	@ (8000fcc <__aeabi_ddiv+0x384>)
 8000ce2:	00a4      	lsls	r4, r4, #2
 8000ce4:	5909      	ldr	r1, [r1, r4]
 8000ce6:	468f      	mov	pc, r1
 8000ce8:	46cb      	mov	fp, r9
 8000cea:	4642      	mov	r2, r8
 8000cec:	9e02      	ldr	r6, [sp, #8]
 8000cee:	9b03      	ldr	r3, [sp, #12]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d016      	beq.n	8000d22 <__aeabi_ddiv+0xda>
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_ddiv+0xb2>
 8000cf8:	e2a6      	b.n	8001248 <__aeabi_ddiv+0x600>
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_ddiv+0xb8>
 8000cfe:	e0df      	b.n	8000ec0 <__aeabi_ddiv+0x278>
 8000d00:	2200      	movs	r2, #0
 8000d02:	2300      	movs	r3, #0
 8000d04:	2400      	movs	r4, #0
 8000d06:	4690      	mov	r8, r2
 8000d08:	051b      	lsls	r3, r3, #20
 8000d0a:	4323      	orrs	r3, r4
 8000d0c:	07f6      	lsls	r6, r6, #31
 8000d0e:	4333      	orrs	r3, r6
 8000d10:	4640      	mov	r0, r8
 8000d12:	0019      	movs	r1, r3
 8000d14:	b007      	add	sp, #28
 8000d16:	bcf0      	pop	{r4, r5, r6, r7}
 8000d18:	46bb      	mov	fp, r7
 8000d1a:	46b2      	mov	sl, r6
 8000d1c:	46a9      	mov	r9, r5
 8000d1e:	46a0      	mov	r8, r4
 8000d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d22:	2200      	movs	r2, #0
 8000d24:	2400      	movs	r4, #0
 8000d26:	4690      	mov	r8, r2
 8000d28:	4ba6      	ldr	r3, [pc, #664]	@ (8000fc4 <__aeabi_ddiv+0x37c>)
 8000d2a:	e7ed      	b.n	8000d08 <__aeabi_ddiv+0xc0>
 8000d2c:	002e      	movs	r6, r5
 8000d2e:	e7df      	b.n	8000cf0 <__aeabi_ddiv+0xa8>
 8000d30:	45cb      	cmp	fp, r9
 8000d32:	d200      	bcs.n	8000d36 <__aeabi_ddiv+0xee>
 8000d34:	e1d4      	b.n	80010e0 <__aeabi_ddiv+0x498>
 8000d36:	d100      	bne.n	8000d3a <__aeabi_ddiv+0xf2>
 8000d38:	e1cf      	b.n	80010da <__aeabi_ddiv+0x492>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	469c      	mov	ip, r3
 8000d40:	4644      	mov	r4, r8
 8000d42:	4648      	mov	r0, r9
 8000d44:	2700      	movs	r7, #0
 8000d46:	44e2      	add	sl, ip
 8000d48:	465b      	mov	r3, fp
 8000d4a:	0e15      	lsrs	r5, r2, #24
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	431d      	orrs	r5, r3
 8000d50:	0c19      	lsrs	r1, r3, #16
 8000d52:	042b      	lsls	r3, r5, #16
 8000d54:	0212      	lsls	r2, r2, #8
 8000d56:	9500      	str	r5, [sp, #0]
 8000d58:	0c1d      	lsrs	r5, r3, #16
 8000d5a:	4691      	mov	r9, r2
 8000d5c:	9102      	str	r1, [sp, #8]
 8000d5e:	9503      	str	r5, [sp, #12]
 8000d60:	f7ff fa72 	bl	8000248 <__aeabi_uidivmod>
 8000d64:	0002      	movs	r2, r0
 8000d66:	436a      	muls	r2, r5
 8000d68:	040b      	lsls	r3, r1, #16
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	4680      	mov	r8, r0
 8000d6e:	4319      	orrs	r1, r3
 8000d70:	428a      	cmp	r2, r1
 8000d72:	d909      	bls.n	8000d88 <__aeabi_ddiv+0x140>
 8000d74:	9d00      	ldr	r5, [sp, #0]
 8000d76:	2301      	movs	r3, #1
 8000d78:	46ac      	mov	ip, r5
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	4461      	add	r1, ip
 8000d7e:	469c      	mov	ip, r3
 8000d80:	44e0      	add	r8, ip
 8000d82:	428d      	cmp	r5, r1
 8000d84:	d800      	bhi.n	8000d88 <__aeabi_ddiv+0x140>
 8000d86:	e1fb      	b.n	8001180 <__aeabi_ddiv+0x538>
 8000d88:	1a88      	subs	r0, r1, r2
 8000d8a:	9902      	ldr	r1, [sp, #8]
 8000d8c:	f7ff fa5c 	bl	8000248 <__aeabi_uidivmod>
 8000d90:	9a03      	ldr	r2, [sp, #12]
 8000d92:	0424      	lsls	r4, r4, #16
 8000d94:	4342      	muls	r2, r0
 8000d96:	0409      	lsls	r1, r1, #16
 8000d98:	0c24      	lsrs	r4, r4, #16
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	430c      	orrs	r4, r1
 8000d9e:	42a2      	cmp	r2, r4
 8000da0:	d906      	bls.n	8000db0 <__aeabi_ddiv+0x168>
 8000da2:	9900      	ldr	r1, [sp, #0]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	468c      	mov	ip, r1
 8000da8:	4464      	add	r4, ip
 8000daa:	42a1      	cmp	r1, r4
 8000dac:	d800      	bhi.n	8000db0 <__aeabi_ddiv+0x168>
 8000dae:	e1e1      	b.n	8001174 <__aeabi_ddiv+0x52c>
 8000db0:	1aa0      	subs	r0, r4, r2
 8000db2:	4642      	mov	r2, r8
 8000db4:	0412      	lsls	r2, r2, #16
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4693      	mov	fp, r2
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4659      	mov	r1, fp
 8000dbe:	0c1b      	lsrs	r3, r3, #16
 8000dc0:	001d      	movs	r5, r3
 8000dc2:	9304      	str	r3, [sp, #16]
 8000dc4:	040b      	lsls	r3, r1, #16
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	0c09      	lsrs	r1, r1, #16
 8000dcc:	000c      	movs	r4, r1
 8000dce:	0c1b      	lsrs	r3, r3, #16
 8000dd0:	435c      	muls	r4, r3
 8000dd2:	0c12      	lsrs	r2, r2, #16
 8000dd4:	436b      	muls	r3, r5
 8000dd6:	4688      	mov	r8, r1
 8000dd8:	4351      	muls	r1, r2
 8000dda:	436a      	muls	r2, r5
 8000ddc:	0c25      	lsrs	r5, r4, #16
 8000dde:	46ac      	mov	ip, r5
 8000de0:	185b      	adds	r3, r3, r1
 8000de2:	4463      	add	r3, ip
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d903      	bls.n	8000df0 <__aeabi_ddiv+0x1a8>
 8000de8:	2180      	movs	r1, #128	@ 0x80
 8000dea:	0249      	lsls	r1, r1, #9
 8000dec:	468c      	mov	ip, r1
 8000dee:	4462      	add	r2, ip
 8000df0:	0c19      	lsrs	r1, r3, #16
 8000df2:	0424      	lsls	r4, r4, #16
 8000df4:	041b      	lsls	r3, r3, #16
 8000df6:	0c24      	lsrs	r4, r4, #16
 8000df8:	188a      	adds	r2, r1, r2
 8000dfa:	191c      	adds	r4, r3, r4
 8000dfc:	4290      	cmp	r0, r2
 8000dfe:	d302      	bcc.n	8000e06 <__aeabi_ddiv+0x1be>
 8000e00:	d116      	bne.n	8000e30 <__aeabi_ddiv+0x1e8>
 8000e02:	42a7      	cmp	r7, r4
 8000e04:	d214      	bcs.n	8000e30 <__aeabi_ddiv+0x1e8>
 8000e06:	465b      	mov	r3, fp
 8000e08:	9d00      	ldr	r5, [sp, #0]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	444f      	add	r7, r9
 8000e0e:	9305      	str	r3, [sp, #20]
 8000e10:	454f      	cmp	r7, r9
 8000e12:	419b      	sbcs	r3, r3
 8000e14:	46ac      	mov	ip, r5
 8000e16:	425b      	negs	r3, r3
 8000e18:	4463      	add	r3, ip
 8000e1a:	18c0      	adds	r0, r0, r3
 8000e1c:	4285      	cmp	r5, r0
 8000e1e:	d300      	bcc.n	8000e22 <__aeabi_ddiv+0x1da>
 8000e20:	e1a1      	b.n	8001166 <__aeabi_ddiv+0x51e>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	d900      	bls.n	8000e28 <__aeabi_ddiv+0x1e0>
 8000e26:	e1f6      	b.n	8001216 <__aeabi_ddiv+0x5ce>
 8000e28:	d100      	bne.n	8000e2c <__aeabi_ddiv+0x1e4>
 8000e2a:	e1f1      	b.n	8001210 <__aeabi_ddiv+0x5c8>
 8000e2c:	9b05      	ldr	r3, [sp, #20]
 8000e2e:	469b      	mov	fp, r3
 8000e30:	1b3c      	subs	r4, r7, r4
 8000e32:	42a7      	cmp	r7, r4
 8000e34:	41bf      	sbcs	r7, r7
 8000e36:	9d00      	ldr	r5, [sp, #0]
 8000e38:	1a80      	subs	r0, r0, r2
 8000e3a:	427f      	negs	r7, r7
 8000e3c:	1bc0      	subs	r0, r0, r7
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d100      	bne.n	8000e44 <__aeabi_ddiv+0x1fc>
 8000e42:	e1d0      	b.n	80011e6 <__aeabi_ddiv+0x59e>
 8000e44:	9902      	ldr	r1, [sp, #8]
 8000e46:	f7ff f9ff 	bl	8000248 <__aeabi_uidivmod>
 8000e4a:	9a03      	ldr	r2, [sp, #12]
 8000e4c:	040b      	lsls	r3, r1, #16
 8000e4e:	4342      	muls	r2, r0
 8000e50:	0c21      	lsrs	r1, r4, #16
 8000e52:	0007      	movs	r7, r0
 8000e54:	4319      	orrs	r1, r3
 8000e56:	428a      	cmp	r2, r1
 8000e58:	d900      	bls.n	8000e5c <__aeabi_ddiv+0x214>
 8000e5a:	e178      	b.n	800114e <__aeabi_ddiv+0x506>
 8000e5c:	1a88      	subs	r0, r1, r2
 8000e5e:	9902      	ldr	r1, [sp, #8]
 8000e60:	f7ff f9f2 	bl	8000248 <__aeabi_uidivmod>
 8000e64:	9a03      	ldr	r2, [sp, #12]
 8000e66:	0424      	lsls	r4, r4, #16
 8000e68:	4342      	muls	r2, r0
 8000e6a:	0409      	lsls	r1, r1, #16
 8000e6c:	0c24      	lsrs	r4, r4, #16
 8000e6e:	0003      	movs	r3, r0
 8000e70:	430c      	orrs	r4, r1
 8000e72:	42a2      	cmp	r2, r4
 8000e74:	d900      	bls.n	8000e78 <__aeabi_ddiv+0x230>
 8000e76:	e15d      	b.n	8001134 <__aeabi_ddiv+0x4ec>
 8000e78:	4641      	mov	r1, r8
 8000e7a:	1aa4      	subs	r4, r4, r2
 8000e7c:	043a      	lsls	r2, r7, #16
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	9d04      	ldr	r5, [sp, #16]
 8000e82:	0413      	lsls	r3, r2, #16
 8000e84:	0c1b      	lsrs	r3, r3, #16
 8000e86:	4359      	muls	r1, r3
 8000e88:	4647      	mov	r7, r8
 8000e8a:	436b      	muls	r3, r5
 8000e8c:	469c      	mov	ip, r3
 8000e8e:	0c10      	lsrs	r0, r2, #16
 8000e90:	4347      	muls	r7, r0
 8000e92:	0c0b      	lsrs	r3, r1, #16
 8000e94:	44bc      	add	ip, r7
 8000e96:	4463      	add	r3, ip
 8000e98:	4368      	muls	r0, r5
 8000e9a:	429f      	cmp	r7, r3
 8000e9c:	d903      	bls.n	8000ea6 <__aeabi_ddiv+0x25e>
 8000e9e:	2580      	movs	r5, #128	@ 0x80
 8000ea0:	026d      	lsls	r5, r5, #9
 8000ea2:	46ac      	mov	ip, r5
 8000ea4:	4460      	add	r0, ip
 8000ea6:	0c1f      	lsrs	r7, r3, #16
 8000ea8:	0409      	lsls	r1, r1, #16
 8000eaa:	041b      	lsls	r3, r3, #16
 8000eac:	0c09      	lsrs	r1, r1, #16
 8000eae:	183f      	adds	r7, r7, r0
 8000eb0:	185b      	adds	r3, r3, r1
 8000eb2:	42bc      	cmp	r4, r7
 8000eb4:	d200      	bcs.n	8000eb8 <__aeabi_ddiv+0x270>
 8000eb6:	e102      	b.n	80010be <__aeabi_ddiv+0x476>
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_ddiv+0x274>
 8000eba:	e0fd      	b.n	80010b8 <__aeabi_ddiv+0x470>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	4b43      	ldr	r3, [pc, #268]	@ (8000fd0 <__aeabi_ddiv+0x388>)
 8000ec2:	4453      	add	r3, sl
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dc00      	bgt.n	8000eca <__aeabi_ddiv+0x282>
 8000ec8:	e0ae      	b.n	8001028 <__aeabi_ddiv+0x3e0>
 8000eca:	0751      	lsls	r1, r2, #29
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_ddiv+0x288>
 8000ece:	e198      	b.n	8001202 <__aeabi_ddiv+0x5ba>
 8000ed0:	4659      	mov	r1, fp
 8000ed2:	01c9      	lsls	r1, r1, #7
 8000ed4:	d506      	bpl.n	8000ee4 <__aeabi_ddiv+0x29c>
 8000ed6:	4659      	mov	r1, fp
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <__aeabi_ddiv+0x38c>)
 8000eda:	4019      	ands	r1, r3
 8000edc:	2380      	movs	r3, #128	@ 0x80
 8000ede:	468b      	mov	fp, r1
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4453      	add	r3, sl
 8000ee4:	493c      	ldr	r1, [pc, #240]	@ (8000fd8 <__aeabi_ddiv+0x390>)
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	dd00      	ble.n	8000eec <__aeabi_ddiv+0x2a4>
 8000eea:	e71a      	b.n	8000d22 <__aeabi_ddiv+0xda>
 8000eec:	4659      	mov	r1, fp
 8000eee:	08d2      	lsrs	r2, r2, #3
 8000ef0:	0749      	lsls	r1, r1, #29
 8000ef2:	4311      	orrs	r1, r2
 8000ef4:	465a      	mov	r2, fp
 8000ef6:	055b      	lsls	r3, r3, #21
 8000ef8:	0254      	lsls	r4, r2, #9
 8000efa:	4688      	mov	r8, r1
 8000efc:	0b24      	lsrs	r4, r4, #12
 8000efe:	0d5b      	lsrs	r3, r3, #21
 8000f00:	e702      	b.n	8000d08 <__aeabi_ddiv+0xc0>
 8000f02:	465a      	mov	r2, fp
 8000f04:	9b00      	ldr	r3, [sp, #0]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	d100      	bne.n	8000f0c <__aeabi_ddiv+0x2c4>
 8000f0a:	e07e      	b.n	800100a <__aeabi_ddiv+0x3c2>
 8000f0c:	465b      	mov	r3, fp
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x2cc>
 8000f12:	e100      	b.n	8001116 <__aeabi_ddiv+0x4ce>
 8000f14:	4658      	mov	r0, fp
 8000f16:	f001 fabb 	bl	8002490 <__clzsi2>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	3a0b      	subs	r2, #11
 8000f20:	271d      	movs	r7, #29
 8000f22:	9e00      	ldr	r6, [sp, #0]
 8000f24:	1aba      	subs	r2, r7, r2
 8000f26:	0019      	movs	r1, r3
 8000f28:	4658      	mov	r0, fp
 8000f2a:	40d6      	lsrs	r6, r2
 8000f2c:	3908      	subs	r1, #8
 8000f2e:	4088      	lsls	r0, r1
 8000f30:	0032      	movs	r2, r6
 8000f32:	4302      	orrs	r2, r0
 8000f34:	4693      	mov	fp, r2
 8000f36:	9a00      	ldr	r2, [sp, #0]
 8000f38:	408a      	lsls	r2, r1
 8000f3a:	4928      	ldr	r1, [pc, #160]	@ (8000fdc <__aeabi_ddiv+0x394>)
 8000f3c:	4453      	add	r3, sl
 8000f3e:	468a      	mov	sl, r1
 8000f40:	449a      	add	sl, r3
 8000f42:	2300      	movs	r3, #0
 8000f44:	e6c8      	b.n	8000cd8 <__aeabi_ddiv+0x90>
 8000f46:	465b      	mov	r3, fp
 8000f48:	4303      	orrs	r3, r0
 8000f4a:	4699      	mov	r9, r3
 8000f4c:	d056      	beq.n	8000ffc <__aeabi_ddiv+0x3b4>
 8000f4e:	465b      	mov	r3, fp
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_ddiv+0x30e>
 8000f54:	e0cd      	b.n	80010f2 <__aeabi_ddiv+0x4aa>
 8000f56:	4658      	mov	r0, fp
 8000f58:	f001 fa9a 	bl	8002490 <__clzsi2>
 8000f5c:	230b      	movs	r3, #11
 8000f5e:	425b      	negs	r3, r3
 8000f60:	469c      	mov	ip, r3
 8000f62:	0002      	movs	r2, r0
 8000f64:	4484      	add	ip, r0
 8000f66:	4666      	mov	r6, ip
 8000f68:	231d      	movs	r3, #29
 8000f6a:	1b9b      	subs	r3, r3, r6
 8000f6c:	0026      	movs	r6, r4
 8000f6e:	0011      	movs	r1, r2
 8000f70:	4658      	mov	r0, fp
 8000f72:	40de      	lsrs	r6, r3
 8000f74:	3908      	subs	r1, #8
 8000f76:	4088      	lsls	r0, r1
 8000f78:	0033      	movs	r3, r6
 8000f7a:	4303      	orrs	r3, r0
 8000f7c:	4699      	mov	r9, r3
 8000f7e:	0023      	movs	r3, r4
 8000f80:	408b      	lsls	r3, r1
 8000f82:	4698      	mov	r8, r3
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <__aeabi_ddiv+0x398>)
 8000f86:	2400      	movs	r4, #0
 8000f88:	1a9b      	subs	r3, r3, r2
 8000f8a:	469a      	mov	sl, r3
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9303      	str	r3, [sp, #12]
 8000f90:	e682      	b.n	8000c98 <__aeabi_ddiv+0x50>
 8000f92:	465a      	mov	r2, fp
 8000f94:	4302      	orrs	r2, r0
 8000f96:	4691      	mov	r9, r2
 8000f98:	d12a      	bne.n	8000ff0 <__aeabi_ddiv+0x3a8>
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	469a      	mov	sl, r3
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	4690      	mov	r8, r2
 8000fa2:	2408      	movs	r4, #8
 8000fa4:	9303      	str	r3, [sp, #12]
 8000fa6:	e677      	b.n	8000c98 <__aeabi_ddiv+0x50>
 8000fa8:	465a      	mov	r2, fp
 8000faa:	9b00      	ldr	r3, [sp, #0]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <__aeabi_ddiv+0x39c>)
 8000fb0:	469c      	mov	ip, r3
 8000fb2:	44e2      	add	sl, ip
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	d117      	bne.n	8000fe8 <__aeabi_ddiv+0x3a0>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	431c      	orrs	r4, r3
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	469b      	mov	fp, r3
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	e689      	b.n	8000cd8 <__aeabi_ddiv+0x90>
 8000fc4:	000007ff 	.word	0x000007ff
 8000fc8:	fffffc01 	.word	0xfffffc01
 8000fcc:	0800ece0 	.word	0x0800ece0
 8000fd0:	000003ff 	.word	0x000003ff
 8000fd4:	feffffff 	.word	0xfeffffff
 8000fd8:	000007fe 	.word	0x000007fe
 8000fdc:	000003f3 	.word	0x000003f3
 8000fe0:	fffffc0d 	.word	0xfffffc0d
 8000fe4:	fffff801 	.word	0xfffff801
 8000fe8:	2303      	movs	r3, #3
 8000fea:	0032      	movs	r2, r6
 8000fec:	431c      	orrs	r4, r3
 8000fee:	e673      	b.n	8000cd8 <__aeabi_ddiv+0x90>
 8000ff0:	469a      	mov	sl, r3
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	46d9      	mov	r9, fp
 8000ff6:	240c      	movs	r4, #12
 8000ff8:	9303      	str	r3, [sp, #12]
 8000ffa:	e64d      	b.n	8000c98 <__aeabi_ddiv+0x50>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4698      	mov	r8, r3
 8001000:	469a      	mov	sl, r3
 8001002:	3301      	adds	r3, #1
 8001004:	2404      	movs	r4, #4
 8001006:	9303      	str	r3, [sp, #12]
 8001008:	e646      	b.n	8000c98 <__aeabi_ddiv+0x50>
 800100a:	2301      	movs	r3, #1
 800100c:	431c      	orrs	r4, r3
 800100e:	2300      	movs	r3, #0
 8001010:	469b      	mov	fp, r3
 8001012:	3301      	adds	r3, #1
 8001014:	e660      	b.n	8000cd8 <__aeabi_ddiv+0x90>
 8001016:	2300      	movs	r3, #0
 8001018:	2480      	movs	r4, #128	@ 0x80
 800101a:	4698      	mov	r8, r3
 800101c:	2600      	movs	r6, #0
 800101e:	4b92      	ldr	r3, [pc, #584]	@ (8001268 <__aeabi_ddiv+0x620>)
 8001020:	0324      	lsls	r4, r4, #12
 8001022:	e671      	b.n	8000d08 <__aeabi_ddiv+0xc0>
 8001024:	2201      	movs	r2, #1
 8001026:	4252      	negs	r2, r2
 8001028:	2101      	movs	r1, #1
 800102a:	1ac9      	subs	r1, r1, r3
 800102c:	2938      	cmp	r1, #56	@ 0x38
 800102e:	dd00      	ble.n	8001032 <__aeabi_ddiv+0x3ea>
 8001030:	e666      	b.n	8000d00 <__aeabi_ddiv+0xb8>
 8001032:	291f      	cmp	r1, #31
 8001034:	dc00      	bgt.n	8001038 <__aeabi_ddiv+0x3f0>
 8001036:	e0ab      	b.n	8001190 <__aeabi_ddiv+0x548>
 8001038:	201f      	movs	r0, #31
 800103a:	4240      	negs	r0, r0
 800103c:	1ac3      	subs	r3, r0, r3
 800103e:	4658      	mov	r0, fp
 8001040:	40d8      	lsrs	r0, r3
 8001042:	0003      	movs	r3, r0
 8001044:	2920      	cmp	r1, #32
 8001046:	d004      	beq.n	8001052 <__aeabi_ddiv+0x40a>
 8001048:	4658      	mov	r0, fp
 800104a:	4988      	ldr	r1, [pc, #544]	@ (800126c <__aeabi_ddiv+0x624>)
 800104c:	4451      	add	r1, sl
 800104e:	4088      	lsls	r0, r1
 8001050:	4302      	orrs	r2, r0
 8001052:	1e51      	subs	r1, r2, #1
 8001054:	418a      	sbcs	r2, r1
 8001056:	431a      	orrs	r2, r3
 8001058:	2307      	movs	r3, #7
 800105a:	0019      	movs	r1, r3
 800105c:	2400      	movs	r4, #0
 800105e:	4011      	ands	r1, r2
 8001060:	4213      	tst	r3, r2
 8001062:	d00c      	beq.n	800107e <__aeabi_ddiv+0x436>
 8001064:	230f      	movs	r3, #15
 8001066:	4013      	ands	r3, r2
 8001068:	2b04      	cmp	r3, #4
 800106a:	d100      	bne.n	800106e <__aeabi_ddiv+0x426>
 800106c:	e0f9      	b.n	8001262 <__aeabi_ddiv+0x61a>
 800106e:	1d11      	adds	r1, r2, #4
 8001070:	4291      	cmp	r1, r2
 8001072:	419b      	sbcs	r3, r3
 8001074:	000a      	movs	r2, r1
 8001076:	425b      	negs	r3, r3
 8001078:	0759      	lsls	r1, r3, #29
 800107a:	025b      	lsls	r3, r3, #9
 800107c:	0b1c      	lsrs	r4, r3, #12
 800107e:	08d2      	lsrs	r2, r2, #3
 8001080:	430a      	orrs	r2, r1
 8001082:	4690      	mov	r8, r2
 8001084:	2300      	movs	r3, #0
 8001086:	e63f      	b.n	8000d08 <__aeabi_ddiv+0xc0>
 8001088:	2480      	movs	r4, #128	@ 0x80
 800108a:	464b      	mov	r3, r9
 800108c:	0324      	lsls	r4, r4, #12
 800108e:	4223      	tst	r3, r4
 8001090:	d009      	beq.n	80010a6 <__aeabi_ddiv+0x45e>
 8001092:	465b      	mov	r3, fp
 8001094:	4223      	tst	r3, r4
 8001096:	d106      	bne.n	80010a6 <__aeabi_ddiv+0x45e>
 8001098:	431c      	orrs	r4, r3
 800109a:	0324      	lsls	r4, r4, #12
 800109c:	002e      	movs	r6, r5
 800109e:	4690      	mov	r8, r2
 80010a0:	4b71      	ldr	r3, [pc, #452]	@ (8001268 <__aeabi_ddiv+0x620>)
 80010a2:	0b24      	lsrs	r4, r4, #12
 80010a4:	e630      	b.n	8000d08 <__aeabi_ddiv+0xc0>
 80010a6:	2480      	movs	r4, #128	@ 0x80
 80010a8:	464b      	mov	r3, r9
 80010aa:	0324      	lsls	r4, r4, #12
 80010ac:	431c      	orrs	r4, r3
 80010ae:	0324      	lsls	r4, r4, #12
 80010b0:	9e02      	ldr	r6, [sp, #8]
 80010b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001268 <__aeabi_ddiv+0x620>)
 80010b4:	0b24      	lsrs	r4, r4, #12
 80010b6:	e627      	b.n	8000d08 <__aeabi_ddiv+0xc0>
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d100      	bne.n	80010be <__aeabi_ddiv+0x476>
 80010bc:	e700      	b.n	8000ec0 <__aeabi_ddiv+0x278>
 80010be:	9800      	ldr	r0, [sp, #0]
 80010c0:	1e51      	subs	r1, r2, #1
 80010c2:	4684      	mov	ip, r0
 80010c4:	4464      	add	r4, ip
 80010c6:	4284      	cmp	r4, r0
 80010c8:	d200      	bcs.n	80010cc <__aeabi_ddiv+0x484>
 80010ca:	e084      	b.n	80011d6 <__aeabi_ddiv+0x58e>
 80010cc:	42bc      	cmp	r4, r7
 80010ce:	d200      	bcs.n	80010d2 <__aeabi_ddiv+0x48a>
 80010d0:	e0ae      	b.n	8001230 <__aeabi_ddiv+0x5e8>
 80010d2:	d100      	bne.n	80010d6 <__aeabi_ddiv+0x48e>
 80010d4:	e0c1      	b.n	800125a <__aeabi_ddiv+0x612>
 80010d6:	000a      	movs	r2, r1
 80010d8:	e6f0      	b.n	8000ebc <__aeabi_ddiv+0x274>
 80010da:	4542      	cmp	r2, r8
 80010dc:	d900      	bls.n	80010e0 <__aeabi_ddiv+0x498>
 80010de:	e62c      	b.n	8000d3a <__aeabi_ddiv+0xf2>
 80010e0:	464b      	mov	r3, r9
 80010e2:	07dc      	lsls	r4, r3, #31
 80010e4:	0858      	lsrs	r0, r3, #1
 80010e6:	4643      	mov	r3, r8
 80010e8:	085b      	lsrs	r3, r3, #1
 80010ea:	431c      	orrs	r4, r3
 80010ec:	4643      	mov	r3, r8
 80010ee:	07df      	lsls	r7, r3, #31
 80010f0:	e62a      	b.n	8000d48 <__aeabi_ddiv+0x100>
 80010f2:	f001 f9cd 	bl	8002490 <__clzsi2>
 80010f6:	2315      	movs	r3, #21
 80010f8:	469c      	mov	ip, r3
 80010fa:	4484      	add	ip, r0
 80010fc:	0002      	movs	r2, r0
 80010fe:	4663      	mov	r3, ip
 8001100:	3220      	adds	r2, #32
 8001102:	2b1c      	cmp	r3, #28
 8001104:	dc00      	bgt.n	8001108 <__aeabi_ddiv+0x4c0>
 8001106:	e72e      	b.n	8000f66 <__aeabi_ddiv+0x31e>
 8001108:	0023      	movs	r3, r4
 800110a:	3808      	subs	r0, #8
 800110c:	4083      	lsls	r3, r0
 800110e:	4699      	mov	r9, r3
 8001110:	2300      	movs	r3, #0
 8001112:	4698      	mov	r8, r3
 8001114:	e736      	b.n	8000f84 <__aeabi_ddiv+0x33c>
 8001116:	f001 f9bb 	bl	8002490 <__clzsi2>
 800111a:	0002      	movs	r2, r0
 800111c:	0003      	movs	r3, r0
 800111e:	3215      	adds	r2, #21
 8001120:	3320      	adds	r3, #32
 8001122:	2a1c      	cmp	r2, #28
 8001124:	dc00      	bgt.n	8001128 <__aeabi_ddiv+0x4e0>
 8001126:	e6fb      	b.n	8000f20 <__aeabi_ddiv+0x2d8>
 8001128:	9900      	ldr	r1, [sp, #0]
 800112a:	3808      	subs	r0, #8
 800112c:	4081      	lsls	r1, r0
 800112e:	2200      	movs	r2, #0
 8001130:	468b      	mov	fp, r1
 8001132:	e702      	b.n	8000f3a <__aeabi_ddiv+0x2f2>
 8001134:	9900      	ldr	r1, [sp, #0]
 8001136:	3b01      	subs	r3, #1
 8001138:	468c      	mov	ip, r1
 800113a:	4464      	add	r4, ip
 800113c:	42a1      	cmp	r1, r4
 800113e:	d900      	bls.n	8001142 <__aeabi_ddiv+0x4fa>
 8001140:	e69a      	b.n	8000e78 <__aeabi_ddiv+0x230>
 8001142:	42a2      	cmp	r2, r4
 8001144:	d800      	bhi.n	8001148 <__aeabi_ddiv+0x500>
 8001146:	e697      	b.n	8000e78 <__aeabi_ddiv+0x230>
 8001148:	1e83      	subs	r3, r0, #2
 800114a:	4464      	add	r4, ip
 800114c:	e694      	b.n	8000e78 <__aeabi_ddiv+0x230>
 800114e:	46ac      	mov	ip, r5
 8001150:	4461      	add	r1, ip
 8001152:	3f01      	subs	r7, #1
 8001154:	428d      	cmp	r5, r1
 8001156:	d900      	bls.n	800115a <__aeabi_ddiv+0x512>
 8001158:	e680      	b.n	8000e5c <__aeabi_ddiv+0x214>
 800115a:	428a      	cmp	r2, r1
 800115c:	d800      	bhi.n	8001160 <__aeabi_ddiv+0x518>
 800115e:	e67d      	b.n	8000e5c <__aeabi_ddiv+0x214>
 8001160:	1e87      	subs	r7, r0, #2
 8001162:	4461      	add	r1, ip
 8001164:	e67a      	b.n	8000e5c <__aeabi_ddiv+0x214>
 8001166:	4285      	cmp	r5, r0
 8001168:	d000      	beq.n	800116c <__aeabi_ddiv+0x524>
 800116a:	e65f      	b.n	8000e2c <__aeabi_ddiv+0x1e4>
 800116c:	45b9      	cmp	r9, r7
 800116e:	d900      	bls.n	8001172 <__aeabi_ddiv+0x52a>
 8001170:	e65c      	b.n	8000e2c <__aeabi_ddiv+0x1e4>
 8001172:	e656      	b.n	8000e22 <__aeabi_ddiv+0x1da>
 8001174:	42a2      	cmp	r2, r4
 8001176:	d800      	bhi.n	800117a <__aeabi_ddiv+0x532>
 8001178:	e61a      	b.n	8000db0 <__aeabi_ddiv+0x168>
 800117a:	1e83      	subs	r3, r0, #2
 800117c:	4464      	add	r4, ip
 800117e:	e617      	b.n	8000db0 <__aeabi_ddiv+0x168>
 8001180:	428a      	cmp	r2, r1
 8001182:	d800      	bhi.n	8001186 <__aeabi_ddiv+0x53e>
 8001184:	e600      	b.n	8000d88 <__aeabi_ddiv+0x140>
 8001186:	46ac      	mov	ip, r5
 8001188:	1e83      	subs	r3, r0, #2
 800118a:	4698      	mov	r8, r3
 800118c:	4461      	add	r1, ip
 800118e:	e5fb      	b.n	8000d88 <__aeabi_ddiv+0x140>
 8001190:	4837      	ldr	r0, [pc, #220]	@ (8001270 <__aeabi_ddiv+0x628>)
 8001192:	0014      	movs	r4, r2
 8001194:	4450      	add	r0, sl
 8001196:	4082      	lsls	r2, r0
 8001198:	465b      	mov	r3, fp
 800119a:	0017      	movs	r7, r2
 800119c:	4083      	lsls	r3, r0
 800119e:	40cc      	lsrs	r4, r1
 80011a0:	1e7a      	subs	r2, r7, #1
 80011a2:	4197      	sbcs	r7, r2
 80011a4:	4323      	orrs	r3, r4
 80011a6:	433b      	orrs	r3, r7
 80011a8:	001a      	movs	r2, r3
 80011aa:	465b      	mov	r3, fp
 80011ac:	40cb      	lsrs	r3, r1
 80011ae:	0751      	lsls	r1, r2, #29
 80011b0:	d009      	beq.n	80011c6 <__aeabi_ddiv+0x57e>
 80011b2:	210f      	movs	r1, #15
 80011b4:	4011      	ands	r1, r2
 80011b6:	2904      	cmp	r1, #4
 80011b8:	d005      	beq.n	80011c6 <__aeabi_ddiv+0x57e>
 80011ba:	1d11      	adds	r1, r2, #4
 80011bc:	4291      	cmp	r1, r2
 80011be:	4192      	sbcs	r2, r2
 80011c0:	4252      	negs	r2, r2
 80011c2:	189b      	adds	r3, r3, r2
 80011c4:	000a      	movs	r2, r1
 80011c6:	0219      	lsls	r1, r3, #8
 80011c8:	d400      	bmi.n	80011cc <__aeabi_ddiv+0x584>
 80011ca:	e755      	b.n	8001078 <__aeabi_ddiv+0x430>
 80011cc:	2200      	movs	r2, #0
 80011ce:	2301      	movs	r3, #1
 80011d0:	2400      	movs	r4, #0
 80011d2:	4690      	mov	r8, r2
 80011d4:	e598      	b.n	8000d08 <__aeabi_ddiv+0xc0>
 80011d6:	000a      	movs	r2, r1
 80011d8:	42bc      	cmp	r4, r7
 80011da:	d000      	beq.n	80011de <__aeabi_ddiv+0x596>
 80011dc:	e66e      	b.n	8000ebc <__aeabi_ddiv+0x274>
 80011de:	454b      	cmp	r3, r9
 80011e0:	d000      	beq.n	80011e4 <__aeabi_ddiv+0x59c>
 80011e2:	e66b      	b.n	8000ebc <__aeabi_ddiv+0x274>
 80011e4:	e66c      	b.n	8000ec0 <__aeabi_ddiv+0x278>
 80011e6:	4b23      	ldr	r3, [pc, #140]	@ (8001274 <__aeabi_ddiv+0x62c>)
 80011e8:	4a23      	ldr	r2, [pc, #140]	@ (8001278 <__aeabi_ddiv+0x630>)
 80011ea:	4453      	add	r3, sl
 80011ec:	4592      	cmp	sl, r2
 80011ee:	da00      	bge.n	80011f2 <__aeabi_ddiv+0x5aa>
 80011f0:	e718      	b.n	8001024 <__aeabi_ddiv+0x3dc>
 80011f2:	2101      	movs	r1, #1
 80011f4:	4249      	negs	r1, r1
 80011f6:	1d0a      	adds	r2, r1, #4
 80011f8:	428a      	cmp	r2, r1
 80011fa:	4189      	sbcs	r1, r1
 80011fc:	4249      	negs	r1, r1
 80011fe:	448b      	add	fp, r1
 8001200:	e666      	b.n	8000ed0 <__aeabi_ddiv+0x288>
 8001202:	210f      	movs	r1, #15
 8001204:	4011      	ands	r1, r2
 8001206:	2904      	cmp	r1, #4
 8001208:	d100      	bne.n	800120c <__aeabi_ddiv+0x5c4>
 800120a:	e661      	b.n	8000ed0 <__aeabi_ddiv+0x288>
 800120c:	0011      	movs	r1, r2
 800120e:	e7f2      	b.n	80011f6 <__aeabi_ddiv+0x5ae>
 8001210:	42bc      	cmp	r4, r7
 8001212:	d800      	bhi.n	8001216 <__aeabi_ddiv+0x5ce>
 8001214:	e60a      	b.n	8000e2c <__aeabi_ddiv+0x1e4>
 8001216:	2302      	movs	r3, #2
 8001218:	425b      	negs	r3, r3
 800121a:	469c      	mov	ip, r3
 800121c:	9900      	ldr	r1, [sp, #0]
 800121e:	444f      	add	r7, r9
 8001220:	454f      	cmp	r7, r9
 8001222:	419b      	sbcs	r3, r3
 8001224:	44e3      	add	fp, ip
 8001226:	468c      	mov	ip, r1
 8001228:	425b      	negs	r3, r3
 800122a:	4463      	add	r3, ip
 800122c:	18c0      	adds	r0, r0, r3
 800122e:	e5ff      	b.n	8000e30 <__aeabi_ddiv+0x1e8>
 8001230:	4649      	mov	r1, r9
 8001232:	9d00      	ldr	r5, [sp, #0]
 8001234:	0048      	lsls	r0, r1, #1
 8001236:	4548      	cmp	r0, r9
 8001238:	4189      	sbcs	r1, r1
 800123a:	46ac      	mov	ip, r5
 800123c:	4249      	negs	r1, r1
 800123e:	4461      	add	r1, ip
 8001240:	4681      	mov	r9, r0
 8001242:	3a02      	subs	r2, #2
 8001244:	1864      	adds	r4, r4, r1
 8001246:	e7c7      	b.n	80011d8 <__aeabi_ddiv+0x590>
 8001248:	2480      	movs	r4, #128	@ 0x80
 800124a:	465b      	mov	r3, fp
 800124c:	0324      	lsls	r4, r4, #12
 800124e:	431c      	orrs	r4, r3
 8001250:	0324      	lsls	r4, r4, #12
 8001252:	4690      	mov	r8, r2
 8001254:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <__aeabi_ddiv+0x620>)
 8001256:	0b24      	lsrs	r4, r4, #12
 8001258:	e556      	b.n	8000d08 <__aeabi_ddiv+0xc0>
 800125a:	4599      	cmp	r9, r3
 800125c:	d3e8      	bcc.n	8001230 <__aeabi_ddiv+0x5e8>
 800125e:	000a      	movs	r2, r1
 8001260:	e7bd      	b.n	80011de <__aeabi_ddiv+0x596>
 8001262:	2300      	movs	r3, #0
 8001264:	e708      	b.n	8001078 <__aeabi_ddiv+0x430>
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	000007ff 	.word	0x000007ff
 800126c:	0000043e 	.word	0x0000043e
 8001270:	0000041e 	.word	0x0000041e
 8001274:	000003ff 	.word	0x000003ff
 8001278:	fffffc02 	.word	0xfffffc02

0800127c <__eqdf2>:
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	4657      	mov	r7, sl
 8001280:	46de      	mov	lr, fp
 8001282:	464e      	mov	r6, r9
 8001284:	4645      	mov	r5, r8
 8001286:	b5e0      	push	{r5, r6, r7, lr}
 8001288:	000d      	movs	r5, r1
 800128a:	0004      	movs	r4, r0
 800128c:	0fe8      	lsrs	r0, r5, #31
 800128e:	4683      	mov	fp, r0
 8001290:	0309      	lsls	r1, r1, #12
 8001292:	0fd8      	lsrs	r0, r3, #31
 8001294:	0b09      	lsrs	r1, r1, #12
 8001296:	4682      	mov	sl, r0
 8001298:	4819      	ldr	r0, [pc, #100]	@ (8001300 <__eqdf2+0x84>)
 800129a:	468c      	mov	ip, r1
 800129c:	031f      	lsls	r7, r3, #12
 800129e:	0069      	lsls	r1, r5, #1
 80012a0:	005e      	lsls	r6, r3, #1
 80012a2:	0d49      	lsrs	r1, r1, #21
 80012a4:	0b3f      	lsrs	r7, r7, #12
 80012a6:	0d76      	lsrs	r6, r6, #21
 80012a8:	4281      	cmp	r1, r0
 80012aa:	d018      	beq.n	80012de <__eqdf2+0x62>
 80012ac:	4286      	cmp	r6, r0
 80012ae:	d00f      	beq.n	80012d0 <__eqdf2+0x54>
 80012b0:	2001      	movs	r0, #1
 80012b2:	42b1      	cmp	r1, r6
 80012b4:	d10d      	bne.n	80012d2 <__eqdf2+0x56>
 80012b6:	45bc      	cmp	ip, r7
 80012b8:	d10b      	bne.n	80012d2 <__eqdf2+0x56>
 80012ba:	4294      	cmp	r4, r2
 80012bc:	d109      	bne.n	80012d2 <__eqdf2+0x56>
 80012be:	45d3      	cmp	fp, sl
 80012c0:	d01c      	beq.n	80012fc <__eqdf2+0x80>
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d105      	bne.n	80012d2 <__eqdf2+0x56>
 80012c6:	4660      	mov	r0, ip
 80012c8:	4320      	orrs	r0, r4
 80012ca:	1e43      	subs	r3, r0, #1
 80012cc:	4198      	sbcs	r0, r3
 80012ce:	e000      	b.n	80012d2 <__eqdf2+0x56>
 80012d0:	2001      	movs	r0, #1
 80012d2:	bcf0      	pop	{r4, r5, r6, r7}
 80012d4:	46bb      	mov	fp, r7
 80012d6:	46b2      	mov	sl, r6
 80012d8:	46a9      	mov	r9, r5
 80012da:	46a0      	mov	r8, r4
 80012dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012de:	2001      	movs	r0, #1
 80012e0:	428e      	cmp	r6, r1
 80012e2:	d1f6      	bne.n	80012d2 <__eqdf2+0x56>
 80012e4:	4661      	mov	r1, ip
 80012e6:	4339      	orrs	r1, r7
 80012e8:	000f      	movs	r7, r1
 80012ea:	4317      	orrs	r7, r2
 80012ec:	4327      	orrs	r7, r4
 80012ee:	d1f0      	bne.n	80012d2 <__eqdf2+0x56>
 80012f0:	465b      	mov	r3, fp
 80012f2:	4652      	mov	r2, sl
 80012f4:	1a98      	subs	r0, r3, r2
 80012f6:	1e43      	subs	r3, r0, #1
 80012f8:	4198      	sbcs	r0, r3
 80012fa:	e7ea      	b.n	80012d2 <__eqdf2+0x56>
 80012fc:	2000      	movs	r0, #0
 80012fe:	e7e8      	b.n	80012d2 <__eqdf2+0x56>
 8001300:	000007ff 	.word	0x000007ff

08001304 <__gedf2>:
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	4657      	mov	r7, sl
 8001308:	464e      	mov	r6, r9
 800130a:	4645      	mov	r5, r8
 800130c:	46de      	mov	lr, fp
 800130e:	b5e0      	push	{r5, r6, r7, lr}
 8001310:	000d      	movs	r5, r1
 8001312:	030f      	lsls	r7, r1, #12
 8001314:	0b39      	lsrs	r1, r7, #12
 8001316:	b083      	sub	sp, #12
 8001318:	0004      	movs	r4, r0
 800131a:	4680      	mov	r8, r0
 800131c:	9101      	str	r1, [sp, #4]
 800131e:	0058      	lsls	r0, r3, #1
 8001320:	0fe9      	lsrs	r1, r5, #31
 8001322:	4f31      	ldr	r7, [pc, #196]	@ (80013e8 <__gedf2+0xe4>)
 8001324:	0d40      	lsrs	r0, r0, #21
 8001326:	468c      	mov	ip, r1
 8001328:	006e      	lsls	r6, r5, #1
 800132a:	0319      	lsls	r1, r3, #12
 800132c:	4682      	mov	sl, r0
 800132e:	4691      	mov	r9, r2
 8001330:	0d76      	lsrs	r6, r6, #21
 8001332:	0b09      	lsrs	r1, r1, #12
 8001334:	0fd8      	lsrs	r0, r3, #31
 8001336:	42be      	cmp	r6, r7
 8001338:	d01f      	beq.n	800137a <__gedf2+0x76>
 800133a:	45ba      	cmp	sl, r7
 800133c:	d00f      	beq.n	800135e <__gedf2+0x5a>
 800133e:	2e00      	cmp	r6, #0
 8001340:	d12f      	bne.n	80013a2 <__gedf2+0x9e>
 8001342:	4655      	mov	r5, sl
 8001344:	9e01      	ldr	r6, [sp, #4]
 8001346:	4334      	orrs	r4, r6
 8001348:	2d00      	cmp	r5, #0
 800134a:	d127      	bne.n	800139c <__gedf2+0x98>
 800134c:	430a      	orrs	r2, r1
 800134e:	d03a      	beq.n	80013c6 <__gedf2+0xc2>
 8001350:	2c00      	cmp	r4, #0
 8001352:	d145      	bne.n	80013e0 <__gedf2+0xdc>
 8001354:	2800      	cmp	r0, #0
 8001356:	d11a      	bne.n	800138e <__gedf2+0x8a>
 8001358:	2001      	movs	r0, #1
 800135a:	4240      	negs	r0, r0
 800135c:	e017      	b.n	800138e <__gedf2+0x8a>
 800135e:	4311      	orrs	r1, r2
 8001360:	d13b      	bne.n	80013da <__gedf2+0xd6>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d102      	bne.n	800136c <__gedf2+0x68>
 8001366:	9f01      	ldr	r7, [sp, #4]
 8001368:	4327      	orrs	r7, r4
 800136a:	d0f3      	beq.n	8001354 <__gedf2+0x50>
 800136c:	4584      	cmp	ip, r0
 800136e:	d109      	bne.n	8001384 <__gedf2+0x80>
 8001370:	4663      	mov	r3, ip
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <__gedf2+0x54>
 8001376:	4660      	mov	r0, ip
 8001378:	e009      	b.n	800138e <__gedf2+0x8a>
 800137a:	9f01      	ldr	r7, [sp, #4]
 800137c:	4327      	orrs	r7, r4
 800137e:	d12c      	bne.n	80013da <__gedf2+0xd6>
 8001380:	45b2      	cmp	sl, r6
 8001382:	d024      	beq.n	80013ce <__gedf2+0xca>
 8001384:	4663      	mov	r3, ip
 8001386:	2002      	movs	r0, #2
 8001388:	3b01      	subs	r3, #1
 800138a:	4018      	ands	r0, r3
 800138c:	3801      	subs	r0, #1
 800138e:	b003      	add	sp, #12
 8001390:	bcf0      	pop	{r4, r5, r6, r7}
 8001392:	46bb      	mov	fp, r7
 8001394:	46b2      	mov	sl, r6
 8001396:	46a9      	mov	r9, r5
 8001398:	46a0      	mov	r8, r4
 800139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139c:	2c00      	cmp	r4, #0
 800139e:	d0d9      	beq.n	8001354 <__gedf2+0x50>
 80013a0:	e7e4      	b.n	800136c <__gedf2+0x68>
 80013a2:	4654      	mov	r4, sl
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	d0ed      	beq.n	8001384 <__gedf2+0x80>
 80013a8:	4584      	cmp	ip, r0
 80013aa:	d1eb      	bne.n	8001384 <__gedf2+0x80>
 80013ac:	4556      	cmp	r6, sl
 80013ae:	dce9      	bgt.n	8001384 <__gedf2+0x80>
 80013b0:	dbde      	blt.n	8001370 <__gedf2+0x6c>
 80013b2:	9b01      	ldr	r3, [sp, #4]
 80013b4:	428b      	cmp	r3, r1
 80013b6:	d8e5      	bhi.n	8001384 <__gedf2+0x80>
 80013b8:	d1da      	bne.n	8001370 <__gedf2+0x6c>
 80013ba:	45c8      	cmp	r8, r9
 80013bc:	d8e2      	bhi.n	8001384 <__gedf2+0x80>
 80013be:	2000      	movs	r0, #0
 80013c0:	45c8      	cmp	r8, r9
 80013c2:	d2e4      	bcs.n	800138e <__gedf2+0x8a>
 80013c4:	e7d4      	b.n	8001370 <__gedf2+0x6c>
 80013c6:	2000      	movs	r0, #0
 80013c8:	2c00      	cmp	r4, #0
 80013ca:	d0e0      	beq.n	800138e <__gedf2+0x8a>
 80013cc:	e7da      	b.n	8001384 <__gedf2+0x80>
 80013ce:	4311      	orrs	r1, r2
 80013d0:	d103      	bne.n	80013da <__gedf2+0xd6>
 80013d2:	4584      	cmp	ip, r0
 80013d4:	d1d6      	bne.n	8001384 <__gedf2+0x80>
 80013d6:	2000      	movs	r0, #0
 80013d8:	e7d9      	b.n	800138e <__gedf2+0x8a>
 80013da:	2002      	movs	r0, #2
 80013dc:	4240      	negs	r0, r0
 80013de:	e7d6      	b.n	800138e <__gedf2+0x8a>
 80013e0:	4584      	cmp	ip, r0
 80013e2:	d0e6      	beq.n	80013b2 <__gedf2+0xae>
 80013e4:	e7ce      	b.n	8001384 <__gedf2+0x80>
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	000007ff 	.word	0x000007ff

080013ec <__ledf2>:
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	4657      	mov	r7, sl
 80013f0:	464e      	mov	r6, r9
 80013f2:	4645      	mov	r5, r8
 80013f4:	46de      	mov	lr, fp
 80013f6:	b5e0      	push	{r5, r6, r7, lr}
 80013f8:	000d      	movs	r5, r1
 80013fa:	030f      	lsls	r7, r1, #12
 80013fc:	0004      	movs	r4, r0
 80013fe:	4680      	mov	r8, r0
 8001400:	0fe8      	lsrs	r0, r5, #31
 8001402:	0b39      	lsrs	r1, r7, #12
 8001404:	4684      	mov	ip, r0
 8001406:	b083      	sub	sp, #12
 8001408:	0058      	lsls	r0, r3, #1
 800140a:	4f30      	ldr	r7, [pc, #192]	@ (80014cc <__ledf2+0xe0>)
 800140c:	0d40      	lsrs	r0, r0, #21
 800140e:	9101      	str	r1, [sp, #4]
 8001410:	031e      	lsls	r6, r3, #12
 8001412:	0069      	lsls	r1, r5, #1
 8001414:	4682      	mov	sl, r0
 8001416:	4691      	mov	r9, r2
 8001418:	0d49      	lsrs	r1, r1, #21
 800141a:	0b36      	lsrs	r6, r6, #12
 800141c:	0fd8      	lsrs	r0, r3, #31
 800141e:	42b9      	cmp	r1, r7
 8001420:	d020      	beq.n	8001464 <__ledf2+0x78>
 8001422:	45ba      	cmp	sl, r7
 8001424:	d00f      	beq.n	8001446 <__ledf2+0x5a>
 8001426:	2900      	cmp	r1, #0
 8001428:	d12b      	bne.n	8001482 <__ledf2+0x96>
 800142a:	9901      	ldr	r1, [sp, #4]
 800142c:	430c      	orrs	r4, r1
 800142e:	4651      	mov	r1, sl
 8001430:	2900      	cmp	r1, #0
 8001432:	d137      	bne.n	80014a4 <__ledf2+0xb8>
 8001434:	4332      	orrs	r2, r6
 8001436:	d038      	beq.n	80014aa <__ledf2+0xbe>
 8001438:	2c00      	cmp	r4, #0
 800143a:	d144      	bne.n	80014c6 <__ledf2+0xda>
 800143c:	2800      	cmp	r0, #0
 800143e:	d119      	bne.n	8001474 <__ledf2+0x88>
 8001440:	2001      	movs	r0, #1
 8001442:	4240      	negs	r0, r0
 8001444:	e016      	b.n	8001474 <__ledf2+0x88>
 8001446:	4316      	orrs	r6, r2
 8001448:	d113      	bne.n	8001472 <__ledf2+0x86>
 800144a:	2900      	cmp	r1, #0
 800144c:	d102      	bne.n	8001454 <__ledf2+0x68>
 800144e:	9f01      	ldr	r7, [sp, #4]
 8001450:	4327      	orrs	r7, r4
 8001452:	d0f3      	beq.n	800143c <__ledf2+0x50>
 8001454:	4584      	cmp	ip, r0
 8001456:	d020      	beq.n	800149a <__ledf2+0xae>
 8001458:	4663      	mov	r3, ip
 800145a:	2002      	movs	r0, #2
 800145c:	3b01      	subs	r3, #1
 800145e:	4018      	ands	r0, r3
 8001460:	3801      	subs	r0, #1
 8001462:	e007      	b.n	8001474 <__ledf2+0x88>
 8001464:	9f01      	ldr	r7, [sp, #4]
 8001466:	4327      	orrs	r7, r4
 8001468:	d103      	bne.n	8001472 <__ledf2+0x86>
 800146a:	458a      	cmp	sl, r1
 800146c:	d1f4      	bne.n	8001458 <__ledf2+0x6c>
 800146e:	4316      	orrs	r6, r2
 8001470:	d01f      	beq.n	80014b2 <__ledf2+0xc6>
 8001472:	2002      	movs	r0, #2
 8001474:	b003      	add	sp, #12
 8001476:	bcf0      	pop	{r4, r5, r6, r7}
 8001478:	46bb      	mov	fp, r7
 800147a:	46b2      	mov	sl, r6
 800147c:	46a9      	mov	r9, r5
 800147e:	46a0      	mov	r8, r4
 8001480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001482:	4654      	mov	r4, sl
 8001484:	2c00      	cmp	r4, #0
 8001486:	d0e7      	beq.n	8001458 <__ledf2+0x6c>
 8001488:	4584      	cmp	ip, r0
 800148a:	d1e5      	bne.n	8001458 <__ledf2+0x6c>
 800148c:	4551      	cmp	r1, sl
 800148e:	dce3      	bgt.n	8001458 <__ledf2+0x6c>
 8001490:	db03      	blt.n	800149a <__ledf2+0xae>
 8001492:	9b01      	ldr	r3, [sp, #4]
 8001494:	42b3      	cmp	r3, r6
 8001496:	d8df      	bhi.n	8001458 <__ledf2+0x6c>
 8001498:	d00f      	beq.n	80014ba <__ledf2+0xce>
 800149a:	4663      	mov	r3, ip
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0cf      	beq.n	8001440 <__ledf2+0x54>
 80014a0:	4660      	mov	r0, ip
 80014a2:	e7e7      	b.n	8001474 <__ledf2+0x88>
 80014a4:	2c00      	cmp	r4, #0
 80014a6:	d0c9      	beq.n	800143c <__ledf2+0x50>
 80014a8:	e7d4      	b.n	8001454 <__ledf2+0x68>
 80014aa:	2000      	movs	r0, #0
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d0e1      	beq.n	8001474 <__ledf2+0x88>
 80014b0:	e7d2      	b.n	8001458 <__ledf2+0x6c>
 80014b2:	4584      	cmp	ip, r0
 80014b4:	d1d0      	bne.n	8001458 <__ledf2+0x6c>
 80014b6:	2000      	movs	r0, #0
 80014b8:	e7dc      	b.n	8001474 <__ledf2+0x88>
 80014ba:	45c8      	cmp	r8, r9
 80014bc:	d8cc      	bhi.n	8001458 <__ledf2+0x6c>
 80014be:	2000      	movs	r0, #0
 80014c0:	45c8      	cmp	r8, r9
 80014c2:	d2d7      	bcs.n	8001474 <__ledf2+0x88>
 80014c4:	e7e9      	b.n	800149a <__ledf2+0xae>
 80014c6:	4584      	cmp	ip, r0
 80014c8:	d0e3      	beq.n	8001492 <__ledf2+0xa6>
 80014ca:	e7c5      	b.n	8001458 <__ledf2+0x6c>
 80014cc:	000007ff 	.word	0x000007ff

080014d0 <__aeabi_dmul>:
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	4657      	mov	r7, sl
 80014d4:	46de      	mov	lr, fp
 80014d6:	464e      	mov	r6, r9
 80014d8:	4645      	mov	r5, r8
 80014da:	b5e0      	push	{r5, r6, r7, lr}
 80014dc:	001f      	movs	r7, r3
 80014de:	030b      	lsls	r3, r1, #12
 80014e0:	0b1b      	lsrs	r3, r3, #12
 80014e2:	0016      	movs	r6, r2
 80014e4:	469a      	mov	sl, r3
 80014e6:	0fca      	lsrs	r2, r1, #31
 80014e8:	004b      	lsls	r3, r1, #1
 80014ea:	0004      	movs	r4, r0
 80014ec:	4693      	mov	fp, r2
 80014ee:	b087      	sub	sp, #28
 80014f0:	0d5b      	lsrs	r3, r3, #21
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dmul+0x26>
 80014f4:	e0d5      	b.n	80016a2 <__aeabi_dmul+0x1d2>
 80014f6:	4abb      	ldr	r2, [pc, #748]	@ (80017e4 <__aeabi_dmul+0x314>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d100      	bne.n	80014fe <__aeabi_dmul+0x2e>
 80014fc:	e0f8      	b.n	80016f0 <__aeabi_dmul+0x220>
 80014fe:	4651      	mov	r1, sl
 8001500:	0f42      	lsrs	r2, r0, #29
 8001502:	00c9      	lsls	r1, r1, #3
 8001504:	430a      	orrs	r2, r1
 8001506:	2180      	movs	r1, #128	@ 0x80
 8001508:	0409      	lsls	r1, r1, #16
 800150a:	4311      	orrs	r1, r2
 800150c:	00c2      	lsls	r2, r0, #3
 800150e:	4691      	mov	r9, r2
 8001510:	4ab5      	ldr	r2, [pc, #724]	@ (80017e8 <__aeabi_dmul+0x318>)
 8001512:	468a      	mov	sl, r1
 8001514:	189d      	adds	r5, r3, r2
 8001516:	2300      	movs	r3, #0
 8001518:	4698      	mov	r8, r3
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	033c      	lsls	r4, r7, #12
 800151e:	007b      	lsls	r3, r7, #1
 8001520:	0ffa      	lsrs	r2, r7, #31
 8001522:	0030      	movs	r0, r6
 8001524:	0b24      	lsrs	r4, r4, #12
 8001526:	0d5b      	lsrs	r3, r3, #21
 8001528:	9200      	str	r2, [sp, #0]
 800152a:	d100      	bne.n	800152e <__aeabi_dmul+0x5e>
 800152c:	e096      	b.n	800165c <__aeabi_dmul+0x18c>
 800152e:	4aad      	ldr	r2, [pc, #692]	@ (80017e4 <__aeabi_dmul+0x314>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d031      	beq.n	8001598 <__aeabi_dmul+0xc8>
 8001534:	0f72      	lsrs	r2, r6, #29
 8001536:	00e4      	lsls	r4, r4, #3
 8001538:	4322      	orrs	r2, r4
 800153a:	2480      	movs	r4, #128	@ 0x80
 800153c:	0424      	lsls	r4, r4, #16
 800153e:	4314      	orrs	r4, r2
 8001540:	4aa9      	ldr	r2, [pc, #676]	@ (80017e8 <__aeabi_dmul+0x318>)
 8001542:	00f0      	lsls	r0, r6, #3
 8001544:	4694      	mov	ip, r2
 8001546:	4463      	add	r3, ip
 8001548:	195b      	adds	r3, r3, r5
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	9201      	str	r2, [sp, #4]
 800154e:	4642      	mov	r2, r8
 8001550:	2600      	movs	r6, #0
 8001552:	2a0a      	cmp	r2, #10
 8001554:	dc42      	bgt.n	80015dc <__aeabi_dmul+0x10c>
 8001556:	465a      	mov	r2, fp
 8001558:	9900      	ldr	r1, [sp, #0]
 800155a:	404a      	eors	r2, r1
 800155c:	4693      	mov	fp, r2
 800155e:	4642      	mov	r2, r8
 8001560:	2a02      	cmp	r2, #2
 8001562:	dc32      	bgt.n	80015ca <__aeabi_dmul+0xfa>
 8001564:	3a01      	subs	r2, #1
 8001566:	2a01      	cmp	r2, #1
 8001568:	d900      	bls.n	800156c <__aeabi_dmul+0x9c>
 800156a:	e149      	b.n	8001800 <__aeabi_dmul+0x330>
 800156c:	2e02      	cmp	r6, #2
 800156e:	d100      	bne.n	8001572 <__aeabi_dmul+0xa2>
 8001570:	e0ca      	b.n	8001708 <__aeabi_dmul+0x238>
 8001572:	2e01      	cmp	r6, #1
 8001574:	d13d      	bne.n	80015f2 <__aeabi_dmul+0x122>
 8001576:	2300      	movs	r3, #0
 8001578:	2400      	movs	r4, #0
 800157a:	2200      	movs	r2, #0
 800157c:	0010      	movs	r0, r2
 800157e:	465a      	mov	r2, fp
 8001580:	051b      	lsls	r3, r3, #20
 8001582:	4323      	orrs	r3, r4
 8001584:	07d2      	lsls	r2, r2, #31
 8001586:	4313      	orrs	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	b007      	add	sp, #28
 800158c:	bcf0      	pop	{r4, r5, r6, r7}
 800158e:	46bb      	mov	fp, r7
 8001590:	46b2      	mov	sl, r6
 8001592:	46a9      	mov	r9, r5
 8001594:	46a0      	mov	r8, r4
 8001596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001598:	4b92      	ldr	r3, [pc, #584]	@ (80017e4 <__aeabi_dmul+0x314>)
 800159a:	4326      	orrs	r6, r4
 800159c:	18eb      	adds	r3, r5, r3
 800159e:	2e00      	cmp	r6, #0
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dmul+0xd4>
 80015a2:	e0bb      	b.n	800171c <__aeabi_dmul+0x24c>
 80015a4:	2203      	movs	r2, #3
 80015a6:	4641      	mov	r1, r8
 80015a8:	4311      	orrs	r1, r2
 80015aa:	465a      	mov	r2, fp
 80015ac:	4688      	mov	r8, r1
 80015ae:	9900      	ldr	r1, [sp, #0]
 80015b0:	404a      	eors	r2, r1
 80015b2:	2180      	movs	r1, #128	@ 0x80
 80015b4:	0109      	lsls	r1, r1, #4
 80015b6:	468c      	mov	ip, r1
 80015b8:	0029      	movs	r1, r5
 80015ba:	4461      	add	r1, ip
 80015bc:	9101      	str	r1, [sp, #4]
 80015be:	4641      	mov	r1, r8
 80015c0:	290a      	cmp	r1, #10
 80015c2:	dd00      	ble.n	80015c6 <__aeabi_dmul+0xf6>
 80015c4:	e233      	b.n	8001a2e <__aeabi_dmul+0x55e>
 80015c6:	4693      	mov	fp, r2
 80015c8:	2603      	movs	r6, #3
 80015ca:	4642      	mov	r2, r8
 80015cc:	2701      	movs	r7, #1
 80015ce:	4097      	lsls	r7, r2
 80015d0:	21a6      	movs	r1, #166	@ 0xa6
 80015d2:	003a      	movs	r2, r7
 80015d4:	00c9      	lsls	r1, r1, #3
 80015d6:	400a      	ands	r2, r1
 80015d8:	420f      	tst	r7, r1
 80015da:	d031      	beq.n	8001640 <__aeabi_dmul+0x170>
 80015dc:	9e02      	ldr	r6, [sp, #8]
 80015de:	2e02      	cmp	r6, #2
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dmul+0x114>
 80015e2:	e235      	b.n	8001a50 <__aeabi_dmul+0x580>
 80015e4:	2e03      	cmp	r6, #3
 80015e6:	d100      	bne.n	80015ea <__aeabi_dmul+0x11a>
 80015e8:	e1d2      	b.n	8001990 <__aeabi_dmul+0x4c0>
 80015ea:	4654      	mov	r4, sl
 80015ec:	4648      	mov	r0, r9
 80015ee:	2e01      	cmp	r6, #1
 80015f0:	d0c1      	beq.n	8001576 <__aeabi_dmul+0xa6>
 80015f2:	9a01      	ldr	r2, [sp, #4]
 80015f4:	4b7d      	ldr	r3, [pc, #500]	@ (80017ec <__aeabi_dmul+0x31c>)
 80015f6:	4694      	mov	ip, r2
 80015f8:	4463      	add	r3, ip
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	dc00      	bgt.n	8001600 <__aeabi_dmul+0x130>
 80015fe:	e0c0      	b.n	8001782 <__aeabi_dmul+0x2b2>
 8001600:	0742      	lsls	r2, r0, #29
 8001602:	d009      	beq.n	8001618 <__aeabi_dmul+0x148>
 8001604:	220f      	movs	r2, #15
 8001606:	4002      	ands	r2, r0
 8001608:	2a04      	cmp	r2, #4
 800160a:	d005      	beq.n	8001618 <__aeabi_dmul+0x148>
 800160c:	1d02      	adds	r2, r0, #4
 800160e:	4282      	cmp	r2, r0
 8001610:	4180      	sbcs	r0, r0
 8001612:	4240      	negs	r0, r0
 8001614:	1824      	adds	r4, r4, r0
 8001616:	0010      	movs	r0, r2
 8001618:	01e2      	lsls	r2, r4, #7
 800161a:	d506      	bpl.n	800162a <__aeabi_dmul+0x15a>
 800161c:	4b74      	ldr	r3, [pc, #464]	@ (80017f0 <__aeabi_dmul+0x320>)
 800161e:	9a01      	ldr	r2, [sp, #4]
 8001620:	401c      	ands	r4, r3
 8001622:	2380      	movs	r3, #128	@ 0x80
 8001624:	4694      	mov	ip, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4463      	add	r3, ip
 800162a:	4a72      	ldr	r2, [pc, #456]	@ (80017f4 <__aeabi_dmul+0x324>)
 800162c:	4293      	cmp	r3, r2
 800162e:	dc6b      	bgt.n	8001708 <__aeabi_dmul+0x238>
 8001630:	0762      	lsls	r2, r4, #29
 8001632:	08c0      	lsrs	r0, r0, #3
 8001634:	0264      	lsls	r4, r4, #9
 8001636:	055b      	lsls	r3, r3, #21
 8001638:	4302      	orrs	r2, r0
 800163a:	0b24      	lsrs	r4, r4, #12
 800163c:	0d5b      	lsrs	r3, r3, #21
 800163e:	e79d      	b.n	800157c <__aeabi_dmul+0xac>
 8001640:	2190      	movs	r1, #144	@ 0x90
 8001642:	0089      	lsls	r1, r1, #2
 8001644:	420f      	tst	r7, r1
 8001646:	d163      	bne.n	8001710 <__aeabi_dmul+0x240>
 8001648:	2288      	movs	r2, #136	@ 0x88
 800164a:	423a      	tst	r2, r7
 800164c:	d100      	bne.n	8001650 <__aeabi_dmul+0x180>
 800164e:	e0d7      	b.n	8001800 <__aeabi_dmul+0x330>
 8001650:	9b00      	ldr	r3, [sp, #0]
 8001652:	46a2      	mov	sl, r4
 8001654:	469b      	mov	fp, r3
 8001656:	4681      	mov	r9, r0
 8001658:	9602      	str	r6, [sp, #8]
 800165a:	e7bf      	b.n	80015dc <__aeabi_dmul+0x10c>
 800165c:	0023      	movs	r3, r4
 800165e:	4333      	orrs	r3, r6
 8001660:	d100      	bne.n	8001664 <__aeabi_dmul+0x194>
 8001662:	e07f      	b.n	8001764 <__aeabi_dmul+0x294>
 8001664:	2c00      	cmp	r4, #0
 8001666:	d100      	bne.n	800166a <__aeabi_dmul+0x19a>
 8001668:	e1ad      	b.n	80019c6 <__aeabi_dmul+0x4f6>
 800166a:	0020      	movs	r0, r4
 800166c:	f000 ff10 	bl	8002490 <__clzsi2>
 8001670:	0002      	movs	r2, r0
 8001672:	0003      	movs	r3, r0
 8001674:	3a0b      	subs	r2, #11
 8001676:	201d      	movs	r0, #29
 8001678:	0019      	movs	r1, r3
 800167a:	1a82      	subs	r2, r0, r2
 800167c:	0030      	movs	r0, r6
 800167e:	3908      	subs	r1, #8
 8001680:	40d0      	lsrs	r0, r2
 8001682:	408c      	lsls	r4, r1
 8001684:	4304      	orrs	r4, r0
 8001686:	0030      	movs	r0, r6
 8001688:	4088      	lsls	r0, r1
 800168a:	4a5b      	ldr	r2, [pc, #364]	@ (80017f8 <__aeabi_dmul+0x328>)
 800168c:	1aeb      	subs	r3, r5, r3
 800168e:	4694      	mov	ip, r2
 8001690:	4463      	add	r3, ip
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	9201      	str	r2, [sp, #4]
 8001696:	4642      	mov	r2, r8
 8001698:	2600      	movs	r6, #0
 800169a:	2a0a      	cmp	r2, #10
 800169c:	dc00      	bgt.n	80016a0 <__aeabi_dmul+0x1d0>
 800169e:	e75a      	b.n	8001556 <__aeabi_dmul+0x86>
 80016a0:	e79c      	b.n	80015dc <__aeabi_dmul+0x10c>
 80016a2:	4653      	mov	r3, sl
 80016a4:	4303      	orrs	r3, r0
 80016a6:	4699      	mov	r9, r3
 80016a8:	d054      	beq.n	8001754 <__aeabi_dmul+0x284>
 80016aa:	4653      	mov	r3, sl
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x1e2>
 80016b0:	e177      	b.n	80019a2 <__aeabi_dmul+0x4d2>
 80016b2:	4650      	mov	r0, sl
 80016b4:	f000 feec 	bl	8002490 <__clzsi2>
 80016b8:	230b      	movs	r3, #11
 80016ba:	425b      	negs	r3, r3
 80016bc:	469c      	mov	ip, r3
 80016be:	0002      	movs	r2, r0
 80016c0:	4484      	add	ip, r0
 80016c2:	0011      	movs	r1, r2
 80016c4:	4650      	mov	r0, sl
 80016c6:	3908      	subs	r1, #8
 80016c8:	4088      	lsls	r0, r1
 80016ca:	231d      	movs	r3, #29
 80016cc:	4680      	mov	r8, r0
 80016ce:	4660      	mov	r0, ip
 80016d0:	1a1b      	subs	r3, r3, r0
 80016d2:	0020      	movs	r0, r4
 80016d4:	40d8      	lsrs	r0, r3
 80016d6:	0003      	movs	r3, r0
 80016d8:	4640      	mov	r0, r8
 80016da:	4303      	orrs	r3, r0
 80016dc:	469a      	mov	sl, r3
 80016de:	0023      	movs	r3, r4
 80016e0:	408b      	lsls	r3, r1
 80016e2:	4699      	mov	r9, r3
 80016e4:	2300      	movs	r3, #0
 80016e6:	4d44      	ldr	r5, [pc, #272]	@ (80017f8 <__aeabi_dmul+0x328>)
 80016e8:	4698      	mov	r8, r3
 80016ea:	1aad      	subs	r5, r5, r2
 80016ec:	9302      	str	r3, [sp, #8]
 80016ee:	e715      	b.n	800151c <__aeabi_dmul+0x4c>
 80016f0:	4652      	mov	r2, sl
 80016f2:	4302      	orrs	r2, r0
 80016f4:	4691      	mov	r9, r2
 80016f6:	d126      	bne.n	8001746 <__aeabi_dmul+0x276>
 80016f8:	2200      	movs	r2, #0
 80016fa:	001d      	movs	r5, r3
 80016fc:	2302      	movs	r3, #2
 80016fe:	4692      	mov	sl, r2
 8001700:	3208      	adds	r2, #8
 8001702:	4690      	mov	r8, r2
 8001704:	9302      	str	r3, [sp, #8]
 8001706:	e709      	b.n	800151c <__aeabi_dmul+0x4c>
 8001708:	2400      	movs	r4, #0
 800170a:	2200      	movs	r2, #0
 800170c:	4b35      	ldr	r3, [pc, #212]	@ (80017e4 <__aeabi_dmul+0x314>)
 800170e:	e735      	b.n	800157c <__aeabi_dmul+0xac>
 8001710:	2300      	movs	r3, #0
 8001712:	2480      	movs	r4, #128	@ 0x80
 8001714:	469b      	mov	fp, r3
 8001716:	0324      	lsls	r4, r4, #12
 8001718:	4b32      	ldr	r3, [pc, #200]	@ (80017e4 <__aeabi_dmul+0x314>)
 800171a:	e72f      	b.n	800157c <__aeabi_dmul+0xac>
 800171c:	2202      	movs	r2, #2
 800171e:	4641      	mov	r1, r8
 8001720:	4311      	orrs	r1, r2
 8001722:	2280      	movs	r2, #128	@ 0x80
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	4694      	mov	ip, r2
 8001728:	002a      	movs	r2, r5
 800172a:	4462      	add	r2, ip
 800172c:	4688      	mov	r8, r1
 800172e:	9201      	str	r2, [sp, #4]
 8001730:	290a      	cmp	r1, #10
 8001732:	dd00      	ble.n	8001736 <__aeabi_dmul+0x266>
 8001734:	e752      	b.n	80015dc <__aeabi_dmul+0x10c>
 8001736:	465a      	mov	r2, fp
 8001738:	2000      	movs	r0, #0
 800173a:	9900      	ldr	r1, [sp, #0]
 800173c:	0004      	movs	r4, r0
 800173e:	404a      	eors	r2, r1
 8001740:	4693      	mov	fp, r2
 8001742:	2602      	movs	r6, #2
 8001744:	e70b      	b.n	800155e <__aeabi_dmul+0x8e>
 8001746:	220c      	movs	r2, #12
 8001748:	001d      	movs	r5, r3
 800174a:	2303      	movs	r3, #3
 800174c:	4681      	mov	r9, r0
 800174e:	4690      	mov	r8, r2
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	e6e3      	b.n	800151c <__aeabi_dmul+0x4c>
 8001754:	2300      	movs	r3, #0
 8001756:	469a      	mov	sl, r3
 8001758:	3304      	adds	r3, #4
 800175a:	4698      	mov	r8, r3
 800175c:	3b03      	subs	r3, #3
 800175e:	2500      	movs	r5, #0
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	e6db      	b.n	800151c <__aeabi_dmul+0x4c>
 8001764:	4642      	mov	r2, r8
 8001766:	3301      	adds	r3, #1
 8001768:	431a      	orrs	r2, r3
 800176a:	002b      	movs	r3, r5
 800176c:	4690      	mov	r8, r2
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	9201      	str	r2, [sp, #4]
 8001772:	4642      	mov	r2, r8
 8001774:	2400      	movs	r4, #0
 8001776:	2000      	movs	r0, #0
 8001778:	2601      	movs	r6, #1
 800177a:	2a0a      	cmp	r2, #10
 800177c:	dc00      	bgt.n	8001780 <__aeabi_dmul+0x2b0>
 800177e:	e6ea      	b.n	8001556 <__aeabi_dmul+0x86>
 8001780:	e72c      	b.n	80015dc <__aeabi_dmul+0x10c>
 8001782:	2201      	movs	r2, #1
 8001784:	1ad2      	subs	r2, r2, r3
 8001786:	2a38      	cmp	r2, #56	@ 0x38
 8001788:	dd00      	ble.n	800178c <__aeabi_dmul+0x2bc>
 800178a:	e6f4      	b.n	8001576 <__aeabi_dmul+0xa6>
 800178c:	2a1f      	cmp	r2, #31
 800178e:	dc00      	bgt.n	8001792 <__aeabi_dmul+0x2c2>
 8001790:	e12a      	b.n	80019e8 <__aeabi_dmul+0x518>
 8001792:	211f      	movs	r1, #31
 8001794:	4249      	negs	r1, r1
 8001796:	1acb      	subs	r3, r1, r3
 8001798:	0021      	movs	r1, r4
 800179a:	40d9      	lsrs	r1, r3
 800179c:	000b      	movs	r3, r1
 800179e:	2a20      	cmp	r2, #32
 80017a0:	d005      	beq.n	80017ae <__aeabi_dmul+0x2de>
 80017a2:	4a16      	ldr	r2, [pc, #88]	@ (80017fc <__aeabi_dmul+0x32c>)
 80017a4:	9d01      	ldr	r5, [sp, #4]
 80017a6:	4694      	mov	ip, r2
 80017a8:	4465      	add	r5, ip
 80017aa:	40ac      	lsls	r4, r5
 80017ac:	4320      	orrs	r0, r4
 80017ae:	1e42      	subs	r2, r0, #1
 80017b0:	4190      	sbcs	r0, r2
 80017b2:	4318      	orrs	r0, r3
 80017b4:	2307      	movs	r3, #7
 80017b6:	0019      	movs	r1, r3
 80017b8:	2400      	movs	r4, #0
 80017ba:	4001      	ands	r1, r0
 80017bc:	4203      	tst	r3, r0
 80017be:	d00c      	beq.n	80017da <__aeabi_dmul+0x30a>
 80017c0:	230f      	movs	r3, #15
 80017c2:	4003      	ands	r3, r0
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d100      	bne.n	80017ca <__aeabi_dmul+0x2fa>
 80017c8:	e140      	b.n	8001a4c <__aeabi_dmul+0x57c>
 80017ca:	1d03      	adds	r3, r0, #4
 80017cc:	4283      	cmp	r3, r0
 80017ce:	41a4      	sbcs	r4, r4
 80017d0:	0018      	movs	r0, r3
 80017d2:	4264      	negs	r4, r4
 80017d4:	0761      	lsls	r1, r4, #29
 80017d6:	0264      	lsls	r4, r4, #9
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	08c2      	lsrs	r2, r0, #3
 80017dc:	2300      	movs	r3, #0
 80017de:	430a      	orrs	r2, r1
 80017e0:	e6cc      	b.n	800157c <__aeabi_dmul+0xac>
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	000007ff 	.word	0x000007ff
 80017e8:	fffffc01 	.word	0xfffffc01
 80017ec:	000003ff 	.word	0x000003ff
 80017f0:	feffffff 	.word	0xfeffffff
 80017f4:	000007fe 	.word	0x000007fe
 80017f8:	fffffc0d 	.word	0xfffffc0d
 80017fc:	0000043e 	.word	0x0000043e
 8001800:	4649      	mov	r1, r9
 8001802:	464a      	mov	r2, r9
 8001804:	0409      	lsls	r1, r1, #16
 8001806:	0c09      	lsrs	r1, r1, #16
 8001808:	000d      	movs	r5, r1
 800180a:	0c16      	lsrs	r6, r2, #16
 800180c:	0c02      	lsrs	r2, r0, #16
 800180e:	0400      	lsls	r0, r0, #16
 8001810:	0c00      	lsrs	r0, r0, #16
 8001812:	4345      	muls	r5, r0
 8001814:	46ac      	mov	ip, r5
 8001816:	0005      	movs	r5, r0
 8001818:	4375      	muls	r5, r6
 800181a:	46a8      	mov	r8, r5
 800181c:	0015      	movs	r5, r2
 800181e:	000f      	movs	r7, r1
 8001820:	4375      	muls	r5, r6
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	9502      	str	r5, [sp, #8]
 8001826:	002a      	movs	r2, r5
 8001828:	9d00      	ldr	r5, [sp, #0]
 800182a:	436f      	muls	r7, r5
 800182c:	4665      	mov	r5, ip
 800182e:	0c2d      	lsrs	r5, r5, #16
 8001830:	46a9      	mov	r9, r5
 8001832:	4447      	add	r7, r8
 8001834:	444f      	add	r7, r9
 8001836:	45b8      	cmp	r8, r7
 8001838:	d905      	bls.n	8001846 <__aeabi_dmul+0x376>
 800183a:	0015      	movs	r5, r2
 800183c:	2280      	movs	r2, #128	@ 0x80
 800183e:	0252      	lsls	r2, r2, #9
 8001840:	4690      	mov	r8, r2
 8001842:	4445      	add	r5, r8
 8001844:	9502      	str	r5, [sp, #8]
 8001846:	0c3d      	lsrs	r5, r7, #16
 8001848:	9503      	str	r5, [sp, #12]
 800184a:	4665      	mov	r5, ip
 800184c:	042d      	lsls	r5, r5, #16
 800184e:	043f      	lsls	r7, r7, #16
 8001850:	0c2d      	lsrs	r5, r5, #16
 8001852:	46ac      	mov	ip, r5
 8001854:	003d      	movs	r5, r7
 8001856:	4465      	add	r5, ip
 8001858:	9504      	str	r5, [sp, #16]
 800185a:	0c25      	lsrs	r5, r4, #16
 800185c:	0424      	lsls	r4, r4, #16
 800185e:	0c24      	lsrs	r4, r4, #16
 8001860:	46ac      	mov	ip, r5
 8001862:	0025      	movs	r5, r4
 8001864:	4375      	muls	r5, r6
 8001866:	46a8      	mov	r8, r5
 8001868:	4665      	mov	r5, ip
 800186a:	000f      	movs	r7, r1
 800186c:	4369      	muls	r1, r5
 800186e:	4441      	add	r1, r8
 8001870:	4689      	mov	r9, r1
 8001872:	4367      	muls	r7, r4
 8001874:	0c39      	lsrs	r1, r7, #16
 8001876:	4449      	add	r1, r9
 8001878:	436e      	muls	r6, r5
 800187a:	4588      	cmp	r8, r1
 800187c:	d903      	bls.n	8001886 <__aeabi_dmul+0x3b6>
 800187e:	2280      	movs	r2, #128	@ 0x80
 8001880:	0252      	lsls	r2, r2, #9
 8001882:	4690      	mov	r8, r2
 8001884:	4446      	add	r6, r8
 8001886:	0c0d      	lsrs	r5, r1, #16
 8001888:	46a8      	mov	r8, r5
 800188a:	0035      	movs	r5, r6
 800188c:	4445      	add	r5, r8
 800188e:	9505      	str	r5, [sp, #20]
 8001890:	9d03      	ldr	r5, [sp, #12]
 8001892:	043f      	lsls	r7, r7, #16
 8001894:	46a8      	mov	r8, r5
 8001896:	0c3f      	lsrs	r7, r7, #16
 8001898:	0409      	lsls	r1, r1, #16
 800189a:	19c9      	adds	r1, r1, r7
 800189c:	4488      	add	r8, r1
 800189e:	4645      	mov	r5, r8
 80018a0:	9503      	str	r5, [sp, #12]
 80018a2:	4655      	mov	r5, sl
 80018a4:	042e      	lsls	r6, r5, #16
 80018a6:	0c36      	lsrs	r6, r6, #16
 80018a8:	0c2f      	lsrs	r7, r5, #16
 80018aa:	0035      	movs	r5, r6
 80018ac:	4345      	muls	r5, r0
 80018ae:	4378      	muls	r0, r7
 80018b0:	4681      	mov	r9, r0
 80018b2:	0038      	movs	r0, r7
 80018b4:	46a8      	mov	r8, r5
 80018b6:	0c2d      	lsrs	r5, r5, #16
 80018b8:	46aa      	mov	sl, r5
 80018ba:	9a00      	ldr	r2, [sp, #0]
 80018bc:	4350      	muls	r0, r2
 80018be:	4372      	muls	r2, r6
 80018c0:	444a      	add	r2, r9
 80018c2:	4452      	add	r2, sl
 80018c4:	4591      	cmp	r9, r2
 80018c6:	d903      	bls.n	80018d0 <__aeabi_dmul+0x400>
 80018c8:	2580      	movs	r5, #128	@ 0x80
 80018ca:	026d      	lsls	r5, r5, #9
 80018cc:	46a9      	mov	r9, r5
 80018ce:	4448      	add	r0, r9
 80018d0:	0c15      	lsrs	r5, r2, #16
 80018d2:	46a9      	mov	r9, r5
 80018d4:	4645      	mov	r5, r8
 80018d6:	042d      	lsls	r5, r5, #16
 80018d8:	0c2d      	lsrs	r5, r5, #16
 80018da:	46a8      	mov	r8, r5
 80018dc:	4665      	mov	r5, ip
 80018de:	437d      	muls	r5, r7
 80018e0:	0412      	lsls	r2, r2, #16
 80018e2:	4448      	add	r0, r9
 80018e4:	4490      	add	r8, r2
 80018e6:	46a9      	mov	r9, r5
 80018e8:	0032      	movs	r2, r6
 80018ea:	4665      	mov	r5, ip
 80018ec:	4362      	muls	r2, r4
 80018ee:	436e      	muls	r6, r5
 80018f0:	437c      	muls	r4, r7
 80018f2:	0c17      	lsrs	r7, r2, #16
 80018f4:	1936      	adds	r6, r6, r4
 80018f6:	19bf      	adds	r7, r7, r6
 80018f8:	42bc      	cmp	r4, r7
 80018fa:	d903      	bls.n	8001904 <__aeabi_dmul+0x434>
 80018fc:	2480      	movs	r4, #128	@ 0x80
 80018fe:	0264      	lsls	r4, r4, #9
 8001900:	46a4      	mov	ip, r4
 8001902:	44e1      	add	r9, ip
 8001904:	9c02      	ldr	r4, [sp, #8]
 8001906:	9e03      	ldr	r6, [sp, #12]
 8001908:	46a4      	mov	ip, r4
 800190a:	9d05      	ldr	r5, [sp, #20]
 800190c:	4466      	add	r6, ip
 800190e:	428e      	cmp	r6, r1
 8001910:	4189      	sbcs	r1, r1
 8001912:	46ac      	mov	ip, r5
 8001914:	0412      	lsls	r2, r2, #16
 8001916:	043c      	lsls	r4, r7, #16
 8001918:	0c12      	lsrs	r2, r2, #16
 800191a:	18a2      	adds	r2, r4, r2
 800191c:	4462      	add	r2, ip
 800191e:	4249      	negs	r1, r1
 8001920:	1854      	adds	r4, r2, r1
 8001922:	4446      	add	r6, r8
 8001924:	46a4      	mov	ip, r4
 8001926:	4546      	cmp	r6, r8
 8001928:	41a4      	sbcs	r4, r4
 800192a:	4682      	mov	sl, r0
 800192c:	4264      	negs	r4, r4
 800192e:	46a0      	mov	r8, r4
 8001930:	42aa      	cmp	r2, r5
 8001932:	4192      	sbcs	r2, r2
 8001934:	458c      	cmp	ip, r1
 8001936:	4189      	sbcs	r1, r1
 8001938:	44e2      	add	sl, ip
 800193a:	44d0      	add	r8, sl
 800193c:	4249      	negs	r1, r1
 800193e:	4252      	negs	r2, r2
 8001940:	430a      	orrs	r2, r1
 8001942:	45a0      	cmp	r8, r4
 8001944:	41a4      	sbcs	r4, r4
 8001946:	4582      	cmp	sl, r0
 8001948:	4189      	sbcs	r1, r1
 800194a:	4264      	negs	r4, r4
 800194c:	4249      	negs	r1, r1
 800194e:	430c      	orrs	r4, r1
 8001950:	4641      	mov	r1, r8
 8001952:	0c3f      	lsrs	r7, r7, #16
 8001954:	19d2      	adds	r2, r2, r7
 8001956:	1912      	adds	r2, r2, r4
 8001958:	0dcc      	lsrs	r4, r1, #23
 800195a:	9904      	ldr	r1, [sp, #16]
 800195c:	0270      	lsls	r0, r6, #9
 800195e:	4308      	orrs	r0, r1
 8001960:	1e41      	subs	r1, r0, #1
 8001962:	4188      	sbcs	r0, r1
 8001964:	4641      	mov	r1, r8
 8001966:	444a      	add	r2, r9
 8001968:	0df6      	lsrs	r6, r6, #23
 800196a:	0252      	lsls	r2, r2, #9
 800196c:	4330      	orrs	r0, r6
 800196e:	0249      	lsls	r1, r1, #9
 8001970:	4314      	orrs	r4, r2
 8001972:	4308      	orrs	r0, r1
 8001974:	01d2      	lsls	r2, r2, #7
 8001976:	d535      	bpl.n	80019e4 <__aeabi_dmul+0x514>
 8001978:	2201      	movs	r2, #1
 800197a:	0843      	lsrs	r3, r0, #1
 800197c:	4002      	ands	r2, r0
 800197e:	4313      	orrs	r3, r2
 8001980:	07e0      	lsls	r0, r4, #31
 8001982:	4318      	orrs	r0, r3
 8001984:	0864      	lsrs	r4, r4, #1
 8001986:	e634      	b.n	80015f2 <__aeabi_dmul+0x122>
 8001988:	9b00      	ldr	r3, [sp, #0]
 800198a:	46a2      	mov	sl, r4
 800198c:	469b      	mov	fp, r3
 800198e:	4681      	mov	r9, r0
 8001990:	2480      	movs	r4, #128	@ 0x80
 8001992:	4653      	mov	r3, sl
 8001994:	0324      	lsls	r4, r4, #12
 8001996:	431c      	orrs	r4, r3
 8001998:	0324      	lsls	r4, r4, #12
 800199a:	464a      	mov	r2, r9
 800199c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <__aeabi_dmul+0x588>)
 800199e:	0b24      	lsrs	r4, r4, #12
 80019a0:	e5ec      	b.n	800157c <__aeabi_dmul+0xac>
 80019a2:	f000 fd75 	bl	8002490 <__clzsi2>
 80019a6:	2315      	movs	r3, #21
 80019a8:	469c      	mov	ip, r3
 80019aa:	4484      	add	ip, r0
 80019ac:	0002      	movs	r2, r0
 80019ae:	4663      	mov	r3, ip
 80019b0:	3220      	adds	r2, #32
 80019b2:	2b1c      	cmp	r3, #28
 80019b4:	dc00      	bgt.n	80019b8 <__aeabi_dmul+0x4e8>
 80019b6:	e684      	b.n	80016c2 <__aeabi_dmul+0x1f2>
 80019b8:	2300      	movs	r3, #0
 80019ba:	4699      	mov	r9, r3
 80019bc:	0023      	movs	r3, r4
 80019be:	3808      	subs	r0, #8
 80019c0:	4083      	lsls	r3, r0
 80019c2:	469a      	mov	sl, r3
 80019c4:	e68e      	b.n	80016e4 <__aeabi_dmul+0x214>
 80019c6:	f000 fd63 	bl	8002490 <__clzsi2>
 80019ca:	0002      	movs	r2, r0
 80019cc:	0003      	movs	r3, r0
 80019ce:	3215      	adds	r2, #21
 80019d0:	3320      	adds	r3, #32
 80019d2:	2a1c      	cmp	r2, #28
 80019d4:	dc00      	bgt.n	80019d8 <__aeabi_dmul+0x508>
 80019d6:	e64e      	b.n	8001676 <__aeabi_dmul+0x1a6>
 80019d8:	0002      	movs	r2, r0
 80019da:	0034      	movs	r4, r6
 80019dc:	3a08      	subs	r2, #8
 80019de:	2000      	movs	r0, #0
 80019e0:	4094      	lsls	r4, r2
 80019e2:	e652      	b.n	800168a <__aeabi_dmul+0x1ba>
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	e604      	b.n	80015f2 <__aeabi_dmul+0x122>
 80019e8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <__aeabi_dmul+0x58c>)
 80019ea:	0021      	movs	r1, r4
 80019ec:	469c      	mov	ip, r3
 80019ee:	0003      	movs	r3, r0
 80019f0:	9d01      	ldr	r5, [sp, #4]
 80019f2:	40d3      	lsrs	r3, r2
 80019f4:	4465      	add	r5, ip
 80019f6:	40a9      	lsls	r1, r5
 80019f8:	4319      	orrs	r1, r3
 80019fa:	0003      	movs	r3, r0
 80019fc:	40ab      	lsls	r3, r5
 80019fe:	1e58      	subs	r0, r3, #1
 8001a00:	4183      	sbcs	r3, r0
 8001a02:	4319      	orrs	r1, r3
 8001a04:	0008      	movs	r0, r1
 8001a06:	40d4      	lsrs	r4, r2
 8001a08:	074b      	lsls	r3, r1, #29
 8001a0a:	d009      	beq.n	8001a20 <__aeabi_dmul+0x550>
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	400b      	ands	r3, r1
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d005      	beq.n	8001a20 <__aeabi_dmul+0x550>
 8001a14:	1d0b      	adds	r3, r1, #4
 8001a16:	428b      	cmp	r3, r1
 8001a18:	4180      	sbcs	r0, r0
 8001a1a:	4240      	negs	r0, r0
 8001a1c:	1824      	adds	r4, r4, r0
 8001a1e:	0018      	movs	r0, r3
 8001a20:	0223      	lsls	r3, r4, #8
 8001a22:	d400      	bmi.n	8001a26 <__aeabi_dmul+0x556>
 8001a24:	e6d6      	b.n	80017d4 <__aeabi_dmul+0x304>
 8001a26:	2301      	movs	r3, #1
 8001a28:	2400      	movs	r4, #0
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	e5a6      	b.n	800157c <__aeabi_dmul+0xac>
 8001a2e:	290f      	cmp	r1, #15
 8001a30:	d1aa      	bne.n	8001988 <__aeabi_dmul+0x4b8>
 8001a32:	2380      	movs	r3, #128	@ 0x80
 8001a34:	4652      	mov	r2, sl
 8001a36:	031b      	lsls	r3, r3, #12
 8001a38:	421a      	tst	r2, r3
 8001a3a:	d0a9      	beq.n	8001990 <__aeabi_dmul+0x4c0>
 8001a3c:	421c      	tst	r4, r3
 8001a3e:	d1a7      	bne.n	8001990 <__aeabi_dmul+0x4c0>
 8001a40:	431c      	orrs	r4, r3
 8001a42:	9b00      	ldr	r3, [sp, #0]
 8001a44:	0002      	movs	r2, r0
 8001a46:	469b      	mov	fp, r3
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <__aeabi_dmul+0x588>)
 8001a4a:	e597      	b.n	800157c <__aeabi_dmul+0xac>
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	e6c1      	b.n	80017d4 <__aeabi_dmul+0x304>
 8001a50:	2400      	movs	r4, #0
 8001a52:	4b01      	ldr	r3, [pc, #4]	@ (8001a58 <__aeabi_dmul+0x588>)
 8001a54:	0022      	movs	r2, r4
 8001a56:	e591      	b.n	800157c <__aeabi_dmul+0xac>
 8001a58:	000007ff 	.word	0x000007ff
 8001a5c:	0000041e 	.word	0x0000041e

08001a60 <__aeabi_dsub>:
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a62:	464e      	mov	r6, r9
 8001a64:	4645      	mov	r5, r8
 8001a66:	46de      	mov	lr, fp
 8001a68:	4657      	mov	r7, sl
 8001a6a:	b5e0      	push	{r5, r6, r7, lr}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	9000      	str	r0, [sp, #0]
 8001a70:	9101      	str	r1, [sp, #4]
 8001a72:	030c      	lsls	r4, r1, #12
 8001a74:	004f      	lsls	r7, r1, #1
 8001a76:	0fce      	lsrs	r6, r1, #31
 8001a78:	0a61      	lsrs	r1, r4, #9
 8001a7a:	9c00      	ldr	r4, [sp, #0]
 8001a7c:	46b0      	mov	r8, r6
 8001a7e:	0f64      	lsrs	r4, r4, #29
 8001a80:	430c      	orrs	r4, r1
 8001a82:	9900      	ldr	r1, [sp, #0]
 8001a84:	0d7f      	lsrs	r7, r7, #21
 8001a86:	00c8      	lsls	r0, r1, #3
 8001a88:	0011      	movs	r1, r2
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	031b      	lsls	r3, r3, #12
 8001a8e:	469c      	mov	ip, r3
 8001a90:	9100      	str	r1, [sp, #0]
 8001a92:	9201      	str	r2, [sp, #4]
 8001a94:	0051      	lsls	r1, r2, #1
 8001a96:	0d4b      	lsrs	r3, r1, #21
 8001a98:	4699      	mov	r9, r3
 8001a9a:	9b01      	ldr	r3, [sp, #4]
 8001a9c:	9d00      	ldr	r5, [sp, #0]
 8001a9e:	0fd9      	lsrs	r1, r3, #31
 8001aa0:	4663      	mov	r3, ip
 8001aa2:	0f6a      	lsrs	r2, r5, #29
 8001aa4:	0a5b      	lsrs	r3, r3, #9
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	00ea      	lsls	r2, r5, #3
 8001aaa:	4694      	mov	ip, r2
 8001aac:	4693      	mov	fp, r2
 8001aae:	4ac1      	ldr	r2, [pc, #772]	@ (8001db4 <__aeabi_dsub+0x354>)
 8001ab0:	9003      	str	r0, [sp, #12]
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	4591      	cmp	r9, r2
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dsub+0x5a>
 8001ab8:	e0cd      	b.n	8001c56 <__aeabi_dsub+0x1f6>
 8001aba:	2501      	movs	r5, #1
 8001abc:	4069      	eors	r1, r5
 8001abe:	464d      	mov	r5, r9
 8001ac0:	1b7d      	subs	r5, r7, r5
 8001ac2:	46aa      	mov	sl, r5
 8001ac4:	428e      	cmp	r6, r1
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x6a>
 8001ac8:	e080      	b.n	8001bcc <__aeabi_dsub+0x16c>
 8001aca:	2d00      	cmp	r5, #0
 8001acc:	dc00      	bgt.n	8001ad0 <__aeabi_dsub+0x70>
 8001ace:	e335      	b.n	800213c <__aeabi_dsub+0x6dc>
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	2900      	cmp	r1, #0
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dsub+0x78>
 8001ad6:	e0df      	b.n	8001c98 <__aeabi_dsub+0x238>
 8001ad8:	4297      	cmp	r7, r2
 8001ada:	d100      	bne.n	8001ade <__aeabi_dsub+0x7e>
 8001adc:	e194      	b.n	8001e08 <__aeabi_dsub+0x3a8>
 8001ade:	4652      	mov	r2, sl
 8001ae0:	2501      	movs	r5, #1
 8001ae2:	2a38      	cmp	r2, #56	@ 0x38
 8001ae4:	dc19      	bgt.n	8001b1a <__aeabi_dsub+0xba>
 8001ae6:	2280      	movs	r2, #128	@ 0x80
 8001ae8:	9b02      	ldr	r3, [sp, #8]
 8001aea:	0412      	lsls	r2, r2, #16
 8001aec:	4313      	orrs	r3, r2
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	4652      	mov	r2, sl
 8001af2:	2a1f      	cmp	r2, #31
 8001af4:	dd00      	ble.n	8001af8 <__aeabi_dsub+0x98>
 8001af6:	e1e3      	b.n	8001ec0 <__aeabi_dsub+0x460>
 8001af8:	4653      	mov	r3, sl
 8001afa:	2220      	movs	r2, #32
 8001afc:	4661      	mov	r1, ip
 8001afe:	9d02      	ldr	r5, [sp, #8]
 8001b00:	1ad2      	subs	r2, r2, r3
 8001b02:	4095      	lsls	r5, r2
 8001b04:	40d9      	lsrs	r1, r3
 8001b06:	430d      	orrs	r5, r1
 8001b08:	4661      	mov	r1, ip
 8001b0a:	4091      	lsls	r1, r2
 8001b0c:	000a      	movs	r2, r1
 8001b0e:	1e51      	subs	r1, r2, #1
 8001b10:	418a      	sbcs	r2, r1
 8001b12:	4315      	orrs	r5, r2
 8001b14:	9a02      	ldr	r2, [sp, #8]
 8001b16:	40da      	lsrs	r2, r3
 8001b18:	1aa4      	subs	r4, r4, r2
 8001b1a:	1b45      	subs	r5, r0, r5
 8001b1c:	42a8      	cmp	r0, r5
 8001b1e:	4180      	sbcs	r0, r0
 8001b20:	4240      	negs	r0, r0
 8001b22:	1a24      	subs	r4, r4, r0
 8001b24:	0223      	lsls	r3, r4, #8
 8001b26:	d400      	bmi.n	8001b2a <__aeabi_dsub+0xca>
 8001b28:	e13d      	b.n	8001da6 <__aeabi_dsub+0x346>
 8001b2a:	0264      	lsls	r4, r4, #9
 8001b2c:	0a64      	lsrs	r4, r4, #9
 8001b2e:	2c00      	cmp	r4, #0
 8001b30:	d100      	bne.n	8001b34 <__aeabi_dsub+0xd4>
 8001b32:	e147      	b.n	8001dc4 <__aeabi_dsub+0x364>
 8001b34:	0020      	movs	r0, r4
 8001b36:	f000 fcab 	bl	8002490 <__clzsi2>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3b08      	subs	r3, #8
 8001b3e:	2120      	movs	r1, #32
 8001b40:	0028      	movs	r0, r5
 8001b42:	1aca      	subs	r2, r1, r3
 8001b44:	40d0      	lsrs	r0, r2
 8001b46:	409c      	lsls	r4, r3
 8001b48:	0002      	movs	r2, r0
 8001b4a:	409d      	lsls	r5, r3
 8001b4c:	4322      	orrs	r2, r4
 8001b4e:	429f      	cmp	r7, r3
 8001b50:	dd00      	ble.n	8001b54 <__aeabi_dsub+0xf4>
 8001b52:	e177      	b.n	8001e44 <__aeabi_dsub+0x3e4>
 8001b54:	1bd8      	subs	r0, r3, r7
 8001b56:	3001      	adds	r0, #1
 8001b58:	1a09      	subs	r1, r1, r0
 8001b5a:	002c      	movs	r4, r5
 8001b5c:	408d      	lsls	r5, r1
 8001b5e:	40c4      	lsrs	r4, r0
 8001b60:	1e6b      	subs	r3, r5, #1
 8001b62:	419d      	sbcs	r5, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	40c2      	lsrs	r2, r0
 8001b68:	408b      	lsls	r3, r1
 8001b6a:	4325      	orrs	r5, r4
 8001b6c:	2700      	movs	r7, #0
 8001b6e:	0014      	movs	r4, r2
 8001b70:	431d      	orrs	r5, r3
 8001b72:	076b      	lsls	r3, r5, #29
 8001b74:	d009      	beq.n	8001b8a <__aeabi_dsub+0x12a>
 8001b76:	230f      	movs	r3, #15
 8001b78:	402b      	ands	r3, r5
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d005      	beq.n	8001b8a <__aeabi_dsub+0x12a>
 8001b7e:	1d2b      	adds	r3, r5, #4
 8001b80:	42ab      	cmp	r3, r5
 8001b82:	41ad      	sbcs	r5, r5
 8001b84:	426d      	negs	r5, r5
 8001b86:	1964      	adds	r4, r4, r5
 8001b88:	001d      	movs	r5, r3
 8001b8a:	0223      	lsls	r3, r4, #8
 8001b8c:	d400      	bmi.n	8001b90 <__aeabi_dsub+0x130>
 8001b8e:	e140      	b.n	8001e12 <__aeabi_dsub+0x3b2>
 8001b90:	4a88      	ldr	r2, [pc, #544]	@ (8001db4 <__aeabi_dsub+0x354>)
 8001b92:	3701      	adds	r7, #1
 8001b94:	4297      	cmp	r7, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dsub+0x13a>
 8001b98:	e101      	b.n	8001d9e <__aeabi_dsub+0x33e>
 8001b9a:	2601      	movs	r6, #1
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	4986      	ldr	r1, [pc, #536]	@ (8001db8 <__aeabi_dsub+0x358>)
 8001ba0:	08ed      	lsrs	r5, r5, #3
 8001ba2:	4021      	ands	r1, r4
 8001ba4:	074a      	lsls	r2, r1, #29
 8001ba6:	432a      	orrs	r2, r5
 8001ba8:	057c      	lsls	r4, r7, #21
 8001baa:	024d      	lsls	r5, r1, #9
 8001bac:	0b2d      	lsrs	r5, r5, #12
 8001bae:	0d64      	lsrs	r4, r4, #21
 8001bb0:	401e      	ands	r6, r3
 8001bb2:	0524      	lsls	r4, r4, #20
 8001bb4:	432c      	orrs	r4, r5
 8001bb6:	07f6      	lsls	r6, r6, #31
 8001bb8:	4334      	orrs	r4, r6
 8001bba:	0010      	movs	r0, r2
 8001bbc:	0021      	movs	r1, r4
 8001bbe:	b005      	add	sp, #20
 8001bc0:	bcf0      	pop	{r4, r5, r6, r7}
 8001bc2:	46bb      	mov	fp, r7
 8001bc4:	46b2      	mov	sl, r6
 8001bc6:	46a9      	mov	r9, r5
 8001bc8:	46a0      	mov	r8, r4
 8001bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bcc:	2d00      	cmp	r5, #0
 8001bce:	dc00      	bgt.n	8001bd2 <__aeabi_dsub+0x172>
 8001bd0:	e2d0      	b.n	8002174 <__aeabi_dsub+0x714>
 8001bd2:	4649      	mov	r1, r9
 8001bd4:	2900      	cmp	r1, #0
 8001bd6:	d000      	beq.n	8001bda <__aeabi_dsub+0x17a>
 8001bd8:	e0d4      	b.n	8001d84 <__aeabi_dsub+0x324>
 8001bda:	4661      	mov	r1, ip
 8001bdc:	9b02      	ldr	r3, [sp, #8]
 8001bde:	4319      	orrs	r1, r3
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x184>
 8001be2:	e12b      	b.n	8001e3c <__aeabi_dsub+0x3dc>
 8001be4:	1e69      	subs	r1, r5, #1
 8001be6:	2d01      	cmp	r5, #1
 8001be8:	d100      	bne.n	8001bec <__aeabi_dsub+0x18c>
 8001bea:	e1d9      	b.n	8001fa0 <__aeabi_dsub+0x540>
 8001bec:	4295      	cmp	r5, r2
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x192>
 8001bf0:	e10a      	b.n	8001e08 <__aeabi_dsub+0x3a8>
 8001bf2:	2501      	movs	r5, #1
 8001bf4:	2938      	cmp	r1, #56	@ 0x38
 8001bf6:	dc17      	bgt.n	8001c28 <__aeabi_dsub+0x1c8>
 8001bf8:	468a      	mov	sl, r1
 8001bfa:	4653      	mov	r3, sl
 8001bfc:	2b1f      	cmp	r3, #31
 8001bfe:	dd00      	ble.n	8001c02 <__aeabi_dsub+0x1a2>
 8001c00:	e1e7      	b.n	8001fd2 <__aeabi_dsub+0x572>
 8001c02:	2220      	movs	r2, #32
 8001c04:	1ad2      	subs	r2, r2, r3
 8001c06:	9b02      	ldr	r3, [sp, #8]
 8001c08:	4661      	mov	r1, ip
 8001c0a:	4093      	lsls	r3, r2
 8001c0c:	001d      	movs	r5, r3
 8001c0e:	4653      	mov	r3, sl
 8001c10:	40d9      	lsrs	r1, r3
 8001c12:	4663      	mov	r3, ip
 8001c14:	4093      	lsls	r3, r2
 8001c16:	001a      	movs	r2, r3
 8001c18:	430d      	orrs	r5, r1
 8001c1a:	1e51      	subs	r1, r2, #1
 8001c1c:	418a      	sbcs	r2, r1
 8001c1e:	4653      	mov	r3, sl
 8001c20:	4315      	orrs	r5, r2
 8001c22:	9a02      	ldr	r2, [sp, #8]
 8001c24:	40da      	lsrs	r2, r3
 8001c26:	18a4      	adds	r4, r4, r2
 8001c28:	182d      	adds	r5, r5, r0
 8001c2a:	4285      	cmp	r5, r0
 8001c2c:	4180      	sbcs	r0, r0
 8001c2e:	4240      	negs	r0, r0
 8001c30:	1824      	adds	r4, r4, r0
 8001c32:	0223      	lsls	r3, r4, #8
 8001c34:	d400      	bmi.n	8001c38 <__aeabi_dsub+0x1d8>
 8001c36:	e0b6      	b.n	8001da6 <__aeabi_dsub+0x346>
 8001c38:	4b5e      	ldr	r3, [pc, #376]	@ (8001db4 <__aeabi_dsub+0x354>)
 8001c3a:	3701      	adds	r7, #1
 8001c3c:	429f      	cmp	r7, r3
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x1e2>
 8001c40:	e0ad      	b.n	8001d9e <__aeabi_dsub+0x33e>
 8001c42:	2101      	movs	r1, #1
 8001c44:	4b5c      	ldr	r3, [pc, #368]	@ (8001db8 <__aeabi_dsub+0x358>)
 8001c46:	086a      	lsrs	r2, r5, #1
 8001c48:	401c      	ands	r4, r3
 8001c4a:	4029      	ands	r1, r5
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	07e5      	lsls	r5, r4, #31
 8001c50:	4315      	orrs	r5, r2
 8001c52:	0864      	lsrs	r4, r4, #1
 8001c54:	e78d      	b.n	8001b72 <__aeabi_dsub+0x112>
 8001c56:	4a59      	ldr	r2, [pc, #356]	@ (8001dbc <__aeabi_dsub+0x35c>)
 8001c58:	9b02      	ldr	r3, [sp, #8]
 8001c5a:	4692      	mov	sl, r2
 8001c5c:	4662      	mov	r2, ip
 8001c5e:	44ba      	add	sl, r7
 8001c60:	431a      	orrs	r2, r3
 8001c62:	d02c      	beq.n	8001cbe <__aeabi_dsub+0x25e>
 8001c64:	428e      	cmp	r6, r1
 8001c66:	d02e      	beq.n	8001cc6 <__aeabi_dsub+0x266>
 8001c68:	4652      	mov	r2, sl
 8001c6a:	2a00      	cmp	r2, #0
 8001c6c:	d060      	beq.n	8001d30 <__aeabi_dsub+0x2d0>
 8001c6e:	2f00      	cmp	r7, #0
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x214>
 8001c72:	e0db      	b.n	8001e2c <__aeabi_dsub+0x3cc>
 8001c74:	4663      	mov	r3, ip
 8001c76:	000e      	movs	r6, r1
 8001c78:	9c02      	ldr	r4, [sp, #8]
 8001c7a:	08d8      	lsrs	r0, r3, #3
 8001c7c:	0762      	lsls	r2, r4, #29
 8001c7e:	4302      	orrs	r2, r0
 8001c80:	08e4      	lsrs	r4, r4, #3
 8001c82:	0013      	movs	r3, r2
 8001c84:	4323      	orrs	r3, r4
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x22a>
 8001c88:	e254      	b.n	8002134 <__aeabi_dsub+0x6d4>
 8001c8a:	2580      	movs	r5, #128	@ 0x80
 8001c8c:	032d      	lsls	r5, r5, #12
 8001c8e:	4325      	orrs	r5, r4
 8001c90:	032d      	lsls	r5, r5, #12
 8001c92:	4c48      	ldr	r4, [pc, #288]	@ (8001db4 <__aeabi_dsub+0x354>)
 8001c94:	0b2d      	lsrs	r5, r5, #12
 8001c96:	e78c      	b.n	8001bb2 <__aeabi_dsub+0x152>
 8001c98:	4661      	mov	r1, ip
 8001c9a:	9b02      	ldr	r3, [sp, #8]
 8001c9c:	4319      	orrs	r1, r3
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x242>
 8001ca0:	e0cc      	b.n	8001e3c <__aeabi_dsub+0x3dc>
 8001ca2:	0029      	movs	r1, r5
 8001ca4:	3901      	subs	r1, #1
 8001ca6:	2d01      	cmp	r5, #1
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0x24c>
 8001caa:	e188      	b.n	8001fbe <__aeabi_dsub+0x55e>
 8001cac:	4295      	cmp	r5, r2
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dsub+0x252>
 8001cb0:	e0aa      	b.n	8001e08 <__aeabi_dsub+0x3a8>
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	2938      	cmp	r1, #56	@ 0x38
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x25a>
 8001cb8:	e72f      	b.n	8001b1a <__aeabi_dsub+0xba>
 8001cba:	468a      	mov	sl, r1
 8001cbc:	e718      	b.n	8001af0 <__aeabi_dsub+0x90>
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4051      	eors	r1, r2
 8001cc2:	428e      	cmp	r6, r1
 8001cc4:	d1d0      	bne.n	8001c68 <__aeabi_dsub+0x208>
 8001cc6:	4653      	mov	r3, sl
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d100      	bne.n	8001cce <__aeabi_dsub+0x26e>
 8001ccc:	e0be      	b.n	8001e4c <__aeabi_dsub+0x3ec>
 8001cce:	2f00      	cmp	r7, #0
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dsub+0x274>
 8001cd2:	e138      	b.n	8001f46 <__aeabi_dsub+0x4e6>
 8001cd4:	46ca      	mov	sl, r9
 8001cd6:	0022      	movs	r2, r4
 8001cd8:	4302      	orrs	r2, r0
 8001cda:	d100      	bne.n	8001cde <__aeabi_dsub+0x27e>
 8001cdc:	e1e2      	b.n	80020a4 <__aeabi_dsub+0x644>
 8001cde:	4653      	mov	r3, sl
 8001ce0:	1e59      	subs	r1, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x288>
 8001ce6:	e20d      	b.n	8002104 <__aeabi_dsub+0x6a4>
 8001ce8:	4a32      	ldr	r2, [pc, #200]	@ (8001db4 <__aeabi_dsub+0x354>)
 8001cea:	4592      	cmp	sl, r2
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x290>
 8001cee:	e1d2      	b.n	8002096 <__aeabi_dsub+0x636>
 8001cf0:	2701      	movs	r7, #1
 8001cf2:	2938      	cmp	r1, #56	@ 0x38
 8001cf4:	dc13      	bgt.n	8001d1e <__aeabi_dsub+0x2be>
 8001cf6:	291f      	cmp	r1, #31
 8001cf8:	dd00      	ble.n	8001cfc <__aeabi_dsub+0x29c>
 8001cfa:	e1ee      	b.n	80020da <__aeabi_dsub+0x67a>
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	9b02      	ldr	r3, [sp, #8]
 8001d00:	1a52      	subs	r2, r2, r1
 8001d02:	0025      	movs	r5, r4
 8001d04:	0007      	movs	r7, r0
 8001d06:	469a      	mov	sl, r3
 8001d08:	40cc      	lsrs	r4, r1
 8001d0a:	4090      	lsls	r0, r2
 8001d0c:	4095      	lsls	r5, r2
 8001d0e:	40cf      	lsrs	r7, r1
 8001d10:	44a2      	add	sl, r4
 8001d12:	1e42      	subs	r2, r0, #1
 8001d14:	4190      	sbcs	r0, r2
 8001d16:	4653      	mov	r3, sl
 8001d18:	432f      	orrs	r7, r5
 8001d1a:	4307      	orrs	r7, r0
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	003d      	movs	r5, r7
 8001d20:	4465      	add	r5, ip
 8001d22:	4565      	cmp	r5, ip
 8001d24:	4192      	sbcs	r2, r2
 8001d26:	9b02      	ldr	r3, [sp, #8]
 8001d28:	4252      	negs	r2, r2
 8001d2a:	464f      	mov	r7, r9
 8001d2c:	18d4      	adds	r4, r2, r3
 8001d2e:	e780      	b.n	8001c32 <__aeabi_dsub+0x1d2>
 8001d30:	4a23      	ldr	r2, [pc, #140]	@ (8001dc0 <__aeabi_dsub+0x360>)
 8001d32:	1c7d      	adds	r5, r7, #1
 8001d34:	4215      	tst	r5, r2
 8001d36:	d000      	beq.n	8001d3a <__aeabi_dsub+0x2da>
 8001d38:	e0aa      	b.n	8001e90 <__aeabi_dsub+0x430>
 8001d3a:	4662      	mov	r2, ip
 8001d3c:	0025      	movs	r5, r4
 8001d3e:	9b02      	ldr	r3, [sp, #8]
 8001d40:	4305      	orrs	r5, r0
 8001d42:	431a      	orrs	r2, r3
 8001d44:	2f00      	cmp	r7, #0
 8001d46:	d000      	beq.n	8001d4a <__aeabi_dsub+0x2ea>
 8001d48:	e0f5      	b.n	8001f36 <__aeabi_dsub+0x4d6>
 8001d4a:	2d00      	cmp	r5, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x2f0>
 8001d4e:	e16b      	b.n	8002028 <__aeabi_dsub+0x5c8>
 8001d50:	2a00      	cmp	r2, #0
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dsub+0x2f6>
 8001d54:	e152      	b.n	8001ffc <__aeabi_dsub+0x59c>
 8001d56:	4663      	mov	r3, ip
 8001d58:	1ac5      	subs	r5, r0, r3
 8001d5a:	9b02      	ldr	r3, [sp, #8]
 8001d5c:	1ae2      	subs	r2, r4, r3
 8001d5e:	42a8      	cmp	r0, r5
 8001d60:	419b      	sbcs	r3, r3
 8001d62:	425b      	negs	r3, r3
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	021a      	lsls	r2, r3, #8
 8001d68:	d400      	bmi.n	8001d6c <__aeabi_dsub+0x30c>
 8001d6a:	e1d5      	b.n	8002118 <__aeabi_dsub+0x6b8>
 8001d6c:	4663      	mov	r3, ip
 8001d6e:	1a1d      	subs	r5, r3, r0
 8001d70:	45ac      	cmp	ip, r5
 8001d72:	4192      	sbcs	r2, r2
 8001d74:	2601      	movs	r6, #1
 8001d76:	9b02      	ldr	r3, [sp, #8]
 8001d78:	4252      	negs	r2, r2
 8001d7a:	1b1c      	subs	r4, r3, r4
 8001d7c:	4688      	mov	r8, r1
 8001d7e:	1aa4      	subs	r4, r4, r2
 8001d80:	400e      	ands	r6, r1
 8001d82:	e6f6      	b.n	8001b72 <__aeabi_dsub+0x112>
 8001d84:	4297      	cmp	r7, r2
 8001d86:	d03f      	beq.n	8001e08 <__aeabi_dsub+0x3a8>
 8001d88:	4652      	mov	r2, sl
 8001d8a:	2501      	movs	r5, #1
 8001d8c:	2a38      	cmp	r2, #56	@ 0x38
 8001d8e:	dd00      	ble.n	8001d92 <__aeabi_dsub+0x332>
 8001d90:	e74a      	b.n	8001c28 <__aeabi_dsub+0x1c8>
 8001d92:	2280      	movs	r2, #128	@ 0x80
 8001d94:	9b02      	ldr	r3, [sp, #8]
 8001d96:	0412      	lsls	r2, r2, #16
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	9302      	str	r3, [sp, #8]
 8001d9c:	e72d      	b.n	8001bfa <__aeabi_dsub+0x19a>
 8001d9e:	003c      	movs	r4, r7
 8001da0:	2500      	movs	r5, #0
 8001da2:	2200      	movs	r2, #0
 8001da4:	e705      	b.n	8001bb2 <__aeabi_dsub+0x152>
 8001da6:	2307      	movs	r3, #7
 8001da8:	402b      	ands	r3, r5
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d000      	beq.n	8001db0 <__aeabi_dsub+0x350>
 8001dae:	e6e2      	b.n	8001b76 <__aeabi_dsub+0x116>
 8001db0:	e06b      	b.n	8001e8a <__aeabi_dsub+0x42a>
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	000007ff 	.word	0x000007ff
 8001db8:	ff7fffff 	.word	0xff7fffff
 8001dbc:	fffff801 	.word	0xfffff801
 8001dc0:	000007fe 	.word	0x000007fe
 8001dc4:	0028      	movs	r0, r5
 8001dc6:	f000 fb63 	bl	8002490 <__clzsi2>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	3318      	adds	r3, #24
 8001dce:	2b1f      	cmp	r3, #31
 8001dd0:	dc00      	bgt.n	8001dd4 <__aeabi_dsub+0x374>
 8001dd2:	e6b4      	b.n	8001b3e <__aeabi_dsub+0xde>
 8001dd4:	002a      	movs	r2, r5
 8001dd6:	3808      	subs	r0, #8
 8001dd8:	4082      	lsls	r2, r0
 8001dda:	429f      	cmp	r7, r3
 8001ddc:	dd00      	ble.n	8001de0 <__aeabi_dsub+0x380>
 8001dde:	e0b9      	b.n	8001f54 <__aeabi_dsub+0x4f4>
 8001de0:	1bdb      	subs	r3, r3, r7
 8001de2:	1c58      	adds	r0, r3, #1
 8001de4:	281f      	cmp	r0, #31
 8001de6:	dc00      	bgt.n	8001dea <__aeabi_dsub+0x38a>
 8001de8:	e1a0      	b.n	800212c <__aeabi_dsub+0x6cc>
 8001dea:	0015      	movs	r5, r2
 8001dec:	3b1f      	subs	r3, #31
 8001dee:	40dd      	lsrs	r5, r3
 8001df0:	2820      	cmp	r0, #32
 8001df2:	d005      	beq.n	8001e00 <__aeabi_dsub+0x3a0>
 8001df4:	2340      	movs	r3, #64	@ 0x40
 8001df6:	1a1b      	subs	r3, r3, r0
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	1e53      	subs	r3, r2, #1
 8001dfc:	419a      	sbcs	r2, r3
 8001dfe:	4315      	orrs	r5, r2
 8001e00:	2307      	movs	r3, #7
 8001e02:	2700      	movs	r7, #0
 8001e04:	402b      	ands	r3, r5
 8001e06:	e7d0      	b.n	8001daa <__aeabi_dsub+0x34a>
 8001e08:	08c0      	lsrs	r0, r0, #3
 8001e0a:	0762      	lsls	r2, r4, #29
 8001e0c:	4302      	orrs	r2, r0
 8001e0e:	08e4      	lsrs	r4, r4, #3
 8001e10:	e737      	b.n	8001c82 <__aeabi_dsub+0x222>
 8001e12:	08ea      	lsrs	r2, r5, #3
 8001e14:	0763      	lsls	r3, r4, #29
 8001e16:	431a      	orrs	r2, r3
 8001e18:	4bd3      	ldr	r3, [pc, #844]	@ (8002168 <__aeabi_dsub+0x708>)
 8001e1a:	08e4      	lsrs	r4, r4, #3
 8001e1c:	429f      	cmp	r7, r3
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x3c2>
 8001e20:	e72f      	b.n	8001c82 <__aeabi_dsub+0x222>
 8001e22:	0324      	lsls	r4, r4, #12
 8001e24:	0b25      	lsrs	r5, r4, #12
 8001e26:	057c      	lsls	r4, r7, #21
 8001e28:	0d64      	lsrs	r4, r4, #21
 8001e2a:	e6c2      	b.n	8001bb2 <__aeabi_dsub+0x152>
 8001e2c:	46ca      	mov	sl, r9
 8001e2e:	0022      	movs	r2, r4
 8001e30:	4302      	orrs	r2, r0
 8001e32:	d158      	bne.n	8001ee6 <__aeabi_dsub+0x486>
 8001e34:	4663      	mov	r3, ip
 8001e36:	000e      	movs	r6, r1
 8001e38:	9c02      	ldr	r4, [sp, #8]
 8001e3a:	9303      	str	r3, [sp, #12]
 8001e3c:	9b03      	ldr	r3, [sp, #12]
 8001e3e:	4657      	mov	r7, sl
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	e7e7      	b.n	8001e14 <__aeabi_dsub+0x3b4>
 8001e44:	4cc9      	ldr	r4, [pc, #804]	@ (800216c <__aeabi_dsub+0x70c>)
 8001e46:	1aff      	subs	r7, r7, r3
 8001e48:	4014      	ands	r4, r2
 8001e4a:	e692      	b.n	8001b72 <__aeabi_dsub+0x112>
 8001e4c:	4dc8      	ldr	r5, [pc, #800]	@ (8002170 <__aeabi_dsub+0x710>)
 8001e4e:	1c7a      	adds	r2, r7, #1
 8001e50:	422a      	tst	r2, r5
 8001e52:	d000      	beq.n	8001e56 <__aeabi_dsub+0x3f6>
 8001e54:	e084      	b.n	8001f60 <__aeabi_dsub+0x500>
 8001e56:	0022      	movs	r2, r4
 8001e58:	4302      	orrs	r2, r0
 8001e5a:	2f00      	cmp	r7, #0
 8001e5c:	d000      	beq.n	8001e60 <__aeabi_dsub+0x400>
 8001e5e:	e0ef      	b.n	8002040 <__aeabi_dsub+0x5e0>
 8001e60:	2a00      	cmp	r2, #0
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dsub+0x406>
 8001e64:	e0e5      	b.n	8002032 <__aeabi_dsub+0x5d2>
 8001e66:	4662      	mov	r2, ip
 8001e68:	9902      	ldr	r1, [sp, #8]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x410>
 8001e6e:	e0c5      	b.n	8001ffc <__aeabi_dsub+0x59c>
 8001e70:	4663      	mov	r3, ip
 8001e72:	18c5      	adds	r5, r0, r3
 8001e74:	468c      	mov	ip, r1
 8001e76:	4285      	cmp	r5, r0
 8001e78:	4180      	sbcs	r0, r0
 8001e7a:	4464      	add	r4, ip
 8001e7c:	4240      	negs	r0, r0
 8001e7e:	1824      	adds	r4, r4, r0
 8001e80:	0223      	lsls	r3, r4, #8
 8001e82:	d502      	bpl.n	8001e8a <__aeabi_dsub+0x42a>
 8001e84:	4bb9      	ldr	r3, [pc, #740]	@ (800216c <__aeabi_dsub+0x70c>)
 8001e86:	3701      	adds	r7, #1
 8001e88:	401c      	ands	r4, r3
 8001e8a:	46ba      	mov	sl, r7
 8001e8c:	9503      	str	r5, [sp, #12]
 8001e8e:	e7d5      	b.n	8001e3c <__aeabi_dsub+0x3dc>
 8001e90:	4662      	mov	r2, ip
 8001e92:	1a85      	subs	r5, r0, r2
 8001e94:	42a8      	cmp	r0, r5
 8001e96:	4192      	sbcs	r2, r2
 8001e98:	4252      	negs	r2, r2
 8001e9a:	4691      	mov	r9, r2
 8001e9c:	9b02      	ldr	r3, [sp, #8]
 8001e9e:	1ae3      	subs	r3, r4, r3
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	1ad2      	subs	r2, r2, r3
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	4691      	mov	r9, r2
 8001eaa:	021a      	lsls	r2, r3, #8
 8001eac:	d46c      	bmi.n	8001f88 <__aeabi_dsub+0x528>
 8001eae:	464a      	mov	r2, r9
 8001eb0:	464c      	mov	r4, r9
 8001eb2:	432a      	orrs	r2, r5
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_dsub+0x458>
 8001eb6:	e63a      	b.n	8001b2e <__aeabi_dsub+0xce>
 8001eb8:	2600      	movs	r6, #0
 8001eba:	2400      	movs	r4, #0
 8001ebc:	2500      	movs	r5, #0
 8001ebe:	e678      	b.n	8001bb2 <__aeabi_dsub+0x152>
 8001ec0:	9902      	ldr	r1, [sp, #8]
 8001ec2:	4653      	mov	r3, sl
 8001ec4:	000d      	movs	r5, r1
 8001ec6:	3a20      	subs	r2, #32
 8001ec8:	40d5      	lsrs	r5, r2
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d006      	beq.n	8001edc <__aeabi_dsub+0x47c>
 8001ece:	2240      	movs	r2, #64	@ 0x40
 8001ed0:	1ad2      	subs	r2, r2, r3
 8001ed2:	000b      	movs	r3, r1
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	4662      	mov	r2, ip
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	4693      	mov	fp, r2
 8001edc:	465b      	mov	r3, fp
 8001ede:	1e5a      	subs	r2, r3, #1
 8001ee0:	4193      	sbcs	r3, r2
 8001ee2:	431d      	orrs	r5, r3
 8001ee4:	e619      	b.n	8001b1a <__aeabi_dsub+0xba>
 8001ee6:	4653      	mov	r3, sl
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dsub+0x490>
 8001eee:	e0c6      	b.n	800207e <__aeabi_dsub+0x61e>
 8001ef0:	4e9d      	ldr	r6, [pc, #628]	@ (8002168 <__aeabi_dsub+0x708>)
 8001ef2:	45b2      	cmp	sl, r6
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dsub+0x498>
 8001ef6:	e6bd      	b.n	8001c74 <__aeabi_dsub+0x214>
 8001ef8:	4688      	mov	r8, r1
 8001efa:	000e      	movs	r6, r1
 8001efc:	2501      	movs	r5, #1
 8001efe:	2a38      	cmp	r2, #56	@ 0x38
 8001f00:	dc10      	bgt.n	8001f24 <__aeabi_dsub+0x4c4>
 8001f02:	2a1f      	cmp	r2, #31
 8001f04:	dc7f      	bgt.n	8002006 <__aeabi_dsub+0x5a6>
 8001f06:	2120      	movs	r1, #32
 8001f08:	0025      	movs	r5, r4
 8001f0a:	1a89      	subs	r1, r1, r2
 8001f0c:	0007      	movs	r7, r0
 8001f0e:	4088      	lsls	r0, r1
 8001f10:	408d      	lsls	r5, r1
 8001f12:	40d7      	lsrs	r7, r2
 8001f14:	40d4      	lsrs	r4, r2
 8001f16:	1e41      	subs	r1, r0, #1
 8001f18:	4188      	sbcs	r0, r1
 8001f1a:	9b02      	ldr	r3, [sp, #8]
 8001f1c:	433d      	orrs	r5, r7
 8001f1e:	1b1b      	subs	r3, r3, r4
 8001f20:	4305      	orrs	r5, r0
 8001f22:	9302      	str	r3, [sp, #8]
 8001f24:	4662      	mov	r2, ip
 8001f26:	1b55      	subs	r5, r2, r5
 8001f28:	45ac      	cmp	ip, r5
 8001f2a:	4192      	sbcs	r2, r2
 8001f2c:	9b02      	ldr	r3, [sp, #8]
 8001f2e:	4252      	negs	r2, r2
 8001f30:	464f      	mov	r7, r9
 8001f32:	1a9c      	subs	r4, r3, r2
 8001f34:	e5f6      	b.n	8001b24 <__aeabi_dsub+0xc4>
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	d000      	beq.n	8001f3c <__aeabi_dsub+0x4dc>
 8001f3a:	e0b7      	b.n	80020ac <__aeabi_dsub+0x64c>
 8001f3c:	2a00      	cmp	r2, #0
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_dsub+0x4e2>
 8001f40:	e0f0      	b.n	8002124 <__aeabi_dsub+0x6c4>
 8001f42:	2601      	movs	r6, #1
 8001f44:	400e      	ands	r6, r1
 8001f46:	4663      	mov	r3, ip
 8001f48:	9802      	ldr	r0, [sp, #8]
 8001f4a:	08d9      	lsrs	r1, r3, #3
 8001f4c:	0742      	lsls	r2, r0, #29
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	08c4      	lsrs	r4, r0, #3
 8001f52:	e696      	b.n	8001c82 <__aeabi_dsub+0x222>
 8001f54:	4c85      	ldr	r4, [pc, #532]	@ (800216c <__aeabi_dsub+0x70c>)
 8001f56:	1aff      	subs	r7, r7, r3
 8001f58:	4014      	ands	r4, r2
 8001f5a:	0762      	lsls	r2, r4, #29
 8001f5c:	08e4      	lsrs	r4, r4, #3
 8001f5e:	e760      	b.n	8001e22 <__aeabi_dsub+0x3c2>
 8001f60:	4981      	ldr	r1, [pc, #516]	@ (8002168 <__aeabi_dsub+0x708>)
 8001f62:	428a      	cmp	r2, r1
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x508>
 8001f66:	e0c9      	b.n	80020fc <__aeabi_dsub+0x69c>
 8001f68:	4663      	mov	r3, ip
 8001f6a:	18c1      	adds	r1, r0, r3
 8001f6c:	4281      	cmp	r1, r0
 8001f6e:	4180      	sbcs	r0, r0
 8001f70:	9b02      	ldr	r3, [sp, #8]
 8001f72:	4240      	negs	r0, r0
 8001f74:	18e3      	adds	r3, r4, r3
 8001f76:	181b      	adds	r3, r3, r0
 8001f78:	07dd      	lsls	r5, r3, #31
 8001f7a:	085c      	lsrs	r4, r3, #1
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	0849      	lsrs	r1, r1, #1
 8001f80:	430d      	orrs	r5, r1
 8001f82:	0017      	movs	r7, r2
 8001f84:	402b      	ands	r3, r5
 8001f86:	e710      	b.n	8001daa <__aeabi_dsub+0x34a>
 8001f88:	4663      	mov	r3, ip
 8001f8a:	1a1d      	subs	r5, r3, r0
 8001f8c:	45ac      	cmp	ip, r5
 8001f8e:	4192      	sbcs	r2, r2
 8001f90:	2601      	movs	r6, #1
 8001f92:	9b02      	ldr	r3, [sp, #8]
 8001f94:	4252      	negs	r2, r2
 8001f96:	1b1c      	subs	r4, r3, r4
 8001f98:	4688      	mov	r8, r1
 8001f9a:	1aa4      	subs	r4, r4, r2
 8001f9c:	400e      	ands	r6, r1
 8001f9e:	e5c6      	b.n	8001b2e <__aeabi_dsub+0xce>
 8001fa0:	4663      	mov	r3, ip
 8001fa2:	18c5      	adds	r5, r0, r3
 8001fa4:	9b02      	ldr	r3, [sp, #8]
 8001fa6:	4285      	cmp	r5, r0
 8001fa8:	4180      	sbcs	r0, r0
 8001faa:	469c      	mov	ip, r3
 8001fac:	4240      	negs	r0, r0
 8001fae:	4464      	add	r4, ip
 8001fb0:	1824      	adds	r4, r4, r0
 8001fb2:	2701      	movs	r7, #1
 8001fb4:	0223      	lsls	r3, r4, #8
 8001fb6:	d400      	bmi.n	8001fba <__aeabi_dsub+0x55a>
 8001fb8:	e6f5      	b.n	8001da6 <__aeabi_dsub+0x346>
 8001fba:	2702      	movs	r7, #2
 8001fbc:	e641      	b.n	8001c42 <__aeabi_dsub+0x1e2>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	1ac5      	subs	r5, r0, r3
 8001fc2:	42a8      	cmp	r0, r5
 8001fc4:	4180      	sbcs	r0, r0
 8001fc6:	9b02      	ldr	r3, [sp, #8]
 8001fc8:	4240      	negs	r0, r0
 8001fca:	1ae4      	subs	r4, r4, r3
 8001fcc:	2701      	movs	r7, #1
 8001fce:	1a24      	subs	r4, r4, r0
 8001fd0:	e5a8      	b.n	8001b24 <__aeabi_dsub+0xc4>
 8001fd2:	9d02      	ldr	r5, [sp, #8]
 8001fd4:	4652      	mov	r2, sl
 8001fd6:	002b      	movs	r3, r5
 8001fd8:	3a20      	subs	r2, #32
 8001fda:	40d3      	lsrs	r3, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	4653      	mov	r3, sl
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d006      	beq.n	8001ff2 <__aeabi_dsub+0x592>
 8001fe4:	2240      	movs	r2, #64	@ 0x40
 8001fe6:	1ad2      	subs	r2, r2, r3
 8001fe8:	002b      	movs	r3, r5
 8001fea:	4093      	lsls	r3, r2
 8001fec:	4662      	mov	r2, ip
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	4693      	mov	fp, r2
 8001ff2:	465d      	mov	r5, fp
 8001ff4:	1e6b      	subs	r3, r5, #1
 8001ff6:	419d      	sbcs	r5, r3
 8001ff8:	430d      	orrs	r5, r1
 8001ffa:	e615      	b.n	8001c28 <__aeabi_dsub+0x1c8>
 8001ffc:	0762      	lsls	r2, r4, #29
 8001ffe:	08c0      	lsrs	r0, r0, #3
 8002000:	4302      	orrs	r2, r0
 8002002:	08e4      	lsrs	r4, r4, #3
 8002004:	e70d      	b.n	8001e22 <__aeabi_dsub+0x3c2>
 8002006:	0011      	movs	r1, r2
 8002008:	0027      	movs	r7, r4
 800200a:	3920      	subs	r1, #32
 800200c:	40cf      	lsrs	r7, r1
 800200e:	2a20      	cmp	r2, #32
 8002010:	d005      	beq.n	800201e <__aeabi_dsub+0x5be>
 8002012:	2140      	movs	r1, #64	@ 0x40
 8002014:	1a8a      	subs	r2, r1, r2
 8002016:	4094      	lsls	r4, r2
 8002018:	0025      	movs	r5, r4
 800201a:	4305      	orrs	r5, r0
 800201c:	9503      	str	r5, [sp, #12]
 800201e:	9d03      	ldr	r5, [sp, #12]
 8002020:	1e6a      	subs	r2, r5, #1
 8002022:	4195      	sbcs	r5, r2
 8002024:	433d      	orrs	r5, r7
 8002026:	e77d      	b.n	8001f24 <__aeabi_dsub+0x4c4>
 8002028:	2a00      	cmp	r2, #0
 800202a:	d100      	bne.n	800202e <__aeabi_dsub+0x5ce>
 800202c:	e744      	b.n	8001eb8 <__aeabi_dsub+0x458>
 800202e:	2601      	movs	r6, #1
 8002030:	400e      	ands	r6, r1
 8002032:	4663      	mov	r3, ip
 8002034:	08d9      	lsrs	r1, r3, #3
 8002036:	9b02      	ldr	r3, [sp, #8]
 8002038:	075a      	lsls	r2, r3, #29
 800203a:	430a      	orrs	r2, r1
 800203c:	08dc      	lsrs	r4, r3, #3
 800203e:	e6f0      	b.n	8001e22 <__aeabi_dsub+0x3c2>
 8002040:	2a00      	cmp	r2, #0
 8002042:	d028      	beq.n	8002096 <__aeabi_dsub+0x636>
 8002044:	4662      	mov	r2, ip
 8002046:	9f02      	ldr	r7, [sp, #8]
 8002048:	08c0      	lsrs	r0, r0, #3
 800204a:	433a      	orrs	r2, r7
 800204c:	d100      	bne.n	8002050 <__aeabi_dsub+0x5f0>
 800204e:	e6dc      	b.n	8001e0a <__aeabi_dsub+0x3aa>
 8002050:	0762      	lsls	r2, r4, #29
 8002052:	4310      	orrs	r0, r2
 8002054:	2280      	movs	r2, #128	@ 0x80
 8002056:	08e4      	lsrs	r4, r4, #3
 8002058:	0312      	lsls	r2, r2, #12
 800205a:	4214      	tst	r4, r2
 800205c:	d009      	beq.n	8002072 <__aeabi_dsub+0x612>
 800205e:	08fd      	lsrs	r5, r7, #3
 8002060:	4215      	tst	r5, r2
 8002062:	d106      	bne.n	8002072 <__aeabi_dsub+0x612>
 8002064:	4663      	mov	r3, ip
 8002066:	2601      	movs	r6, #1
 8002068:	002c      	movs	r4, r5
 800206a:	08d8      	lsrs	r0, r3, #3
 800206c:	077b      	lsls	r3, r7, #29
 800206e:	4318      	orrs	r0, r3
 8002070:	400e      	ands	r6, r1
 8002072:	0f42      	lsrs	r2, r0, #29
 8002074:	00c0      	lsls	r0, r0, #3
 8002076:	08c0      	lsrs	r0, r0, #3
 8002078:	0752      	lsls	r2, r2, #29
 800207a:	4302      	orrs	r2, r0
 800207c:	e601      	b.n	8001c82 <__aeabi_dsub+0x222>
 800207e:	4663      	mov	r3, ip
 8002080:	1a1d      	subs	r5, r3, r0
 8002082:	45ac      	cmp	ip, r5
 8002084:	4192      	sbcs	r2, r2
 8002086:	9b02      	ldr	r3, [sp, #8]
 8002088:	4252      	negs	r2, r2
 800208a:	1b1c      	subs	r4, r3, r4
 800208c:	000e      	movs	r6, r1
 800208e:	4688      	mov	r8, r1
 8002090:	2701      	movs	r7, #1
 8002092:	1aa4      	subs	r4, r4, r2
 8002094:	e546      	b.n	8001b24 <__aeabi_dsub+0xc4>
 8002096:	4663      	mov	r3, ip
 8002098:	08d9      	lsrs	r1, r3, #3
 800209a:	9b02      	ldr	r3, [sp, #8]
 800209c:	075a      	lsls	r2, r3, #29
 800209e:	430a      	orrs	r2, r1
 80020a0:	08dc      	lsrs	r4, r3, #3
 80020a2:	e5ee      	b.n	8001c82 <__aeabi_dsub+0x222>
 80020a4:	4663      	mov	r3, ip
 80020a6:	9c02      	ldr	r4, [sp, #8]
 80020a8:	9303      	str	r3, [sp, #12]
 80020aa:	e6c7      	b.n	8001e3c <__aeabi_dsub+0x3dc>
 80020ac:	08c0      	lsrs	r0, r0, #3
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d100      	bne.n	80020b4 <__aeabi_dsub+0x654>
 80020b2:	e6aa      	b.n	8001e0a <__aeabi_dsub+0x3aa>
 80020b4:	0762      	lsls	r2, r4, #29
 80020b6:	4310      	orrs	r0, r2
 80020b8:	2280      	movs	r2, #128	@ 0x80
 80020ba:	08e4      	lsrs	r4, r4, #3
 80020bc:	0312      	lsls	r2, r2, #12
 80020be:	4214      	tst	r4, r2
 80020c0:	d0d7      	beq.n	8002072 <__aeabi_dsub+0x612>
 80020c2:	9f02      	ldr	r7, [sp, #8]
 80020c4:	08fd      	lsrs	r5, r7, #3
 80020c6:	4215      	tst	r5, r2
 80020c8:	d1d3      	bne.n	8002072 <__aeabi_dsub+0x612>
 80020ca:	4663      	mov	r3, ip
 80020cc:	2601      	movs	r6, #1
 80020ce:	08d8      	lsrs	r0, r3, #3
 80020d0:	077b      	lsls	r3, r7, #29
 80020d2:	002c      	movs	r4, r5
 80020d4:	4318      	orrs	r0, r3
 80020d6:	400e      	ands	r6, r1
 80020d8:	e7cb      	b.n	8002072 <__aeabi_dsub+0x612>
 80020da:	000a      	movs	r2, r1
 80020dc:	0027      	movs	r7, r4
 80020de:	3a20      	subs	r2, #32
 80020e0:	40d7      	lsrs	r7, r2
 80020e2:	2920      	cmp	r1, #32
 80020e4:	d005      	beq.n	80020f2 <__aeabi_dsub+0x692>
 80020e6:	2240      	movs	r2, #64	@ 0x40
 80020e8:	1a52      	subs	r2, r2, r1
 80020ea:	4094      	lsls	r4, r2
 80020ec:	0025      	movs	r5, r4
 80020ee:	4305      	orrs	r5, r0
 80020f0:	9503      	str	r5, [sp, #12]
 80020f2:	9d03      	ldr	r5, [sp, #12]
 80020f4:	1e6a      	subs	r2, r5, #1
 80020f6:	4195      	sbcs	r5, r2
 80020f8:	432f      	orrs	r7, r5
 80020fa:	e610      	b.n	8001d1e <__aeabi_dsub+0x2be>
 80020fc:	0014      	movs	r4, r2
 80020fe:	2500      	movs	r5, #0
 8002100:	2200      	movs	r2, #0
 8002102:	e556      	b.n	8001bb2 <__aeabi_dsub+0x152>
 8002104:	9b02      	ldr	r3, [sp, #8]
 8002106:	4460      	add	r0, ip
 8002108:	4699      	mov	r9, r3
 800210a:	4560      	cmp	r0, ip
 800210c:	4192      	sbcs	r2, r2
 800210e:	444c      	add	r4, r9
 8002110:	4252      	negs	r2, r2
 8002112:	0005      	movs	r5, r0
 8002114:	18a4      	adds	r4, r4, r2
 8002116:	e74c      	b.n	8001fb2 <__aeabi_dsub+0x552>
 8002118:	001a      	movs	r2, r3
 800211a:	001c      	movs	r4, r3
 800211c:	432a      	orrs	r2, r5
 800211e:	d000      	beq.n	8002122 <__aeabi_dsub+0x6c2>
 8002120:	e6b3      	b.n	8001e8a <__aeabi_dsub+0x42a>
 8002122:	e6c9      	b.n	8001eb8 <__aeabi_dsub+0x458>
 8002124:	2480      	movs	r4, #128	@ 0x80
 8002126:	2600      	movs	r6, #0
 8002128:	0324      	lsls	r4, r4, #12
 800212a:	e5ae      	b.n	8001c8a <__aeabi_dsub+0x22a>
 800212c:	2120      	movs	r1, #32
 800212e:	2500      	movs	r5, #0
 8002130:	1a09      	subs	r1, r1, r0
 8002132:	e517      	b.n	8001b64 <__aeabi_dsub+0x104>
 8002134:	2200      	movs	r2, #0
 8002136:	2500      	movs	r5, #0
 8002138:	4c0b      	ldr	r4, [pc, #44]	@ (8002168 <__aeabi_dsub+0x708>)
 800213a:	e53a      	b.n	8001bb2 <__aeabi_dsub+0x152>
 800213c:	2d00      	cmp	r5, #0
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x6e2>
 8002140:	e5f6      	b.n	8001d30 <__aeabi_dsub+0x2d0>
 8002142:	464b      	mov	r3, r9
 8002144:	1bda      	subs	r2, r3, r7
 8002146:	4692      	mov	sl, r2
 8002148:	2f00      	cmp	r7, #0
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x6ee>
 800214c:	e66f      	b.n	8001e2e <__aeabi_dsub+0x3ce>
 800214e:	2a38      	cmp	r2, #56	@ 0x38
 8002150:	dc05      	bgt.n	800215e <__aeabi_dsub+0x6fe>
 8002152:	2680      	movs	r6, #128	@ 0x80
 8002154:	0436      	lsls	r6, r6, #16
 8002156:	4334      	orrs	r4, r6
 8002158:	4688      	mov	r8, r1
 800215a:	000e      	movs	r6, r1
 800215c:	e6d1      	b.n	8001f02 <__aeabi_dsub+0x4a2>
 800215e:	4688      	mov	r8, r1
 8002160:	000e      	movs	r6, r1
 8002162:	2501      	movs	r5, #1
 8002164:	e6de      	b.n	8001f24 <__aeabi_dsub+0x4c4>
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	000007ff 	.word	0x000007ff
 800216c:	ff7fffff 	.word	0xff7fffff
 8002170:	000007fe 	.word	0x000007fe
 8002174:	2d00      	cmp	r5, #0
 8002176:	d100      	bne.n	800217a <__aeabi_dsub+0x71a>
 8002178:	e668      	b.n	8001e4c <__aeabi_dsub+0x3ec>
 800217a:	464b      	mov	r3, r9
 800217c:	1bd9      	subs	r1, r3, r7
 800217e:	2f00      	cmp	r7, #0
 8002180:	d101      	bne.n	8002186 <__aeabi_dsub+0x726>
 8002182:	468a      	mov	sl, r1
 8002184:	e5a7      	b.n	8001cd6 <__aeabi_dsub+0x276>
 8002186:	2701      	movs	r7, #1
 8002188:	2938      	cmp	r1, #56	@ 0x38
 800218a:	dd00      	ble.n	800218e <__aeabi_dsub+0x72e>
 800218c:	e5c7      	b.n	8001d1e <__aeabi_dsub+0x2be>
 800218e:	2280      	movs	r2, #128	@ 0x80
 8002190:	0412      	lsls	r2, r2, #16
 8002192:	4314      	orrs	r4, r2
 8002194:	e5af      	b.n	8001cf6 <__aeabi_dsub+0x296>
 8002196:	46c0      	nop			@ (mov r8, r8)

08002198 <__aeabi_dcmpun>:
 8002198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219a:	46c6      	mov	lr, r8
 800219c:	031e      	lsls	r6, r3, #12
 800219e:	0b36      	lsrs	r6, r6, #12
 80021a0:	46b0      	mov	r8, r6
 80021a2:	4e0d      	ldr	r6, [pc, #52]	@ (80021d8 <__aeabi_dcmpun+0x40>)
 80021a4:	030c      	lsls	r4, r1, #12
 80021a6:	004d      	lsls	r5, r1, #1
 80021a8:	005f      	lsls	r7, r3, #1
 80021aa:	b500      	push	{lr}
 80021ac:	0b24      	lsrs	r4, r4, #12
 80021ae:	0d6d      	lsrs	r5, r5, #21
 80021b0:	0d7f      	lsrs	r7, r7, #21
 80021b2:	42b5      	cmp	r5, r6
 80021b4:	d00b      	beq.n	80021ce <__aeabi_dcmpun+0x36>
 80021b6:	4908      	ldr	r1, [pc, #32]	@ (80021d8 <__aeabi_dcmpun+0x40>)
 80021b8:	2000      	movs	r0, #0
 80021ba:	428f      	cmp	r7, r1
 80021bc:	d104      	bne.n	80021c8 <__aeabi_dcmpun+0x30>
 80021be:	4646      	mov	r6, r8
 80021c0:	4316      	orrs	r6, r2
 80021c2:	0030      	movs	r0, r6
 80021c4:	1e43      	subs	r3, r0, #1
 80021c6:	4198      	sbcs	r0, r3
 80021c8:	bc80      	pop	{r7}
 80021ca:	46b8      	mov	r8, r7
 80021cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ce:	4304      	orrs	r4, r0
 80021d0:	2001      	movs	r0, #1
 80021d2:	2c00      	cmp	r4, #0
 80021d4:	d1f8      	bne.n	80021c8 <__aeabi_dcmpun+0x30>
 80021d6:	e7ee      	b.n	80021b6 <__aeabi_dcmpun+0x1e>
 80021d8:	000007ff 	.word	0x000007ff

080021dc <__aeabi_d2iz>:
 80021dc:	000b      	movs	r3, r1
 80021de:	0002      	movs	r2, r0
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	4d16      	ldr	r5, [pc, #88]	@ (800223c <__aeabi_d2iz+0x60>)
 80021e4:	030c      	lsls	r4, r1, #12
 80021e6:	b082      	sub	sp, #8
 80021e8:	0049      	lsls	r1, r1, #1
 80021ea:	2000      	movs	r0, #0
 80021ec:	9200      	str	r2, [sp, #0]
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	0b24      	lsrs	r4, r4, #12
 80021f2:	0d49      	lsrs	r1, r1, #21
 80021f4:	0fde      	lsrs	r6, r3, #31
 80021f6:	42a9      	cmp	r1, r5
 80021f8:	dd04      	ble.n	8002204 <__aeabi_d2iz+0x28>
 80021fa:	4811      	ldr	r0, [pc, #68]	@ (8002240 <__aeabi_d2iz+0x64>)
 80021fc:	4281      	cmp	r1, r0
 80021fe:	dd03      	ble.n	8002208 <__aeabi_d2iz+0x2c>
 8002200:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <__aeabi_d2iz+0x68>)
 8002202:	18f0      	adds	r0, r6, r3
 8002204:	b002      	add	sp, #8
 8002206:	bd70      	pop	{r4, r5, r6, pc}
 8002208:	2080      	movs	r0, #128	@ 0x80
 800220a:	0340      	lsls	r0, r0, #13
 800220c:	4320      	orrs	r0, r4
 800220e:	4c0e      	ldr	r4, [pc, #56]	@ (8002248 <__aeabi_d2iz+0x6c>)
 8002210:	1a64      	subs	r4, r4, r1
 8002212:	2c1f      	cmp	r4, #31
 8002214:	dd08      	ble.n	8002228 <__aeabi_d2iz+0x4c>
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <__aeabi_d2iz+0x70>)
 8002218:	1a5b      	subs	r3, r3, r1
 800221a:	40d8      	lsrs	r0, r3
 800221c:	0003      	movs	r3, r0
 800221e:	4258      	negs	r0, r3
 8002220:	2e00      	cmp	r6, #0
 8002222:	d1ef      	bne.n	8002204 <__aeabi_d2iz+0x28>
 8002224:	0018      	movs	r0, r3
 8002226:	e7ed      	b.n	8002204 <__aeabi_d2iz+0x28>
 8002228:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <__aeabi_d2iz+0x74>)
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	469c      	mov	ip, r3
 800222e:	0003      	movs	r3, r0
 8002230:	4461      	add	r1, ip
 8002232:	408b      	lsls	r3, r1
 8002234:	40e2      	lsrs	r2, r4
 8002236:	4313      	orrs	r3, r2
 8002238:	e7f1      	b.n	800221e <__aeabi_d2iz+0x42>
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	000003fe 	.word	0x000003fe
 8002240:	0000041d 	.word	0x0000041d
 8002244:	7fffffff 	.word	0x7fffffff
 8002248:	00000433 	.word	0x00000433
 800224c:	00000413 	.word	0x00000413
 8002250:	fffffbed 	.word	0xfffffbed

08002254 <__aeabi_i2d>:
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	2800      	cmp	r0, #0
 8002258:	d016      	beq.n	8002288 <__aeabi_i2d+0x34>
 800225a:	17c3      	asrs	r3, r0, #31
 800225c:	18c5      	adds	r5, r0, r3
 800225e:	405d      	eors	r5, r3
 8002260:	0fc4      	lsrs	r4, r0, #31
 8002262:	0028      	movs	r0, r5
 8002264:	f000 f914 	bl	8002490 <__clzsi2>
 8002268:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <__aeabi_i2d+0x58>)
 800226a:	1a1b      	subs	r3, r3, r0
 800226c:	055b      	lsls	r3, r3, #21
 800226e:	0d5b      	lsrs	r3, r3, #21
 8002270:	280a      	cmp	r0, #10
 8002272:	dc14      	bgt.n	800229e <__aeabi_i2d+0x4a>
 8002274:	0002      	movs	r2, r0
 8002276:	002e      	movs	r6, r5
 8002278:	3215      	adds	r2, #21
 800227a:	4096      	lsls	r6, r2
 800227c:	220b      	movs	r2, #11
 800227e:	1a12      	subs	r2, r2, r0
 8002280:	40d5      	lsrs	r5, r2
 8002282:	032d      	lsls	r5, r5, #12
 8002284:	0b2d      	lsrs	r5, r5, #12
 8002286:	e003      	b.n	8002290 <__aeabi_i2d+0x3c>
 8002288:	2400      	movs	r4, #0
 800228a:	2300      	movs	r3, #0
 800228c:	2500      	movs	r5, #0
 800228e:	2600      	movs	r6, #0
 8002290:	051b      	lsls	r3, r3, #20
 8002292:	432b      	orrs	r3, r5
 8002294:	07e4      	lsls	r4, r4, #31
 8002296:	4323      	orrs	r3, r4
 8002298:	0030      	movs	r0, r6
 800229a:	0019      	movs	r1, r3
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	380b      	subs	r0, #11
 80022a0:	4085      	lsls	r5, r0
 80022a2:	032d      	lsls	r5, r5, #12
 80022a4:	2600      	movs	r6, #0
 80022a6:	0b2d      	lsrs	r5, r5, #12
 80022a8:	e7f2      	b.n	8002290 <__aeabi_i2d+0x3c>
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	0000041e 	.word	0x0000041e

080022b0 <__aeabi_ui2d>:
 80022b0:	b510      	push	{r4, lr}
 80022b2:	1e04      	subs	r4, r0, #0
 80022b4:	d010      	beq.n	80022d8 <__aeabi_ui2d+0x28>
 80022b6:	f000 f8eb 	bl	8002490 <__clzsi2>
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <__aeabi_ui2d+0x44>)
 80022bc:	1a1b      	subs	r3, r3, r0
 80022be:	055b      	lsls	r3, r3, #21
 80022c0:	0d5b      	lsrs	r3, r3, #21
 80022c2:	280a      	cmp	r0, #10
 80022c4:	dc0f      	bgt.n	80022e6 <__aeabi_ui2d+0x36>
 80022c6:	220b      	movs	r2, #11
 80022c8:	0021      	movs	r1, r4
 80022ca:	1a12      	subs	r2, r2, r0
 80022cc:	40d1      	lsrs	r1, r2
 80022ce:	3015      	adds	r0, #21
 80022d0:	030a      	lsls	r2, r1, #12
 80022d2:	4084      	lsls	r4, r0
 80022d4:	0b12      	lsrs	r2, r2, #12
 80022d6:	e001      	b.n	80022dc <__aeabi_ui2d+0x2c>
 80022d8:	2300      	movs	r3, #0
 80022da:	2200      	movs	r2, #0
 80022dc:	051b      	lsls	r3, r3, #20
 80022de:	4313      	orrs	r3, r2
 80022e0:	0020      	movs	r0, r4
 80022e2:	0019      	movs	r1, r3
 80022e4:	bd10      	pop	{r4, pc}
 80022e6:	0022      	movs	r2, r4
 80022e8:	380b      	subs	r0, #11
 80022ea:	4082      	lsls	r2, r0
 80022ec:	0312      	lsls	r2, r2, #12
 80022ee:	2400      	movs	r4, #0
 80022f0:	0b12      	lsrs	r2, r2, #12
 80022f2:	e7f3      	b.n	80022dc <__aeabi_ui2d+0x2c>
 80022f4:	0000041e 	.word	0x0000041e

080022f8 <__aeabi_f2d>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0242      	lsls	r2, r0, #9
 80022fc:	0043      	lsls	r3, r0, #1
 80022fe:	0fc4      	lsrs	r4, r0, #31
 8002300:	20fe      	movs	r0, #254	@ 0xfe
 8002302:	0e1b      	lsrs	r3, r3, #24
 8002304:	1c59      	adds	r1, r3, #1
 8002306:	0a55      	lsrs	r5, r2, #9
 8002308:	4208      	tst	r0, r1
 800230a:	d00c      	beq.n	8002326 <__aeabi_f2d+0x2e>
 800230c:	21e0      	movs	r1, #224	@ 0xe0
 800230e:	0089      	lsls	r1, r1, #2
 8002310:	468c      	mov	ip, r1
 8002312:	076d      	lsls	r5, r5, #29
 8002314:	0b12      	lsrs	r2, r2, #12
 8002316:	4463      	add	r3, ip
 8002318:	051b      	lsls	r3, r3, #20
 800231a:	4313      	orrs	r3, r2
 800231c:	07e4      	lsls	r4, r4, #31
 800231e:	4323      	orrs	r3, r4
 8002320:	0028      	movs	r0, r5
 8002322:	0019      	movs	r1, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	2b00      	cmp	r3, #0
 8002328:	d114      	bne.n	8002354 <__aeabi_f2d+0x5c>
 800232a:	2d00      	cmp	r5, #0
 800232c:	d01b      	beq.n	8002366 <__aeabi_f2d+0x6e>
 800232e:	0028      	movs	r0, r5
 8002330:	f000 f8ae 	bl	8002490 <__clzsi2>
 8002334:	280a      	cmp	r0, #10
 8002336:	dc1c      	bgt.n	8002372 <__aeabi_f2d+0x7a>
 8002338:	230b      	movs	r3, #11
 800233a:	002a      	movs	r2, r5
 800233c:	1a1b      	subs	r3, r3, r0
 800233e:	40da      	lsrs	r2, r3
 8002340:	0003      	movs	r3, r0
 8002342:	3315      	adds	r3, #21
 8002344:	409d      	lsls	r5, r3
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <__aeabi_f2d+0x88>)
 8002348:	0312      	lsls	r2, r2, #12
 800234a:	1a1b      	subs	r3, r3, r0
 800234c:	055b      	lsls	r3, r3, #21
 800234e:	0b12      	lsrs	r2, r2, #12
 8002350:	0d5b      	lsrs	r3, r3, #21
 8002352:	e7e1      	b.n	8002318 <__aeabi_f2d+0x20>
 8002354:	2d00      	cmp	r5, #0
 8002356:	d009      	beq.n	800236c <__aeabi_f2d+0x74>
 8002358:	0b13      	lsrs	r3, r2, #12
 800235a:	2280      	movs	r2, #128	@ 0x80
 800235c:	0312      	lsls	r2, r2, #12
 800235e:	431a      	orrs	r2, r3
 8002360:	076d      	lsls	r5, r5, #29
 8002362:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <__aeabi_f2d+0x8c>)
 8002364:	e7d8      	b.n	8002318 <__aeabi_f2d+0x20>
 8002366:	2300      	movs	r3, #0
 8002368:	2200      	movs	r2, #0
 800236a:	e7d5      	b.n	8002318 <__aeabi_f2d+0x20>
 800236c:	2200      	movs	r2, #0
 800236e:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <__aeabi_f2d+0x8c>)
 8002370:	e7d2      	b.n	8002318 <__aeabi_f2d+0x20>
 8002372:	0003      	movs	r3, r0
 8002374:	002a      	movs	r2, r5
 8002376:	3b0b      	subs	r3, #11
 8002378:	409a      	lsls	r2, r3
 800237a:	2500      	movs	r5, #0
 800237c:	e7e3      	b.n	8002346 <__aeabi_f2d+0x4e>
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	00000389 	.word	0x00000389
 8002384:	000007ff 	.word	0x000007ff

08002388 <__aeabi_d2f>:
 8002388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238a:	004b      	lsls	r3, r1, #1
 800238c:	030f      	lsls	r7, r1, #12
 800238e:	0d5b      	lsrs	r3, r3, #21
 8002390:	4c3b      	ldr	r4, [pc, #236]	@ (8002480 <__aeabi_d2f+0xf8>)
 8002392:	0f45      	lsrs	r5, r0, #29
 8002394:	b083      	sub	sp, #12
 8002396:	0a7f      	lsrs	r7, r7, #9
 8002398:	1c5e      	adds	r6, r3, #1
 800239a:	432f      	orrs	r7, r5
 800239c:	9000      	str	r0, [sp, #0]
 800239e:	9101      	str	r1, [sp, #4]
 80023a0:	0fca      	lsrs	r2, r1, #31
 80023a2:	00c5      	lsls	r5, r0, #3
 80023a4:	4226      	tst	r6, r4
 80023a6:	d00b      	beq.n	80023c0 <__aeabi_d2f+0x38>
 80023a8:	4936      	ldr	r1, [pc, #216]	@ (8002484 <__aeabi_d2f+0xfc>)
 80023aa:	185c      	adds	r4, r3, r1
 80023ac:	2cfe      	cmp	r4, #254	@ 0xfe
 80023ae:	dd13      	ble.n	80023d8 <__aeabi_d2f+0x50>
 80023b0:	20ff      	movs	r0, #255	@ 0xff
 80023b2:	2300      	movs	r3, #0
 80023b4:	05c0      	lsls	r0, r0, #23
 80023b6:	4318      	orrs	r0, r3
 80023b8:	07d2      	lsls	r2, r2, #31
 80023ba:	4310      	orrs	r0, r2
 80023bc:	b003      	add	sp, #12
 80023be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <__aeabi_d2f+0x42>
 80023c4:	2000      	movs	r0, #0
 80023c6:	2300      	movs	r3, #0
 80023c8:	e7f4      	b.n	80023b4 <__aeabi_d2f+0x2c>
 80023ca:	433d      	orrs	r5, r7
 80023cc:	d0f0      	beq.n	80023b0 <__aeabi_d2f+0x28>
 80023ce:	2380      	movs	r3, #128	@ 0x80
 80023d0:	03db      	lsls	r3, r3, #15
 80023d2:	20ff      	movs	r0, #255	@ 0xff
 80023d4:	433b      	orrs	r3, r7
 80023d6:	e7ed      	b.n	80023b4 <__aeabi_d2f+0x2c>
 80023d8:	2c00      	cmp	r4, #0
 80023da:	dd14      	ble.n	8002406 <__aeabi_d2f+0x7e>
 80023dc:	9b00      	ldr	r3, [sp, #0]
 80023de:	00ff      	lsls	r7, r7, #3
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	1e58      	subs	r0, r3, #1
 80023e4:	4183      	sbcs	r3, r0
 80023e6:	0f69      	lsrs	r1, r5, #29
 80023e8:	433b      	orrs	r3, r7
 80023ea:	430b      	orrs	r3, r1
 80023ec:	0759      	lsls	r1, r3, #29
 80023ee:	d041      	beq.n	8002474 <__aeabi_d2f+0xec>
 80023f0:	210f      	movs	r1, #15
 80023f2:	4019      	ands	r1, r3
 80023f4:	2904      	cmp	r1, #4
 80023f6:	d028      	beq.n	800244a <__aeabi_d2f+0xc2>
 80023f8:	3304      	adds	r3, #4
 80023fa:	0159      	lsls	r1, r3, #5
 80023fc:	d525      	bpl.n	800244a <__aeabi_d2f+0xc2>
 80023fe:	3401      	adds	r4, #1
 8002400:	2300      	movs	r3, #0
 8002402:	b2e0      	uxtb	r0, r4
 8002404:	e7d6      	b.n	80023b4 <__aeabi_d2f+0x2c>
 8002406:	0021      	movs	r1, r4
 8002408:	3117      	adds	r1, #23
 800240a:	dbdb      	blt.n	80023c4 <__aeabi_d2f+0x3c>
 800240c:	2180      	movs	r1, #128	@ 0x80
 800240e:	201e      	movs	r0, #30
 8002410:	0409      	lsls	r1, r1, #16
 8002412:	4339      	orrs	r1, r7
 8002414:	1b00      	subs	r0, r0, r4
 8002416:	281f      	cmp	r0, #31
 8002418:	dd1b      	ble.n	8002452 <__aeabi_d2f+0xca>
 800241a:	2602      	movs	r6, #2
 800241c:	4276      	negs	r6, r6
 800241e:	1b34      	subs	r4, r6, r4
 8002420:	000e      	movs	r6, r1
 8002422:	40e6      	lsrs	r6, r4
 8002424:	0034      	movs	r4, r6
 8002426:	2820      	cmp	r0, #32
 8002428:	d004      	beq.n	8002434 <__aeabi_d2f+0xac>
 800242a:	4817      	ldr	r0, [pc, #92]	@ (8002488 <__aeabi_d2f+0x100>)
 800242c:	4684      	mov	ip, r0
 800242e:	4463      	add	r3, ip
 8002430:	4099      	lsls	r1, r3
 8002432:	430d      	orrs	r5, r1
 8002434:	002b      	movs	r3, r5
 8002436:	1e59      	subs	r1, r3, #1
 8002438:	418b      	sbcs	r3, r1
 800243a:	4323      	orrs	r3, r4
 800243c:	0759      	lsls	r1, r3, #29
 800243e:	d015      	beq.n	800246c <__aeabi_d2f+0xe4>
 8002440:	210f      	movs	r1, #15
 8002442:	2400      	movs	r4, #0
 8002444:	4019      	ands	r1, r3
 8002446:	2904      	cmp	r1, #4
 8002448:	d117      	bne.n	800247a <__aeabi_d2f+0xf2>
 800244a:	019b      	lsls	r3, r3, #6
 800244c:	0a5b      	lsrs	r3, r3, #9
 800244e:	b2e0      	uxtb	r0, r4
 8002450:	e7b0      	b.n	80023b4 <__aeabi_d2f+0x2c>
 8002452:	4c0e      	ldr	r4, [pc, #56]	@ (800248c <__aeabi_d2f+0x104>)
 8002454:	191c      	adds	r4, r3, r4
 8002456:	002b      	movs	r3, r5
 8002458:	40a5      	lsls	r5, r4
 800245a:	40c3      	lsrs	r3, r0
 800245c:	40a1      	lsls	r1, r4
 800245e:	1e68      	subs	r0, r5, #1
 8002460:	4185      	sbcs	r5, r0
 8002462:	4329      	orrs	r1, r5
 8002464:	430b      	orrs	r3, r1
 8002466:	2400      	movs	r4, #0
 8002468:	0759      	lsls	r1, r3, #29
 800246a:	d1c1      	bne.n	80023f0 <__aeabi_d2f+0x68>
 800246c:	019b      	lsls	r3, r3, #6
 800246e:	2000      	movs	r0, #0
 8002470:	0a5b      	lsrs	r3, r3, #9
 8002472:	e79f      	b.n	80023b4 <__aeabi_d2f+0x2c>
 8002474:	08db      	lsrs	r3, r3, #3
 8002476:	b2e0      	uxtb	r0, r4
 8002478:	e79c      	b.n	80023b4 <__aeabi_d2f+0x2c>
 800247a:	3304      	adds	r3, #4
 800247c:	e7e5      	b.n	800244a <__aeabi_d2f+0xc2>
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	000007fe 	.word	0x000007fe
 8002484:	fffffc80 	.word	0xfffffc80
 8002488:	fffffca2 	.word	0xfffffca2
 800248c:	fffffc82 	.word	0xfffffc82

08002490 <__clzsi2>:
 8002490:	211c      	movs	r1, #28
 8002492:	2301      	movs	r3, #1
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	4298      	cmp	r0, r3
 8002498:	d301      	bcc.n	800249e <__clzsi2+0xe>
 800249a:	0c00      	lsrs	r0, r0, #16
 800249c:	3910      	subs	r1, #16
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	4298      	cmp	r0, r3
 80024a2:	d301      	bcc.n	80024a8 <__clzsi2+0x18>
 80024a4:	0a00      	lsrs	r0, r0, #8
 80024a6:	3908      	subs	r1, #8
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	4298      	cmp	r0, r3
 80024ac:	d301      	bcc.n	80024b2 <__clzsi2+0x22>
 80024ae:	0900      	lsrs	r0, r0, #4
 80024b0:	3904      	subs	r1, #4
 80024b2:	a202      	add	r2, pc, #8	@ (adr r2, 80024bc <__clzsi2+0x2c>)
 80024b4:	5c10      	ldrb	r0, [r2, r0]
 80024b6:	1840      	adds	r0, r0, r1
 80024b8:	4770      	bx	lr
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	02020304 	.word	0x02020304
 80024c0:	01010101 	.word	0x01010101
	...

080024cc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	0018      	movs	r0, r3
 80024d6:	230c      	movs	r3, #12
 80024d8:	001a      	movs	r2, r3
 80024da:	2100      	movs	r1, #0
 80024dc:	f008 fe1e 	bl	800b11c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80024e0:	4b26      	ldr	r3, [pc, #152]	@ (800257c <MX_ADC_Init+0xb0>)
 80024e2:	4a27      	ldr	r2, [pc, #156]	@ (8002580 <MX_ADC_Init+0xb4>)
 80024e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80024e6:	4b25      	ldr	r3, [pc, #148]	@ (800257c <MX_ADC_Init+0xb0>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80024ec:	4b23      	ldr	r3, [pc, #140]	@ (800257c <MX_ADC_Init+0xb0>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024f2:	4b22      	ldr	r3, [pc, #136]	@ (800257c <MX_ADC_Init+0xb0>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80024f8:	4b20      	ldr	r3, [pc, #128]	@ (800257c <MX_ADC_Init+0xb0>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024fe:	4b1f      	ldr	r3, [pc, #124]	@ (800257c <MX_ADC_Init+0xb0>)
 8002500:	2204      	movs	r2, #4
 8002502:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <MX_ADC_Init+0xb0>)
 8002506:	2200      	movs	r2, #0
 8002508:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800250a:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <MX_ADC_Init+0xb0>)
 800250c:	2200      	movs	r2, #0
 800250e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002510:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <MX_ADC_Init+0xb0>)
 8002512:	2200      	movs	r2, #0
 8002514:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002516:	4b19      	ldr	r3, [pc, #100]	@ (800257c <MX_ADC_Init+0xb0>)
 8002518:	2200      	movs	r2, #0
 800251a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <MX_ADC_Init+0xb0>)
 800251e:	22c2      	movs	r2, #194	@ 0xc2
 8002520:	32ff      	adds	r2, #255	@ 0xff
 8002522:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002524:	4b15      	ldr	r3, [pc, #84]	@ (800257c <MX_ADC_Init+0xb0>)
 8002526:	2200      	movs	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800252a:	4b14      	ldr	r3, [pc, #80]	@ (800257c <MX_ADC_Init+0xb0>)
 800252c:	2224      	movs	r2, #36	@ 0x24
 800252e:	2100      	movs	r1, #0
 8002530:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002532:	4b12      	ldr	r3, [pc, #72]	@ (800257c <MX_ADC_Init+0xb0>)
 8002534:	2201      	movs	r2, #1
 8002536:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002538:	4b10      	ldr	r3, [pc, #64]	@ (800257c <MX_ADC_Init+0xb0>)
 800253a:	0018      	movs	r0, r3
 800253c:	f001 fbfe 	bl	8003d3c <HAL_ADC_Init>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d001      	beq.n	8002548 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002544:	f000 fe3a 	bl	80031bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	2280      	movs	r2, #128	@ 0x80
 8002552:	0152      	lsls	r2, r2, #5
 8002554:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	2280      	movs	r2, #128	@ 0x80
 800255a:	0552      	lsls	r2, r2, #21
 800255c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800255e:	1d3a      	adds	r2, r7, #4
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <MX_ADC_Init+0xb0>)
 8002562:	0011      	movs	r1, r2
 8002564:	0018      	movs	r0, r3
 8002566:	f001 fe5b 	bl	8004220 <HAL_ADC_ConfigChannel>
 800256a:	1e03      	subs	r3, r0, #0
 800256c:	d001      	beq.n	8002572 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800256e:	f000 fe25 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	b004      	add	sp, #16
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	20000238 	.word	0x20000238
 8002580:	40012400 	.word	0x40012400

08002584 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002584:	b590      	push	{r4, r7, lr}
 8002586:	b08b      	sub	sp, #44	@ 0x2c
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	2414      	movs	r4, #20
 800258e:	193b      	adds	r3, r7, r4
 8002590:	0018      	movs	r0, r3
 8002592:	2314      	movs	r3, #20
 8002594:	001a      	movs	r2, r3
 8002596:	2100      	movs	r1, #0
 8002598:	f008 fdc0 	bl	800b11c <memset>
  if(adcHandle->Instance==ADC1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002618 <HAL_ADC_MspInit+0x94>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d133      	bne.n	800260e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025a6:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <HAL_ADC_MspInit+0x98>)
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <HAL_ADC_MspInit+0x98>)
 80025ac:	2180      	movs	r1, #128	@ 0x80
 80025ae:	0089      	lsls	r1, r1, #2
 80025b0:	430a      	orrs	r2, r1
 80025b2:	619a      	str	r2, [r3, #24]
 80025b4:	4b19      	ldr	r3, [pc, #100]	@ (800261c <HAL_ADC_MspInit+0x98>)
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	2380      	movs	r3, #128	@ 0x80
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	4b16      	ldr	r3, [pc, #88]	@ (800261c <HAL_ADC_MspInit+0x98>)
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <HAL_ADC_MspInit+0x98>)
 80025c8:	2180      	movs	r1, #128	@ 0x80
 80025ca:	0289      	lsls	r1, r1, #10
 80025cc:	430a      	orrs	r2, r1
 80025ce:	615a      	str	r2, [r3, #20]
 80025d0:	4b12      	ldr	r3, [pc, #72]	@ (800261c <HAL_ADC_MspInit+0x98>)
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	029b      	lsls	r3, r3, #10
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025de:	193b      	adds	r3, r7, r4
 80025e0:	2202      	movs	r2, #2
 80025e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	2203      	movs	r2, #3
 80025e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	193a      	adds	r2, r7, r4
 80025f2:	2390      	movs	r3, #144	@ 0x90
 80025f4:	05db      	lsls	r3, r3, #23
 80025f6:	0011      	movs	r1, r2
 80025f8:	0018      	movs	r0, r3
 80025fa:	f002 fd55 	bl	80050a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	200c      	movs	r0, #12
 8002604:	f002 f84a 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002608:	200c      	movs	r0, #12
 800260a:	f002 f85c 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b00b      	add	sp, #44	@ 0x2c
 8002614:	bd90      	pop	{r4, r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	40012400 	.word	0x40012400
 800261c:	40021000 	.word	0x40021000

08002620 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002626:	003b      	movs	r3, r7
 8002628:	0018      	movs	r0, r3
 800262a:	2308      	movs	r3, #8
 800262c:	001a      	movs	r2, r3
 800262e:	2100      	movs	r1, #0
 8002630:	f008 fd74 	bl	800b11c <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <MX_DAC_Init+0x54>)
 8002636:	4a10      	ldr	r2, [pc, #64]	@ (8002678 <MX_DAC_Init+0x58>)
 8002638:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800263a:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <MX_DAC_Init+0x54>)
 800263c:	0018      	movs	r0, r3
 800263e:	f002 f85f 	bl	8004700 <HAL_DAC_Init>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d001      	beq.n	800264a <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8002646:	f000 fdb9 	bl	80031bc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800264a:	003b      	movs	r3, r7
 800264c:	2204      	movs	r2, #4
 800264e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002650:	003b      	movs	r3, r7
 8002652:	2202      	movs	r2, #2
 8002654:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002656:	0039      	movs	r1, r7
 8002658:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <MX_DAC_Init+0x54>)
 800265a:	2200      	movs	r2, #0
 800265c:	0018      	movs	r0, r3
 800265e:	f002 f8e9 	bl	8004834 <HAL_DAC_ConfigChannel>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d001      	beq.n	800266a <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8002666:	f000 fda9 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	20000278 	.word	0x20000278
 8002678:	40007400 	.word	0x40007400

0800267c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b08b      	sub	sp, #44	@ 0x2c
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	2414      	movs	r4, #20
 8002686:	193b      	adds	r3, r7, r4
 8002688:	0018      	movs	r0, r3
 800268a:	2314      	movs	r3, #20
 800268c:	001a      	movs	r2, r3
 800268e:	2100      	movs	r1, #0
 8002690:	f008 fd44 	bl	800b11c <memset>
  if(dacHandle->Instance==DAC)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a39      	ldr	r2, [pc, #228]	@ (8002780 <HAL_DAC_MspInit+0x104>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d16c      	bne.n	8002778 <HAL_DAC_MspInit+0xfc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800269e:	4b39      	ldr	r3, [pc, #228]	@ (8002784 <HAL_DAC_MspInit+0x108>)
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	4b38      	ldr	r3, [pc, #224]	@ (8002784 <HAL_DAC_MspInit+0x108>)
 80026a4:	2180      	movs	r1, #128	@ 0x80
 80026a6:	0589      	lsls	r1, r1, #22
 80026a8:	430a      	orrs	r2, r1
 80026aa:	61da      	str	r2, [r3, #28]
 80026ac:	4b35      	ldr	r3, [pc, #212]	@ (8002784 <HAL_DAC_MspInit+0x108>)
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	2380      	movs	r3, #128	@ 0x80
 80026b2:	059b      	lsls	r3, r3, #22
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	4b32      	ldr	r3, [pc, #200]	@ (8002784 <HAL_DAC_MspInit+0x108>)
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	4b31      	ldr	r3, [pc, #196]	@ (8002784 <HAL_DAC_MspInit+0x108>)
 80026c0:	2180      	movs	r1, #128	@ 0x80
 80026c2:	0289      	lsls	r1, r1, #10
 80026c4:	430a      	orrs	r2, r1
 80026c6:	615a      	str	r2, [r3, #20]
 80026c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002784 <HAL_DAC_MspInit+0x108>)
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	029b      	lsls	r3, r3, #10
 80026d0:	4013      	ands	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	2210      	movs	r2, #16
 80026da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	2203      	movs	r2, #3
 80026e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	193a      	adds	r2, r7, r4
 80026ea:	2390      	movs	r3, #144	@ 0x90
 80026ec:	05db      	lsls	r3, r3, #23
 80026ee:	0011      	movs	r1, r2
 80026f0:	0018      	movs	r0, r3
 80026f2:	f002 fcd9 	bl	80050a8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80026f6:	4b24      	ldr	r3, [pc, #144]	@ (8002788 <HAL_DAC_MspInit+0x10c>)
 80026f8:	4a24      	ldr	r2, [pc, #144]	@ (800278c <HAL_DAC_MspInit+0x110>)
 80026fa:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026fc:	4b22      	ldr	r3, [pc, #136]	@ (8002788 <HAL_DAC_MspInit+0x10c>)
 80026fe:	2210      	movs	r2, #16
 8002700:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002702:	4b21      	ldr	r3, [pc, #132]	@ (8002788 <HAL_DAC_MspInit+0x10c>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002708:	4b1f      	ldr	r3, [pc, #124]	@ (8002788 <HAL_DAC_MspInit+0x10c>)
 800270a:	2280      	movs	r2, #128	@ 0x80
 800270c:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800270e:	4b1e      	ldr	r3, [pc, #120]	@ (8002788 <HAL_DAC_MspInit+0x10c>)
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002716:	4b1c      	ldr	r3, [pc, #112]	@ (8002788 <HAL_DAC_MspInit+0x10c>)
 8002718:	2280      	movs	r2, #128	@ 0x80
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 800271e:	4b1a      	ldr	r3, [pc, #104]	@ (8002788 <HAL_DAC_MspInit+0x10c>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002724:	4b18      	ldr	r3, [pc, #96]	@ (8002788 <HAL_DAC_MspInit+0x10c>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800272a:	4b17      	ldr	r3, [pc, #92]	@ (8002788 <HAL_DAC_MspInit+0x10c>)
 800272c:	0018      	movs	r0, r3
 800272e:	f002 fa7b 	bl	8004c28 <HAL_DMA_Init>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d001      	beq.n	800273a <HAL_DAC_MspInit+0xbe>
    {
      Error_Handler();
 8002736:	f000 fd41 	bl	80031bc <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_DAC_CH1);
 800273a:	4a15      	ldr	r2, [pc, #84]	@ (8002790 <HAL_DAC_MspInit+0x114>)
 800273c:	23a8      	movs	r3, #168	@ 0xa8
 800273e:	58d3      	ldr	r3, [r2, r3]
 8002740:	4913      	ldr	r1, [pc, #76]	@ (8002790 <HAL_DAC_MspInit+0x114>)
 8002742:	4a14      	ldr	r2, [pc, #80]	@ (8002794 <HAL_DAC_MspInit+0x118>)
 8002744:	4013      	ands	r3, r2
 8002746:	22a8      	movs	r2, #168	@ 0xa8
 8002748:	508b      	str	r3, [r1, r2]
 800274a:	4a11      	ldr	r2, [pc, #68]	@ (8002790 <HAL_DAC_MspInit+0x114>)
 800274c:	23a8      	movs	r3, #168	@ 0xa8
 800274e:	58d3      	ldr	r3, [r2, r3]
 8002750:	490f      	ldr	r1, [pc, #60]	@ (8002790 <HAL_DAC_MspInit+0x114>)
 8002752:	2280      	movs	r2, #128	@ 0x80
 8002754:	0052      	lsls	r2, r2, #1
 8002756:	4313      	orrs	r3, r2
 8002758:	22a8      	movs	r2, #168	@ 0xa8
 800275a:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a0a      	ldr	r2, [pc, #40]	@ (8002788 <HAL_DAC_MspInit+0x10c>)
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <HAL_DAC_MspInit+0x10c>)
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002768:	2200      	movs	r2, #0
 800276a:	2100      	movs	r1, #0
 800276c:	2011      	movs	r0, #17
 800276e:	f001 ff95 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002772:	2011      	movs	r0, #17
 8002774:	f001 ffa7 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b00b      	add	sp, #44	@ 0x2c
 800277e:	bd90      	pop	{r4, r7, pc}
 8002780:	40007400 	.word	0x40007400
 8002784:	40021000 	.word	0x40021000
 8002788:	2000028c 	.word	0x2000028c
 800278c:	40020030 	.word	0x40020030
 8002790:	40020000 	.word	0x40020000
 8002794:	fffff0ff 	.word	0xfffff0ff

08002798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800279e:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <MX_DMA_Init+0x38>)
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <MX_DMA_Init+0x38>)
 80027a4:	2101      	movs	r1, #1
 80027a6:	430a      	orrs	r2, r1
 80027a8:	615a      	str	r2, [r3, #20]
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <MX_DMA_Init+0x38>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	2201      	movs	r2, #1
 80027b0:	4013      	ands	r3, r2
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	200a      	movs	r0, #10
 80027bc:	f001 ff6e 	bl	800469c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80027c0:	200a      	movs	r0, #10
 80027c2:	f001 ff80 	bl	80046c6 <HAL_NVIC_EnableIRQ>

}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b002      	add	sp, #8
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			@ (mov r8, r8)
 80027d0:	40021000 	.word	0x40021000

080027d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b08b      	sub	sp, #44	@ 0x2c
 80027d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027da:	2414      	movs	r4, #20
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	0018      	movs	r0, r3
 80027e0:	2314      	movs	r3, #20
 80027e2:	001a      	movs	r2, r3
 80027e4:	2100      	movs	r1, #0
 80027e6:	f008 fc99 	bl	800b11c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ea:	4b4c      	ldr	r3, [pc, #304]	@ (800291c <MX_GPIO_Init+0x148>)
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	4b4b      	ldr	r3, [pc, #300]	@ (800291c <MX_GPIO_Init+0x148>)
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	0309      	lsls	r1, r1, #12
 80027f4:	430a      	orrs	r2, r1
 80027f6:	615a      	str	r2, [r3, #20]
 80027f8:	4b48      	ldr	r3, [pc, #288]	@ (800291c <MX_GPIO_Init+0x148>)
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	2380      	movs	r3, #128	@ 0x80
 80027fe:	031b      	lsls	r3, r3, #12
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002806:	4b45      	ldr	r3, [pc, #276]	@ (800291c <MX_GPIO_Init+0x148>)
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	4b44      	ldr	r3, [pc, #272]	@ (800291c <MX_GPIO_Init+0x148>)
 800280c:	2180      	movs	r1, #128	@ 0x80
 800280e:	03c9      	lsls	r1, r1, #15
 8002810:	430a      	orrs	r2, r1
 8002812:	615a      	str	r2, [r3, #20]
 8002814:	4b41      	ldr	r3, [pc, #260]	@ (800291c <MX_GPIO_Init+0x148>)
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	2380      	movs	r3, #128	@ 0x80
 800281a:	03db      	lsls	r3, r3, #15
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	4b3e      	ldr	r3, [pc, #248]	@ (800291c <MX_GPIO_Init+0x148>)
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	4b3d      	ldr	r3, [pc, #244]	@ (800291c <MX_GPIO_Init+0x148>)
 8002828:	2180      	movs	r1, #128	@ 0x80
 800282a:	0289      	lsls	r1, r1, #10
 800282c:	430a      	orrs	r2, r1
 800282e:	615a      	str	r2, [r3, #20]
 8002830:	4b3a      	ldr	r3, [pc, #232]	@ (800291c <MX_GPIO_Init+0x148>)
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	029b      	lsls	r3, r3, #10
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283e:	4b37      	ldr	r3, [pc, #220]	@ (800291c <MX_GPIO_Init+0x148>)
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	4b36      	ldr	r3, [pc, #216]	@ (800291c <MX_GPIO_Init+0x148>)
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	02c9      	lsls	r1, r1, #11
 8002848:	430a      	orrs	r2, r1
 800284a:	615a      	str	r2, [r3, #20]
 800284c:	4b33      	ldr	r3, [pc, #204]	@ (800291c <MX_GPIO_Init+0x148>)
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	02db      	lsls	r3, r3, #11
 8002854:	4013      	ands	r3, r2
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800285a:	23c8      	movs	r3, #200	@ 0xc8
 800285c:	0099      	lsls	r1, r3, #2
 800285e:	2390      	movs	r3, #144	@ 0x90
 8002860:	05db      	lsls	r3, r3, #23
 8002862:	2200      	movs	r2, #0
 8002864:	0018      	movs	r0, r3
 8002866:	f002 fd97 	bl	8005398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800286a:	4b2d      	ldr	r3, [pc, #180]	@ (8002920 <MX_GPIO_Init+0x14c>)
 800286c:	2200      	movs	r2, #0
 800286e:	2180      	movs	r1, #128	@ 0x80
 8002870:	0018      	movs	r0, r3
 8002872:	f002 fd91 	bl	8005398 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8002876:	193b      	adds	r3, r7, r4
 8002878:	22c8      	movs	r2, #200	@ 0xc8
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287e:	193b      	adds	r3, r7, r4
 8002880:	2201      	movs	r2, #1
 8002882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	193b      	adds	r3, r7, r4
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	193b      	adds	r3, r7, r4
 800288c:	2200      	movs	r2, #0
 800288e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	193a      	adds	r2, r7, r4
 8002892:	2390      	movs	r3, #144	@ 0x90
 8002894:	05db      	lsls	r3, r3, #23
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f002 fc05 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800289e:	193b      	adds	r3, r7, r4
 80028a0:	2204      	movs	r2, #4
 80028a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a4:	193b      	adds	r3, r7, r4
 80028a6:	2200      	movs	r2, #0
 80028a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	193b      	adds	r3, r7, r4
 80028b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <MX_GPIO_Init+0x150>)
 80028b4:	0019      	movs	r1, r3
 80028b6:	0010      	movs	r0, r2
 80028b8:	f002 fbf6 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028bc:	193b      	adds	r3, r7, r4
 80028be:	2280      	movs	r2, #128	@ 0x80
 80028c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c2:	193b      	adds	r3, r7, r4
 80028c4:	2201      	movs	r2, #1
 80028c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	193b      	adds	r3, r7, r4
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	193b      	adds	r3, r7, r4
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	4a12      	ldr	r2, [pc, #72]	@ (8002920 <MX_GPIO_Init+0x14c>)
 80028d8:	0019      	movs	r1, r3
 80028da:	0010      	movs	r0, r2
 80028dc:	f002 fbe4 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028e0:	0021      	movs	r1, r4
 80028e2:	187b      	adds	r3, r7, r1
 80028e4:	2208      	movs	r2, #8
 80028e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028e8:	187b      	adds	r3, r7, r1
 80028ea:	2284      	movs	r2, #132	@ 0x84
 80028ec:	0392      	lsls	r2, r2, #14
 80028ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	187b      	adds	r3, r7, r1
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f6:	187b      	adds	r3, r7, r1
 80028f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002924 <MX_GPIO_Init+0x150>)
 80028fa:	0019      	movs	r1, r3
 80028fc:	0010      	movs	r0, r2
 80028fe:	f002 fbd3 	bl	80050a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2100      	movs	r1, #0
 8002906:	2006      	movs	r0, #6
 8002908:	f001 fec8 	bl	800469c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800290c:	2006      	movs	r0, #6
 800290e:	f001 feda 	bl	80046c6 <HAL_NVIC_EnableIRQ>

}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b00b      	add	sp, #44	@ 0x2c
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	40021000 	.word	0x40021000
 8002920:	48000800 	.word	0x48000800
 8002924:	48000400 	.word	0x48000400

08002928 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <MX_I2C1_Init+0x74>)
 800292e:	4a1c      	ldr	r2, [pc, #112]	@ (80029a0 <MX_I2C1_Init+0x78>)
 8002930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8002932:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <MX_I2C1_Init+0x74>)
 8002934:	4a1b      	ldr	r2, [pc, #108]	@ (80029a4 <MX_I2C1_Init+0x7c>)
 8002936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002938:	4b18      	ldr	r3, [pc, #96]	@ (800299c <MX_I2C1_Init+0x74>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800293e:	4b17      	ldr	r3, [pc, #92]	@ (800299c <MX_I2C1_Init+0x74>)
 8002940:	2201      	movs	r2, #1
 8002942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002944:	4b15      	ldr	r3, [pc, #84]	@ (800299c <MX_I2C1_Init+0x74>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800294a:	4b14      	ldr	r3, [pc, #80]	@ (800299c <MX_I2C1_Init+0x74>)
 800294c:	2200      	movs	r2, #0
 800294e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002950:	4b12      	ldr	r3, [pc, #72]	@ (800299c <MX_I2C1_Init+0x74>)
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <MX_I2C1_Init+0x74>)
 8002958:	2200      	movs	r2, #0
 800295a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800295c:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <MX_I2C1_Init+0x74>)
 800295e:	2200      	movs	r2, #0
 8002960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <MX_I2C1_Init+0x74>)
 8002964:	0018      	movs	r0, r3
 8002966:	f002 fd5b 	bl	8005420 <HAL_I2C_Init>
 800296a:	1e03      	subs	r3, r0, #0
 800296c:	d001      	beq.n	8002972 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800296e:	f000 fc25 	bl	80031bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <MX_I2C1_Init+0x74>)
 8002974:	2100      	movs	r1, #0
 8002976:	0018      	movs	r0, r3
 8002978:	f004 fbee 	bl	8007158 <HAL_I2CEx_ConfigAnalogFilter>
 800297c:	1e03      	subs	r3, r0, #0
 800297e:	d001      	beq.n	8002984 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002980:	f000 fc1c 	bl	80031bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <MX_I2C1_Init+0x74>)
 8002986:	2100      	movs	r1, #0
 8002988:	0018      	movs	r0, r3
 800298a:	f004 fc31 	bl	80071f0 <HAL_I2CEx_ConfigDigitalFilter>
 800298e:	1e03      	subs	r3, r0, #0
 8002990:	d001      	beq.n	8002996 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002992:	f000 fc13 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	200002d0 	.word	0x200002d0
 80029a0:	40005400 	.word	0x40005400
 80029a4:	00201d2b 	.word	0x00201d2b

080029a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b08b      	sub	sp, #44	@ 0x2c
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	2414      	movs	r4, #20
 80029b2:	193b      	adds	r3, r7, r4
 80029b4:	0018      	movs	r0, r3
 80029b6:	2314      	movs	r3, #20
 80029b8:	001a      	movs	r2, r3
 80029ba:	2100      	movs	r1, #0
 80029bc:	f008 fbae 	bl	800b11c <memset>
  if(i2cHandle->Instance==I2C1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a20      	ldr	r2, [pc, #128]	@ (8002a48 <HAL_I2C_MspInit+0xa0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d13a      	bne.n	8002a40 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ca:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <HAL_I2C_MspInit+0xa4>)
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	4b1f      	ldr	r3, [pc, #124]	@ (8002a4c <HAL_I2C_MspInit+0xa4>)
 80029d0:	2180      	movs	r1, #128	@ 0x80
 80029d2:	02c9      	lsls	r1, r1, #11
 80029d4:	430a      	orrs	r2, r1
 80029d6:	615a      	str	r2, [r3, #20]
 80029d8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a4c <HAL_I2C_MspInit+0xa4>)
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	02db      	lsls	r3, r3, #11
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	22c0      	movs	r2, #192	@ 0xc0
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ee:	0021      	movs	r1, r4
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	2212      	movs	r2, #18
 80029f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	2203      	movs	r2, #3
 8002a00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2201      	movs	r2, #1
 8002a06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	4a11      	ldr	r2, [pc, #68]	@ (8002a50 <HAL_I2C_MspInit+0xa8>)
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	0010      	movs	r0, r2
 8002a10:	f002 fb4a 	bl	80050a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a14:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <HAL_I2C_MspInit+0xa4>)
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <HAL_I2C_MspInit+0xa4>)
 8002a1a:	2180      	movs	r1, #128	@ 0x80
 8002a1c:	0389      	lsls	r1, r1, #14
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	61da      	str	r2, [r3, #28]
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_I2C_MspInit+0xa4>)
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	2380      	movs	r3, #128	@ 0x80
 8002a28:	039b      	lsls	r3, r3, #14
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	2017      	movs	r0, #23
 8002a36:	f001 fe31 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002a3a:	2017      	movs	r0, #23
 8002a3c:	f001 fe43 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a40:	46c0      	nop			@ (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b00b      	add	sp, #44	@ 0x2c
 8002a46:	bd90      	pop	{r4, r7, pc}
 8002a48:	40005400 	.word	0x40005400
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	48000400 	.word	0x48000400

08002a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a5a:	f001 f8cb 	bl	8003bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a5e:	f000 f8e1 	bl	8002c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a62:	f7ff feb7 	bl	80027d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a66:	f7ff fe97 	bl	8002798 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002a6a:	f000 ffab 	bl	80039c4 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8002a6e:	f7ff fd2d 	bl	80024cc <MX_ADC_Init>
  MX_I2C1_Init();
 8002a72:	f7ff ff59 	bl	8002928 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002a76:	f000 fe09 	bl	800368c <MX_TIM3_Init>
  MX_RTC_Init();
 8002a7a:	f000 fba5 	bl	80031c8 <MX_RTC_Init>
  MX_DAC_Init();
 8002a7e:	f7ff fdcf 	bl	8002620 <MX_DAC_Init>
  MX_TIM6_Init();
 8002a82:	f000 fe59 	bl	8003738 <MX_TIM6_Init>
  MX_USART8_UART_Init();
 8002a86:	f000 ffcd 	bl	8003a24 <MX_USART8_UART_Init>
  MX_TIM14_Init();
 8002a8a:	f000 fecd 	bl	8003828 <MX_TIM14_Init>
  MX_TIM7_Init();
 8002a8e:	f000 fe8f 	bl	80037b0 <MX_TIM7_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	MX_GPIO_Init();
 8002a92:	f7ff fe9f 	bl	80027d4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002a96:	f000 ff95 	bl	80039c4 <MX_USART2_UART_Init>
	MX_ADC_Init();
 8002a9a:	f7ff fd17 	bl	80024cc <MX_ADC_Init>
	MX_I2C1_Init();
 8002a9e:	f7ff ff43 	bl	8002928 <MX_I2C1_Init>
	MX_TIM3_Init();
 8002aa2:	f000 fdf3 	bl	800368c <MX_TIM3_Init>

	/* USER CODE END 2 */
	//transmitMessage("\n-----------------------------------\n\r");
	//transmitMessage("Checking Initial Voltage level...\n\r");
	//transmitMessage("-----------------------------------\n\n\r");
	HAL_ADC_Start_IT(&hadc);
 8002aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8002be0 <main+0x18c>)
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f001 fa87 	bl	8003fbc <HAL_ADC_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		switch (currentState) {
 8002aae:	4b4d      	ldr	r3, [pc, #308]	@ (8002be4 <main+0x190>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d900      	bls.n	8002ab8 <main+0x64>
 8002ab6:	e08b      	b.n	8002bd0 <main+0x17c>
 8002ab8:	009a      	lsls	r2, r3, #2
 8002aba:	4b4b      	ldr	r3, [pc, #300]	@ (8002be8 <main+0x194>)
 8002abc:	18d3      	adds	r3, r2, r3
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	469f      	mov	pc, r3
		case INIT:
			// transmitMessage("Current State: INIT\n\r");

			AHT20_Init();
 8002ac2:	f000 f96d 	bl	8002da0 <AHT20_Init>
			currentState = TRIGGER_MEASUREMENT;
 8002ac6:	4b47      	ldr	r3, [pc, #284]	@ (8002be4 <main+0x190>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
			break;
 8002acc:	e086      	b.n	8002bdc <main+0x188>

		case TRIGGER_MEASUREMENT:

			// transmitMessage("Current State: TRIGGER_MEASURMENT\n\r");
			HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ace:	2380      	movs	r3, #128	@ 0x80
 8002ad0:	005a      	lsls	r2, r3, #1
 8002ad2:	4b46      	ldr	r3, [pc, #280]	@ (8002bec <main+0x198>)
 8002ad4:	0011      	movs	r1, r2
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f005 fcc2 	bl	8008460 <HAL_RTC_DeactivateAlarm>

			AHT20_triggerMeasurement();
 8002adc:	f000 f998 	bl	8002e10 <AHT20_triggerMeasurement>

			currentState = WAIT_FOR_MEASUREMENT;
 8002ae0:	4b40      	ldr	r3, [pc, #256]	@ (8002be4 <main+0x190>)
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	701a      	strb	r2, [r3, #0]
			break;
 8002ae6:	e079      	b.n	8002bdc <main+0x188>

		case WAIT_FOR_MEASUREMENT:

			// transmitMessage("Current State: WAIT_FOR_MEASUREMENT\n\r");

			if (!AHT20_measurementStatus()) {
 8002ae8:	f000 f9ba 	bl	8002e60 <AHT20_measurementStatus>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d000      	beq.n	8002af2 <main+0x9e>
 8002af0:	e071      	b.n	8002bd6 <main+0x182>
				currentState = READ_DATA;
 8002af2:	4b3c      	ldr	r3, [pc, #240]	@ (8002be4 <main+0x190>)
 8002af4:	2203      	movs	r2, #3
 8002af6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002af8:	e06d      	b.n	8002bd6 <main+0x182>

		case READ_DATA:

			//transmitMessage("Current State: READ_DATA\n\r");

			AHT20_recieveData();
 8002afa:	f000 f9a1 	bl	8002e40 <AHT20_recieveData>
			currentState = PROCESS_DATA;
 8002afe:	4b39      	ldr	r3, [pc, #228]	@ (8002be4 <main+0x190>)
 8002b00:	2204      	movs	r2, #4
 8002b02:	701a      	strb	r2, [r3, #0]
			break;
 8002b04:	e06a      	b.n	8002bdc <main+0x188>

		case PROCESS_DATA:

			//transmitMessage("Current State: PROCESS_DATA\n\r");

			if (!AHT20_aprsConvert()) {
 8002b06:	f000 f9c3 	bl	8002e90 <AHT20_aprsConvert>
 8002b0a:	1e03      	subs	r3, r0, #0
 8002b0c:	d165      	bne.n	8002bda <main+0x186>
				currentState = PAUSE;
 8002b0e:	4b35      	ldr	r3, [pc, #212]	@ (8002be4 <main+0x190>)
 8002b10:	2205      	movs	r2, #5
 8002b12:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002b14:	e061      	b.n	8002bda <main+0x186>
			//transmitMessage("Current State: PAUSE\n\r");
			//transmitMessage("Button Press will change states.\n\r");

			// DRA818V_Init();

			HAL_TIM_Base_Start(&htim6);
 8002b16:	4b36      	ldr	r3, [pc, #216]	@ (8002bf0 <main+0x19c>)
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f005 fed3 	bl	80088c4 <HAL_TIM_Base_Start>
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sine_wave_array,
 8002b1e:	4a35      	ldr	r2, [pc, #212]	@ (8002bf4 <main+0x1a0>)
 8002b20:	4835      	ldr	r0, [pc, #212]	@ (8002bf8 <main+0x1a4>)
 8002b22:	2300      	movs	r3, #0
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2320      	movs	r3, #32
 8002b28:	2100      	movs	r1, #0
 8002b2a:	f001 fec3 	bl	80048b4 <HAL_DAC_Start_DMA>

			while (1) {

				//transmitMessage("Begin APRS transmission\r\n");

				while (i < 18) {
 8002b2e:	e011      	b.n	8002b54 <main+0x100>

					HAL_TIM_Base_Start_IT(&htim7);
 8002b30:	4b32      	ldr	r3, [pc, #200]	@ (8002bfc <main+0x1a8>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f005 ff10 	bl	8008958 <HAL_TIM_Base_Start_IT>
					while (flag == 0) {
 8002b38:	e000      	b.n	8002b3c <main+0xe8>
						asm("nop");
 8002b3a:	46c0      	nop			@ (mov r8, r8)
					while (flag == 0) {
 8002b3c:	4b30      	ldr	r3, [pc, #192]	@ (8002c00 <main+0x1ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0fa      	beq.n	8002b3a <main+0xe6>
						//do nothing
					}

					i++;
 8002b44:	4b2f      	ldr	r3, [pc, #188]	@ (8002c04 <main+0x1b0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c04 <main+0x1b0>)
 8002b4c:	601a      	str	r2, [r3, #0]

					flag = 0;
 8002b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c00 <main+0x1ac>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
				while (i < 18) {
 8002b54:	4b2b      	ldr	r3, [pc, #172]	@ (8002c04 <main+0x1b0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b11      	cmp	r3, #17
 8002b5a:	dde9      	ble.n	8002b30 <main+0xdc>

				}

				HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002b5c:	4b26      	ldr	r3, [pc, #152]	@ (8002bf8 <main+0x1a4>)
 8002b5e:	2100      	movs	r1, #0
 8002b60:	0018      	movs	r0, r3
 8002b62:	f001 fdf1 	bl	8004748 <HAL_DAC_Stop_DMA>
				i = 0;
 8002b66:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <main+0x1b0>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
				transmitMessage("DMA off\r\n");
 8002b6c:	4b26      	ldr	r3, [pc, #152]	@ (8002c08 <main+0x1b4>)
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 fa44 	bl	8002ffc <transmitMessage>
				HAL_Delay(1000);
 8002b74:	23fa      	movs	r3, #250	@ 0xfa
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f001 f89f 	bl	8003cbc <HAL_Delay>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf4 <main+0x1a0>)
 8002b80:	481d      	ldr	r0, [pc, #116]	@ (8002bf8 <main+0x1a4>)
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2320      	movs	r3, #32
 8002b88:	2100      	movs	r1, #0
 8002b8a:	f001 fe93 	bl	80048b4 <HAL_DAC_Start_DMA>
				while (i < 18) {
 8002b8e:	e7e1      	b.n	8002b54 <main+0x100>

			break;

		case IDLE:

			transmitMessage("Current State: IDLE\n\r");
 8002b90:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <main+0x1b8>)
 8002b92:	0018      	movs	r0, r3
 8002b94:	f000 fa32 	bl	8002ffc <transmitMessage>
			MX_RTC_Init();
 8002b98:	f000 fb16 	bl	80031c8 <MX_RTC_Init>
			transmitMessage("\n-----------------------------------\n\r");
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <main+0x1bc>)
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 fa2c 	bl	8002ffc <transmitMessage>
			transmitMessage("\n***********  ATTENTION!  **********\n\r");
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <main+0x1c0>)
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 fa28 	bl	8002ffc <transmitMessage>
			transmitMessage("\nDevice in IDLE will enter standby!\n\r");
 8002bac:	4b1a      	ldr	r3, [pc, #104]	@ (8002c18 <main+0x1c4>)
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f000 fa24 	bl	8002ffc <transmitMessage>
			transmitMessage("Button Press will change states.\n\r");
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <main+0x1c8>)
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 fa20 	bl	8002ffc <transmitMessage>
			transmitMessage("\n-----------------------------------\n\n\r");
 8002bbc:	4b18      	ldr	r3, [pc, #96]	@ (8002c20 <main+0x1cc>)
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 fa1c 	bl	8002ffc <transmitMessage>
			enterSleepMode();
 8002bc4:	f000 fa62 	bl	800308c <enterSleepMode>

			currentState = TRIGGER_MEASUREMENT;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <main+0x190>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]

			break;
 8002bce:	e005      	b.n	8002bdc <main+0x188>

		default:

			//transmitMessage("Current State: UNHANDLED\n\r");
			enterSleepMode();
 8002bd0:	f000 fa5c 	bl	800308c <enterSleepMode>

			break;
 8002bd4:	e002      	b.n	8002bdc <main+0x188>
			break;
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	e769      	b.n	8002aae <main+0x5a>
			break;
 8002bda:	46c0      	nop			@ (mov r8, r8)
		switch (currentState) {
 8002bdc:	e767      	b.n	8002aae <main+0x5a>
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	20000238 	.word	0x20000238
 8002be4:	20000324 	.word	0x20000324
 8002be8:	0800eda0 	.word	0x0800eda0
 8002bec:	20000364 	.word	0x20000364
 8002bf0:	200003d0 	.word	0x200003d0
 8002bf4:	0800ed20 	.word	0x0800ed20
 8002bf8:	20000278 	.word	0x20000278
 8002bfc:	20000418 	.word	0x20000418
 8002c00:	2000033c 	.word	0x2000033c
 8002c04:	20000360 	.word	0x20000360
 8002c08:	0800ea90 	.word	0x0800ea90
 8002c0c:	0800ea9c 	.word	0x0800ea9c
 8002c10:	0800eab4 	.word	0x0800eab4
 8002c14:	0800eadc 	.word	0x0800eadc
 8002c18:	0800eb04 	.word	0x0800eb04
 8002c1c:	0800eb2c 	.word	0x0800eb2c
 8002c20:	0800eb50 	.word	0x0800eb50

08002c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b099      	sub	sp, #100	@ 0x64
 8002c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c2a:	242c      	movs	r4, #44	@ 0x2c
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	0018      	movs	r0, r3
 8002c30:	2334      	movs	r3, #52	@ 0x34
 8002c32:	001a      	movs	r2, r3
 8002c34:	2100      	movs	r1, #0
 8002c36:	f008 fa71 	bl	800b11c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c3a:	231c      	movs	r3, #28
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	0018      	movs	r0, r3
 8002c40:	2310      	movs	r3, #16
 8002c42:	001a      	movs	r2, r3
 8002c44:	2100      	movs	r1, #0
 8002c46:	f008 fa69 	bl	800b11c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c4a:	003b      	movs	r3, r7
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	231c      	movs	r3, #28
 8002c50:	001a      	movs	r2, r3
 8002c52:	2100      	movs	r1, #0
 8002c54:	f008 fa62 	bl	800b11c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8002c58:	0021      	movs	r1, r4
 8002c5a:	187b      	adds	r3, r7, r1
 8002c5c:	221a      	movs	r2, #26
 8002c5e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	2201      	movs	r2, #1
 8002c64:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	2201      	movs	r2, #1
 8002c6a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	2210      	movs	r2, #16
 8002c70:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002c72:	187b      	adds	r3, r7, r1
 8002c74:	2210      	movs	r2, #16
 8002c76:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c7e:	187b      	adds	r3, r7, r1
 8002c80:	2202      	movs	r2, #2
 8002c82:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c84:	187b      	adds	r3, r7, r1
 8002c86:	2280      	movs	r2, #128	@ 0x80
 8002c88:	0212      	lsls	r2, r2, #8
 8002c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	22a0      	movs	r2, #160	@ 0xa0
 8002c90:	0392      	lsls	r2, r2, #14
 8002c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002c94:	187b      	adds	r3, r7, r1
 8002c96:	2201      	movs	r2, #1
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c9a:	187b      	adds	r3, r7, r1
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f004 fb25 	bl	80072ec <HAL_RCC_OscConfig>
 8002ca2:	1e03      	subs	r3, r0, #0
 8002ca4:	d001      	beq.n	8002caa <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002ca6:	f000 fa89 	bl	80031bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002caa:	211c      	movs	r1, #28
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	2207      	movs	r2, #7
 8002cb0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f004 fe95 	bl	80079f8 <HAL_RCC_ClockConfig>
 8002cce:	1e03      	subs	r3, r0, #0
 8002cd0:	d001      	beq.n	8002cd6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002cd2:	f000 fa73 	bl	80031bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002cd6:	003b      	movs	r3, r7
 8002cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8002d0c <SystemClock_Config+0xe8>)
 8002cda:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002cdc:	003b      	movs	r3, r7
 8002cde:	2280      	movs	r2, #128	@ 0x80
 8002ce0:	0252      	lsls	r2, r2, #9
 8002ce2:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002ce4:	003b      	movs	r3, r7
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002cea:	003b      	movs	r3, r7
 8002cec:	2280      	movs	r2, #128	@ 0x80
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cf2:	003b      	movs	r3, r7
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f004 ffeb 	bl	8007cd0 <HAL_RCCEx_PeriphCLKConfig>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d001      	beq.n	8002d02 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8002cfe:	f000 fa5d 	bl	80031bc <Error_Handler>
  }
}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b019      	add	sp, #100	@ 0x64
 8002d08:	bd90      	pop	{r4, r7, pc}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	00010022 	.word	0x00010022

08002d10 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

}
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_PeriodElapsedCallback>:




//Timer interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM7) {
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d102      	bne.n	8002d38 <HAL_TIM_PeriodElapsedCallback+0x18>

		flag = 1;
 8002d32:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
	}

}
 8002d38:	46c0      	nop			@ (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40001400 	.word	0x40001400
 8002d44:	2000033c 	.word	0x2000033c

08002d48 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	6078      	str	r0, [r7, #4]

	if (input[i] == 0) {
 8002d50:	4b0e      	ldr	r3, [pc, #56]	@ (8002d8c <HAL_DAC_ConvCpltCallbackCh1+0x44>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <HAL_DAC_ConvCpltCallbackCh1+0x48>)
 8002d56:	0092      	lsls	r2, r2, #2
 8002d58:	58d3      	ldr	r3, [r2, r3]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <HAL_DAC_ConvCpltCallbackCh1+0x22>
		// Stop the timer
		//HAL_TIM_Base_Stop(&htim6);

		// Set the new prescaler value
		__HAL_TIM_SET_PRESCALER(&htim6, 341);
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <HAL_DAC_ConvCpltCallbackCh1+0x4c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2256      	movs	r2, #86	@ 0x56
 8002d64:	32ff      	adds	r2, #255	@ 0xff
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d68:	e003      	b.n	8002d72 <HAL_DAC_ConvCpltCallbackCh1+0x2a>
	} else {
		// Stop the timer
		// HAL_TIM_Base_Stop(&htim6);

		// Set the new prescaler value
		__HAL_TIM_SET_PRESCALER(&htim6, 625);
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <HAL_DAC_ConvCpltCallbackCh1+0x4c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d98 <HAL_DAC_ConvCpltCallbackCh1+0x50>)
 8002d70:	629a      	str	r2, [r3, #40]	@ 0x28

		// Restart the timer
		// HAL_TIM_Base_Start(&htim6);
	}

	HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*) sine_wave_array, 32,
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <HAL_DAC_ConvCpltCallbackCh1+0x54>)
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	2300      	movs	r3, #0
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	f001 fd99 	bl	80048b4 <HAL_DAC_Start_DMA>
			DAC_ALIGN_12B_R);

}
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b002      	add	sp, #8
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	20000360 	.word	0x20000360
 8002d90:	20000000 	.word	0x20000000
 8002d94:	200003d0 	.word	0x200003d0
 8002d98:	00000271 	.word	0x00000271
 8002d9c:	0800ed20 	.word	0x0800ed20

08002da0 <AHT20_Init>:
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);

}

// Initialize the AHT20 sensor
static void AHT20_Init(void) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0

	uint8_t initCmd[] = { 0xBE, 0x08, 0x00 }; // Initialization command
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	4a14      	ldr	r2, [pc, #80]	@ (8002dfc <AHT20_Init+0x5c>)
 8002daa:	8811      	ldrh	r1, [r2, #0]
 8002dac:	8019      	strh	r1, [r3, #0]
 8002dae:	7892      	ldrb	r2, [r2, #2]
 8002db0:	709a      	strb	r2, [r3, #2]
	transmitMessage("Entering Sleep for 100ms\n\r");
 8002db2:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <AHT20_Init+0x60>)
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 f921 	bl	8002ffc <transmitMessage>
	configureTimer(&htim3, AHT20_Power_ON_Delay_Prescale);
 8002dba:	4b12      	ldr	r3, [pc, #72]	@ (8002e04 <AHT20_Init+0x64>)
 8002dbc:	2148      	movs	r1, #72	@ 0x48
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 f932 	bl	8003028 <configureTimer>
	enterTimedSleep(&htim3);
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <AHT20_Init+0x64>)
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f000 f97a 	bl	80030c0 <enterTimedSleep>

	HAL_I2C_Master_Transmit_IT(&hi2c1, AHT20_ADDR, initCmd, sizeof(initCmd));
 8002dcc:	1d3a      	adds	r2, r7, #4
 8002dce:	480e      	ldr	r0, [pc, #56]	@ (8002e08 <AHT20_Init+0x68>)
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	2170      	movs	r1, #112	@ 0x70
 8002dd4:	f002 fbca 	bl	800556c <HAL_I2C_Master_Transmit_IT>

	configureTimer(&htim3, AHT20_Init_Delay_Prescale);
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e04 <AHT20_Init+0x64>)
 8002dda:	2107      	movs	r1, #7
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 f923 	bl	8003028 <configureTimer>
	enterTimedSleep(&htim3);
 8002de2:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <AHT20_Init+0x64>)
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 f96b 	bl	80030c0 <enterTimedSleep>

	transmitMessage("INIT COMPLETE\n\r");
 8002dea:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <AHT20_Init+0x6c>)
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f905 	bl	8002ffc <transmitMessage>
}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b002      	add	sp, #8
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	0800ec04 	.word	0x0800ec04
 8002e00:	0800ebd8 	.word	0x0800ebd8
 8002e04:	20000388 	.word	0x20000388
 8002e08:	200002d0 	.word	0x200002d0
 8002e0c:	0800ebf4 	.word	0x0800ebf4

08002e10 <AHT20_triggerMeasurement>:

// Trigger a measurement on the AHT20 sensor
static void AHT20_triggerMeasurement(void) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0

	uint8_t triggerCmd[] = { 0xAC, 0x33, 0x00 }; // Trigger measurement command
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <AHT20_triggerMeasurement+0x28>)
 8002e1a:	8811      	ldrh	r1, [r2, #0]
 8002e1c:	8019      	strh	r1, [r3, #0]
 8002e1e:	7892      	ldrb	r2, [r2, #2]
 8002e20:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit_IT(&hi2c1, AHT20_ADDR, triggerCmd,
 8002e22:	1d3a      	adds	r2, r7, #4
 8002e24:	4805      	ldr	r0, [pc, #20]	@ (8002e3c <AHT20_triggerMeasurement+0x2c>)
 8002e26:	2303      	movs	r3, #3
 8002e28:	2170      	movs	r1, #112	@ 0x70
 8002e2a:	f002 fb9f 	bl	800556c <HAL_I2C_Master_Transmit_IT>
			sizeof(triggerCmd));
}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b002      	add	sp, #8
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	0800ec08 	.word	0x0800ec08
 8002e3c:	200002d0 	.word	0x200002d0

08002e40 <AHT20_recieveData>:

// Receive data from the AHT20 sensortriangle wave generation stm32f09 hal
static void AHT20_recieveData(void) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Receive_IT(&hi2c1, AHT20_ADDR, data, AHT20_DATA_SIZE);
 8002e44:	4a04      	ldr	r2, [pc, #16]	@ (8002e58 <AHT20_recieveData+0x18>)
 8002e46:	4805      	ldr	r0, [pc, #20]	@ (8002e5c <AHT20_recieveData+0x1c>)
 8002e48:	2306      	movs	r3, #6
 8002e4a:	2170      	movs	r1, #112	@ 0x70
 8002e4c:	f002 fc38 	bl	80056c0 <HAL_I2C_Master_Receive_IT>
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	20000328 	.word	0x20000328
 8002e5c:	200002d0 	.word	0x200002d0

08002e60 <AHT20_measurementStatus>:

// Check the measurement status of the AHT20 sensor
static int AHT20_measurementStatus(void) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0

	transmitMessage("Entering Sleep for 80ms\n\r");
 8002e64:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <AHT20_measurementStatus+0x28>)
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 f8c8 	bl	8002ffc <transmitMessage>

	configureTimer(&htim3, AHT20_Trigger_Measurement_Prescale);
 8002e6c:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <AHT20_measurementStatus+0x2c>)
 8002e6e:	213a      	movs	r1, #58	@ 0x3a
 8002e70:	0018      	movs	r0, r3
 8002e72:	f000 f8d9 	bl	8003028 <configureTimer>

	enterTimedSleep(&htim3);
 8002e76:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <AHT20_measurementStatus+0x2c>)
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 f921 	bl	80030c0 <enterTimedSleep>

	return 0;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	0800ec0c 	.word	0x0800ec0c
 8002e8c:	20000388 	.word	0x20000388

08002e90 <AHT20_aprsConvert>:

// Convert the raw data from AHT20 into applicable units
static int AHT20_aprsConvert(void) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
	uint32_t hum = (data[1] << 12) | (data[2] << 4) | (data[3] >> 4);
 8002e96:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc4 <AHT20_aprsConvert+0x134>)
 8002e98:	785b      	ldrb	r3, [r3, #1]
 8002e9a:	031a      	lsls	r2, r3, #12
 8002e9c:	4b49      	ldr	r3, [pc, #292]	@ (8002fc4 <AHT20_aprsConvert+0x134>)
 8002e9e:	789b      	ldrb	r3, [r3, #2]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	4a47      	ldr	r2, [pc, #284]	@ (8002fc4 <AHT20_aprsConvert+0x134>)
 8002ea6:	78d2      	ldrb	r2, [r2, #3]
 8002ea8:	0912      	lsrs	r2, r2, #4
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	4313      	orrs	r3, r2
 8002eae:	607b      	str	r3, [r7, #4]
	uint32_t temp = ((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5];
 8002eb0:	4b44      	ldr	r3, [pc, #272]	@ (8002fc4 <AHT20_aprsConvert+0x134>)
 8002eb2:	78db      	ldrb	r3, [r3, #3]
 8002eb4:	041a      	lsls	r2, r3, #16
 8002eb6:	23f0      	movs	r3, #240	@ 0xf0
 8002eb8:	031b      	lsls	r3, r3, #12
 8002eba:	401a      	ands	r2, r3
 8002ebc:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <AHT20_aprsConvert+0x134>)
 8002ebe:	791b      	ldrb	r3, [r3, #4]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	4a3f      	ldr	r2, [pc, #252]	@ (8002fc4 <AHT20_aprsConvert+0x134>)
 8002ec6:	7952      	ldrb	r2, [r2, #5]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	603b      	str	r3, [r7, #0]

	// Convert to actual values
	humidity = hum * 100.0 / 0x100000;
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff f9ef 	bl	80022b0 <__aeabi_ui2d>
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc8 <AHT20_aprsConvert+0x138>)
 8002ed6:	f7fe fafb 	bl	80014d0 <__aeabi_dmul>
 8002eda:	0002      	movs	r2, r0
 8002edc:	000b      	movs	r3, r1
 8002ede:	0010      	movs	r0, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	4b39      	ldr	r3, [pc, #228]	@ (8002fcc <AHT20_aprsConvert+0x13c>)
 8002ee6:	f7fd feaf 	bl	8000c48 <__aeabi_ddiv>
 8002eea:	0002      	movs	r2, r0
 8002eec:	000b      	movs	r3, r1
 8002eee:	0010      	movs	r0, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	f7ff fa49 	bl	8002388 <__aeabi_d2f>
 8002ef6:	1c02      	adds	r2, r0, #0
 8002ef8:	4b35      	ldr	r3, [pc, #212]	@ (8002fd0 <AHT20_aprsConvert+0x140>)
 8002efa:	601a      	str	r2, [r3, #0]
	temperature = temp * 200.0 / 0x100000 - 50;
 8002efc:	6838      	ldr	r0, [r7, #0]
 8002efe:	f7ff f9d7 	bl	80022b0 <__aeabi_ui2d>
 8002f02:	2200      	movs	r2, #0
 8002f04:	4b33      	ldr	r3, [pc, #204]	@ (8002fd4 <AHT20_aprsConvert+0x144>)
 8002f06:	f7fe fae3 	bl	80014d0 <__aeabi_dmul>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	000b      	movs	r3, r1
 8002f0e:	0010      	movs	r0, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	2200      	movs	r2, #0
 8002f14:	4b2d      	ldr	r3, [pc, #180]	@ (8002fcc <AHT20_aprsConvert+0x13c>)
 8002f16:	f7fd fe97 	bl	8000c48 <__aeabi_ddiv>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	000b      	movs	r3, r1
 8002f1e:	0010      	movs	r0, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	2200      	movs	r2, #0
 8002f24:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd8 <AHT20_aprsConvert+0x148>)
 8002f26:	f7fe fd9b 	bl	8001a60 <__aeabi_dsub>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	000b      	movs	r3, r1
 8002f2e:	0010      	movs	r0, r2
 8002f30:	0019      	movs	r1, r3
 8002f32:	f7ff fa29 	bl	8002388 <__aeabi_d2f>
 8002f36:	1c02      	adds	r2, r0, #0
 8002f38:	4b28      	ldr	r3, [pc, #160]	@ (8002fdc <AHT20_aprsConvert+0x14c>)
 8002f3a:	601a      	str	r2, [r3, #0]

	transmitMessage("\n-----------------------------------\n\r");
 8002f3c:	4b28      	ldr	r3, [pc, #160]	@ (8002fe0 <AHT20_aprsConvert+0x150>)
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 f85c 	bl	8002ffc <transmitMessage>
	transmitMessage("%Humidity = ");
 8002f44:	4b27      	ldr	r3, [pc, #156]	@ (8002fe4 <AHT20_aprsConvert+0x154>)
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 f858 	bl	8002ffc <transmitMessage>
	sprintf(i2c_buf, "%f\r\n", humidity); // Convert float to string and store in buffer
 8002f4c:	4b20      	ldr	r3, [pc, #128]	@ (8002fd0 <AHT20_aprsConvert+0x140>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	1c18      	adds	r0, r3, #0
 8002f52:	f7ff f9d1 	bl	80022f8 <__aeabi_f2d>
 8002f56:	0002      	movs	r2, r0
 8002f58:	000b      	movs	r3, r1
 8002f5a:	4923      	ldr	r1, [pc, #140]	@ (8002fe8 <AHT20_aprsConvert+0x158>)
 8002f5c:	4823      	ldr	r0, [pc, #140]	@ (8002fec <AHT20_aprsConvert+0x15c>)
 8002f5e:	f008 f871 	bl	800b044 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) i2c_buf, strlen(i2c_buf), 1000);
 8002f62:	4b22      	ldr	r3, [pc, #136]	@ (8002fec <AHT20_aprsConvert+0x15c>)
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7fd f8cd 	bl	8000104 <strlen>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	23fa      	movs	r3, #250	@ 0xfa
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	491e      	ldr	r1, [pc, #120]	@ (8002fec <AHT20_aprsConvert+0x15c>)
 8002f74:	481e      	ldr	r0, [pc, #120]	@ (8002ff0 <AHT20_aprsConvert+0x160>)
 8002f76:	f006 f93b 	bl	80091f0 <HAL_UART_Transmit>
	transmitMessage("Temperature C = ");
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <AHT20_aprsConvert+0x164>)
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f83d 	bl	8002ffc <transmitMessage>
	sprintf(i2c_buf, "%f\r\n", temperature); // Convert float to string and store in buffer
 8002f82:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <AHT20_aprsConvert+0x14c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1c18      	adds	r0, r3, #0
 8002f88:	f7ff f9b6 	bl	80022f8 <__aeabi_f2d>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	000b      	movs	r3, r1
 8002f90:	4915      	ldr	r1, [pc, #84]	@ (8002fe8 <AHT20_aprsConvert+0x158>)
 8002f92:	4816      	ldr	r0, [pc, #88]	@ (8002fec <AHT20_aprsConvert+0x15c>)
 8002f94:	f008 f856 	bl	800b044 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) i2c_buf, strlen(i2c_buf), 1000);
 8002f98:	4b14      	ldr	r3, [pc, #80]	@ (8002fec <AHT20_aprsConvert+0x15c>)
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7fd f8b2 	bl	8000104 <strlen>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	23fa      	movs	r3, #250	@ 0xfa
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4910      	ldr	r1, [pc, #64]	@ (8002fec <AHT20_aprsConvert+0x15c>)
 8002faa:	4811      	ldr	r0, [pc, #68]	@ (8002ff0 <AHT20_aprsConvert+0x160>)
 8002fac:	f006 f920 	bl	80091f0 <HAL_UART_Transmit>
	transmitMessage("-----------------------------------\n\n\r");
 8002fb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <AHT20_aprsConvert+0x168>)
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 f822 	bl	8002ffc <transmitMessage>
	return 0;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	20000328 	.word	0x20000328
 8002fc8:	40590000 	.word	0x40590000
 8002fcc:	41300000 	.word	0x41300000
 8002fd0:	20000338 	.word	0x20000338
 8002fd4:	40690000 	.word	0x40690000
 8002fd8:	40490000 	.word	0x40490000
 8002fdc:	20000334 	.word	0x20000334
 8002fe0:	0800eab4 	.word	0x0800eab4
 8002fe4:	0800ec28 	.word	0x0800ec28
 8002fe8:	0800ec38 	.word	0x0800ec38
 8002fec:	20000340 	.word	0x20000340
 8002ff0:	200004a8 	.word	0x200004a8
 8002ff4:	0800ec40 	.word	0x0800ec40
 8002ff8:	0800ec54 	.word	0x0800ec54

08002ffc <transmitMessage>:

void transmitMessage(const char *message) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) message, strlen(message), 1000);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0018      	movs	r0, r3
 8003008:	f7fd f87c 	bl	8000104 <strlen>
 800300c:	0003      	movs	r3, r0
 800300e:	b29a      	uxth	r2, r3
 8003010:	23fa      	movs	r3, #250	@ 0xfa
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4803      	ldr	r0, [pc, #12]	@ (8003024 <transmitMessage+0x28>)
 8003018:	f006 f8ea 	bl	80091f0 <HAL_UART_Transmit>
}
 800301c:	46c0      	nop			@ (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200004a8 	.word	0x200004a8

08003028 <configureTimer>:

void configureTimer(TIM_HandleTypeDef *htim, uint32_t prescaler) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
	__HAL_TIM_DISABLE(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a12      	ldr	r2, [pc, #72]	@ (8003084 <configureTimer+0x5c>)
 800303a:	4013      	ands	r3, r2
 800303c:	d10d      	bne.n	800305a <configureTimer+0x32>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a10      	ldr	r2, [pc, #64]	@ (8003088 <configureTimer+0x60>)
 8003046:	4013      	ands	r3, r2
 8003048:	d107      	bne.n	800305a <configureTimer+0x32>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	438a      	bics	r2, r1
 8003058:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_PRESCALER(htim, prescaler);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_Base_Init(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	0018      	movs	r0, r3
 8003066:	f005 fbdd 	bl	8008824 <HAL_TIM_Base_Init>
	__HAL_TIM_ENABLE(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2101      	movs	r1, #1
 8003076:	430a      	orrs	r2, r1
 8003078:	601a      	str	r2, [r3, #0]
}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	46bd      	mov	sp, r7
 800307e:	b002      	add	sp, #8
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	00001111 	.word	0x00001111
 8003088:	00000444 	.word	0x00000444

0800308c <enterSleepMode>:

void enterSleepMode(void) {
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
	transmitMessage("Entering Sleep Mode\n\r");
 8003090:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <enterSleepMode+0x2c>)
 8003092:	0018      	movs	r0, r3
 8003094:	f7ff ffb2 	bl	8002ffc <transmitMessage>
	HAL_SuspendTick();
 8003098:	f000 fe34 	bl	8003d04 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800309c:	2101      	movs	r1, #1
 800309e:	2000      	movs	r0, #0
 80030a0:	f004 f8f2 	bl	8007288 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 80030a4:	f000 fe3c 	bl	8003d20 <HAL_ResumeTick>
	transmitMessage("Exiting Sleep Mode\n\r");
 80030a8:	4b04      	ldr	r3, [pc, #16]	@ (80030bc <enterSleepMode+0x30>)
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7ff ffa6 	bl	8002ffc <transmitMessage>
}
 80030b0:	46c0      	nop			@ (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	0800ec7c 	.word	0x0800ec7c
 80030bc:	0800ec94 	.word	0x0800ec94

080030c0 <enterTimedSleep>:

void enterTimedSleep(TIM_HandleTypeDef *htim) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f005 fc44 	bl	8008958 <HAL_TIM_Base_Start_IT>

	HAL_SuspendTick();
 80030d0:	f000 fe18 	bl	8003d04 <HAL_SuspendTick>
	/* Request to enter SLEEP mode */
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80030d4:	2101      	movs	r1, #1
 80030d6:	2000      	movs	r0, #0
 80030d8:	f004 f8d6 	bl	8007288 <HAL_PWR_EnterSLEEPMode>
	/* Resume Tick interrupt if disabled prior to sleep mode entry */
	HAL_ResumeTick();
 80030dc:	f000 fe20 	bl	8003d20 <HAL_ResumeTick>

	HAL_TIM_Base_Stop_IT(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f005 fc8a 	bl	80089fc <HAL_TIM_Base_Stop_IT>
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a08      	ldr	r2, [pc, #32]	@ (8003120 <HAL_ADC_ConvCpltCallback+0x30>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10a      	bne.n	8003118 <HAL_ADC_ConvCpltCallback+0x28>

		adcValue = HAL_ADC_GetValue(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	0018      	movs	r0, r3
 8003106:	f000 ffcb 	bl	80040a0 <HAL_ADC_GetValue>
 800310a:	0002      	movs	r2, r0
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <HAL_ADC_ConvCpltCallback+0x34>)
 800310e:	601a      	str	r2, [r3, #0]
		transmitMessage("ADC Conversion Complete\n\r");
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <HAL_ADC_ConvCpltCallback+0x38>)
 8003112:	0018      	movs	r0, r3
 8003114:	f7ff ff72 	bl	8002ffc <transmitMessage>

	}
}
 8003118:	46c0      	nop			@ (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40012400 	.word	0x40012400
 8003124:	20000330 	.word	0x20000330
 8003128:	0800ecac 	.word	0x0800ecac

0800312c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c1) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

	if (hi2c1->Instance == I2C1) {

	}

}
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b08d      	sub	sp, #52	@ 0x34
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm;
	HAL_RTC_GetAlarm(hrtc, &sAlarm, RTC_ALARM_A, FORMAT_BIN);
 8003144:	2380      	movs	r3, #128	@ 0x80
 8003146:	005a      	lsls	r2, r3, #1
 8003148:	2408      	movs	r4, #8
 800314a:	1939      	adds	r1, r7, r4
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	2300      	movs	r3, #0
 8003150:	f005 f9e4 	bl	800851c <HAL_RTC_GetAlarm>
	if (sAlarm.AlarmTime.Seconds > 58) {
 8003154:	0022      	movs	r2, r4
 8003156:	18bb      	adds	r3, r7, r2
 8003158:	789b      	ldrb	r3, [r3, #2]
 800315a:	2b3a      	cmp	r3, #58	@ 0x3a
 800315c:	d903      	bls.n	8003166 <HAL_RTC_AlarmAEventCallback+0x2a>
		sAlarm.AlarmTime.Seconds = 10;
 800315e:	18bb      	adds	r3, r7, r2
 8003160:	220a      	movs	r2, #10
 8003162:	709a      	strb	r2, [r3, #2]
 8003164:	e006      	b.n	8003174 <HAL_RTC_AlarmAEventCallback+0x38>
	} else {
		sAlarm.AlarmTime.Seconds = sAlarm.AlarmTime.Seconds + 10;
 8003166:	2108      	movs	r1, #8
 8003168:	187b      	adds	r3, r7, r1
 800316a:	789b      	ldrb	r3, [r3, #2]
 800316c:	330a      	adds	r3, #10
 800316e:	b2da      	uxtb	r2, r3
 8003170:	187b      	adds	r3, r7, r1
 8003172:	709a      	strb	r2, [r3, #2]
	}
	while (HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN) != HAL_OK) {
 8003174:	46c0      	nop			@ (mov r8, r8)
 8003176:	2308      	movs	r3, #8
 8003178:	18f9      	adds	r1, r7, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	0018      	movs	r0, r3
 8003180:	f005 f874 	bl	800826c <HAL_RTC_SetAlarm_IT>
 8003184:	1e03      	subs	r3, r0, #0
 8003186:	d1f6      	bne.n	8003176 <HAL_RTC_AlarmAEventCallback+0x3a>
	}

	if (currentState == IDLE) {
 8003188:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <HAL_RTC_AlarmAEventCallback+0x74>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b06      	cmp	r3, #6
 800318e:	d10b      	bne.n	80031a8 <HAL_RTC_AlarmAEventCallback+0x6c>
		// Clear the Wake-up flag
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003190:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <HAL_RTC_AlarmAEventCallback+0x78>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b07      	ldr	r3, [pc, #28]	@ (80031b4 <HAL_RTC_AlarmAEventCallback+0x78>)
 8003196:	2104      	movs	r1, #4
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]
		transmitMessage("Entering Standby Mode\n\r");
 800319c:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_RTC_AlarmAEventCallback+0x7c>)
 800319e:	0018      	movs	r0, r3
 80031a0:	f7ff ff2c 	bl	8002ffc <transmitMessage>
		// Enter Standby mode
		HAL_PWR_EnterSTANDBYMode();
 80031a4:	f004 f88c 	bl	80072c0 <HAL_PWR_EnterSTANDBYMode>
	}

}
 80031a8:	46c0      	nop			@ (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b00d      	add	sp, #52	@ 0x34
 80031ae:	bd90      	pop	{r4, r7, pc}
 80031b0:	20000324 	.word	0x20000324
 80031b4:	40007000 	.word	0x40007000
 80031b8:	0800ecc8 	.word	0x0800ecc8

080031bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031c0:	b672      	cpsid	i
}
 80031c2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	e7fd      	b.n	80031c4 <Error_Handler+0x8>

080031c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b090      	sub	sp, #64	@ 0x40
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80031ce:	232c      	movs	r3, #44	@ 0x2c
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	0018      	movs	r0, r3
 80031d4:	2314      	movs	r3, #20
 80031d6:	001a      	movs	r2, r3
 80031d8:	2100      	movs	r1, #0
 80031da:	f007 ff9f 	bl	800b11c <memset>
  RTC_DateTypeDef sDate = {0};
 80031de:	2328      	movs	r3, #40	@ 0x28
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80031e6:	003b      	movs	r3, r7
 80031e8:	0018      	movs	r0, r3
 80031ea:	2328      	movs	r3, #40	@ 0x28
 80031ec:	001a      	movs	r2, r3
 80031ee:	2100      	movs	r1, #0
 80031f0:	f007 ff94 	bl	800b11c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80031f4:	4b3f      	ldr	r3, [pc, #252]	@ (80032f4 <MX_RTC_Init+0x12c>)
 80031f6:	4a40      	ldr	r2, [pc, #256]	@ (80032f8 <MX_RTC_Init+0x130>)
 80031f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031fa:	4b3e      	ldr	r3, [pc, #248]	@ (80032f4 <MX_RTC_Init+0x12c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003200:	4b3c      	ldr	r3, [pc, #240]	@ (80032f4 <MX_RTC_Init+0x12c>)
 8003202:	227f      	movs	r2, #127	@ 0x7f
 8003204:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003206:	4b3b      	ldr	r3, [pc, #236]	@ (80032f4 <MX_RTC_Init+0x12c>)
 8003208:	22ff      	movs	r2, #255	@ 0xff
 800320a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800320c:	4b39      	ldr	r3, [pc, #228]	@ (80032f4 <MX_RTC_Init+0x12c>)
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003212:	4b38      	ldr	r3, [pc, #224]	@ (80032f4 <MX_RTC_Init+0x12c>)
 8003214:	2200      	movs	r2, #0
 8003216:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003218:	4b36      	ldr	r3, [pc, #216]	@ (80032f4 <MX_RTC_Init+0x12c>)
 800321a:	2200      	movs	r2, #0
 800321c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800321e:	4b35      	ldr	r3, [pc, #212]	@ (80032f4 <MX_RTC_Init+0x12c>)
 8003220:	0018      	movs	r0, r3
 8003222:	f004 fe55 	bl	8007ed0 <HAL_RTC_Init>
 8003226:	1e03      	subs	r3, r0, #0
 8003228:	d001      	beq.n	800322e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800322a:	f7ff ffc7 	bl	80031bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800322e:	212c      	movs	r1, #44	@ 0x2c
 8003230:	187b      	adds	r3, r7, r1
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003236:	187b      	adds	r3, r7, r1
 8003238:	2200      	movs	r2, #0
 800323a:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800323c:	187b      	adds	r3, r7, r1
 800323e:	2200      	movs	r2, #0
 8003240:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003242:	187b      	adds	r3, r7, r1
 8003244:	2200      	movs	r2, #0
 8003246:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003248:	187b      	adds	r3, r7, r1
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800324e:	1879      	adds	r1, r7, r1
 8003250:	4b28      	ldr	r3, [pc, #160]	@ (80032f4 <MX_RTC_Init+0x12c>)
 8003252:	2200      	movs	r2, #0
 8003254:	0018      	movs	r0, r3
 8003256:	f004 fed3 	bl	8008000 <HAL_RTC_SetTime>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d001      	beq.n	8003262 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800325e:	f7ff ffad 	bl	80031bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003262:	2128      	movs	r1, #40	@ 0x28
 8003264:	187b      	adds	r3, r7, r1
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800326a:	187b      	adds	r3, r7, r1
 800326c:	2201      	movs	r2, #1
 800326e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003270:	187b      	adds	r3, r7, r1
 8003272:	2201      	movs	r2, #1
 8003274:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003276:	187b      	adds	r3, r7, r1
 8003278:	2200      	movs	r2, #0
 800327a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800327c:	1879      	adds	r1, r7, r1
 800327e:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <MX_RTC_Init+0x12c>)
 8003280:	2200      	movs	r2, #0
 8003282:	0018      	movs	r0, r3
 8003284:	f004 ff62 	bl	800814c <HAL_RTC_SetDate>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d001      	beq.n	8003290 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800328c:	f7ff ff96 	bl	80031bc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003290:	003b      	movs	r3, r7
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003296:	003b      	movs	r3, r7
 8003298:	2200      	movs	r2, #0
 800329a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 10;
 800329c:	003b      	movs	r3, r7
 800329e:	220a      	movs	r2, #10
 80032a0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80032a2:	003b      	movs	r3, r7
 80032a4:	2200      	movs	r2, #0
 80032a6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80032a8:	003b      	movs	r3, r7
 80032aa:	2200      	movs	r2, #0
 80032ac:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80032ae:	003b      	movs	r3, r7
 80032b0:	2200      	movs	r2, #0
 80032b2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80032b4:	003b      	movs	r3, r7
 80032b6:	4a11      	ldr	r2, [pc, #68]	@ (80032fc <MX_RTC_Init+0x134>)
 80032b8:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80032ba:	003b      	movs	r3, r7
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80032c0:	003b      	movs	r3, r7
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80032c6:	003b      	movs	r3, r7
 80032c8:	2220      	movs	r2, #32
 80032ca:	2101      	movs	r1, #1
 80032cc:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80032ce:	003b      	movs	r3, r7
 80032d0:	2280      	movs	r2, #128	@ 0x80
 80032d2:	0052      	lsls	r2, r2, #1
 80032d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80032d6:	0039      	movs	r1, r7
 80032d8:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <MX_RTC_Init+0x12c>)
 80032da:	2200      	movs	r2, #0
 80032dc:	0018      	movs	r0, r3
 80032de:	f004 ffc5 	bl	800826c <HAL_RTC_SetAlarm_IT>
 80032e2:	1e03      	subs	r3, r0, #0
 80032e4:	d001      	beq.n	80032ea <MX_RTC_Init+0x122>
  {
    Error_Handler();
 80032e6:	f7ff ff69 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b010      	add	sp, #64	@ 0x40
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			@ (mov r8, r8)
 80032f4:	20000364 	.word	0x20000364
 80032f8:	40002800 	.word	0x40002800
 80032fc:	80808000 	.word	0x80808000

08003300 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b089      	sub	sp, #36	@ 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	240c      	movs	r4, #12
 800330a:	193b      	adds	r3, r7, r4
 800330c:	0018      	movs	r0, r3
 800330e:	2314      	movs	r3, #20
 8003310:	001a      	movs	r2, r3
 8003312:	2100      	movs	r1, #0
 8003314:	f007 ff02 	bl	800b11c <memset>
  if(rtcHandle->Instance==RTC)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a14      	ldr	r2, [pc, #80]	@ (8003370 <HAL_RTC_MspInit+0x70>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d122      	bne.n	8003368 <HAL_RTC_MspInit+0x68>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003322:	4b14      	ldr	r3, [pc, #80]	@ (8003374 <HAL_RTC_MspInit+0x74>)
 8003324:	6a1a      	ldr	r2, [r3, #32]
 8003326:	4b13      	ldr	r3, [pc, #76]	@ (8003374 <HAL_RTC_MspInit+0x74>)
 8003328:	2180      	movs	r1, #128	@ 0x80
 800332a:	0209      	lsls	r1, r1, #8
 800332c:	430a      	orrs	r2, r1
 800332e:	621a      	str	r2, [r3, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003330:	4b10      	ldr	r3, [pc, #64]	@ (8003374 <HAL_RTC_MspInit+0x74>)
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	4b0f      	ldr	r3, [pc, #60]	@ (8003374 <HAL_RTC_MspInit+0x74>)
 8003336:	2180      	movs	r1, #128	@ 0x80
 8003338:	0309      	lsls	r1, r1, #12
 800333a:	430a      	orrs	r2, r1
 800333c:	615a      	str	r2, [r3, #20]
 800333e:	4b0d      	ldr	r3, [pc, #52]	@ (8003374 <HAL_RTC_MspInit+0x74>)
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	2380      	movs	r3, #128	@ 0x80
 8003344:	031b      	lsls	r3, r3, #12
 8003346:	4013      	ands	r3, r2
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT_ALARM
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800334c:	193b      	adds	r3, r7, r4
 800334e:	4a0a      	ldr	r2, [pc, #40]	@ (8003378 <HAL_RTC_MspInit+0x78>)
 8003350:	0019      	movs	r1, r3
 8003352:	0010      	movs	r0, r2
 8003354:	f001 fea8 	bl	80050a8 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003358:	2200      	movs	r2, #0
 800335a:	2100      	movs	r1, #0
 800335c:	2002      	movs	r0, #2
 800335e:	f001 f99d 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003362:	2002      	movs	r0, #2
 8003364:	f001 f9af 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003368:	46c0      	nop			@ (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	b009      	add	sp, #36	@ 0x24
 800336e:	bd90      	pop	{r4, r7, pc}
 8003370:	40002800 	.word	0x40002800
 8003374:	40021000 	.word	0x40021000
 8003378:	48000800 	.word	0x48000800

0800337c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	4b0f      	ldr	r3, [pc, #60]	@ (80033c0 <HAL_MspInit+0x44>)
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	4b0e      	ldr	r3, [pc, #56]	@ (80033c0 <HAL_MspInit+0x44>)
 8003388:	2101      	movs	r1, #1
 800338a:	430a      	orrs	r2, r1
 800338c:	619a      	str	r2, [r3, #24]
 800338e:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_MspInit+0x44>)
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2201      	movs	r2, #1
 8003394:	4013      	ands	r3, r2
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <HAL_MspInit+0x44>)
 800339c:	69da      	ldr	r2, [r3, #28]
 800339e:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <HAL_MspInit+0x44>)
 80033a0:	2180      	movs	r1, #128	@ 0x80
 80033a2:	0549      	lsls	r1, r1, #21
 80033a4:	430a      	orrs	r2, r1
 80033a6:	61da      	str	r2, [r3, #28]
 80033a8:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_MspInit+0x44>)
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	2380      	movs	r3, #128	@ 0x80
 80033ae:	055b      	lsls	r3, r3, #21
 80033b0:	4013      	ands	r3, r2
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b002      	add	sp, #8
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	40021000 	.word	0x40021000

080033c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033c8:	46c0      	nop			@ (mov r8, r8)
 80033ca:	e7fd      	b.n	80033c8 <NMI_Handler+0x4>

080033cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033d0:	46c0      	nop			@ (mov r8, r8)
 80033d2:	e7fd      	b.n	80033d0 <HardFault_Handler+0x4>

080033d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033d8:	46c0      	nop			@ (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ec:	f000 fc4a 	bl	8003c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033f0:	46c0      	nop			@ (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC Interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80033fc:	4b03      	ldr	r3, [pc, #12]	@ (800340c <RTC_IRQHandler+0x14>)
 80033fe:	0018      	movs	r0, r3
 8003400:	f005 f90c 	bl	800861c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	20000364 	.word	0x20000364

08003410 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003414:	2008      	movs	r0, #8
 8003416:	f001 ffdd 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003424:	4b03      	ldr	r3, [pc, #12]	@ (8003434 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8003426:	0018      	movs	r0, r3
 8003428:	f001 fd29 	bl	8004e7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 800342c:	46c0      	nop			@ (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	2000028c 	.word	0x2000028c

08003438 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800343c:	4b03      	ldr	r3, [pc, #12]	@ (800344c <ADC1_COMP_IRQHandler+0x14>)
 800343e:	0018      	movs	r0, r3
 8003440:	f000 fe3a 	bl	80040b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8003444:	46c0      	nop			@ (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	20000238 	.word	0x20000238

08003450 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <TIM3_IRQHandler+0x14>)
 8003456:	0018      	movs	r0, r3
 8003458:	f005 fafe 	bl	8008a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800345c:	46c0      	nop			@ (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	20000388 	.word	0x20000388

08003468 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <TIM6_DAC_IRQHandler+0x1c>)
 800346e:	0018      	movs	r0, r3
 8003470:	f005 faf2 	bl	8008a58 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8003474:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <TIM6_DAC_IRQHandler+0x20>)
 8003476:	0018      	movs	r0, r3
 8003478:	f001 fadc 	bl	8004a34 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800347c:	46c0      	nop			@ (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	200003d0 	.word	0x200003d0
 8003488:	20000278 	.word	0x20000278

0800348c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003490:	4b03      	ldr	r3, [pc, #12]	@ (80034a0 <TIM7_IRQHandler+0x14>)
 8003492:	0018      	movs	r0, r3
 8003494:	f005 fae0 	bl	8008a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	20000418 	.word	0x20000418

080034a4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80034a8:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <TIM14_IRQHandler+0x14>)
 80034aa:	0018      	movs	r0, r3
 80034ac:	f005 fad4 	bl	8008a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	20000460 	.word	0x20000460

080034bc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80034c0:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <I2C1_IRQHandler+0x2c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	23e0      	movs	r3, #224	@ 0xe0
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4013      	ands	r3, r2
 80034cc:	d004      	beq.n	80034d8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80034ce:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <I2C1_IRQHandler+0x2c>)
 80034d0:	0018      	movs	r0, r3
 80034d2:	f002 f98b 	bl	80057ec <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80034d6:	e003      	b.n	80034e0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80034d8:	4b03      	ldr	r3, [pc, #12]	@ (80034e8 <I2C1_IRQHandler+0x2c>)
 80034da:	0018      	movs	r0, r3
 80034dc:	f002 f96c 	bl	80057b8 <HAL_I2C_EV_IRQHandler>
}
 80034e0:	46c0      	nop			@ (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	200002d0 	.word	0x200002d0

080034ec <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);(&huart8);
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <USART3_8_IRQHandler+0x14>)
 80034f2:	0018      	movs	r0, r3
 80034f4:	f005 ff1c 	bl	8009330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 80034f8:	46c0      	nop			@ (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	20000530 	.word	0x20000530

08003504 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  return 1;
 8003508:	2301      	movs	r3, #1
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <_kill>:

int _kill(int pid, int sig)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800351a:	f007 fe59 	bl	800b1d0 <__errno>
 800351e:	0003      	movs	r3, r0
 8003520:	2216      	movs	r2, #22
 8003522:	601a      	str	r2, [r3, #0]
  return -1;
 8003524:	2301      	movs	r3, #1
 8003526:	425b      	negs	r3, r3
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}

08003530 <_exit>:

void _exit (int status)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003538:	2301      	movs	r3, #1
 800353a:	425a      	negs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	0011      	movs	r1, r2
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff ffe5 	bl	8003510 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003546:	46c0      	nop			@ (mov r8, r8)
 8003548:	e7fd      	b.n	8003546 <_exit+0x16>

0800354a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	e00a      	b.n	8003572 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800355c:	e000      	b.n	8003560 <_read+0x16>
 800355e:	bf00      	nop
 8003560:	0001      	movs	r1, r0
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	60ba      	str	r2, [r7, #8]
 8003568:	b2ca      	uxtb	r2, r1
 800356a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3301      	adds	r3, #1
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	429a      	cmp	r2, r3
 8003578:	dbf0      	blt.n	800355c <_read+0x12>
  }

  return len;
 800357a:	687b      	ldr	r3, [r7, #4]
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b006      	add	sp, #24
 8003582:	bd80      	pop	{r7, pc}

08003584 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e009      	b.n	80035aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	60ba      	str	r2, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	0018      	movs	r0, r3
 80035a0:	e000      	b.n	80035a4 <_write+0x20>
 80035a2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3301      	adds	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	dbf1      	blt.n	8003596 <_write+0x12>
  }
  return len;
 80035b2:	687b      	ldr	r3, [r7, #4]
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b006      	add	sp, #24
 80035ba:	bd80      	pop	{r7, pc}

080035bc <_close>:

int _close(int file)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035c4:	2301      	movs	r3, #1
 80035c6:	425b      	negs	r3, r3
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2280      	movs	r2, #128	@ 0x80
 80035de:	0192      	lsls	r2, r2, #6
 80035e0:	605a      	str	r2, [r3, #4]
  return 0;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	0018      	movs	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_isatty>:

int _isatty(int file)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035f4:	2301      	movs	r3, #1
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b002      	add	sp, #8
 80035fc:	bd80      	pop	{r7, pc}

080035fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}

08003614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800361c:	4a14      	ldr	r2, [pc, #80]	@ (8003670 <_sbrk+0x5c>)
 800361e:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <_sbrk+0x60>)
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003628:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <_sbrk+0x64>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003630:	4b11      	ldr	r3, [pc, #68]	@ (8003678 <_sbrk+0x64>)
 8003632:	4a12      	ldr	r2, [pc, #72]	@ (800367c <_sbrk+0x68>)
 8003634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003636:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <_sbrk+0x64>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	429a      	cmp	r2, r3
 8003642:	d207      	bcs.n	8003654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003644:	f007 fdc4 	bl	800b1d0 <__errno>
 8003648:	0003      	movs	r3, r0
 800364a:	220c      	movs	r2, #12
 800364c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800364e:	2301      	movs	r3, #1
 8003650:	425b      	negs	r3, r3
 8003652:	e009      	b.n	8003668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003654:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <_sbrk+0x64>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800365a:	4b07      	ldr	r3, [pc, #28]	@ (8003678 <_sbrk+0x64>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	18d2      	adds	r2, r2, r3
 8003662:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <_sbrk+0x64>)
 8003664:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b006      	add	sp, #24
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20008000 	.word	0x20008000
 8003674:	00000400 	.word	0x00000400
 8003678:	20000384 	.word	0x20000384
 800367c:	20000708 	.word	0x20000708

08003680 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003684:	46c0      	nop			@ (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003692:	2308      	movs	r3, #8
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	0018      	movs	r0, r3
 8003698:	2310      	movs	r3, #16
 800369a:	001a      	movs	r2, r3
 800369c:	2100      	movs	r1, #0
 800369e:	f007 fd3d 	bl	800b11c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036a2:	003b      	movs	r3, r7
 80036a4:	0018      	movs	r0, r3
 80036a6:	2308      	movs	r3, #8
 80036a8:	001a      	movs	r2, r3
 80036aa:	2100      	movs	r1, #0
 80036ac:	f007 fd36 	bl	800b11c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036b0:	4b1e      	ldr	r3, [pc, #120]	@ (800372c <MX_TIM3_Init+0xa0>)
 80036b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003730 <MX_TIM3_Init+0xa4>)
 80036b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 58;
 80036b6:	4b1d      	ldr	r3, [pc, #116]	@ (800372c <MX_TIM3_Init+0xa0>)
 80036b8:	223a      	movs	r2, #58	@ 0x3a
 80036ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <MX_TIM3_Init+0xa0>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80036c2:	4b1a      	ldr	r3, [pc, #104]	@ (800372c <MX_TIM3_Init+0xa0>)
 80036c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003734 <MX_TIM3_Init+0xa8>)
 80036c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c8:	4b18      	ldr	r3, [pc, #96]	@ (800372c <MX_TIM3_Init+0xa0>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ce:	4b17      	ldr	r3, [pc, #92]	@ (800372c <MX_TIM3_Init+0xa0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036d4:	4b15      	ldr	r3, [pc, #84]	@ (800372c <MX_TIM3_Init+0xa0>)
 80036d6:	0018      	movs	r0, r3
 80036d8:	f005 f8a4 	bl	8008824 <HAL_TIM_Base_Init>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80036e0:	f7ff fd6c 	bl	80031bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036e4:	2108      	movs	r1, #8
 80036e6:	187b      	adds	r3, r7, r1
 80036e8:	2280      	movs	r2, #128	@ 0x80
 80036ea:	0152      	lsls	r2, r2, #5
 80036ec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036ee:	187a      	adds	r2, r7, r1
 80036f0:	4b0e      	ldr	r3, [pc, #56]	@ (800372c <MX_TIM3_Init+0xa0>)
 80036f2:	0011      	movs	r1, r2
 80036f4:	0018      	movs	r0, r3
 80036f6:	f005 fa9d 	bl	8008c34 <HAL_TIM_ConfigClockSource>
 80036fa:	1e03      	subs	r3, r0, #0
 80036fc:	d001      	beq.n	8003702 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80036fe:	f7ff fd5d 	bl	80031bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003702:	003b      	movs	r3, r7
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003708:	003b      	movs	r3, r7
 800370a:	2200      	movs	r2, #0
 800370c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800370e:	003a      	movs	r2, r7
 8003710:	4b06      	ldr	r3, [pc, #24]	@ (800372c <MX_TIM3_Init+0xa0>)
 8003712:	0011      	movs	r1, r2
 8003714:	0018      	movs	r0, r3
 8003716:	f005 fca9 	bl	800906c <HAL_TIMEx_MasterConfigSynchronization>
 800371a:	1e03      	subs	r3, r0, #0
 800371c:	d001      	beq.n	8003722 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800371e:	f7ff fd4d 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b006      	add	sp, #24
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000388 	.word	0x20000388
 8003730:	40000400 	.word	0x40000400
 8003734:	0000ffff 	.word	0x0000ffff

08003738 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800373e:	003b      	movs	r3, r7
 8003740:	0018      	movs	r0, r3
 8003742:	2308      	movs	r3, #8
 8003744:	001a      	movs	r2, r3
 8003746:	2100      	movs	r1, #0
 8003748:	f007 fce8 	bl	800b11c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800374c:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <MX_TIM6_Init+0x6c>)
 800374e:	4a16      	ldr	r2, [pc, #88]	@ (80037a8 <MX_TIM6_Init+0x70>)
 8003750:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 625;
 8003752:	4b14      	ldr	r3, [pc, #80]	@ (80037a4 <MX_TIM6_Init+0x6c>)
 8003754:	4a15      	ldr	r2, [pc, #84]	@ (80037ac <MX_TIM6_Init+0x74>)
 8003756:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003758:	4b12      	ldr	r3, [pc, #72]	@ (80037a4 <MX_TIM6_Init+0x6c>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 800375e:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <MX_TIM6_Init+0x6c>)
 8003760:	2201      	movs	r2, #1
 8003762:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003764:	4b0f      	ldr	r3, [pc, #60]	@ (80037a4 <MX_TIM6_Init+0x6c>)
 8003766:	2200      	movs	r2, #0
 8003768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800376a:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <MX_TIM6_Init+0x6c>)
 800376c:	0018      	movs	r0, r3
 800376e:	f005 f859 	bl	8008824 <HAL_TIM_Base_Init>
 8003772:	1e03      	subs	r3, r0, #0
 8003774:	d001      	beq.n	800377a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003776:	f7ff fd21 	bl	80031bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800377a:	003b      	movs	r3, r7
 800377c:	2220      	movs	r2, #32
 800377e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003780:	003b      	movs	r3, r7
 8003782:	2200      	movs	r2, #0
 8003784:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003786:	003a      	movs	r2, r7
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <MX_TIM6_Init+0x6c>)
 800378a:	0011      	movs	r1, r2
 800378c:	0018      	movs	r0, r3
 800378e:	f005 fc6d 	bl	800906c <HAL_TIMEx_MasterConfigSynchronization>
 8003792:	1e03      	subs	r3, r0, #0
 8003794:	d001      	beq.n	800379a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003796:	f7ff fd11 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b002      	add	sp, #8
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	200003d0 	.word	0x200003d0
 80037a8:	40001000 	.word	0x40001000
 80037ac:	00000271 	.word	0x00000271

080037b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b6:	003b      	movs	r3, r7
 80037b8:	0018      	movs	r0, r3
 80037ba:	2308      	movs	r3, #8
 80037bc:	001a      	movs	r2, r3
 80037be:	2100      	movs	r1, #0
 80037c0:	f007 fcac 	bl	800b11c <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80037c4:	4b15      	ldr	r3, [pc, #84]	@ (800381c <MX_TIM7_Init+0x6c>)
 80037c6:	4a16      	ldr	r2, [pc, #88]	@ (8003820 <MX_TIM7_Init+0x70>)
 80037c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80037ca:	4b14      	ldr	r3, [pc, #80]	@ (800381c <MX_TIM7_Init+0x6c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d0:	4b12      	ldr	r3, [pc, #72]	@ (800381c <MX_TIM7_Init+0x6c>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 40000;
 80037d6:	4b11      	ldr	r3, [pc, #68]	@ (800381c <MX_TIM7_Init+0x6c>)
 80037d8:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <MX_TIM7_Init+0x74>)
 80037da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037dc:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <MX_TIM7_Init+0x6c>)
 80037de:	2200      	movs	r2, #0
 80037e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80037e2:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <MX_TIM7_Init+0x6c>)
 80037e4:	0018      	movs	r0, r3
 80037e6:	f005 f81d 	bl	8008824 <HAL_TIM_Base_Init>
 80037ea:	1e03      	subs	r3, r0, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80037ee:	f7ff fce5 	bl	80031bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f2:	003b      	movs	r3, r7
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f8:	003b      	movs	r3, r7
 80037fa:	2200      	movs	r2, #0
 80037fc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80037fe:	003a      	movs	r2, r7
 8003800:	4b06      	ldr	r3, [pc, #24]	@ (800381c <MX_TIM7_Init+0x6c>)
 8003802:	0011      	movs	r1, r2
 8003804:	0018      	movs	r0, r3
 8003806:	f005 fc31 	bl	800906c <HAL_TIMEx_MasterConfigSynchronization>
 800380a:	1e03      	subs	r3, r0, #0
 800380c:	d001      	beq.n	8003812 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800380e:	f7ff fcd5 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	b002      	add	sp, #8
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	20000418 	.word	0x20000418
 8003820:	40001400 	.word	0x40001400
 8003824:	00009c40 	.word	0x00009c40

08003828 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800382c:	4b0e      	ldr	r3, [pc, #56]	@ (8003868 <MX_TIM14_Init+0x40>)
 800382e:	4a0f      	ldr	r2, [pc, #60]	@ (800386c <MX_TIM14_Init+0x44>)
 8003830:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8003832:	4b0d      	ldr	r3, [pc, #52]	@ (8003868 <MX_TIM14_Init+0x40>)
 8003834:	2200      	movs	r2, #0
 8003836:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003838:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <MX_TIM14_Init+0x40>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 200;
 800383e:	4b0a      	ldr	r3, [pc, #40]	@ (8003868 <MX_TIM14_Init+0x40>)
 8003840:	22c8      	movs	r2, #200	@ 0xc8
 8003842:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003844:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <MX_TIM14_Init+0x40>)
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <MX_TIM14_Init+0x40>)
 800384c:	2200      	movs	r2, #0
 800384e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <MX_TIM14_Init+0x40>)
 8003852:	0018      	movs	r0, r3
 8003854:	f004 ffe6 	bl	8008824 <HAL_TIM_Base_Init>
 8003858:	1e03      	subs	r3, r0, #0
 800385a:	d001      	beq.n	8003860 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800385c:	f7ff fcae 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003860:	46c0      	nop			@ (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	20000460 	.word	0x20000460
 800386c:	40002000 	.word	0x40002000

08003870 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	@ 0x30
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	231c      	movs	r3, #28
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	0018      	movs	r0, r3
 800387e:	2314      	movs	r3, #20
 8003880:	001a      	movs	r2, r3
 8003882:	2100      	movs	r1, #0
 8003884:	f007 fc4a 	bl	800b11c <memset>
  if(tim_baseHandle->Instance==TIM3)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a47      	ldr	r2, [pc, #284]	@ (80039ac <HAL_TIM_Base_MspInit+0x13c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d114      	bne.n	80038bc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003892:	4b47      	ldr	r3, [pc, #284]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	4b46      	ldr	r3, [pc, #280]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 8003898:	2102      	movs	r1, #2
 800389a:	430a      	orrs	r2, r1
 800389c:	61da      	str	r2, [r3, #28]
 800389e:	4b44      	ldr	r3, [pc, #272]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	2202      	movs	r2, #2
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	69bb      	ldr	r3, [r7, #24]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2100      	movs	r1, #0
 80038ae:	2010      	movs	r0, #16
 80038b0:	f000 fef4 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038b4:	2010      	movs	r0, #16
 80038b6:	f000 ff06 	bl	80046c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80038ba:	e072      	b.n	80039a2 <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM6)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a3c      	ldr	r2, [pc, #240]	@ (80039b4 <HAL_TIM_Base_MspInit+0x144>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d114      	bne.n	80038f0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038c6:	4b3a      	ldr	r3, [pc, #232]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 80038c8:	69da      	ldr	r2, [r3, #28]
 80038ca:	4b39      	ldr	r3, [pc, #228]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 80038cc:	2110      	movs	r1, #16
 80038ce:	430a      	orrs	r2, r1
 80038d0:	61da      	str	r2, [r3, #28]
 80038d2:	4b37      	ldr	r3, [pc, #220]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	2210      	movs	r2, #16
 80038d8:	4013      	ands	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80038de:	2200      	movs	r2, #0
 80038e0:	2100      	movs	r1, #0
 80038e2:	2011      	movs	r0, #17
 80038e4:	f000 feda 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038e8:	2011      	movs	r0, #17
 80038ea:	f000 feec 	bl	80046c6 <HAL_NVIC_EnableIRQ>
}
 80038ee:	e058      	b.n	80039a2 <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM7)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a30      	ldr	r2, [pc, #192]	@ (80039b8 <HAL_TIM_Base_MspInit+0x148>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d114      	bne.n	8003924 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038fa:	4b2d      	ldr	r3, [pc, #180]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	4b2c      	ldr	r3, [pc, #176]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 8003900:	2120      	movs	r1, #32
 8003902:	430a      	orrs	r2, r1
 8003904:	61da      	str	r2, [r3, #28]
 8003906:	4b2a      	ldr	r3, [pc, #168]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	2220      	movs	r2, #32
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	2100      	movs	r1, #0
 8003916:	2012      	movs	r0, #18
 8003918:	f000 fec0 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800391c:	2012      	movs	r0, #18
 800391e:	f000 fed2 	bl	80046c6 <HAL_NVIC_EnableIRQ>
}
 8003922:	e03e      	b.n	80039a2 <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM14)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a24      	ldr	r2, [pc, #144]	@ (80039bc <HAL_TIM_Base_MspInit+0x14c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d139      	bne.n	80039a2 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800392e:	4b20      	ldr	r3, [pc, #128]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	4b1f      	ldr	r3, [pc, #124]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 8003934:	2180      	movs	r1, #128	@ 0x80
 8003936:	0049      	lsls	r1, r1, #1
 8003938:	430a      	orrs	r2, r1
 800393a:	61da      	str	r2, [r3, #28]
 800393c:	4b1c      	ldr	r3, [pc, #112]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	2380      	movs	r3, #128	@ 0x80
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394a:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	4b18      	ldr	r3, [pc, #96]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 8003950:	2180      	movs	r1, #128	@ 0x80
 8003952:	02c9      	lsls	r1, r1, #11
 8003954:	430a      	orrs	r2, r1
 8003956:	615a      	str	r2, [r3, #20]
 8003958:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <HAL_TIM_Base_MspInit+0x140>)
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	2380      	movs	r3, #128	@ 0x80
 800395e:	02db      	lsls	r3, r3, #11
 8003960:	4013      	ands	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003966:	211c      	movs	r1, #28
 8003968:	187b      	adds	r3, r7, r1
 800396a:	2202      	movs	r2, #2
 800396c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	187b      	adds	r3, r7, r1
 8003970:	2202      	movs	r2, #2
 8003972:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	187b      	adds	r3, r7, r1
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397a:	187b      	adds	r3, r7, r1
 800397c:	2200      	movs	r2, #0
 800397e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8003980:	187b      	adds	r3, r7, r1
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003986:	187b      	adds	r3, r7, r1
 8003988:	4a0d      	ldr	r2, [pc, #52]	@ (80039c0 <HAL_TIM_Base_MspInit+0x150>)
 800398a:	0019      	movs	r1, r3
 800398c:	0010      	movs	r0, r2
 800398e:	f001 fb8b 	bl	80050a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003992:	2200      	movs	r2, #0
 8003994:	2100      	movs	r1, #0
 8003996:	2013      	movs	r0, #19
 8003998:	f000 fe80 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800399c:	2013      	movs	r0, #19
 800399e:	f000 fe92 	bl	80046c6 <HAL_NVIC_EnableIRQ>
}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b00c      	add	sp, #48	@ 0x30
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40001000 	.word	0x40001000
 80039b8:	40001400 	.word	0x40001400
 80039bc:	40002000 	.word	0x40002000
 80039c0:	48000400 	.word	0x48000400

080039c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart8;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039c8:	4b14      	ldr	r3, [pc, #80]	@ (8003a1c <MX_USART2_UART_Init+0x58>)
 80039ca:	4a15      	ldr	r2, [pc, #84]	@ (8003a20 <MX_USART2_UART_Init+0x5c>)
 80039cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039ce:	4b13      	ldr	r3, [pc, #76]	@ (8003a1c <MX_USART2_UART_Init+0x58>)
 80039d0:	22e1      	movs	r2, #225	@ 0xe1
 80039d2:	0252      	lsls	r2, r2, #9
 80039d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039d6:	4b11      	ldr	r3, [pc, #68]	@ (8003a1c <MX_USART2_UART_Init+0x58>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039dc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a1c <MX_USART2_UART_Init+0x58>)
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039e2:	4b0e      	ldr	r3, [pc, #56]	@ (8003a1c <MX_USART2_UART_Init+0x58>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039e8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a1c <MX_USART2_UART_Init+0x58>)
 80039ea:	220c      	movs	r2, #12
 80039ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ee:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <MX_USART2_UART_Init+0x58>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f4:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <MX_USART2_UART_Init+0x58>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039fa:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <MX_USART2_UART_Init+0x58>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a00:	4b06      	ldr	r3, [pc, #24]	@ (8003a1c <MX_USART2_UART_Init+0x58>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a06:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <MX_USART2_UART_Init+0x58>)
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f005 fb9d 	bl	8009148 <HAL_UART_Init>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d001      	beq.n	8003a16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a12:	f7ff fbd3 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	200004a8 	.word	0x200004a8
 8003a20:	40004400 	.word	0x40004400

08003a24 <MX_USART8_UART_Init>:
/* USART8 init function */

void MX_USART8_UART_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART8_Init 0 */

  /* USER CODE BEGIN USART8_Init 1 */

  /* USER CODE END USART8_Init 1 */
  huart8.Instance = USART8;
 8003a28:	4b14      	ldr	r3, [pc, #80]	@ (8003a7c <MX_USART8_UART_Init+0x58>)
 8003a2a:	4a15      	ldr	r2, [pc, #84]	@ (8003a80 <MX_USART8_UART_Init+0x5c>)
 8003a2c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8003a2e:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <MX_USART8_UART_Init+0x58>)
 8003a30:	2296      	movs	r2, #150	@ 0x96
 8003a32:	0192      	lsls	r2, r2, #6
 8003a34:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003a36:	4b11      	ldr	r3, [pc, #68]	@ (8003a7c <MX_USART8_UART_Init+0x58>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a7c <MX_USART8_UART_Init+0x58>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003a42:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <MX_USART8_UART_Init+0x58>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003a48:	4b0c      	ldr	r3, [pc, #48]	@ (8003a7c <MX_USART8_UART_Init+0x58>)
 8003a4a:	220c      	movs	r2, #12
 8003a4c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <MX_USART8_UART_Init+0x58>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a54:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <MX_USART8_UART_Init+0x58>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a5a:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <MX_USART8_UART_Init+0x58>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a60:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <MX_USART8_UART_Init+0x58>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003a66:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <MX_USART8_UART_Init+0x58>)
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f005 fb6d 	bl	8009148 <HAL_UART_Init>
 8003a6e:	1e03      	subs	r3, r0, #0
 8003a70:	d001      	beq.n	8003a76 <MX_USART8_UART_Init+0x52>
  {
    Error_Handler();
 8003a72:	f7ff fba3 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN USART8_Init 2 */

  /* USER CODE END USART8_Init 2 */

}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000530 	.word	0x20000530
 8003a80:	40011c00 	.word	0x40011c00

08003a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b08d      	sub	sp, #52	@ 0x34
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	241c      	movs	r4, #28
 8003a8e:	193b      	adds	r3, r7, r4
 8003a90:	0018      	movs	r0, r3
 8003a92:	2314      	movs	r3, #20
 8003a94:	001a      	movs	r2, r3
 8003a96:	2100      	movs	r1, #0
 8003a98:	f007 fb40 	bl	800b11c <memset>
  if(uartHandle->Instance==USART2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a3b      	ldr	r2, [pc, #236]	@ (8003b90 <HAL_UART_MspInit+0x10c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d133      	bne.n	8003b0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003aac:	2180      	movs	r1, #128	@ 0x80
 8003aae:	0289      	lsls	r1, r1, #10
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	61da      	str	r2, [r3, #28]
 8003ab4:	4b37      	ldr	r3, [pc, #220]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	2380      	movs	r3, #128	@ 0x80
 8003aba:	029b      	lsls	r3, r3, #10
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	4b34      	ldr	r3, [pc, #208]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	4b33      	ldr	r3, [pc, #204]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003ac8:	2180      	movs	r1, #128	@ 0x80
 8003aca:	0289      	lsls	r1, r1, #10
 8003acc:	430a      	orrs	r2, r1
 8003ace:	615a      	str	r2, [r3, #20]
 8003ad0:	4b30      	ldr	r3, [pc, #192]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	2380      	movs	r3, #128	@ 0x80
 8003ad6:	029b      	lsls	r3, r3, #10
 8003ad8:	4013      	ands	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ade:	0021      	movs	r1, r4
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	220c      	movs	r2, #12
 8003ae4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2202      	movs	r2, #2
 8003aea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	2200      	movs	r2, #0
 8003af0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	2200      	movs	r2, #0
 8003af6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2201      	movs	r2, #1
 8003afc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afe:	187a      	adds	r2, r7, r1
 8003b00:	2390      	movs	r3, #144	@ 0x90
 8003b02:	05db      	lsls	r3, r3, #23
 8003b04:	0011      	movs	r1, r2
 8003b06:	0018      	movs	r0, r3
 8003b08:	f001 face 	bl	80050a8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
  /* USER CODE BEGIN USART8_MspInit 1 */

  /* USER CODE END USART8_MspInit 1 */
  }
}
 8003b0c:	e03c      	b.n	8003b88 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a21      	ldr	r2, [pc, #132]	@ (8003b98 <HAL_UART_MspInit+0x114>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d137      	bne.n	8003b88 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART8_CLK_ENABLE();
 8003b18:	4b1e      	ldr	r3, [pc, #120]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003b1e:	2180      	movs	r1, #128	@ 0x80
 8003b20:	430a      	orrs	r2, r1
 8003b22:	619a      	str	r2, [r3, #24]
 8003b24:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b30:	4b18      	ldr	r3, [pc, #96]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	4b17      	ldr	r3, [pc, #92]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	0309      	lsls	r1, r1, #12
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	615a      	str	r2, [r3, #20]
 8003b3e:	4b15      	ldr	r3, [pc, #84]	@ (8003b94 <HAL_UART_MspInit+0x110>)
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	031b      	lsls	r3, r3, #12
 8003b46:	4013      	ands	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b4c:	211c      	movs	r1, #28
 8003b4e:	187b      	adds	r3, r7, r1
 8003b50:	220c      	movs	r2, #12
 8003b52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	187b      	adds	r3, r7, r1
 8003b56:	2202      	movs	r2, #2
 8003b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5a:	187b      	adds	r3, r7, r1
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b60:	187b      	adds	r3, r7, r1
 8003b62:	2203      	movs	r2, #3
 8003b64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART8;
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	2202      	movs	r2, #2
 8003b6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b9c <HAL_UART_MspInit+0x118>)
 8003b70:	0019      	movs	r1, r3
 8003b72:	0010      	movs	r0, r2
 8003b74:	f001 fa98 	bl	80050a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	201d      	movs	r0, #29
 8003b7e:	f000 fd8d 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8003b82:	201d      	movs	r0, #29
 8003b84:	f000 fd9f 	bl	80046c6 <HAL_NVIC_EnableIRQ>
}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b00d      	add	sp, #52	@ 0x34
 8003b8e:	bd90      	pop	{r4, r7, pc}
 8003b90:	40004400 	.word	0x40004400
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40011c00 	.word	0x40011c00
 8003b9c:	48000800 	.word	0x48000800

08003ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ba0:	480d      	ldr	r0, [pc, #52]	@ (8003bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ba2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ba4:	f7ff fd6c 	bl	8003680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ba8:	480c      	ldr	r0, [pc, #48]	@ (8003bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8003baa:	490d      	ldr	r1, [pc, #52]	@ (8003be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003bac:	4a0d      	ldr	r2, [pc, #52]	@ (8003be4 <LoopForever+0xe>)
  movs r3, #0
 8003bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bb0:	e002      	b.n	8003bb8 <LoopCopyDataInit>

08003bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bb6:	3304      	adds	r3, #4

08003bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bbc:	d3f9      	bcc.n	8003bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8003bec <LoopForever+0x16>)
  movs r3, #0
 8003bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bc4:	e001      	b.n	8003bca <LoopFillZerobss>

08003bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc8:	3204      	adds	r2, #4

08003bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bcc:	d3fb      	bcc.n	8003bc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003bce:	f007 fb05 	bl	800b1dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bd2:	f7fe ff3f 	bl	8002a54 <main>

08003bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8003bd6:	e7fe      	b.n	8003bd6 <LoopForever>
  ldr   r0, =_estack
 8003bd8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003be0:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8003be4:	0800f228 	.word	0x0800f228
  ldr r2, =_sbss
 8003be8:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8003bec:	20000708 	.word	0x20000708

08003bf0 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bf0:	e7fe      	b.n	8003bf0 <CEC_CAN_IRQHandler>
	...

08003bf4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bf8:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <HAL_Init+0x24>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <HAL_Init+0x24>)
 8003bfe:	2110      	movs	r1, #16
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003c04:	2000      	movs	r0, #0
 8003c06:	f000 f809 	bl	8003c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c0a:	f7ff fbb7 	bl	800337c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	40022000 	.word	0x40022000

08003c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c24:	4b14      	ldr	r3, [pc, #80]	@ (8003c78 <HAL_InitTick+0x5c>)
 8003c26:	681c      	ldr	r4, [r3, #0]
 8003c28:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <HAL_InitTick+0x60>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	23fa      	movs	r3, #250	@ 0xfa
 8003c30:	0098      	lsls	r0, r3, #2
 8003c32:	f7fc fa83 	bl	800013c <__udivsi3>
 8003c36:	0003      	movs	r3, r0
 8003c38:	0019      	movs	r1, r3
 8003c3a:	0020      	movs	r0, r4
 8003c3c:	f7fc fa7e 	bl	800013c <__udivsi3>
 8003c40:	0003      	movs	r3, r0
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 fd4f 	bl	80046e6 <HAL_SYSTICK_Config>
 8003c48:	1e03      	subs	r3, r0, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e00f      	b.n	8003c70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d80b      	bhi.n	8003c6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	2301      	movs	r3, #1
 8003c5a:	425b      	negs	r3, r3
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 fd1c 	bl	800469c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c64:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <HAL_InitTick+0x64>)
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
}
 8003c70:	0018      	movs	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b003      	add	sp, #12
 8003c76:	bd90      	pop	{r4, r7, pc}
 8003c78:	20000048 	.word	0x20000048
 8003c7c:	20000050 	.word	0x20000050
 8003c80:	2000004c 	.word	0x2000004c

08003c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c88:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <HAL_IncTick+0x1c>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	001a      	movs	r2, r3
 8003c8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <HAL_IncTick+0x20>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	18d2      	adds	r2, r2, r3
 8003c94:	4b03      	ldr	r3, [pc, #12]	@ (8003ca4 <HAL_IncTick+0x20>)
 8003c96:	601a      	str	r2, [r3, #0]
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	20000050 	.word	0x20000050
 8003ca4:	200005b8 	.word	0x200005b8

08003ca8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  return uwTick;
 8003cac:	4b02      	ldr	r3, [pc, #8]	@ (8003cb8 <HAL_GetTick+0x10>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	200005b8 	.word	0x200005b8

08003cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cc4:	f7ff fff0 	bl	8003ca8 <HAL_GetTick>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	d005      	beq.n	8003ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <HAL_Delay+0x44>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	001a      	movs	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	f7ff ffe0 	bl	8003ca8 <HAL_GetTick>
 8003ce8:	0002      	movs	r2, r0
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d8f7      	bhi.n	8003ce4 <HAL_Delay+0x28>
  {
  }
}
 8003cf4:	46c0      	nop			@ (mov r8, r8)
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b004      	add	sp, #16
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	20000050 	.word	0x20000050

08003d04 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003d08:	4b04      	ldr	r3, [pc, #16]	@ (8003d1c <HAL_SuspendTick+0x18>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <HAL_SuspendTick+0x18>)
 8003d0e:	2102      	movs	r1, #2
 8003d10:	438a      	bics	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
}
 8003d14:	46c0      	nop			@ (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	e000e010 	.word	0xe000e010

08003d20 <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003d24:	4b04      	ldr	r3, [pc, #16]	@ (8003d38 <HAL_ResumeTick+0x18>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b03      	ldr	r3, [pc, #12]	@ (8003d38 <HAL_ResumeTick+0x18>)
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]
}
 8003d30:	46c0      	nop			@ (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	e000e010 	.word	0xe000e010

08003d3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d44:	230f      	movs	r3, #15
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e125      	b.n	8003fa6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2234      	movs	r2, #52	@ 0x34
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7fe fc06 	bl	8002584 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d000      	beq.n	8003d84 <HAL_ADC_Init+0x48>
 8003d82:	e103      	b.n	8003f8c <HAL_ADC_Init+0x250>
 8003d84:	230f      	movs	r3, #15
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d000      	beq.n	8003d90 <HAL_ADC_Init+0x54>
 8003d8e:	e0fd      	b.n	8003f8c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2204      	movs	r2, #4
 8003d98:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003d9a:	d000      	beq.n	8003d9e <HAL_ADC_Init+0x62>
 8003d9c:	e0f6      	b.n	8003f8c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da2:	4a83      	ldr	r2, [pc, #524]	@ (8003fb0 <HAL_ADC_Init+0x274>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	2202      	movs	r2, #2
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2203      	movs	r2, #3
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d112      	bne.n	8003de2 <HAL_ADC_Init+0xa6>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d009      	beq.n	8003dde <HAL_ADC_Init+0xa2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	2380      	movs	r3, #128	@ 0x80
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	401a      	ands	r2, r3
 8003dd6:	2380      	movs	r3, #128	@ 0x80
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADC_Init+0xa6>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_ADC_Init+0xa8>
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d116      	bne.n	8003e16 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2218      	movs	r2, #24
 8003df0:	4393      	bics	r3, r2
 8003df2:	0019      	movs	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	0899      	lsrs	r1, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4964      	ldr	r1, [pc, #400]	@ (8003fb4 <HAL_ADC_Init+0x278>)
 8003e22:	400a      	ands	r2, r1
 8003e24:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	7e1b      	ldrb	r3, [r3, #24]
 8003e2a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	7e5b      	ldrb	r3, [r3, #25]
 8003e30:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e32:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7e9b      	ldrb	r3, [r3, #26]
 8003e38:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003e3a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d002      	beq.n	8003e4a <HAL_ADC_Init+0x10e>
 8003e44:	2380      	movs	r3, #128	@ 0x80
 8003e46:	015b      	lsls	r3, r3, #5
 8003e48:	e000      	b.n	8003e4c <HAL_ADC_Init+0x110>
 8003e4a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e4c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003e52:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d101      	bne.n	8003e60 <HAL_ADC_Init+0x124>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	e000      	b.n	8003e62 <HAL_ADC_Init+0x126>
 8003e60:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003e62:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2124      	movs	r1, #36	@ 0x24
 8003e68:	5c5b      	ldrb	r3, [r3, r1]
 8003e6a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003e6c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	7edb      	ldrb	r3, [r3, #27]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d115      	bne.n	8003ea8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7e9b      	ldrb	r3, [r3, #26]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d105      	bne.n	8003e90 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2280      	movs	r2, #128	@ 0x80
 8003e88:	0252      	lsls	r2, r2, #9
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	e00b      	b.n	8003ea8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e94:	2220      	movs	r2, #32
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	23c2      	movs	r3, #194	@ 0xc2
 8003eae:	33ff      	adds	r3, #255	@ 0xff
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d007      	beq.n	8003ec4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68d9      	ldr	r1, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed8:	2380      	movs	r3, #128	@ 0x80
 8003eda:	055b      	lsls	r3, r3, #21
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d01b      	beq.n	8003f18 <HAL_ADC_Init+0x1dc>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d017      	beq.n	8003f18 <HAL_ADC_Init+0x1dc>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d013      	beq.n	8003f18 <HAL_ADC_Init+0x1dc>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d00f      	beq.n	8003f18 <HAL_ADC_Init+0x1dc>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d00b      	beq.n	8003f18 <HAL_ADC_Init+0x1dc>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	d007      	beq.n	8003f18 <HAL_ADC_Init+0x1dc>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	2b06      	cmp	r3, #6
 8003f0e:	d003      	beq.n	8003f18 <HAL_ADC_Init+0x1dc>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	2b07      	cmp	r3, #7
 8003f16:	d112      	bne.n	8003f3e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2107      	movs	r1, #7
 8003f24:	438a      	bics	r2, r1
 8003f26:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6959      	ldr	r1, [r3, #20]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f32:	2207      	movs	r2, #7
 8003f34:	401a      	ands	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb8 <HAL_ADC_Init+0x27c>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d10b      	bne.n	8003f66 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	2203      	movs	r2, #3
 8003f5a:	4393      	bics	r3, r2
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003f64:	e01c      	b.n	8003fa0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6a:	2212      	movs	r2, #18
 8003f6c:	4393      	bics	r3, r2
 8003f6e:	2210      	movs	r2, #16
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003f82:	230f      	movs	r3, #15
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003f8a:	e009      	b.n	8003fa0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f90:	2210      	movs	r2, #16
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003f98:	230f      	movs	r3, #15
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003fa0:	230f      	movs	r3, #15
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	781b      	ldrb	r3, [r3, #0]
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b004      	add	sp, #16
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	fffffefd 	.word	0xfffffefd
 8003fb4:	fffe0219 	.word	0xfffe0219
 8003fb8:	833fffe7 	.word	0x833fffe7

08003fbc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc4:	230f      	movs	r3, #15
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	2200      	movs	r2, #0
 8003fca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d156      	bne.n	8004086 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2234      	movs	r2, #52	@ 0x34
 8003fdc:	5c9b      	ldrb	r3, [r3, r2]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_Start_IT+0x2a>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e056      	b.n	8004094 <HAL_ADC_Start_IT+0xd8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2234      	movs	r2, #52	@ 0x34
 8003fea:	2101      	movs	r1, #1
 8003fec:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7e5b      	ldrb	r3, [r3, #25]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d007      	beq.n	8004006 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003ff6:	230f      	movs	r3, #15
 8003ff8:	18fc      	adds	r4, r7, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 fa1d 	bl	800443c <ADC_Enable>
 8004002:	0003      	movs	r3, r0
 8004004:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004006:	230f      	movs	r3, #15
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d13e      	bne.n	800408e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004014:	4a21      	ldr	r2, [pc, #132]	@ (800409c <HAL_ADC_Start_IT+0xe0>)
 8004016:	4013      	ands	r3, r2
 8004018:	2280      	movs	r2, #128	@ 0x80
 800401a:	0052      	lsls	r2, r2, #1
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2234      	movs	r2, #52	@ 0x34
 800402c:	2100      	movs	r1, #0
 800402e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	221c      	movs	r2, #28
 8004036:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d110      	bne.n	8004062 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2104      	movs	r1, #4
 800404c:	438a      	bics	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2118      	movs	r1, #24
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
          break;
 8004060:	e008      	b.n	8004074 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	211c      	movs	r1, #28
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
          break;
 8004072:	46c0      	nop			@ (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2104      	movs	r1, #4
 8004080:	430a      	orrs	r2, r1
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	e003      	b.n	800408e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004086:	230f      	movs	r3, #15
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	2202      	movs	r2, #2
 800408c:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800408e:	230f      	movs	r3, #15
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	781b      	ldrb	r3, [r3, #0]
}
 8004094:	0018      	movs	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	b005      	add	sp, #20
 800409a:	bd90      	pop	{r4, r7, pc}
 800409c:	fffff0fe 	.word	0xfffff0fe

080040a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b002      	add	sp, #8
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2204      	movs	r2, #4
 80040d4:	4013      	ands	r3, r2
 80040d6:	d003      	beq.n	80040e0 <HAL_ADC_IRQHandler+0x28>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2204      	movs	r2, #4
 80040dc:	4013      	ands	r3, r2
 80040de:	d107      	bne.n	80040f0 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2208      	movs	r2, #8
 80040e4:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80040e6:	d049      	beq.n	800417c <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2208      	movs	r2, #8
 80040ec:	4013      	ands	r3, r2
 80040ee:	d045      	beq.n	800417c <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f4:	2210      	movs	r2, #16
 80040f6:	4013      	ands	r3, r2
 80040f8:	d106      	bne.n	8004108 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	2280      	movs	r2, #128	@ 0x80
 8004100:	0092      	lsls	r2, r2, #2
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	23c0      	movs	r3, #192	@ 0xc0
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	4013      	ands	r3, r2
 8004114:	d12a      	bne.n	800416c <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800411a:	2b00      	cmp	r3, #0
 800411c:	d126      	bne.n	800416c <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2208      	movs	r2, #8
 8004122:	4013      	ands	r3, r2
 8004124:	d022      	beq.n	800416c <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2204      	movs	r2, #4
 800412e:	4013      	ands	r3, r2
 8004130:	d110      	bne.n	8004154 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	210c      	movs	r1, #12
 800413e:	438a      	bics	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004146:	4a2d      	ldr	r2, [pc, #180]	@ (80041fc <HAL_ADC_IRQHandler+0x144>)
 8004148:	4013      	ands	r3, r2
 800414a:	2201      	movs	r2, #1
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	639a      	str	r2, [r3, #56]	@ 0x38
 8004152:	e00b      	b.n	800416c <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	2220      	movs	r2, #32
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004164:	2201      	movs	r2, #1
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	0018      	movs	r0, r3
 8004170:	f7fe ffbe 	bl	80030f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	220c      	movs	r2, #12
 800417a:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2280      	movs	r2, #128	@ 0x80
 8004180:	4013      	ands	r3, r2
 8004182:	d012      	beq.n	80041aa <HAL_ADC_IRQHandler+0xf2>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2280      	movs	r2, #128	@ 0x80
 8004188:	4013      	ands	r3, r2
 800418a:	d00e      	beq.n	80041aa <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	2280      	movs	r2, #128	@ 0x80
 8004192:	0252      	lsls	r2, r2, #9
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	639a      	str	r2, [r3, #56]	@ 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	0018      	movs	r0, r3
 800419e:	f000 f82f 	bl	8004200 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2280      	movs	r2, #128	@ 0x80
 80041a8:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2210      	movs	r2, #16
 80041ae:	4013      	ands	r3, r2
 80041b0:	d020      	beq.n	80041f4 <HAL_ADC_IRQHandler+0x13c>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2210      	movs	r2, #16
 80041b6:	4013      	ands	r3, r2
 80041b8:	d01c      	beq.n	80041f4 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d006      	beq.n	80041d0 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10d      	bne.n	80041ec <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d4:	2202      	movs	r2, #2
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2210      	movs	r2, #16
 80041e2:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 f812 	bl	8004210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2210      	movs	r2, #16
 80041f2:	601a      	str	r2, [r3, #0]
  }

}
 80041f4:	46c0      	nop			@ (mov r8, r8)
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b004      	add	sp, #16
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	fffffefe 	.word	0xfffffefe

08004200 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004208:	46c0      	nop			@ (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	b002      	add	sp, #8
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b002      	add	sp, #8
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422a:	230f      	movs	r3, #15
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423a:	2380      	movs	r3, #128	@ 0x80
 800423c:	055b      	lsls	r3, r3, #21
 800423e:	429a      	cmp	r2, r3
 8004240:	d011      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x46>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004246:	2b01      	cmp	r3, #1
 8004248:	d00d      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x46>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	2b02      	cmp	r3, #2
 8004250:	d009      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x46>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	2b03      	cmp	r3, #3
 8004258:	d005      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x46>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425e:	2b04      	cmp	r3, #4
 8004260:	d001      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x46>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2234      	movs	r2, #52	@ 0x34
 800426a:	5c9b      	ldrb	r3, [r3, r2]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x54>
 8004270:	2302      	movs	r3, #2
 8004272:	e0d0      	b.n	8004416 <HAL_ADC_ConfigChannel+0x1f6>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2234      	movs	r2, #52	@ 0x34
 8004278:	2101      	movs	r1, #1
 800427a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2204      	movs	r2, #4
 8004284:	4013      	ands	r3, r2
 8004286:	d000      	beq.n	800428a <HAL_ADC_ConfigChannel+0x6a>
 8004288:	e0b4      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4a64      	ldr	r2, [pc, #400]	@ (8004420 <HAL_ADC_ConfigChannel+0x200>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d100      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x76>
 8004294:	e082      	b.n	800439c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2201      	movs	r2, #1
 80042a2:	409a      	lsls	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b0:	2380      	movs	r3, #128	@ 0x80
 80042b2:	055b      	lsls	r3, r3, #21
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d037      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x108>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d033      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x108>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d02f      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x108>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d02b      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x108>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d027      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x108>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d023      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x108>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d01f      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x108>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	2b07      	cmp	r3, #7
 80042ee:	d01b      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	2107      	movs	r1, #7
 80042fc:	400b      	ands	r3, r1
 80042fe:	429a      	cmp	r2, r3
 8004300:	d012      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2107      	movs	r1, #7
 800430e:	438a      	bics	r2, r1
 8004310:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6959      	ldr	r1, [r3, #20]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2207      	movs	r2, #7
 800431e:	401a      	ands	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b10      	cmp	r3, #16
 800432e:	d007      	beq.n	8004340 <HAL_ADC_ConfigChannel+0x120>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b11      	cmp	r3, #17
 8004336:	d003      	beq.n	8004340 <HAL_ADC_ConfigChannel+0x120>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b12      	cmp	r3, #18
 800433e:	d163      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004340:	4b38      	ldr	r3, [pc, #224]	@ (8004424 <HAL_ADC_ConfigChannel+0x204>)
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b10      	cmp	r3, #16
 800434a:	d009      	beq.n	8004360 <HAL_ADC_ConfigChannel+0x140>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b11      	cmp	r3, #17
 8004352:	d102      	bne.n	800435a <HAL_ADC_ConfigChannel+0x13a>
 8004354:	2380      	movs	r3, #128	@ 0x80
 8004356:	03db      	lsls	r3, r3, #15
 8004358:	e004      	b.n	8004364 <HAL_ADC_ConfigChannel+0x144>
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	045b      	lsls	r3, r3, #17
 800435e:	e001      	b.n	8004364 <HAL_ADC_ConfigChannel+0x144>
 8004360:	2380      	movs	r3, #128	@ 0x80
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	4a2f      	ldr	r2, [pc, #188]	@ (8004424 <HAL_ADC_ConfigChannel+0x204>)
 8004366:	430b      	orrs	r3, r1
 8004368:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b10      	cmp	r3, #16
 8004370:	d14a      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004372:	4b2d      	ldr	r3, [pc, #180]	@ (8004428 <HAL_ADC_ConfigChannel+0x208>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	492d      	ldr	r1, [pc, #180]	@ (800442c <HAL_ADC_ConfigChannel+0x20c>)
 8004378:	0018      	movs	r0, r3
 800437a:	f7fb fedf 	bl	800013c <__udivsi3>
 800437e:	0003      	movs	r3, r0
 8004380:	001a      	movs	r2, r3
 8004382:	0013      	movs	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	189b      	adds	r3, r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800438c:	e002      	b.n	8004394 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3b01      	subs	r3, #1
 8004392:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f9      	bne.n	800438e <HAL_ADC_ConfigChannel+0x16e>
 800439a:	e035      	b.n	8004408 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2101      	movs	r1, #1
 80043a8:	4099      	lsls	r1, r3
 80043aa:	000b      	movs	r3, r1
 80043ac:	43d9      	mvns	r1, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	400a      	ands	r2, r1
 80043b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d007      	beq.n	80043ce <HAL_ADC_ConfigChannel+0x1ae>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b11      	cmp	r3, #17
 80043c4:	d003      	beq.n	80043ce <HAL_ADC_ConfigChannel+0x1ae>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b12      	cmp	r3, #18
 80043cc:	d11c      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80043ce:	4b15      	ldr	r3, [pc, #84]	@ (8004424 <HAL_ADC_ConfigChannel+0x204>)
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d007      	beq.n	80043ea <HAL_ADC_ConfigChannel+0x1ca>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b11      	cmp	r3, #17
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x1c6>
 80043e2:	4b13      	ldr	r3, [pc, #76]	@ (8004430 <HAL_ADC_ConfigChannel+0x210>)
 80043e4:	e002      	b.n	80043ec <HAL_ADC_ConfigChannel+0x1cc>
 80043e6:	4b13      	ldr	r3, [pc, #76]	@ (8004434 <HAL_ADC_ConfigChannel+0x214>)
 80043e8:	e000      	b.n	80043ec <HAL_ADC_ConfigChannel+0x1cc>
 80043ea:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <HAL_ADC_ConfigChannel+0x218>)
 80043ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004424 <HAL_ADC_ConfigChannel+0x204>)
 80043ee:	400b      	ands	r3, r1
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e009      	b.n	8004408 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	2220      	movs	r2, #32
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004400:	230f      	movs	r3, #15
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	2201      	movs	r2, #1
 8004406:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2234      	movs	r2, #52	@ 0x34
 800440c:	2100      	movs	r1, #0
 800440e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004410:	230f      	movs	r3, #15
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	781b      	ldrb	r3, [r3, #0]
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b004      	add	sp, #16
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	00001001 	.word	0x00001001
 8004424:	40012708 	.word	0x40012708
 8004428:	20000048 	.word	0x20000048
 800442c:	000f4240 	.word	0x000f4240
 8004430:	ffbfffff 	.word	0xffbfffff
 8004434:	feffffff 	.word	0xfeffffff
 8004438:	ff7fffff 	.word	0xff7fffff

0800443c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2203      	movs	r2, #3
 8004454:	4013      	ands	r3, r2
 8004456:	2b01      	cmp	r3, #1
 8004458:	d112      	bne.n	8004480 <ADC_Enable+0x44>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	4013      	ands	r3, r2
 8004464:	2b01      	cmp	r3, #1
 8004466:	d009      	beq.n	800447c <ADC_Enable+0x40>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	2380      	movs	r3, #128	@ 0x80
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	401a      	ands	r2, r3
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	429a      	cmp	r2, r3
 800447a:	d101      	bne.n	8004480 <ADC_Enable+0x44>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <ADC_Enable+0x46>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d152      	bne.n	800452c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a2a      	ldr	r2, [pc, #168]	@ (8004538 <ADC_Enable+0xfc>)
 800448e:	4013      	ands	r3, r2
 8004490:	d00d      	beq.n	80044ae <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004496:	2210      	movs	r2, #16
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a2:	2201      	movs	r2, #1
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e03f      	b.n	800452e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2101      	movs	r1, #1
 80044ba:	430a      	orrs	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044be:	4b1f      	ldr	r3, [pc, #124]	@ (800453c <ADC_Enable+0x100>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	491f      	ldr	r1, [pc, #124]	@ (8004540 <ADC_Enable+0x104>)
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7fb fe39 	bl	800013c <__udivsi3>
 80044ca:	0003      	movs	r3, r0
 80044cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80044ce:	e002      	b.n	80044d6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f9      	bne.n	80044d0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80044dc:	f7ff fbe4 	bl	8003ca8 <HAL_GetTick>
 80044e0:	0003      	movs	r3, r0
 80044e2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044e4:	e01b      	b.n	800451e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044e6:	f7ff fbdf 	bl	8003ca8 <HAL_GetTick>
 80044ea:	0002      	movs	r2, r0
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d914      	bls.n	800451e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2201      	movs	r2, #1
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d00d      	beq.n	800451e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004506:	2210      	movs	r2, #16
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004512:	2201      	movs	r2, #1
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e007      	b.n	800452e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2201      	movs	r2, #1
 8004526:	4013      	ands	r3, r2
 8004528:	2b01      	cmp	r3, #1
 800452a:	d1dc      	bne.n	80044e6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b004      	add	sp, #16
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	80000017 	.word	0x80000017
 800453c:	20000048 	.word	0x20000048
 8004540:	000f4240 	.word	0x000f4240

08004544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	0002      	movs	r2, r0
 800454c:	1dfb      	adds	r3, r7, #7
 800454e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b7f      	cmp	r3, #127	@ 0x7f
 8004556:	d809      	bhi.n	800456c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004558:	1dfb      	adds	r3, r7, #7
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	001a      	movs	r2, r3
 800455e:	231f      	movs	r3, #31
 8004560:	401a      	ands	r2, r3
 8004562:	4b04      	ldr	r3, [pc, #16]	@ (8004574 <__NVIC_EnableIRQ+0x30>)
 8004564:	2101      	movs	r1, #1
 8004566:	4091      	lsls	r1, r2
 8004568:	000a      	movs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]
  }
}
 800456c:	46c0      	nop			@ (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b002      	add	sp, #8
 8004572:	bd80      	pop	{r7, pc}
 8004574:	e000e100 	.word	0xe000e100

08004578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	0002      	movs	r2, r0
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	1dfb      	adds	r3, r7, #7
 8004584:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004586:	1dfb      	adds	r3, r7, #7
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b7f      	cmp	r3, #127	@ 0x7f
 800458c:	d828      	bhi.n	80045e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800458e:	4a2f      	ldr	r2, [pc, #188]	@ (800464c <__NVIC_SetPriority+0xd4>)
 8004590:	1dfb      	adds	r3, r7, #7
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b25b      	sxtb	r3, r3
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	33c0      	adds	r3, #192	@ 0xc0
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	589b      	ldr	r3, [r3, r2]
 800459e:	1dfa      	adds	r2, r7, #7
 80045a0:	7812      	ldrb	r2, [r2, #0]
 80045a2:	0011      	movs	r1, r2
 80045a4:	2203      	movs	r2, #3
 80045a6:	400a      	ands	r2, r1
 80045a8:	00d2      	lsls	r2, r2, #3
 80045aa:	21ff      	movs	r1, #255	@ 0xff
 80045ac:	4091      	lsls	r1, r2
 80045ae:	000a      	movs	r2, r1
 80045b0:	43d2      	mvns	r2, r2
 80045b2:	401a      	ands	r2, r3
 80045b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	22ff      	movs	r2, #255	@ 0xff
 80045bc:	401a      	ands	r2, r3
 80045be:	1dfb      	adds	r3, r7, #7
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	0018      	movs	r0, r3
 80045c4:	2303      	movs	r3, #3
 80045c6:	4003      	ands	r3, r0
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045cc:	481f      	ldr	r0, [pc, #124]	@ (800464c <__NVIC_SetPriority+0xd4>)
 80045ce:	1dfb      	adds	r3, r7, #7
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b25b      	sxtb	r3, r3
 80045d4:	089b      	lsrs	r3, r3, #2
 80045d6:	430a      	orrs	r2, r1
 80045d8:	33c0      	adds	r3, #192	@ 0xc0
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80045de:	e031      	b.n	8004644 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004650 <__NVIC_SetPriority+0xd8>)
 80045e2:	1dfb      	adds	r3, r7, #7
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	0019      	movs	r1, r3
 80045e8:	230f      	movs	r3, #15
 80045ea:	400b      	ands	r3, r1
 80045ec:	3b08      	subs	r3, #8
 80045ee:	089b      	lsrs	r3, r3, #2
 80045f0:	3306      	adds	r3, #6
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	18d3      	adds	r3, r2, r3
 80045f6:	3304      	adds	r3, #4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	1dfa      	adds	r2, r7, #7
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	0011      	movs	r1, r2
 8004600:	2203      	movs	r2, #3
 8004602:	400a      	ands	r2, r1
 8004604:	00d2      	lsls	r2, r2, #3
 8004606:	21ff      	movs	r1, #255	@ 0xff
 8004608:	4091      	lsls	r1, r2
 800460a:	000a      	movs	r2, r1
 800460c:	43d2      	mvns	r2, r2
 800460e:	401a      	ands	r2, r3
 8004610:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	019b      	lsls	r3, r3, #6
 8004616:	22ff      	movs	r2, #255	@ 0xff
 8004618:	401a      	ands	r2, r3
 800461a:	1dfb      	adds	r3, r7, #7
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	0018      	movs	r0, r3
 8004620:	2303      	movs	r3, #3
 8004622:	4003      	ands	r3, r0
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004628:	4809      	ldr	r0, [pc, #36]	@ (8004650 <__NVIC_SetPriority+0xd8>)
 800462a:	1dfb      	adds	r3, r7, #7
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	001c      	movs	r4, r3
 8004630:	230f      	movs	r3, #15
 8004632:	4023      	ands	r3, r4
 8004634:	3b08      	subs	r3, #8
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	430a      	orrs	r2, r1
 800463a:	3306      	adds	r3, #6
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	18c3      	adds	r3, r0, r3
 8004640:	3304      	adds	r3, #4
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	46c0      	nop			@ (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	b003      	add	sp, #12
 800464a:	bd90      	pop	{r4, r7, pc}
 800464c:	e000e100 	.word	0xe000e100
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	1e5a      	subs	r2, r3, #1
 8004660:	2380      	movs	r3, #128	@ 0x80
 8004662:	045b      	lsls	r3, r3, #17
 8004664:	429a      	cmp	r2, r3
 8004666:	d301      	bcc.n	800466c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004668:	2301      	movs	r3, #1
 800466a:	e010      	b.n	800468e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800466c:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <SysTick_Config+0x44>)
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	3a01      	subs	r2, #1
 8004672:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004674:	2301      	movs	r3, #1
 8004676:	425b      	negs	r3, r3
 8004678:	2103      	movs	r1, #3
 800467a:	0018      	movs	r0, r3
 800467c:	f7ff ff7c 	bl	8004578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004680:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <SysTick_Config+0x44>)
 8004682:	2200      	movs	r2, #0
 8004684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004686:	4b04      	ldr	r3, [pc, #16]	@ (8004698 <SysTick_Config+0x44>)
 8004688:	2207      	movs	r2, #7
 800468a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800468c:	2300      	movs	r3, #0
}
 800468e:	0018      	movs	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	b002      	add	sp, #8
 8004694:	bd80      	pop	{r7, pc}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	e000e010 	.word	0xe000e010

0800469c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
 80046a6:	210f      	movs	r1, #15
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	1c02      	adds	r2, r0, #0
 80046ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	0011      	movs	r1, r2
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7ff ff5d 	bl	8004578 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b004      	add	sp, #16
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	0002      	movs	r2, r0
 80046ce:	1dfb      	adds	r3, r7, #7
 80046d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d2:	1dfb      	adds	r3, r7, #7
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b25b      	sxtb	r3, r3
 80046d8:	0018      	movs	r0, r3
 80046da:	f7ff ff33 	bl	8004544 <__NVIC_EnableIRQ>
}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b002      	add	sp, #8
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7ff ffaf 	bl	8004654 <SysTick_Config>
 80046f6:	0003      	movs	r3, r0
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e015      	b.n	800473e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	791b      	ldrb	r3, [r3, #4]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0018      	movs	r0, r3
 8004726:	f7fd ffa9 	bl	800267c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
   HAL_StatusTypeDef status = HAL_OK;
 8004752:	200f      	movs	r0, #15
 8004754:	183b      	adds	r3, r7, r0
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2380      	movs	r3, #128	@ 0x80
 8004762:	0159      	lsls	r1, r3, #5
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	4099      	lsls	r1, r3
 8004768:	000b      	movs	r3, r1
 800476a:	43d9      	mvns	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	400a      	ands	r2, r1
 8004772:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	2101      	movs	r1, #1
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4099      	lsls	r1, r3
 8004780:	000b      	movs	r3, r1
 8004782:	43d9      	mvns	r1, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	400a      	ands	r2, r1
 800478a:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d110      	bne.n	80047b4 <HAL_DAC_Stop_DMA+0x6c>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	183c      	adds	r4, r7, r0
 8004798:	0018      	movs	r0, r3
 800479a:	f000 faf3 	bl	8004d84 <HAL_DMA_Abort>
 800479e:	0003      	movs	r3, r0
 80047a0:	7023      	strb	r3, [r4, #0]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4913      	ldr	r1, [pc, #76]	@ (80047fc <HAL_DAC_Stop_DMA+0xb4>)
 80047ae:	400a      	ands	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e010      	b.n	80047d6 <HAL_DAC_Stop_DMA+0x8e>
#if defined(DAC_CHANNEL2_SUPPORT)
  
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	220f      	movs	r2, #15
 80047ba:	18bc      	adds	r4, r7, r2
 80047bc:	0018      	movs	r0, r3
 80047be:	f000 fae1 	bl	8004d84 <HAL_DMA_Abort>
 80047c2:	0003      	movs	r3, r0
 80047c4:	7023      	strb	r3, [r4, #0]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	490b      	ldr	r1, [pc, #44]	@ (8004800 <HAL_DAC_Stop_DMA+0xb8>)
 80047d2:	400a      	ands	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]
  }
#endif  /* DAC_CHANNEL2_SUPPORT */ 
  
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80047d6:	230f      	movs	r3, #15
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_DAC_Stop_DMA+0xa0>
  {
  /* Update DAC state machine to error */
  hdac->State = HAL_DAC_STATE_ERROR; 
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2204      	movs	r2, #4
 80047e4:	711a      	strb	r2, [r3, #4]
 80047e6:	e002      	b.n	80047ee <HAL_DAC_Stop_DMA+0xa6>
  }
  else
  {
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80047ee:	230f      	movs	r3, #15
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	781b      	ldrb	r3, [r3, #0]
}
 80047f4:	0018      	movs	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b005      	add	sp, #20
 80047fa:	bd90      	pop	{r4, r7, pc}
 80047fc:	ffffdfff 	.word	0xffffdfff
 8004800:	dfffffff 	.word	0xdfffffff

08004804 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800480c:	46c0      	nop			@ (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	b002      	add	sp, #8
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800481c:	46c0      	nop			@ (mov r8, r8)
 800481e:	46bd      	mov	sp, r7
 8004820:	b002      	add	sp, #8
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800482c:	46c0      	nop			@ (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b002      	add	sp, #8
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	795b      	ldrb	r3, [r3, #5]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_DAC_ConfigChannel+0x20>
 8004850:	2302      	movs	r3, #2
 8004852:	e029      	b.n	80048a8 <HAL_DAC_ConfigChannel+0x74>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2202      	movs	r2, #2
 800485e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8004868:	4a11      	ldr	r2, [pc, #68]	@ (80048b0 <HAL_DAC_ConfigChannel+0x7c>)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	409a      	lsls	r2, r3
 800486e:	0013      	movs	r3, r2
 8004870:	43da      	mvns	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	4013      	ands	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	409a      	lsls	r2, r3
 800488a:	0013      	movs	r3, r2
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b006      	add	sp, #24
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	00000ffe 	.word	0x00000ffe

080048b4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	795b      	ldrb	r3, [r3, #5]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_DAC_Start_DMA+0x1e>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e09f      	b.n	8004a12 <HAL_DAC_Start_DMA+0x15e>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2202      	movs	r2, #2
 80048dc:	711a      	strb	r2, [r3, #4]
  
  if(Channel == DAC_CHANNEL_1)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d130      	bne.n	8004946 <HAL_DAC_Start_DMA+0x92>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4a4c      	ldr	r2, [pc, #304]	@ (8004a1c <HAL_DAC_Start_DMA+0x168>)
 80048ea:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004a20 <HAL_DAC_Start_DMA+0x16c>)
 80048f2:	62da      	str	r2, [r3, #44]	@ 0x2c
       
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004a24 <HAL_DAC_Start_DMA+0x170>)
 80048fa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2180      	movs	r1, #128	@ 0x80
 8004908:	0149      	lsls	r1, r1, #5
 800490a:	430a      	orrs	r2, r1
 800490c:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d013      	beq.n	800493c <HAL_DAC_Start_DMA+0x88>
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	2b08      	cmp	r3, #8
 8004918:	d846      	bhi.n	80049a8 <HAL_DAC_Start_DMA+0xf4>
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_DAC_Start_DMA+0x74>
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	2b04      	cmp	r3, #4
 8004924:	d005      	beq.n	8004932 <HAL_DAC_Start_DMA+0x7e>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004926:	e03f      	b.n	80049a8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	617b      	str	r3, [r7, #20]
        break;
 8004930:	e03d      	b.n	80049ae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	617b      	str	r3, [r7, #20]
        break;
 800493a:	e038      	b.n	80049ae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3310      	adds	r3, #16
 8004942:	617b      	str	r3, [r7, #20]
        break;
 8004944:	e033      	b.n	80049ae <HAL_DAC_Start_DMA+0xfa>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	4a37      	ldr	r2, [pc, #220]	@ (8004a28 <HAL_DAC_Start_DMA+0x174>)
 800494c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	4a36      	ldr	r2, [pc, #216]	@ (8004a2c <HAL_DAC_Start_DMA+0x178>)
 8004954:	62da      	str	r2, [r3, #44]	@ 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	4a35      	ldr	r2, [pc, #212]	@ (8004a30 <HAL_DAC_Start_DMA+0x17c>)
 800495c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2180      	movs	r1, #128	@ 0x80
 800496a:	0549      	lsls	r1, r1, #21
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 2 */
    switch(Alignment)
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	2b08      	cmp	r3, #8
 8004974:	d013      	beq.n	800499e <HAL_DAC_Start_DMA+0xea>
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d817      	bhi.n	80049ac <HAL_DAC_Start_DMA+0xf8>
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_DAC_Start_DMA+0xd6>
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	2b04      	cmp	r3, #4
 8004986:	d005      	beq.n	8004994 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004988:	e010      	b.n	80049ac <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3314      	adds	r3, #20
 8004990:	617b      	str	r3, [r7, #20]
        break;
 8004992:	e00c      	b.n	80049ae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3318      	adds	r3, #24
 800499a:	617b      	str	r3, [r7, #20]
        break;
 800499c:	e007      	b.n	80049ae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	331c      	adds	r3, #28
 80049a4:	617b      	str	r3, [r7, #20]
        break;
 80049a6:	e002      	b.n	80049ae <HAL_DAC_Start_DMA+0xfa>
        break;
 80049a8:	46c0      	nop			@ (mov r8, r8)
 80049aa:	e000      	b.n	80049ae <HAL_DAC_Start_DMA+0xfa>
        break;
 80049ac:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d110      	bne.n	80049d6 <HAL_DAC_Start_DMA+0x122>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2180      	movs	r1, #128	@ 0x80
 80049c0:	0189      	lsls	r1, r1, #6
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6898      	ldr	r0, [r3, #8]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	f000 f972 	bl	8004cb8 <HAL_DMA_Start_IT>
 80049d4:	e00f      	b.n	80049f6 <HAL_DAC_Start_DMA+0x142>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2180      	movs	r1, #128	@ 0x80
 80049e2:	0589      	lsls	r1, r1, #22
 80049e4:	430a      	orrs	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68d8      	ldr	r0, [r3, #12]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	f000 f961 	bl	8004cb8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6819      	ldr	r1, [r3, #0]
 80049fc:	2201      	movs	r2, #1
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	409a      	lsls	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b006      	add	sp, #24
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	08004b05 	.word	0x08004b05
 8004a20:	08004b29 	.word	0x08004b29
 8004a24:	08004b47 	.word	0x08004b47
 8004a28:	08004b77 	.word	0x08004b77
 8004a2c:	08004b9b 	.word	0x08004b9b
 8004a30:	08004bb9 	.word	0x08004bb9

08004a34 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	2380      	movs	r3, #128	@ 0x80
 8004a44:	019b      	lsls	r3, r3, #6
 8004a46:	401a      	ands	r2, r3
 8004a48:	2380      	movs	r3, #128	@ 0x80
 8004a4a:	019b      	lsls	r3, r3, #6
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d123      	bne.n	8004a98 <HAL_DAC_IRQHandler+0x64>
  { 
    /* Check underrun channel 1 flag */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a56:	2380      	movs	r3, #128	@ 0x80
 8004a58:	019b      	lsls	r3, r3, #6
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	019b      	lsls	r3, r3, #6
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d119      	bne.n	8004a98 <HAL_DAC_IRQHandler+0x64>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2204      	movs	r2, #4
 8004a68:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel1 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2280      	movs	r2, #128	@ 0x80
 8004a7c:	0192      	lsls	r2, r2, #6
 8004a7e:	635a      	str	r2, [r3, #52]	@ 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	491c      	ldr	r1, [pc, #112]	@ (8004afc <HAL_DAC_IRQHandler+0xc8>)
 8004a8c:	400a      	ands	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7ff fec6 	bl	8004824 <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	2380      	movs	r3, #128	@ 0x80
 8004aa0:	059b      	lsls	r3, r3, #22
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	2380      	movs	r3, #128	@ 0x80
 8004aa6:	059b      	lsls	r3, r3, #22
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d123      	bne.n	8004af4 <HAL_DAC_IRQHandler+0xc0>
  {
    /* Check underrun channel 2 flag */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ab2:	2380      	movs	r3, #128	@ 0x80
 8004ab4:	059b      	lsls	r3, r3, #22
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	2380      	movs	r3, #128	@ 0x80
 8004aba:	059b      	lsls	r3, r3, #22
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d119      	bne.n	8004af4 <HAL_DAC_IRQHandler+0xc0>
    { 
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2204      	movs	r2, #4
 8004ac4:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2202      	movs	r2, #2
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2280      	movs	r2, #128	@ 0x80
 8004ad8:	0592      	lsls	r2, r2, #22
 8004ada:	635a      	str	r2, [r3, #52]	@ 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4906      	ldr	r1, [pc, #24]	@ (8004b00 <HAL_DAC_IRQHandler+0xcc>)
 8004ae8:	400a      	ands	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	0018      	movs	r0, r3
 8004af0:	f000 f892 	bl	8004c18 <HAL_DACEx_DMAUnderrunCallbackCh2>
    }
  }
}
 8004af4:	46c0      	nop			@ (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	ffffefff 	.word	0xffffefff
 8004b00:	efffffff 	.word	0xefffffff

08004b04 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	60fb      	str	r3, [r7, #12]
  
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f7fe f917 	bl	8002d48 <HAL_DAC_ConvCpltCallbackCh1>
  
  hdac->State= HAL_DAC_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	711a      	strb	r2, [r3, #4]
}
 8004b20:	46c0      	nop			@ (mov r8, r8)
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b004      	add	sp, #16
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff fe63 	bl	8004804 <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 8004b3e:	46c0      	nop			@ (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b004      	add	sp, #16
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	611a      	str	r2, [r3, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7ff fe56 	bl	8004814 <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	711a      	strb	r2, [r3, #4]
}
 8004b6e:	46c0      	nop			@ (mov r8, r8)
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b004      	add	sp, #16
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	0018      	movs	r0, r3
 8004b88:	f000 f82e 	bl	8004be8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	711a      	strb	r2, [r3, #4]
}
 8004b92:	46c0      	nop			@ (mov r8, r8)
 8004b94:	46bd      	mov	sp, r7
 8004b96:	b004      	add	sp, #16
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	0018      	movs	r0, r3
 8004bac:	f000 f824 	bl	8004bf8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8004bb0:	46c0      	nop			@ (mov r8, r8)
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b004      	add	sp, #16
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 f817 	bl	8004c08 <HAL_DACEx_ErrorCallbackCh2>
#endif 
  hdac->State= HAL_DAC_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	711a      	strb	r2, [r3, #4]
}
 8004be0:	46c0      	nop			@ (mov r8, r8)
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b004      	add	sp, #16
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8004bf0:	46c0      	nop			@ (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004c00:	46c0      	nop			@ (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8004c10:	46c0      	nop			@ (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b002      	add	sp, #8
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004c20:	46c0      	nop			@ (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b002      	add	sp, #8
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e036      	b.n	8004cac <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2221      	movs	r2, #33	@ 0x21
 8004c42:	2102      	movs	r1, #2
 8004c44:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4a18      	ldr	r2, [pc, #96]	@ (8004cb4 <HAL_DMA_Init+0x8c>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f000 f9d0 	bl	8005034 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2221      	movs	r2, #33	@ 0x21
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b004      	add	sp, #16
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	ffffc00f 	.word	0xffffc00f

08004cb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc6:	2317      	movs	r3, #23
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	5c9b      	ldrb	r3, [r3, r2]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_DMA_Start_IT+0x24>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e04f      	b.n	8004d7c <HAL_DMA_Start_IT+0xc4>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2221      	movs	r2, #33	@ 0x21
 8004ce8:	5c9b      	ldrb	r3, [r3, r2]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d13a      	bne.n	8004d66 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2221      	movs	r2, #33	@ 0x21
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2101      	movs	r1, #1
 8004d0a:	438a      	bics	r2, r1
 8004d0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f960 	bl	8004fda <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	210e      	movs	r1, #14
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e00f      	b.n	8004d54 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	210a      	movs	r1, #10
 8004d40:	430a      	orrs	r2, r1
 8004d42:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2104      	movs	r1, #4
 8004d50:	438a      	bics	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2101      	movs	r1, #1
 8004d60:	430a      	orrs	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e007      	b.n	8004d76 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d6e:	2317      	movs	r3, #23
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	2202      	movs	r2, #2
 8004d74:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004d76:	2317      	movs	r3, #23
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	781b      	ldrb	r3, [r3, #0]
}
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	b006      	add	sp, #24
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2221      	movs	r2, #33	@ 0x21
 8004d90:	5c9b      	ldrb	r3, [r3, r2]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d008      	beq.n	8004daa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2204      	movs	r2, #4
 8004d9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	2100      	movs	r1, #0
 8004da4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e020      	b.n	8004dec <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	210e      	movs	r1, #14
 8004db6:	438a      	bics	r2, r1
 8004db8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	438a      	bics	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	4091      	lsls	r1, r2
 8004dd6:	000a      	movs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2221      	movs	r2, #33	@ 0x21
 8004dde:	2101      	movs	r1, #1
 8004de0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	2100      	movs	r1, #0
 8004de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	0018      	movs	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b002      	add	sp, #8
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfc:	210f      	movs	r1, #15
 8004dfe:	187b      	adds	r3, r7, r1
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2221      	movs	r2, #33	@ 0x21
 8004e08:	5c9b      	ldrb	r3, [r3, r2]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d006      	beq.n	8004e1e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2204      	movs	r2, #4
 8004e14:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004e16:	187b      	adds	r3, r7, r1
 8004e18:	2201      	movs	r2, #1
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	e028      	b.n	8004e70 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	210e      	movs	r1, #14
 8004e2a:	438a      	bics	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2101      	movs	r1, #1
 8004e3a:	438a      	bics	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e46:	2101      	movs	r1, #1
 8004e48:	4091      	lsls	r1, r2
 8004e4a:	000a      	movs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2221      	movs	r2, #33	@ 0x21
 8004e52:	2101      	movs	r1, #1
 8004e54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	0010      	movs	r0, r2
 8004e6e:	4798      	blx	r3
    }
  }
  return status;
 8004e70:	230f      	movs	r3, #15
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	781b      	ldrb	r3, [r3, #0]
}
 8004e76:	0018      	movs	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b004      	add	sp, #16
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	409a      	lsls	r2, r3
 8004e9e:	0013      	movs	r3, r2
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d024      	beq.n	8004ef0 <HAL_DMA_IRQHandler+0x72>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d020      	beq.n	8004ef0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d107      	bne.n	8004eca <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2104      	movs	r1, #4
 8004ec6:	438a      	bics	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	2104      	movs	r1, #4
 8004ed4:	4091      	lsls	r1, r2
 8004ed6:	000a      	movs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d100      	bne.n	8004ee4 <HAL_DMA_IRQHandler+0x66>
 8004ee2:	e06a      	b.n	8004fba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	0010      	movs	r0, r2
 8004eec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004eee:	e064      	b.n	8004fba <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	0013      	movs	r3, r2
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4013      	ands	r3, r2
 8004efe:	d02b      	beq.n	8004f58 <HAL_DMA_IRQHandler+0xda>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2202      	movs	r2, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d027      	beq.n	8004f58 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	4013      	ands	r3, r2
 8004f12:	d10b      	bne.n	8004f2c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	210a      	movs	r1, #10
 8004f20:	438a      	bics	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2221      	movs	r2, #33	@ 0x21
 8004f28:	2101      	movs	r1, #1
 8004f2a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f34:	2102      	movs	r1, #2
 8004f36:	4091      	lsls	r1, r2
 8004f38:	000a      	movs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	2100      	movs	r1, #0
 8004f42:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d036      	beq.n	8004fba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	0010      	movs	r0, r2
 8004f54:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f56:	e030      	b.n	8004fba <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	409a      	lsls	r2, r3
 8004f60:	0013      	movs	r3, r2
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4013      	ands	r3, r2
 8004f66:	d028      	beq.n	8004fba <HAL_DMA_IRQHandler+0x13c>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d024      	beq.n	8004fba <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	210e      	movs	r1, #14
 8004f7c:	438a      	bics	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f88:	2101      	movs	r1, #1
 8004f8a:	4091      	lsls	r1, r2
 8004f8c:	000a      	movs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2221      	movs	r2, #33	@ 0x21
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	4798      	blx	r3
    }
  }
}
 8004fb8:	e7ff      	b.n	8004fba <HAL_DMA_IRQHandler+0x13c>
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b004      	add	sp, #16
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2221      	movs	r2, #33	@ 0x21
 8004fce:	5c9b      	ldrb	r3, [r3, r2]
 8004fd0:	b2db      	uxtb	r3, r3
}
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b002      	add	sp, #8
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	4091      	lsls	r1, r2
 8004ff4:	000a      	movs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b10      	cmp	r3, #16
 8005006:	d108      	bne.n	800501a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005018:	e007      	b.n	800502a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	60da      	str	r2, [r3, #12]
}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	46bd      	mov	sp, r7
 800502e:	b004      	add	sp, #16
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	001a      	movs	r2, r3
 8005042:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <DMA_CalcBaseAndBitshift+0x60>)
 8005044:	429a      	cmp	r2, r3
 8005046:	d810      	bhi.n	800506a <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a12      	ldr	r2, [pc, #72]	@ (8005098 <DMA_CalcBaseAndBitshift+0x64>)
 800504e:	4694      	mov	ip, r2
 8005050:	4463      	add	r3, ip
 8005052:	2114      	movs	r1, #20
 8005054:	0018      	movs	r0, r3
 8005056:	f7fb f871 	bl	800013c <__udivsi3>
 800505a:	0003      	movs	r3, r0
 800505c:	009a      	lsls	r2, r3, #2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a0d      	ldr	r2, [pc, #52]	@ (800509c <DMA_CalcBaseAndBitshift+0x68>)
 8005066:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005068:	e00f      	b.n	800508a <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a0c      	ldr	r2, [pc, #48]	@ (80050a0 <DMA_CalcBaseAndBitshift+0x6c>)
 8005070:	4694      	mov	ip, r2
 8005072:	4463      	add	r3, ip
 8005074:	2114      	movs	r1, #20
 8005076:	0018      	movs	r0, r3
 8005078:	f7fb f860 	bl	800013c <__udivsi3>
 800507c:	0003      	movs	r3, r0
 800507e:	009a      	lsls	r2, r3, #2
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a07      	ldr	r2, [pc, #28]	@ (80050a4 <DMA_CalcBaseAndBitshift+0x70>)
 8005088:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b002      	add	sp, #8
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	40020407 	.word	0x40020407
 8005098:	bffdfff8 	.word	0xbffdfff8
 800509c:	40020000 	.word	0x40020000
 80050a0:	bffdfbf8 	.word	0xbffdfbf8
 80050a4:	40020400 	.word	0x40020400

080050a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050b6:	e155      	b.n	8005364 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2101      	movs	r1, #1
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4091      	lsls	r1, r2
 80050c2:	000a      	movs	r2, r1
 80050c4:	4013      	ands	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d100      	bne.n	80050d0 <HAL_GPIO_Init+0x28>
 80050ce:	e146      	b.n	800535e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2203      	movs	r2, #3
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d005      	beq.n	80050e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2203      	movs	r2, #3
 80050e2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d130      	bne.n	800514a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	2203      	movs	r2, #3
 80050f4:	409a      	lsls	r2, r3
 80050f6:	0013      	movs	r3, r2
 80050f8:	43da      	mvns	r2, r3
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4013      	ands	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	409a      	lsls	r2, r3
 800510a:	0013      	movs	r3, r2
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800511e:	2201      	movs	r2, #1
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	409a      	lsls	r2, r3
 8005124:	0013      	movs	r3, r2
 8005126:	43da      	mvns	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4013      	ands	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	091b      	lsrs	r3, r3, #4
 8005134:	2201      	movs	r2, #1
 8005136:	401a      	ands	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	409a      	lsls	r2, r3
 800513c:	0013      	movs	r3, r2
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2203      	movs	r2, #3
 8005150:	4013      	ands	r3, r2
 8005152:	2b03      	cmp	r3, #3
 8005154:	d017      	beq.n	8005186 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	2203      	movs	r2, #3
 8005162:	409a      	lsls	r2, r3
 8005164:	0013      	movs	r3, r2
 8005166:	43da      	mvns	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4013      	ands	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	409a      	lsls	r2, r3
 8005178:	0013      	movs	r3, r2
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2203      	movs	r2, #3
 800518c:	4013      	ands	r3, r2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d123      	bne.n	80051da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	08da      	lsrs	r2, r3, #3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3208      	adds	r2, #8
 800519a:	0092      	lsls	r2, r2, #2
 800519c:	58d3      	ldr	r3, [r2, r3]
 800519e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2207      	movs	r2, #7
 80051a4:	4013      	ands	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	220f      	movs	r2, #15
 80051aa:	409a      	lsls	r2, r3
 80051ac:	0013      	movs	r3, r2
 80051ae:	43da      	mvns	r2, r3
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4013      	ands	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2107      	movs	r1, #7
 80051be:	400b      	ands	r3, r1
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	409a      	lsls	r2, r3
 80051c4:	0013      	movs	r3, r2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	08da      	lsrs	r2, r3, #3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3208      	adds	r2, #8
 80051d4:	0092      	lsls	r2, r2, #2
 80051d6:	6939      	ldr	r1, [r7, #16]
 80051d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	2203      	movs	r2, #3
 80051e6:	409a      	lsls	r2, r3
 80051e8:	0013      	movs	r3, r2
 80051ea:	43da      	mvns	r2, r3
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4013      	ands	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2203      	movs	r2, #3
 80051f8:	401a      	ands	r2, r3
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	409a      	lsls	r2, r3
 8005200:	0013      	movs	r3, r2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	23c0      	movs	r3, #192	@ 0xc0
 8005214:	029b      	lsls	r3, r3, #10
 8005216:	4013      	ands	r3, r2
 8005218:	d100      	bne.n	800521c <HAL_GPIO_Init+0x174>
 800521a:	e0a0      	b.n	800535e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800521c:	4b57      	ldr	r3, [pc, #348]	@ (800537c <HAL_GPIO_Init+0x2d4>)
 800521e:	699a      	ldr	r2, [r3, #24]
 8005220:	4b56      	ldr	r3, [pc, #344]	@ (800537c <HAL_GPIO_Init+0x2d4>)
 8005222:	2101      	movs	r1, #1
 8005224:	430a      	orrs	r2, r1
 8005226:	619a      	str	r2, [r3, #24]
 8005228:	4b54      	ldr	r3, [pc, #336]	@ (800537c <HAL_GPIO_Init+0x2d4>)
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	2201      	movs	r2, #1
 800522e:	4013      	ands	r3, r2
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005234:	4a52      	ldr	r2, [pc, #328]	@ (8005380 <HAL_GPIO_Init+0x2d8>)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	089b      	lsrs	r3, r3, #2
 800523a:	3302      	adds	r3, #2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	589b      	ldr	r3, [r3, r2]
 8005240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2203      	movs	r2, #3
 8005246:	4013      	ands	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	220f      	movs	r2, #15
 800524c:	409a      	lsls	r2, r3
 800524e:	0013      	movs	r3, r2
 8005250:	43da      	mvns	r2, r3
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4013      	ands	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	2390      	movs	r3, #144	@ 0x90
 800525c:	05db      	lsls	r3, r3, #23
 800525e:	429a      	cmp	r2, r3
 8005260:	d019      	beq.n	8005296 <HAL_GPIO_Init+0x1ee>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a47      	ldr	r2, [pc, #284]	@ (8005384 <HAL_GPIO_Init+0x2dc>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <HAL_GPIO_Init+0x1ea>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a46      	ldr	r2, [pc, #280]	@ (8005388 <HAL_GPIO_Init+0x2e0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00d      	beq.n	800528e <HAL_GPIO_Init+0x1e6>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a45      	ldr	r2, [pc, #276]	@ (800538c <HAL_GPIO_Init+0x2e4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <HAL_GPIO_Init+0x1e2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a44      	ldr	r2, [pc, #272]	@ (8005390 <HAL_GPIO_Init+0x2e8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d101      	bne.n	8005286 <HAL_GPIO_Init+0x1de>
 8005282:	2304      	movs	r3, #4
 8005284:	e008      	b.n	8005298 <HAL_GPIO_Init+0x1f0>
 8005286:	2305      	movs	r3, #5
 8005288:	e006      	b.n	8005298 <HAL_GPIO_Init+0x1f0>
 800528a:	2303      	movs	r3, #3
 800528c:	e004      	b.n	8005298 <HAL_GPIO_Init+0x1f0>
 800528e:	2302      	movs	r3, #2
 8005290:	e002      	b.n	8005298 <HAL_GPIO_Init+0x1f0>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <HAL_GPIO_Init+0x1f0>
 8005296:	2300      	movs	r3, #0
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	2103      	movs	r1, #3
 800529c:	400a      	ands	r2, r1
 800529e:	0092      	lsls	r2, r2, #2
 80052a0:	4093      	lsls	r3, r2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052a8:	4935      	ldr	r1, [pc, #212]	@ (8005380 <HAL_GPIO_Init+0x2d8>)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	089b      	lsrs	r3, r3, #2
 80052ae:	3302      	adds	r3, #2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052b6:	4b37      	ldr	r3, [pc, #220]	@ (8005394 <HAL_GPIO_Init+0x2ec>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	43da      	mvns	r2, r3
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	2380      	movs	r3, #128	@ 0x80
 80052cc:	035b      	lsls	r3, r3, #13
 80052ce:	4013      	ands	r3, r2
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052da:	4b2e      	ldr	r3, [pc, #184]	@ (8005394 <HAL_GPIO_Init+0x2ec>)
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80052e0:	4b2c      	ldr	r3, [pc, #176]	@ (8005394 <HAL_GPIO_Init+0x2ec>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	43da      	mvns	r2, r3
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4013      	ands	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	2380      	movs	r3, #128	@ 0x80
 80052f6:	039b      	lsls	r3, r3, #14
 80052f8:	4013      	ands	r3, r2
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005304:	4b23      	ldr	r3, [pc, #140]	@ (8005394 <HAL_GPIO_Init+0x2ec>)
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800530a:	4b22      	ldr	r3, [pc, #136]	@ (8005394 <HAL_GPIO_Init+0x2ec>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	43da      	mvns	r2, r3
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	2380      	movs	r3, #128	@ 0x80
 8005320:	029b      	lsls	r3, r3, #10
 8005322:	4013      	ands	r3, r2
 8005324:	d003      	beq.n	800532e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800532e:	4b19      	ldr	r3, [pc, #100]	@ (8005394 <HAL_GPIO_Init+0x2ec>)
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8005334:	4b17      	ldr	r3, [pc, #92]	@ (8005394 <HAL_GPIO_Init+0x2ec>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	43da      	mvns	r2, r3
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4013      	ands	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	2380      	movs	r3, #128	@ 0x80
 800534a:	025b      	lsls	r3, r3, #9
 800534c:	4013      	ands	r3, r2
 800534e:	d003      	beq.n	8005358 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005358:	4b0e      	ldr	r3, [pc, #56]	@ (8005394 <HAL_GPIO_Init+0x2ec>)
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	3301      	adds	r3, #1
 8005362:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	40da      	lsrs	r2, r3
 800536c:	1e13      	subs	r3, r2, #0
 800536e:	d000      	beq.n	8005372 <HAL_GPIO_Init+0x2ca>
 8005370:	e6a2      	b.n	80050b8 <HAL_GPIO_Init+0x10>
  } 
}
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	46c0      	nop			@ (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b006      	add	sp, #24
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40021000 	.word	0x40021000
 8005380:	40010000 	.word	0x40010000
 8005384:	48000400 	.word	0x48000400
 8005388:	48000800 	.word	0x48000800
 800538c:	48000c00 	.word	0x48000c00
 8005390:	48001000 	.word	0x48001000
 8005394:	40010400 	.word	0x40010400

08005398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	0008      	movs	r0, r1
 80053a2:	0011      	movs	r1, r2
 80053a4:	1cbb      	adds	r3, r7, #2
 80053a6:	1c02      	adds	r2, r0, #0
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	1c7b      	adds	r3, r7, #1
 80053ac:	1c0a      	adds	r2, r1, #0
 80053ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053b0:	1c7b      	adds	r3, r7, #1
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d004      	beq.n	80053c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053b8:	1cbb      	adds	r3, r7, #2
 80053ba:	881a      	ldrh	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053c0:	e003      	b.n	80053ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053c2:	1cbb      	adds	r3, r7, #2
 80053c4:	881a      	ldrh	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80053ca:	46c0      	nop			@ (mov r8, r8)
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b002      	add	sp, #8
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	0002      	movs	r2, r0
 80053dc:	1dbb      	adds	r3, r7, #6
 80053de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053e0:	4b09      	ldr	r3, [pc, #36]	@ (8005408 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	1dba      	adds	r2, r7, #6
 80053e6:	8812      	ldrh	r2, [r2, #0]
 80053e8:	4013      	ands	r3, r2
 80053ea:	d008      	beq.n	80053fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80053ee:	1dba      	adds	r2, r7, #6
 80053f0:	8812      	ldrh	r2, [r2, #0]
 80053f2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053f4:	1dbb      	adds	r3, r7, #6
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	0018      	movs	r0, r3
 80053fa:	f000 f807 	bl	800540c <HAL_GPIO_EXTI_Callback>
  }
}
 80053fe:	46c0      	nop			@ (mov r8, r8)
 8005400:	46bd      	mov	sp, r7
 8005402:	b002      	add	sp, #8
 8005404:	bd80      	pop	{r7, pc}
 8005406:	46c0      	nop			@ (mov r8, r8)
 8005408:	40010400 	.word	0x40010400

0800540c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	0002      	movs	r2, r0
 8005414:	1dbb      	adds	r3, r7, #6
 8005416:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8005418:	46c0      	nop			@ (mov r8, r8)
 800541a:	46bd      	mov	sp, r7
 800541c:	b002      	add	sp, #8
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e08f      	b.n	8005552 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2241      	movs	r2, #65	@ 0x41
 8005436:	5c9b      	ldrb	r3, [r3, r2]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d107      	bne.n	800544e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2240      	movs	r2, #64	@ 0x40
 8005442:	2100      	movs	r1, #0
 8005444:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	0018      	movs	r0, r3
 800544a:	f7fd faad 	bl	80029a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2241      	movs	r2, #65	@ 0x41
 8005452:	2124      	movs	r1, #36	@ 0x24
 8005454:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2101      	movs	r1, #1
 8005462:	438a      	bics	r2, r1
 8005464:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	493b      	ldr	r1, [pc, #236]	@ (800555c <HAL_I2C_Init+0x13c>)
 8005470:	400a      	ands	r2, r1
 8005472:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4938      	ldr	r1, [pc, #224]	@ (8005560 <HAL_I2C_Init+0x140>)
 8005480:	400a      	ands	r2, r1
 8005482:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d108      	bne.n	800549e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2180      	movs	r1, #128	@ 0x80
 8005496:	0209      	lsls	r1, r1, #8
 8005498:	430a      	orrs	r2, r1
 800549a:	609a      	str	r2, [r3, #8]
 800549c:	e007      	b.n	80054ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2184      	movs	r1, #132	@ 0x84
 80054a8:	0209      	lsls	r1, r1, #8
 80054aa:	430a      	orrs	r2, r1
 80054ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d109      	bne.n	80054ca <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2180      	movs	r1, #128	@ 0x80
 80054c2:	0109      	lsls	r1, r1, #4
 80054c4:	430a      	orrs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]
 80054c8:	e007      	b.n	80054da <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4923      	ldr	r1, [pc, #140]	@ (8005564 <HAL_I2C_Init+0x144>)
 80054d6:	400a      	ands	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4920      	ldr	r1, [pc, #128]	@ (8005568 <HAL_I2C_Init+0x148>)
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	491a      	ldr	r1, [pc, #104]	@ (8005560 <HAL_I2C_Init+0x140>)
 80054f6:	400a      	ands	r2, r1
 80054f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	431a      	orrs	r2, r3
 8005504:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69d9      	ldr	r1, [r3, #28]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1a      	ldr	r2, [r3, #32]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2101      	movs	r1, #1
 8005530:	430a      	orrs	r2, r1
 8005532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2241      	movs	r2, #65	@ 0x41
 800553e:	2120      	movs	r1, #32
 8005540:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2242      	movs	r2, #66	@ 0x42
 800554c:	2100      	movs	r1, #0
 800554e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	0018      	movs	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	b002      	add	sp, #8
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	f0ffffff 	.word	0xf0ffffff
 8005560:	ffff7fff 	.word	0xffff7fff
 8005564:	fffff7ff 	.word	0xfffff7ff
 8005568:	02008000 	.word	0x02008000

0800556c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b089      	sub	sp, #36	@ 0x24
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	0008      	movs	r0, r1
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	0019      	movs	r1, r3
 800557a:	230a      	movs	r3, #10
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	1c02      	adds	r2, r0, #0
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	2308      	movs	r3, #8
 8005584:	18fb      	adds	r3, r7, r3
 8005586:	1c0a      	adds	r2, r1, #0
 8005588:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2241      	movs	r2, #65	@ 0x41
 800558e:	5c9b      	ldrb	r3, [r3, r2]
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b20      	cmp	r3, #32
 8005594:	d000      	beq.n	8005598 <HAL_I2C_Master_Transmit_IT+0x2c>
 8005596:	e087      	b.n	80056a8 <HAL_I2C_Master_Transmit_IT+0x13c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	2380      	movs	r3, #128	@ 0x80
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	401a      	ands	r2, r3
 80055a4:	2380      	movs	r3, #128	@ 0x80
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d101      	bne.n	80055b0 <HAL_I2C_Master_Transmit_IT+0x44>
    {
      return HAL_BUSY;
 80055ac:	2302      	movs	r3, #2
 80055ae:	e07c      	b.n	80056aa <HAL_I2C_Master_Transmit_IT+0x13e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2240      	movs	r2, #64	@ 0x40
 80055b4:	5c9b      	ldrb	r3, [r3, r2]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_I2C_Master_Transmit_IT+0x52>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e075      	b.n	80056aa <HAL_I2C_Master_Transmit_IT+0x13e>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2240      	movs	r2, #64	@ 0x40
 80055c2:	2101      	movs	r1, #1
 80055c4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2241      	movs	r2, #65	@ 0x41
 80055ca:	2121      	movs	r1, #33	@ 0x21
 80055cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2242      	movs	r2, #66	@ 0x42
 80055d2:	2110      	movs	r1, #16
 80055d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2208      	movs	r2, #8
 80055e6:	18ba      	adds	r2, r7, r2
 80055e8:	8812      	ldrh	r2, [r2, #0]
 80055ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4a31      	ldr	r2, [pc, #196]	@ (80056b4 <HAL_I2C_Master_Transmit_IT+0x148>)
 80055f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4a30      	ldr	r2, [pc, #192]	@ (80056b8 <HAL_I2C_Master_Transmit_IT+0x14c>)
 80055f6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2bff      	cmp	r3, #255	@ 0xff
 8005600:	d906      	bls.n	8005610 <HAL_I2C_Master_Transmit_IT+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	22ff      	movs	r2, #255	@ 0xff
 8005606:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005608:	2380      	movs	r3, #128	@ 0x80
 800560a:	045b      	lsls	r3, r3, #17
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e007      	b.n	8005620 <HAL_I2C_Master_Transmit_IT+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005614:	b29a      	uxth	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800561a:	2380      	movs	r3, #128	@ 0x80
 800561c:	049b      	lsls	r3, r3, #18
 800561e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005624:	2b00      	cmp	r3, #0
 8005626:	d027      	beq.n	8005678 <HAL_I2C_Master_Transmit_IT+0x10c>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565c:	b2db      	uxtb	r3, r3
 800565e:	3301      	adds	r3, #1
 8005660:	b2da      	uxtb	r2, r3
 8005662:	697c      	ldr	r4, [r7, #20]
 8005664:	230a      	movs	r3, #10
 8005666:	18fb      	adds	r3, r7, r3
 8005668:	8819      	ldrh	r1, [r3, #0]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	4b13      	ldr	r3, [pc, #76]	@ (80056bc <HAL_I2C_Master_Transmit_IT+0x150>)
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	0023      	movs	r3, r4
 8005672:	f001 fc49 	bl	8006f08 <I2C_TransferConfig>
 8005676:	e00c      	b.n	8005692 <HAL_I2C_Master_Transmit_IT+0x126>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567c:	b2da      	uxtb	r2, r3
 800567e:	697c      	ldr	r4, [r7, #20]
 8005680:	230a      	movs	r3, #10
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	8819      	ldrh	r1, [r3, #0]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <HAL_I2C_Master_Transmit_IT+0x150>)
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	0023      	movs	r3, r4
 800568e:	f001 fc3b 	bl	8006f08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2240      	movs	r2, #64	@ 0x40
 8005696:	2100      	movs	r1, #0
 8005698:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2101      	movs	r1, #1
 800569e:	0018      	movs	r0, r3
 80056a0:	f001 fc6c 	bl	8006f7c <I2C_Enable_IRQ>

    return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e000      	b.n	80056aa <HAL_I2C_Master_Transmit_IT+0x13e>
  }
  else
  {
    return HAL_BUSY;
 80056a8:	2302      	movs	r3, #2
  }
}
 80056aa:	0018      	movs	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b007      	add	sp, #28
 80056b0:	bd90      	pop	{r4, r7, pc}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	ffff0000 	.word	0xffff0000
 80056b8:	08005941 	.word	0x08005941
 80056bc:	80002000 	.word	0x80002000

080056c0 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b089      	sub	sp, #36	@ 0x24
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	0008      	movs	r0, r1
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	0019      	movs	r1, r3
 80056ce:	230a      	movs	r3, #10
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	1c02      	adds	r2, r0, #0
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	2308      	movs	r3, #8
 80056d8:	18fb      	adds	r3, r7, r3
 80056da:	1c0a      	adds	r2, r1, #0
 80056dc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2241      	movs	r2, #65	@ 0x41
 80056e2:	5c9b      	ldrb	r3, [r3, r2]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d15b      	bne.n	80057a2 <HAL_I2C_Master_Receive_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	2380      	movs	r3, #128	@ 0x80
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	401a      	ands	r2, r3
 80056f6:	2380      	movs	r3, #128	@ 0x80
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d101      	bne.n	8005702 <HAL_I2C_Master_Receive_IT+0x42>
    {
      return HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
 8005700:	e050      	b.n	80057a4 <HAL_I2C_Master_Receive_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2240      	movs	r2, #64	@ 0x40
 8005706:	5c9b      	ldrb	r3, [r3, r2]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_I2C_Master_Receive_IT+0x50>
 800570c:	2302      	movs	r3, #2
 800570e:	e049      	b.n	80057a4 <HAL_I2C_Master_Receive_IT+0xe4>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2240      	movs	r2, #64	@ 0x40
 8005714:	2101      	movs	r1, #1
 8005716:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2241      	movs	r2, #65	@ 0x41
 800571c:	2122      	movs	r1, #34	@ 0x22
 800571e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2242      	movs	r2, #66	@ 0x42
 8005724:	2110      	movs	r1, #16
 8005726:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2208      	movs	r2, #8
 8005738:	18ba      	adds	r2, r7, r2
 800573a:	8812      	ldrh	r2, [r2, #0]
 800573c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4a1a      	ldr	r2, [pc, #104]	@ (80057ac <HAL_I2C_Master_Receive_IT+0xec>)
 8005742:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4a1a      	ldr	r2, [pc, #104]	@ (80057b0 <HAL_I2C_Master_Receive_IT+0xf0>)
 8005748:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574e:	b29b      	uxth	r3, r3
 8005750:	2bff      	cmp	r3, #255	@ 0xff
 8005752:	d906      	bls.n	8005762 <HAL_I2C_Master_Receive_IT+0xa2>
    {
      hi2c->XferSize = 1U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800575a:	2380      	movs	r3, #128	@ 0x80
 800575c:	045b      	lsls	r3, r3, #17
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	e007      	b.n	8005772 <HAL_I2C_Master_Receive_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800576c:	2380      	movs	r3, #128	@ 0x80
 800576e:	049b      	lsls	r3, r3, #18
 8005770:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005776:	b2da      	uxtb	r2, r3
 8005778:	697c      	ldr	r4, [r7, #20]
 800577a:	230a      	movs	r3, #10
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	8819      	ldrh	r1, [r3, #0]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	4b0c      	ldr	r3, [pc, #48]	@ (80057b4 <HAL_I2C_Master_Receive_IT+0xf4>)
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	0023      	movs	r3, r4
 8005788:	f001 fbbe 	bl	8006f08 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2240      	movs	r2, #64	@ 0x40
 8005790:	2100      	movs	r1, #0
 8005792:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2102      	movs	r1, #2
 8005798:	0018      	movs	r0, r3
 800579a:	f001 fbef 	bl	8006f7c <I2C_Enable_IRQ>

    return HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	e000      	b.n	80057a4 <HAL_I2C_Master_Receive_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80057a2:	2302      	movs	r3, #2
  }
}
 80057a4:	0018      	movs	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	b007      	add	sp, #28
 80057aa:	bd90      	pop	{r4, r7, pc}
 80057ac:	ffff0000 	.word	0xffff0000
 80057b0:	08005941 	.word	0x08005941
 80057b4:	80002400 	.word	0x80002400

080057b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
  }
}
 80057e4:	46c0      	nop			@ (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b004      	add	sp, #16
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	2380      	movs	r3, #128	@ 0x80
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	4013      	ands	r3, r2
 800580c:	d00e      	beq.n	800582c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2280      	movs	r2, #128	@ 0x80
 8005812:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005814:	d00a      	beq.n	800582c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	2201      	movs	r2, #1
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2280      	movs	r2, #128	@ 0x80
 8005828:	0052      	lsls	r2, r2, #1
 800582a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	2380      	movs	r3, #128	@ 0x80
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4013      	ands	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2280      	movs	r2, #128	@ 0x80
 800583a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800583c:	d00a      	beq.n	8005854 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005842:	2208      	movs	r2, #8
 8005844:	431a      	orrs	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2280      	movs	r2, #128	@ 0x80
 8005850:	00d2      	lsls	r2, r2, #3
 8005852:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	2380      	movs	r3, #128	@ 0x80
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4013      	ands	r3, r2
 800585c:	d00e      	beq.n	800587c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2280      	movs	r2, #128	@ 0x80
 8005862:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005864:	d00a      	beq.n	800587c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586a:	2202      	movs	r2, #2
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2280      	movs	r2, #128	@ 0x80
 8005878:	0092      	lsls	r2, r2, #2
 800587a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005880:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	220b      	movs	r2, #11
 8005886:	4013      	ands	r3, r2
 8005888:	d005      	beq.n	8005896 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	0011      	movs	r1, r2
 8005890:	0018      	movs	r0, r3
 8005892:	f001 f9cd 	bl	8006c30 <I2C_ITError>
  }
}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	46bd      	mov	sp, r7
 800589a:	b006      	add	sp, #24
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80058a6:	46c0      	nop			@ (mov r8, r8)
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b002      	add	sp, #8
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b002      	add	sp, #8
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80058c6:	46c0      	nop			@ (mov r8, r8)
 80058c8:	46bd      	mov	sp, r7
 80058ca:	b002      	add	sp, #8
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	0008      	movs	r0, r1
 80058d8:	0011      	movs	r1, r2
 80058da:	1cfb      	adds	r3, r7, #3
 80058dc:	1c02      	adds	r2, r0, #0
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	003b      	movs	r3, r7
 80058e2:	1c0a      	adds	r2, r1, #0
 80058e4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80058e6:	46c0      	nop			@ (mov r8, r8)
 80058e8:	46bd      	mov	sp, r7
 80058ea:	b002      	add	sp, #8
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80058f6:	46c0      	nop			@ (mov r8, r8)
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b002      	add	sp, #8
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005906:	46c0      	nop			@ (mov r8, r8)
 8005908:	46bd      	mov	sp, r7
 800590a:	b002      	add	sp, #8
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	46bd      	mov	sp, r7
 800591a:	b002      	add	sp, #8
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	46bd      	mov	sp, r7
 800592a:	b002      	add	sp, #8
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005936:	46c0      	nop			@ (mov r8, r8)
 8005938:	46bd      	mov	sp, r7
 800593a:	b002      	add	sp, #8
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005940:	b590      	push	{r4, r7, lr}
 8005942:	b089      	sub	sp, #36	@ 0x24
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2240      	movs	r2, #64	@ 0x40
 8005954:	5c9b      	ldrb	r3, [r3, r2]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <I2C_Master_ISR_IT+0x1e>
 800595a:	2302      	movs	r3, #2
 800595c:	e12d      	b.n	8005bba <I2C_Master_ISR_IT+0x27a>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2240      	movs	r2, #64	@ 0x40
 8005962:	2101      	movs	r1, #1
 8005964:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2210      	movs	r2, #16
 800596a:	4013      	ands	r3, r2
 800596c:	d012      	beq.n	8005994 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2210      	movs	r2, #16
 8005972:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005974:	d00e      	beq.n	8005994 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2210      	movs	r2, #16
 800597c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005982:	2204      	movs	r2, #4
 8005984:	431a      	orrs	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	0018      	movs	r0, r3
 800598e:	f001 fa7a 	bl	8006e86 <I2C_Flush_TXDR>
 8005992:	e0ff      	b.n	8005b94 <I2C_Master_ISR_IT+0x254>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2204      	movs	r2, #4
 8005998:	4013      	ands	r3, r2
 800599a:	d021      	beq.n	80059e0 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2204      	movs	r2, #4
 80059a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80059a2:	d01d      	beq.n	80059e0 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2204      	movs	r2, #4
 80059a8:	4393      	bics	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059de:	e0d9      	b.n	8005b94 <I2C_Master_ISR_IT+0x254>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2240      	movs	r2, #64	@ 0x40
 80059e4:	4013      	ands	r3, r2
 80059e6:	d126      	bne.n	8005a36 <I2C_Master_ISR_IT+0xf6>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2202      	movs	r2, #2
 80059ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80059ee:	d022      	beq.n	8005a36 <I2C_Master_ISR_IT+0xf6>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	4013      	ands	r3, r2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80059f6:	d01e      	beq.n	8005a36 <I2C_Master_ISR_IT+0xf6>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d100      	bne.n	8005a04 <I2C_Master_ISR_IT+0xc4>
 8005a02:	e0c7      	b.n	8005b94 <I2C_Master_ISR_IT+0x254>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005a34:	e0ae      	b.n	8005b94 <I2C_Master_ISR_IT+0x254>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2280      	movs	r2, #128	@ 0x80
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d100      	bne.n	8005a40 <I2C_Master_ISR_IT+0x100>
 8005a3e:	e079      	b.n	8005b34 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2240      	movs	r2, #64	@ 0x40
 8005a44:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a46:	d100      	bne.n	8005a4a <I2C_Master_ISR_IT+0x10a>
 8005a48:	e074      	b.n	8005b34 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d059      	beq.n	8005b08 <I2C_Master_ISR_IT+0x1c8>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d155      	bne.n	8005b08 <I2C_Master_ISR_IT+0x1c8>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	2312      	movs	r3, #18
 8005a66:	18fb      	adds	r3, r7, r3
 8005a68:	0592      	lsls	r2, r2, #22
 8005a6a:	0d92      	lsrs	r2, r2, #22
 8005a6c:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2bff      	cmp	r3, #255	@ 0xff
 8005a76:	d91f      	bls.n	8005ab8 <I2C_Master_ISR_IT+0x178>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	0c1b      	lsrs	r3, r3, #16
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2201      	movs	r2, #1
 8005a84:	4013      	ands	r3, r2
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d103      	bne.n	8005a94 <I2C_Master_ISR_IT+0x154>
        {
          hi2c->XferSize = 1U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005a92:	e002      	b.n	8005a9a <I2C_Master_ISR_IT+0x15a>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	22ff      	movs	r2, #255	@ 0xff
 8005a98:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	2380      	movs	r3, #128	@ 0x80
 8005aa2:	045c      	lsls	r4, r3, #17
 8005aa4:	2312      	movs	r3, #18
 8005aa6:	18fb      	adds	r3, r7, r3
 8005aa8:	8819      	ldrh	r1, [r3, #0]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	2300      	movs	r3, #0
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	0023      	movs	r3, r4
 8005ab2:	f001 fa29 	bl	8006f08 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ab6:	e03c      	b.n	8005b32 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac6:	4a3f      	ldr	r2, [pc, #252]	@ (8005bc4 <I2C_Master_ISR_IT+0x284>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00e      	beq.n	8005aea <I2C_Master_ISR_IT+0x1aa>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ad6:	2312      	movs	r3, #18
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	8819      	ldrh	r1, [r3, #0]
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	0023      	movs	r3, r4
 8005ae4:	f001 fa10 	bl	8006f08 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ae8:	e023      	b.n	8005b32 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	2380      	movs	r3, #128	@ 0x80
 8005af2:	049c      	lsls	r4, r3, #18
 8005af4:	2312      	movs	r3, #18
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	8819      	ldrh	r1, [r3, #0]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	2300      	movs	r3, #0
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	0023      	movs	r3, r4
 8005b02:	f001 fa01 	bl	8006f08 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b06:	e014      	b.n	8005b32 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	2380      	movs	r3, #128	@ 0x80
 8005b10:	049b      	lsls	r3, r3, #18
 8005b12:	401a      	ands	r2, r3
 8005b14:	2380      	movs	r3, #128	@ 0x80
 8005b16:	049b      	lsls	r3, r3, #18
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d004      	beq.n	8005b26 <I2C_Master_ISR_IT+0x1e6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f000 fd32 	bl	8006588 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b24:	e036      	b.n	8005b94 <I2C_Master_ISR_IT+0x254>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2140      	movs	r1, #64	@ 0x40
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f001 f880 	bl	8006c30 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b30:	e030      	b.n	8005b94 <I2C_Master_ISR_IT+0x254>
 8005b32:	e02f      	b.n	8005b94 <I2C_Master_ISR_IT+0x254>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2240      	movs	r2, #64	@ 0x40
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d02b      	beq.n	8005b94 <I2C_Master_ISR_IT+0x254>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2240      	movs	r2, #64	@ 0x40
 8005b40:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005b42:	d027      	beq.n	8005b94 <I2C_Master_ISR_IT+0x254>
  {
    if (hi2c->XferCount == 0U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d11d      	bne.n	8005b8a <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	2380      	movs	r3, #128	@ 0x80
 8005b56:	049b      	lsls	r3, r3, #18
 8005b58:	401a      	ands	r2, r3
 8005b5a:	2380      	movs	r3, #128	@ 0x80
 8005b5c:	049b      	lsls	r3, r3, #18
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d018      	beq.n	8005b94 <I2C_Master_ISR_IT+0x254>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b66:	4a17      	ldr	r2, [pc, #92]	@ (8005bc4 <I2C_Master_ISR_IT+0x284>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d109      	bne.n	8005b80 <I2C_Master_ISR_IT+0x240>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2180      	movs	r1, #128	@ 0x80
 8005b78:	01c9      	lsls	r1, r1, #7
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	e009      	b.n	8005b94 <I2C_Master_ISR_IT+0x254>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	0018      	movs	r0, r3
 8005b84:	f000 fd00 	bl	8006588 <I2C_ITMasterSeqCplt>
 8005b88:	e004      	b.n	8005b94 <I2C_Master_ISR_IT+0x254>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2140      	movs	r1, #64	@ 0x40
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f001 f84e 	bl	8006c30 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2220      	movs	r2, #32
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <I2C_Master_ISR_IT+0x270>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ba2:	d005      	beq.n	8005bb0 <I2C_Master_ISR_IT+0x270>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	0011      	movs	r1, r2
 8005baa:	0018      	movs	r0, r3
 8005bac:	f000 fd92 	bl	80066d4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2240      	movs	r2, #64	@ 0x40
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	0018      	movs	r0, r3
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	b007      	add	sp, #28
 8005bc0:	bd90      	pop	{r4, r7, pc}
 8005bc2:	46c0      	nop			@ (mov r8, r8)
 8005bc4:	ffff0000 	.word	0xffff0000

08005bc8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2240      	movs	r2, #64	@ 0x40
 8005be2:	5c9b      	ldrb	r3, [r3, r2]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <I2C_Slave_ISR_IT+0x24>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e0e7      	b.n	8005dbc <I2C_Slave_ISR_IT+0x1f4>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2240      	movs	r2, #64	@ 0x40
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d00a      	beq.n	8005c12 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c02:	d006      	beq.n	8005c12 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	0011      	movs	r1, r2
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f000 fe30 	bl	8006870 <I2C_ITSlaveCplt>
 8005c10:	e0cf      	b.n	8005db2 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2210      	movs	r2, #16
 8005c16:	4013      	ands	r3, r2
 8005c18:	d052      	beq.n	8005cc0 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c20:	d04e      	beq.n	8005cc0 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d12d      	bne.n	8005c88 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2241      	movs	r2, #65	@ 0x41
 8005c30:	5c9b      	ldrb	r3, [r3, r2]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b28      	cmp	r3, #40	@ 0x28
 8005c36:	d10b      	bne.n	8005c50 <I2C_Slave_ISR_IT+0x88>
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	2380      	movs	r3, #128	@ 0x80
 8005c3c:	049b      	lsls	r3, r3, #18
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d106      	bne.n	8005c50 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	0011      	movs	r1, r2
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f000 ff99 	bl	8006b80 <I2C_ITListenCplt>
 8005c4e:	e036      	b.n	8005cbe <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2241      	movs	r2, #65	@ 0x41
 8005c54:	5c9b      	ldrb	r3, [r3, r2]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b29      	cmp	r3, #41	@ 0x29
 8005c5a:	d110      	bne.n	8005c7e <I2C_Slave_ISR_IT+0xb6>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4a59      	ldr	r2, [pc, #356]	@ (8005dc4 <I2C_Slave_ISR_IT+0x1fc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00c      	beq.n	8005c7e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f001 f909 	bl	8006e86 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	0018      	movs	r0, r3
 8005c78:	f000 fcc8 	bl	800660c <I2C_ITSlaveSeqCplt>
 8005c7c:	e01f      	b.n	8005cbe <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2210      	movs	r2, #16
 8005c84:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005c86:	e091      	b.n	8005dac <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2210      	movs	r2, #16
 8005c8e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c94:	2204      	movs	r2, #4
 8005c96:	431a      	orrs	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d005      	beq.n	8005cae <I2C_Slave_ISR_IT+0xe6>
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	2380      	movs	r3, #128	@ 0x80
 8005ca6:	045b      	lsls	r3, r3, #17
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d000      	beq.n	8005cae <I2C_Slave_ISR_IT+0xe6>
 8005cac:	e07e      	b.n	8005dac <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	0011      	movs	r1, r2
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f000 ffba 	bl	8006c30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005cbc:	e076      	b.n	8005dac <I2C_Slave_ISR_IT+0x1e4>
 8005cbe:	e075      	b.n	8005dac <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d02f      	beq.n	8005d28 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2204      	movs	r2, #4
 8005ccc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cce:	d02b      	beq.n	8005d28 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d018      	beq.n	8005d0c <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d14c      	bne.n	8005db0 <I2C_Slave_ISR_IT+0x1e8>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	4a2a      	ldr	r2, [pc, #168]	@ (8005dc4 <I2C_Slave_ISR_IT+0x1fc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d048      	beq.n	8005db0 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 fc73 	bl	800660c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005d26:	e043      	b.n	8005db0 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d00a      	beq.n	8005d46 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2208      	movs	r2, #8
 8005d34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d36:	d006      	beq.n	8005d46 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	0011      	movs	r1, r2
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f000 fb7e 	bl	8006440 <I2C_ITAddrCplt>
 8005d44:	e035      	b.n	8005db2 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d031      	beq.n	8005db2 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2202      	movs	r2, #2
 8005d52:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d54:	d02d      	beq.n	8005db2 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d018      	beq.n	8005d92 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	781a      	ldrb	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d90:	e00f      	b.n	8005db2 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	2380      	movs	r3, #128	@ 0x80
 8005d96:	045b      	lsls	r3, r3, #17
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d002      	beq.n	8005da2 <I2C_Slave_ISR_IT+0x1da>
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d107      	bne.n	8005db2 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	0018      	movs	r0, r3
 8005da6:	f000 fc31 	bl	800660c <I2C_ITSlaveSeqCplt>
 8005daa:	e002      	b.n	8005db2 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8005dac:	46c0      	nop			@ (mov r8, r8)
 8005dae:	e000      	b.n	8005db2 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8005db0:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2240      	movs	r2, #64	@ 0x40
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b006      	add	sp, #24
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	ffff0000 	.word	0xffff0000

08005dc8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b089      	sub	sp, #36	@ 0x24
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2240      	movs	r2, #64	@ 0x40
 8005dd8:	5c9b      	ldrb	r3, [r3, r2]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <I2C_Master_ISR_DMA+0x1a>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e0f5      	b.n	8005fce <I2C_Master_ISR_DMA+0x206>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2240      	movs	r2, #64	@ 0x40
 8005de6:	2101      	movs	r1, #1
 8005de8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2210      	movs	r2, #16
 8005dee:	4013      	ands	r3, r2
 8005df0:	d017      	beq.n	8005e22 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2210      	movs	r2, #16
 8005df6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005df8:	d013      	beq.n	8005e22 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2210      	movs	r2, #16
 8005e00:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e06:	2204      	movs	r2, #4
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2120      	movs	r1, #32
 8005e12:	0018      	movs	r0, r3
 8005e14:	f001 f8b2 	bl	8006f7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f001 f833 	bl	8006e86 <I2C_Flush_TXDR>
 8005e20:	e0d0      	b.n	8005fc4 <I2C_Master_ISR_DMA+0x1fc>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2280      	movs	r2, #128	@ 0x80
 8005e26:	4013      	ands	r3, r2
 8005e28:	d100      	bne.n	8005e2c <I2C_Master_ISR_DMA+0x64>
 8005e2a:	e08a      	b.n	8005f42 <I2C_Master_ISR_DMA+0x17a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2240      	movs	r2, #64	@ 0x40
 8005e30:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e32:	d100      	bne.n	8005e36 <I2C_Master_ISR_DMA+0x6e>
 8005e34:	e085      	b.n	8005f42 <I2C_Master_ISR_DMA+0x17a>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2140      	movs	r1, #64	@ 0x40
 8005e42:	438a      	bics	r2, r1
 8005e44:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d063      	beq.n	8005f18 <I2C_Master_ISR_DMA+0x150>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	2312      	movs	r3, #18
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	0592      	lsls	r2, r2, #22
 8005e5e:	0d92      	lsrs	r2, r2, #22
 8005e60:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2bff      	cmp	r3, #255	@ 0xff
 8005e6a:	d914      	bls.n	8005e96 <I2C_Master_ISR_DMA+0xce>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	0c1b      	lsrs	r3, r3, #16
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2201      	movs	r2, #1
 8005e78:	4013      	ands	r3, r2
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d103      	bne.n	8005e88 <I2C_Master_ISR_DMA+0xc0>
        {
          hi2c->XferSize = 1U;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005e86:	e002      	b.n	8005e8e <I2C_Master_ISR_DMA+0xc6>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	22ff      	movs	r2, #255	@ 0xff
 8005e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8005e8e:	2380      	movs	r3, #128	@ 0x80
 8005e90:	045b      	lsls	r3, r3, #17
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e010      	b.n	8005eb8 <I2C_Master_ISR_DMA+0xf0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8005fd8 <I2C_Master_ISR_DMA+0x210>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d003      	beq.n	8005eb2 <I2C_Master_ISR_DMA+0xea>
        {
          xfermode = hi2c->XferOptions;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e002      	b.n	8005eb8 <I2C_Master_ISR_DMA+0xf0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005eb2:	2380      	movs	r3, #128	@ 0x80
 8005eb4:	049b      	lsls	r3, r3, #18
 8005eb6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	697c      	ldr	r4, [r7, #20]
 8005ec0:	2312      	movs	r3, #18
 8005ec2:	18fb      	adds	r3, r7, r3
 8005ec4:	8819      	ldrh	r1, [r3, #0]
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	0023      	movs	r3, r4
 8005ece:	f001 f81b 	bl	8006f08 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2241      	movs	r2, #65	@ 0x41
 8005ee8:	5c9b      	ldrb	r3, [r3, r2]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b22      	cmp	r3, #34	@ 0x22
 8005eee:	d109      	bne.n	8005f04 <I2C_Master_ISR_DMA+0x13c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2180      	movs	r1, #128	@ 0x80
 8005efc:	0209      	lsls	r1, r1, #8
 8005efe:	430a      	orrs	r2, r1
 8005f00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f02:	e05f      	b.n	8005fc4 <I2C_Master_ISR_DMA+0x1fc>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2180      	movs	r1, #128	@ 0x80
 8005f10:	01c9      	lsls	r1, r1, #7
 8005f12:	430a      	orrs	r2, r1
 8005f14:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f16:	e055      	b.n	8005fc4 <I2C_Master_ISR_DMA+0x1fc>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	2380      	movs	r3, #128	@ 0x80
 8005f20:	049b      	lsls	r3, r3, #18
 8005f22:	401a      	ands	r2, r3
 8005f24:	2380      	movs	r3, #128	@ 0x80
 8005f26:	049b      	lsls	r3, r3, #18
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d004      	beq.n	8005f36 <I2C_Master_ISR_DMA+0x16e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f000 fb2a 	bl	8006588 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005f34:	e046      	b.n	8005fc4 <I2C_Master_ISR_DMA+0x1fc>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2140      	movs	r1, #64	@ 0x40
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f000 fe78 	bl	8006c30 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005f40:	e040      	b.n	8005fc4 <I2C_Master_ISR_DMA+0x1fc>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2240      	movs	r2, #64	@ 0x40
 8005f46:	4013      	ands	r3, r2
 8005f48:	d02c      	beq.n	8005fa4 <I2C_Master_ISR_DMA+0x1dc>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2240      	movs	r2, #64	@ 0x40
 8005f4e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f50:	d028      	beq.n	8005fa4 <I2C_Master_ISR_DMA+0x1dc>
  {
    if (hi2c->XferCount == 0U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d11d      	bne.n	8005f98 <I2C_Master_ISR_DMA+0x1d0>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	2380      	movs	r3, #128	@ 0x80
 8005f64:	049b      	lsls	r3, r3, #18
 8005f66:	401a      	ands	r2, r3
 8005f68:	2380      	movs	r3, #128	@ 0x80
 8005f6a:	049b      	lsls	r3, r3, #18
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d028      	beq.n	8005fc2 <I2C_Master_ISR_DMA+0x1fa>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f74:	4a18      	ldr	r2, [pc, #96]	@ (8005fd8 <I2C_Master_ISR_DMA+0x210>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d109      	bne.n	8005f8e <I2C_Master_ISR_DMA+0x1c6>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2180      	movs	r1, #128	@ 0x80
 8005f86:	01c9      	lsls	r1, r1, #7
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005f8c:	e019      	b.n	8005fc2 <I2C_Master_ISR_DMA+0x1fa>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	0018      	movs	r0, r3
 8005f92:	f000 faf9 	bl	8006588 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005f96:	e014      	b.n	8005fc2 <I2C_Master_ISR_DMA+0x1fa>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2140      	movs	r1, #64	@ 0x40
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f000 fe47 	bl	8006c30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005fa2:	e00e      	b.n	8005fc2 <I2C_Master_ISR_DMA+0x1fa>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d00b      	beq.n	8005fc4 <I2C_Master_ISR_DMA+0x1fc>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fb2:	d007      	beq.n	8005fc4 <I2C_Master_ISR_DMA+0x1fc>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	0011      	movs	r1, r2
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f000 fb8a 	bl	80066d4 <I2C_ITMasterCplt>
 8005fc0:	e000      	b.n	8005fc4 <I2C_Master_ISR_DMA+0x1fc>
    if (hi2c->XferCount == 0U)
 8005fc2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2240      	movs	r2, #64	@ 0x40
 8005fc8:	2100      	movs	r1, #0
 8005fca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	0018      	movs	r0, r3
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	b007      	add	sp, #28
 8005fd4:	bd90      	pop	{r4, r7, pc}
 8005fd6:	46c0      	nop			@ (mov r8, r8)
 8005fd8:	ffff0000 	.word	0xffff0000

08005fdc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005fdc:	b590      	push	{r4, r7, lr}
 8005fde:	b089      	sub	sp, #36	@ 0x24
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005fe8:	4b9f      	ldr	r3, [pc, #636]	@ (8006268 <I2C_Mem_ISR_DMA+0x28c>)
 8005fea:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2240      	movs	r2, #64	@ 0x40
 8005ff0:	5c9b      	ldrb	r3, [r3, r2]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <I2C_Mem_ISR_DMA+0x1e>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e132      	b.n	8006260 <I2C_Mem_ISR_DMA+0x284>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2240      	movs	r2, #64	@ 0x40
 8005ffe:	2101      	movs	r1, #1
 8006000:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2210      	movs	r2, #16
 8006006:	4013      	ands	r3, r2
 8006008:	d017      	beq.n	800603a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2210      	movs	r2, #16
 800600e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006010:	d013      	beq.n	800603a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2210      	movs	r2, #16
 8006018:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601e:	2204      	movs	r2, #4
 8006020:	431a      	orrs	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2120      	movs	r1, #32
 800602a:	0018      	movs	r0, r3
 800602c:	f000 ffa6 	bl	8006f7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	0018      	movs	r0, r3
 8006034:	f000 ff27 	bl	8006e86 <I2C_Flush_TXDR>
 8006038:	e10d      	b.n	8006256 <I2C_Mem_ISR_DMA+0x27a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2202      	movs	r2, #2
 800603e:	4013      	ands	r3, r2
 8006040:	d00d      	beq.n	800605e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006048:	d009      	beq.n	800605e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006052:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	4252      	negs	r2, r2
 800605a:	651a      	str	r2, [r3, #80]	@ 0x50
 800605c:	e0fb      	b.n	8006256 <I2C_Mem_ISR_DMA+0x27a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2280      	movs	r2, #128	@ 0x80
 8006062:	4013      	ands	r3, r2
 8006064:	d100      	bne.n	8006068 <I2C_Mem_ISR_DMA+0x8c>
 8006066:	e072      	b.n	800614e <I2C_Mem_ISR_DMA+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2240      	movs	r2, #64	@ 0x40
 800606c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800606e:	d100      	bne.n	8006072 <I2C_Mem_ISR_DMA+0x96>
 8006070:	e06d      	b.n	800614e <I2C_Mem_ISR_DMA+0x172>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2101      	movs	r1, #1
 8006076:	0018      	movs	r0, r3
 8006078:	f001 f80a 	bl	8007090 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2110      	movs	r1, #16
 8006080:	0018      	movs	r0, r3
 8006082:	f000 ff7b 	bl	8006f7c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d058      	beq.n	8006142 <I2C_Mem_ISR_DMA+0x166>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	2bff      	cmp	r3, #255	@ 0xff
 8006098:	d91e      	bls.n	80060d8 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	0c1b      	lsrs	r3, r3, #16
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2201      	movs	r2, #1
 80060a6:	4013      	ands	r3, r2
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d103      	bne.n	80060b6 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80060b4:	e002      	b.n	80060bc <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	22ff      	movs	r2, #255	@ 0xff
 80060ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060c0:	b299      	uxth	r1, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	2380      	movs	r3, #128	@ 0x80
 80060ca:	045b      	lsls	r3, r3, #17
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	2400      	movs	r4, #0
 80060d0:	9400      	str	r4, [sp, #0]
 80060d2:	f000 ff19 	bl	8006f08 <I2C_TransferConfig>
 80060d6:	e011      	b.n	80060fc <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060e6:	b299      	uxth	r1, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	2380      	movs	r3, #128	@ 0x80
 80060f0:	049b      	lsls	r3, r3, #18
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	2400      	movs	r4, #0
 80060f6:	9400      	str	r4, [sp, #0]
 80060f8:	f000 ff06 	bl	8006f08 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2241      	movs	r2, #65	@ 0x41
 8006112:	5c9b      	ldrb	r3, [r3, r2]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b22      	cmp	r3, #34	@ 0x22
 8006118:	d109      	bne.n	800612e <I2C_Mem_ISR_DMA+0x152>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2180      	movs	r1, #128	@ 0x80
 8006126:	0209      	lsls	r1, r1, #8
 8006128:	430a      	orrs	r2, r1
 800612a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800612c:	e093      	b.n	8006256 <I2C_Mem_ISR_DMA+0x27a>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2180      	movs	r1, #128	@ 0x80
 800613a:	01c9      	lsls	r1, r1, #7
 800613c:	430a      	orrs	r2, r1
 800613e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006140:	e089      	b.n	8006256 <I2C_Mem_ISR_DMA+0x27a>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2140      	movs	r1, #64	@ 0x40
 8006146:	0018      	movs	r0, r3
 8006148:	f000 fd72 	bl	8006c30 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800614c:	e083      	b.n	8006256 <I2C_Mem_ISR_DMA+0x27a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2240      	movs	r2, #64	@ 0x40
 8006152:	4013      	ands	r3, r2
 8006154:	d100      	bne.n	8006158 <I2C_Mem_ISR_DMA+0x17c>
 8006156:	e070      	b.n	800623a <I2C_Mem_ISR_DMA+0x25e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2240      	movs	r2, #64	@ 0x40
 800615c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800615e:	d06c      	beq.n	800623a <I2C_Mem_ISR_DMA+0x25e>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2101      	movs	r1, #1
 8006164:	0018      	movs	r0, r3
 8006166:	f000 ff93 	bl	8007090 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2110      	movs	r1, #16
 800616e:	0018      	movs	r0, r3
 8006170:	f000 ff04 	bl	8006f7c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2241      	movs	r2, #65	@ 0x41
 8006178:	5c9b      	ldrb	r3, [r3, r2]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b22      	cmp	r3, #34	@ 0x22
 800617e:	d101      	bne.n	8006184 <I2C_Mem_ISR_DMA+0x1a8>
    {
      direction = I2C_GENERATE_START_READ;
 8006180:	4b3a      	ldr	r3, [pc, #232]	@ (800626c <I2C_Mem_ISR_DMA+0x290>)
 8006182:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	2bff      	cmp	r3, #255	@ 0xff
 800618c:	d91f      	bls.n	80061ce <I2C_Mem_ISR_DMA+0x1f2>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	0c1b      	lsrs	r3, r3, #16
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2201      	movs	r2, #1
 800619a:	4013      	ands	r3, r2
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d103      	bne.n	80061aa <I2C_Mem_ISR_DMA+0x1ce>
      {
        hi2c->XferSize = 1U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80061a8:	e002      	b.n	80061b0 <I2C_Mem_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	22ff      	movs	r2, #255	@ 0xff
 80061ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061b4:	b299      	uxth	r1, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	2380      	movs	r3, #128	@ 0x80
 80061be:	045c      	lsls	r4, r3, #17
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	0023      	movs	r3, r4
 80061c8:	f000 fe9e 	bl	8006f08 <I2C_TransferConfig>
 80061cc:	e012      	b.n	80061f4 <I2C_Mem_ISR_DMA+0x218>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061dc:	b299      	uxth	r1, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	2380      	movs	r3, #128	@ 0x80
 80061e6:	049c      	lsls	r4, r3, #18
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	0023      	movs	r3, r4
 80061f0:	f000 fe8a 	bl	8006f08 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2241      	movs	r2, #65	@ 0x41
 800620a:	5c9b      	ldrb	r3, [r3, r2]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b22      	cmp	r3, #34	@ 0x22
 8006210:	d109      	bne.n	8006226 <I2C_Mem_ISR_DMA+0x24a>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2180      	movs	r1, #128	@ 0x80
 800621e:	0209      	lsls	r1, r1, #8
 8006220:	430a      	orrs	r2, r1
 8006222:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006224:	e017      	b.n	8006256 <I2C_Mem_ISR_DMA+0x27a>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2180      	movs	r1, #128	@ 0x80
 8006232:	01c9      	lsls	r1, r1, #7
 8006234:	430a      	orrs	r2, r1
 8006236:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006238:	e00d      	b.n	8006256 <I2C_Mem_ISR_DMA+0x27a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2220      	movs	r2, #32
 800623e:	4013      	ands	r3, r2
 8006240:	d009      	beq.n	8006256 <I2C_Mem_ISR_DMA+0x27a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006248:	d005      	beq.n	8006256 <I2C_Mem_ISR_DMA+0x27a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	0011      	movs	r1, r2
 8006250:	0018      	movs	r0, r3
 8006252:	f000 fa3f 	bl	80066d4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2240      	movs	r2, #64	@ 0x40
 800625a:	2100      	movs	r1, #0
 800625c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	0018      	movs	r0, r3
 8006262:	46bd      	mov	sp, r7
 8006264:	b007      	add	sp, #28
 8006266:	bd90      	pop	{r4, r7, pc}
 8006268:	80002000 	.word	0x80002000
 800626c:	80002400 	.word	0x80002400

08006270 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006280:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2240      	movs	r2, #64	@ 0x40
 800628a:	5c9b      	ldrb	r3, [r3, r2]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <I2C_Slave_ISR_DMA+0x24>
 8006290:	2302      	movs	r3, #2
 8006292:	e0ce      	b.n	8006432 <I2C_Slave_ISR_DMA+0x1c2>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2240      	movs	r2, #64	@ 0x40
 8006298:	2101      	movs	r1, #1
 800629a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2220      	movs	r2, #32
 80062a0:	4013      	ands	r3, r2
 80062a2:	d00a      	beq.n	80062ba <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062aa:	d006      	beq.n	80062ba <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	0011      	movs	r1, r2
 80062b2:	0018      	movs	r0, r3
 80062b4:	f000 fadc 	bl	8006870 <I2C_ITSlaveCplt>
 80062b8:	e0b6      	b.n	8006428 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2210      	movs	r2, #16
 80062be:	4013      	ands	r3, r2
 80062c0:	d100      	bne.n	80062c4 <I2C_Slave_ISR_DMA+0x54>
 80062c2:	e0a3      	b.n	800640c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2210      	movs	r2, #16
 80062c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062ca:	d100      	bne.n	80062ce <I2C_Slave_ISR_DMA+0x5e>
 80062cc:	e09e      	b.n	800640c <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	2380      	movs	r3, #128	@ 0x80
 80062d2:	01db      	lsls	r3, r3, #7
 80062d4:	4013      	ands	r3, r2
 80062d6:	d105      	bne.n	80062e4 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	2380      	movs	r3, #128	@ 0x80
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062e0:	d100      	bne.n	80062e4 <I2C_Slave_ISR_DMA+0x74>
 80062e2:	e08c      	b.n	80063fe <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00c      	beq.n	8006306 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	2380      	movs	r3, #128	@ 0x80
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	4013      	ands	r3, r2
 80062f4:	d007      	beq.n	8006306 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8006302:	2301      	movs	r3, #1
 8006304:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	2380      	movs	r3, #128	@ 0x80
 8006312:	01db      	lsls	r3, r3, #7
 8006314:	4013      	ands	r3, r2
 8006316:	d007      	beq.n	8006328 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8006324:	2301      	movs	r3, #1
 8006326:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d12d      	bne.n	800638a <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2241      	movs	r2, #65	@ 0x41
 8006332:	5c9b      	ldrb	r3, [r3, r2]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b28      	cmp	r3, #40	@ 0x28
 8006338:	d10b      	bne.n	8006352 <I2C_Slave_ISR_DMA+0xe2>
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	2380      	movs	r3, #128	@ 0x80
 800633e:	049b      	lsls	r3, r3, #18
 8006340:	429a      	cmp	r2, r3
 8006342:	d106      	bne.n	8006352 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	0011      	movs	r1, r2
 800634a:	0018      	movs	r0, r3
 800634c:	f000 fc18 	bl	8006b80 <I2C_ITListenCplt>
 8006350:	e054      	b.n	80063fc <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2241      	movs	r2, #65	@ 0x41
 8006356:	5c9b      	ldrb	r3, [r3, r2]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b29      	cmp	r3, #41	@ 0x29
 800635c:	d110      	bne.n	8006380 <I2C_Slave_ISR_DMA+0x110>
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	4a36      	ldr	r2, [pc, #216]	@ (800643c <I2C_Slave_ISR_DMA+0x1cc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00c      	beq.n	8006380 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2210      	movs	r2, #16
 800636c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	0018      	movs	r0, r3
 8006372:	f000 fd88 	bl	8006e86 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	0018      	movs	r0, r3
 800637a:	f000 f947 	bl	800660c <I2C_ITSlaveSeqCplt>
 800637e:	e03d      	b.n	80063fc <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2210      	movs	r2, #16
 8006386:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006388:	e03e      	b.n	8006408 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2210      	movs	r2, #16
 8006390:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006396:	2204      	movs	r2, #4
 8006398:	431a      	orrs	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800639e:	2317      	movs	r3, #23
 80063a0:	18fb      	adds	r3, r7, r3
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	2141      	movs	r1, #65	@ 0x41
 80063a6:	5c52      	ldrb	r2, [r2, r1]
 80063a8:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <I2C_Slave_ISR_DMA+0x14a>
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	2380      	movs	r3, #128	@ 0x80
 80063b4:	045b      	lsls	r3, r3, #17
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d126      	bne.n	8006408 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063ba:	2217      	movs	r2, #23
 80063bc:	18bb      	adds	r3, r7, r2
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b21      	cmp	r3, #33	@ 0x21
 80063c2:	d003      	beq.n	80063cc <I2C_Slave_ISR_DMA+0x15c>
 80063c4:	18bb      	adds	r3, r7, r2
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b29      	cmp	r3, #41	@ 0x29
 80063ca:	d103      	bne.n	80063d4 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2221      	movs	r2, #33	@ 0x21
 80063d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80063d2:	e00b      	b.n	80063ec <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80063d4:	2217      	movs	r2, #23
 80063d6:	18bb      	adds	r3, r7, r2
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b22      	cmp	r3, #34	@ 0x22
 80063dc:	d003      	beq.n	80063e6 <I2C_Slave_ISR_DMA+0x176>
 80063de:	18bb      	adds	r3, r7, r2
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e4:	d102      	bne.n	80063ec <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2222      	movs	r2, #34	@ 0x22
 80063ea:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	0011      	movs	r1, r2
 80063f4:	0018      	movs	r0, r3
 80063f6:	f000 fc1b 	bl	8006c30 <I2C_ITError>
      if (treatdmanack == 1U)
 80063fa:	e005      	b.n	8006408 <I2C_Slave_ISR_DMA+0x198>
 80063fc:	e004      	b.n	8006408 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2210      	movs	r2, #16
 8006404:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006406:	e00f      	b.n	8006428 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8006408:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800640a:	e00d      	b.n	8006428 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2208      	movs	r2, #8
 8006410:	4013      	ands	r3, r2
 8006412:	d009      	beq.n	8006428 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2208      	movs	r2, #8
 8006418:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800641a:	d005      	beq.n	8006428 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	0011      	movs	r1, r2
 8006422:	0018      	movs	r0, r3
 8006424:	f000 f80c 	bl	8006440 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2240      	movs	r2, #64	@ 0x40
 800642c:	2100      	movs	r1, #0
 800642e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	0018      	movs	r0, r3
 8006434:	46bd      	mov	sp, r7
 8006436:	b008      	add	sp, #32
 8006438:	bd80      	pop	{r7, pc}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	ffff0000 	.word	0xffff0000

08006440 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006440:	b5b0      	push	{r4, r5, r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2241      	movs	r2, #65	@ 0x41
 800644e:	5c9b      	ldrb	r3, [r3, r2]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	001a      	movs	r2, r3
 8006454:	2328      	movs	r3, #40	@ 0x28
 8006456:	4013      	ands	r3, r2
 8006458:	2b28      	cmp	r3, #40	@ 0x28
 800645a:	d000      	beq.n	800645e <I2C_ITAddrCplt+0x1e>
 800645c:	e088      	b.n	8006570 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	0c1b      	lsrs	r3, r3, #16
 8006466:	b2da      	uxtb	r2, r3
 8006468:	250f      	movs	r5, #15
 800646a:	197b      	adds	r3, r7, r5
 800646c:	2101      	movs	r1, #1
 800646e:	400a      	ands	r2, r1
 8006470:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	0c1b      	lsrs	r3, r3, #16
 800647a:	b29a      	uxth	r2, r3
 800647c:	200c      	movs	r0, #12
 800647e:	183b      	adds	r3, r7, r0
 8006480:	21fe      	movs	r1, #254	@ 0xfe
 8006482:	400a      	ands	r2, r1
 8006484:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	b29a      	uxth	r2, r3
 800648e:	240a      	movs	r4, #10
 8006490:	193b      	adds	r3, r7, r4
 8006492:	0592      	lsls	r2, r2, #22
 8006494:	0d92      	lsrs	r2, r2, #22
 8006496:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	b29a      	uxth	r2, r3
 80064a0:	2308      	movs	r3, #8
 80064a2:	18fb      	adds	r3, r7, r3
 80064a4:	21fe      	movs	r1, #254	@ 0xfe
 80064a6:	400a      	ands	r2, r1
 80064a8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d148      	bne.n	8006544 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80064b2:	0021      	movs	r1, r4
 80064b4:	187b      	adds	r3, r7, r1
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	09db      	lsrs	r3, r3, #7
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	183b      	adds	r3, r7, r0
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	4053      	eors	r3, r2
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	001a      	movs	r2, r3
 80064c6:	2306      	movs	r3, #6
 80064c8:	4013      	ands	r3, r2
 80064ca:	d120      	bne.n	800650e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80064cc:	183b      	adds	r3, r7, r0
 80064ce:	187a      	adds	r2, r7, r1
 80064d0:	8812      	ldrh	r2, [r2, #0]
 80064d2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d14c      	bne.n	8006580 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2208      	movs	r2, #8
 80064f2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2240      	movs	r2, #64	@ 0x40
 80064f8:	2100      	movs	r1, #0
 80064fa:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80064fc:	183b      	adds	r3, r7, r0
 80064fe:	881a      	ldrh	r2, [r3, #0]
 8006500:	197b      	adds	r3, r7, r5
 8006502:	7819      	ldrb	r1, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	0018      	movs	r0, r3
 8006508:	f7ff f9e1 	bl	80058ce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800650c:	e038      	b.n	8006580 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800650e:	240c      	movs	r4, #12
 8006510:	193b      	adds	r3, r7, r4
 8006512:	2208      	movs	r2, #8
 8006514:	18ba      	adds	r2, r7, r2
 8006516:	8812      	ldrh	r2, [r2, #0]
 8006518:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800651a:	2380      	movs	r3, #128	@ 0x80
 800651c:	021a      	lsls	r2, r3, #8
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	0011      	movs	r1, r2
 8006522:	0018      	movs	r0, r3
 8006524:	f000 fdb4 	bl	8007090 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2240      	movs	r2, #64	@ 0x40
 800652c:	2100      	movs	r1, #0
 800652e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006530:	193b      	adds	r3, r7, r4
 8006532:	881a      	ldrh	r2, [r3, #0]
 8006534:	230f      	movs	r3, #15
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	7819      	ldrb	r1, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	0018      	movs	r0, r3
 800653e:	f7ff f9c6 	bl	80058ce <HAL_I2C_AddrCallback>
}
 8006542:	e01d      	b.n	8006580 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006544:	2380      	movs	r3, #128	@ 0x80
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	0011      	movs	r1, r2
 800654c:	0018      	movs	r0, r3
 800654e:	f000 fd9f 	bl	8007090 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2240      	movs	r2, #64	@ 0x40
 8006556:	2100      	movs	r1, #0
 8006558:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800655a:	230c      	movs	r3, #12
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	881a      	ldrh	r2, [r3, #0]
 8006560:	230f      	movs	r3, #15
 8006562:	18fb      	adds	r3, r7, r3
 8006564:	7819      	ldrb	r1, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	0018      	movs	r0, r3
 800656a:	f7ff f9b0 	bl	80058ce <HAL_I2C_AddrCallback>
}
 800656e:	e007      	b.n	8006580 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2208      	movs	r2, #8
 8006576:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2240      	movs	r2, #64	@ 0x40
 800657c:	2100      	movs	r1, #0
 800657e:	5499      	strb	r1, [r3, r2]
}
 8006580:	46c0      	nop			@ (mov r8, r8)
 8006582:	46bd      	mov	sp, r7
 8006584:	b004      	add	sp, #16
 8006586:	bdb0      	pop	{r4, r5, r7, pc}

08006588 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2242      	movs	r2, #66	@ 0x42
 8006594:	2100      	movs	r1, #0
 8006596:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2241      	movs	r2, #65	@ 0x41
 800659c:	5c9b      	ldrb	r3, [r3, r2]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b21      	cmp	r3, #33	@ 0x21
 80065a2:	d117      	bne.n	80065d4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2241      	movs	r2, #65	@ 0x41
 80065a8:	2120      	movs	r1, #32
 80065aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2211      	movs	r2, #17
 80065b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2101      	movs	r1, #1
 80065bc:	0018      	movs	r0, r3
 80065be:	f000 fd67 	bl	8007090 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2240      	movs	r2, #64	@ 0x40
 80065c6:	2100      	movs	r1, #0
 80065c8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	0018      	movs	r0, r3
 80065ce:	f7fc fdad 	bl	800312c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065d2:	e016      	b.n	8006602 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2241      	movs	r2, #65	@ 0x41
 80065d8:	2120      	movs	r1, #32
 80065da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2212      	movs	r2, #18
 80065e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2102      	movs	r1, #2
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 fd4f 	bl	8007090 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2240      	movs	r2, #64	@ 0x40
 80065f6:	2100      	movs	r1, #0
 80065f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	0018      	movs	r0, r3
 80065fe:	f7ff f94e 	bl	800589e <HAL_I2C_MasterRxCpltCallback>
}
 8006602:	46c0      	nop			@ (mov r8, r8)
 8006604:	46bd      	mov	sp, r7
 8006606:	b002      	add	sp, #8
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2242      	movs	r2, #66	@ 0x42
 8006620:	2100      	movs	r1, #0
 8006622:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	2380      	movs	r3, #128	@ 0x80
 8006628:	01db      	lsls	r3, r3, #7
 800662a:	4013      	ands	r3, r2
 800662c:	d008      	beq.n	8006640 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4924      	ldr	r1, [pc, #144]	@ (80066cc <I2C_ITSlaveSeqCplt+0xc0>)
 800663a:	400a      	ands	r2, r1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e00c      	b.n	800665a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	2380      	movs	r3, #128	@ 0x80
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	4013      	ands	r3, r2
 8006648:	d007      	beq.n	800665a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	491e      	ldr	r1, [pc, #120]	@ (80066d0 <I2C_ITSlaveSeqCplt+0xc4>)
 8006656:	400a      	ands	r2, r1
 8006658:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2241      	movs	r2, #65	@ 0x41
 800665e:	5c9b      	ldrb	r3, [r3, r2]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b29      	cmp	r3, #41	@ 0x29
 8006664:	d114      	bne.n	8006690 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2241      	movs	r2, #65	@ 0x41
 800666a:	2128      	movs	r1, #40	@ 0x28
 800666c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2221      	movs	r2, #33	@ 0x21
 8006672:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2101      	movs	r1, #1
 8006678:	0018      	movs	r0, r3
 800667a:	f000 fd09 	bl	8007090 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2240      	movs	r2, #64	@ 0x40
 8006682:	2100      	movs	r1, #0
 8006684:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	0018      	movs	r0, r3
 800668a:	f7ff f910 	bl	80058ae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800668e:	e019      	b.n	80066c4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2241      	movs	r2, #65	@ 0x41
 8006694:	5c9b      	ldrb	r3, [r3, r2]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b2a      	cmp	r3, #42	@ 0x2a
 800669a:	d113      	bne.n	80066c4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2241      	movs	r2, #65	@ 0x41
 80066a0:	2128      	movs	r1, #40	@ 0x28
 80066a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2222      	movs	r2, #34	@ 0x22
 80066a8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2102      	movs	r1, #2
 80066ae:	0018      	movs	r0, r3
 80066b0:	f000 fcee 	bl	8007090 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2240      	movs	r2, #64	@ 0x40
 80066b8:	2100      	movs	r1, #0
 80066ba:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	0018      	movs	r0, r3
 80066c0:	f7ff f8fd 	bl	80058be <HAL_I2C_SlaveRxCpltCallback>
}
 80066c4:	46c0      	nop			@ (mov r8, r8)
 80066c6:	46bd      	mov	sp, r7
 80066c8:	b004      	add	sp, #16
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	ffffbfff 	.word	0xffffbfff
 80066d0:	ffff7fff 	.word	0xffff7fff

080066d4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2220      	movs	r2, #32
 80066e8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2241      	movs	r2, #65	@ 0x41
 80066ee:	5c9b      	ldrb	r3, [r3, r2]
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b21      	cmp	r3, #33	@ 0x21
 80066f4:	d108      	bne.n	8006708 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2101      	movs	r1, #1
 80066fa:	0018      	movs	r0, r3
 80066fc:	f000 fcc8 	bl	8007090 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2211      	movs	r2, #17
 8006704:	631a      	str	r2, [r3, #48]	@ 0x30
 8006706:	e00d      	b.n	8006724 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2241      	movs	r2, #65	@ 0x41
 800670c:	5c9b      	ldrb	r3, [r3, r2]
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b22      	cmp	r3, #34	@ 0x22
 8006712:	d107      	bne.n	8006724 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2102      	movs	r1, #2
 8006718:	0018      	movs	r0, r3
 800671a:	f000 fcb9 	bl	8007090 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2212      	movs	r2, #18
 8006722:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	494e      	ldr	r1, [pc, #312]	@ (8006868 <I2C_ITMasterCplt+0x194>)
 8006730:	400a      	ands	r2, r1
 8006732:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a4b      	ldr	r2, [pc, #300]	@ (800686c <I2C_ITMasterCplt+0x198>)
 800673e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2210      	movs	r2, #16
 8006744:	4013      	ands	r3, r2
 8006746:	d009      	beq.n	800675c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2210      	movs	r2, #16
 800674e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006754:	2204      	movs	r2, #4
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2241      	movs	r2, #65	@ 0x41
 8006760:	5c9b      	ldrb	r3, [r3, r2]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b60      	cmp	r3, #96	@ 0x60
 8006766:	d109      	bne.n	800677c <I2C_ITMasterCplt+0xa8>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2204      	movs	r2, #4
 800676c:	4013      	ands	r3, r2
 800676e:	d005      	beq.n	800677c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006776:	b2db      	uxtb	r3, r3
 8006778:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800677a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	0018      	movs	r0, r3
 8006780:	f000 fb81 	bl	8006e86 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006788:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2241      	movs	r2, #65	@ 0x41
 800678e:	5c9b      	ldrb	r3, [r3, r2]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b60      	cmp	r3, #96	@ 0x60
 8006794:	d002      	beq.n	800679c <I2C_ITMasterCplt+0xc8>
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	0011      	movs	r1, r2
 80067a4:	0018      	movs	r0, r3
 80067a6:	f000 fa43 	bl	8006c30 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80067aa:	e058      	b.n	800685e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2241      	movs	r2, #65	@ 0x41
 80067b0:	5c9b      	ldrb	r3, [r3, r2]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b21      	cmp	r3, #33	@ 0x21
 80067b6:	d126      	bne.n	8006806 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2241      	movs	r2, #65	@ 0x41
 80067bc:	2120      	movs	r1, #32
 80067be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2242      	movs	r2, #66	@ 0x42
 80067ca:	5c9b      	ldrb	r3, [r3, r2]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b40      	cmp	r3, #64	@ 0x40
 80067d0:	d10c      	bne.n	80067ec <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2242      	movs	r2, #66	@ 0x42
 80067d6:	2100      	movs	r1, #0
 80067d8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2240      	movs	r2, #64	@ 0x40
 80067de:	2100      	movs	r1, #0
 80067e0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	0018      	movs	r0, r3
 80067e6:	f7ff f88a 	bl	80058fe <HAL_I2C_MemTxCpltCallback>
}
 80067ea:	e038      	b.n	800685e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2242      	movs	r2, #66	@ 0x42
 80067f0:	2100      	movs	r1, #0
 80067f2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2240      	movs	r2, #64	@ 0x40
 80067f8:	2100      	movs	r1, #0
 80067fa:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	0018      	movs	r0, r3
 8006800:	f7fc fc94 	bl	800312c <HAL_I2C_MasterTxCpltCallback>
}
 8006804:	e02b      	b.n	800685e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2241      	movs	r2, #65	@ 0x41
 800680a:	5c9b      	ldrb	r3, [r3, r2]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b22      	cmp	r3, #34	@ 0x22
 8006810:	d125      	bne.n	800685e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2241      	movs	r2, #65	@ 0x41
 8006816:	2120      	movs	r1, #32
 8006818:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2242      	movs	r2, #66	@ 0x42
 8006824:	5c9b      	ldrb	r3, [r3, r2]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b40      	cmp	r3, #64	@ 0x40
 800682a:	d10c      	bne.n	8006846 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2242      	movs	r2, #66	@ 0x42
 8006830:	2100      	movs	r1, #0
 8006832:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2240      	movs	r2, #64	@ 0x40
 8006838:	2100      	movs	r1, #0
 800683a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	0018      	movs	r0, r3
 8006840:	f7ff f865 	bl	800590e <HAL_I2C_MemRxCpltCallback>
}
 8006844:	e00b      	b.n	800685e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2242      	movs	r2, #66	@ 0x42
 800684a:	2100      	movs	r1, #0
 800684c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2240      	movs	r2, #64	@ 0x40
 8006852:	2100      	movs	r1, #0
 8006854:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	0018      	movs	r0, r3
 800685a:	f7ff f820 	bl	800589e <HAL_I2C_MasterRxCpltCallback>
}
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	46bd      	mov	sp, r7
 8006862:	b006      	add	sp, #24
 8006864:	bd80      	pop	{r7, pc}
 8006866:	46c0      	nop			@ (mov r8, r8)
 8006868:	fe00e800 	.word	0xfe00e800
 800686c:	ffff0000 	.word	0xffff0000

08006870 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800688c:	200b      	movs	r0, #11
 800688e:	183b      	adds	r3, r7, r0
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	2141      	movs	r1, #65	@ 0x41
 8006894:	5c52      	ldrb	r2, [r2, r1]
 8006896:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2220      	movs	r2, #32
 800689e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068a0:	183b      	adds	r3, r7, r0
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b21      	cmp	r3, #33	@ 0x21
 80068a6:	d003      	beq.n	80068b0 <I2C_ITSlaveCplt+0x40>
 80068a8:	183b      	adds	r3, r7, r0
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b29      	cmp	r3, #41	@ 0x29
 80068ae:	d109      	bne.n	80068c4 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80068b0:	4aac      	ldr	r2, [pc, #688]	@ (8006b64 <I2C_ITSlaveCplt+0x2f4>)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0011      	movs	r1, r2
 80068b6:	0018      	movs	r0, r3
 80068b8:	f000 fbea 	bl	8007090 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2221      	movs	r2, #33	@ 0x21
 80068c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80068c2:	e020      	b.n	8006906 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068c4:	220b      	movs	r2, #11
 80068c6:	18bb      	adds	r3, r7, r2
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b22      	cmp	r3, #34	@ 0x22
 80068cc:	d003      	beq.n	80068d6 <I2C_ITSlaveCplt+0x66>
 80068ce:	18bb      	adds	r3, r7, r2
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80068d4:	d109      	bne.n	80068ea <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80068d6:	4aa4      	ldr	r2, [pc, #656]	@ (8006b68 <I2C_ITSlaveCplt+0x2f8>)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	0011      	movs	r1, r2
 80068dc:	0018      	movs	r0, r3
 80068de:	f000 fbd7 	bl	8007090 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2222      	movs	r2, #34	@ 0x22
 80068e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80068e8:	e00d      	b.n	8006906 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80068ea:	230b      	movs	r3, #11
 80068ec:	18fb      	adds	r3, r7, r3
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b28      	cmp	r3, #40	@ 0x28
 80068f2:	d108      	bne.n	8006906 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80068f4:	4a9d      	ldr	r2, [pc, #628]	@ (8006b6c <I2C_ITSlaveCplt+0x2fc>)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	0011      	movs	r1, r2
 80068fa:	0018      	movs	r0, r3
 80068fc:	f000 fbc8 	bl	8007090 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2180      	movs	r1, #128	@ 0x80
 8006912:	0209      	lsls	r1, r1, #8
 8006914:	430a      	orrs	r2, r1
 8006916:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4993      	ldr	r1, [pc, #588]	@ (8006b70 <I2C_ITSlaveCplt+0x300>)
 8006924:	400a      	ands	r2, r1
 8006926:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	0018      	movs	r0, r3
 800692c:	f000 faab 	bl	8006e86 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	2380      	movs	r3, #128	@ 0x80
 8006934:	01db      	lsls	r3, r3, #7
 8006936:	4013      	ands	r3, r2
 8006938:	d013      	beq.n	8006962 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	498b      	ldr	r1, [pc, #556]	@ (8006b74 <I2C_ITSlaveCplt+0x304>)
 8006946:	400a      	ands	r2, r1
 8006948:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01f      	beq.n	8006992 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006960:	e017      	b.n	8006992 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	2380      	movs	r3, #128	@ 0x80
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	4013      	ands	r3, r2
 800696a:	d012      	beq.n	8006992 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4980      	ldr	r1, [pc, #512]	@ (8006b78 <I2C_ITSlaveCplt+0x308>)
 8006978:	400a      	ands	r2, r1
 800697a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d006      	beq.n	8006992 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	b29a      	uxth	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2204      	movs	r2, #4
 8006996:	4013      	ands	r3, r2
 8006998:	d020      	beq.n	80069dc <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2204      	movs	r2, #4
 800699e:	4393      	bics	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00c      	beq.n	80069dc <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ea:	2204      	movs	r2, #4
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2210      	movs	r2, #16
 80069f6:	4013      	ands	r3, r2
 80069f8:	d04f      	beq.n	8006a9a <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2210      	movs	r2, #16
 80069fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a00:	d04b      	beq.n	8006a9a <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d12d      	bne.n	8006a68 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2241      	movs	r2, #65	@ 0x41
 8006a10:	5c9b      	ldrb	r3, [r3, r2]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b28      	cmp	r3, #40	@ 0x28
 8006a16:	d10b      	bne.n	8006a30 <I2C_ITSlaveCplt+0x1c0>
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	2380      	movs	r3, #128	@ 0x80
 8006a1c:	049b      	lsls	r3, r3, #18
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d106      	bne.n	8006a30 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	0011      	movs	r1, r2
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f000 f8a9 	bl	8006b80 <I2C_ITListenCplt>
 8006a2e:	e034      	b.n	8006a9a <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2241      	movs	r2, #65	@ 0x41
 8006a34:	5c9b      	ldrb	r3, [r3, r2]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b29      	cmp	r3, #41	@ 0x29
 8006a3a:	d110      	bne.n	8006a5e <I2C_ITSlaveCplt+0x1ee>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a4f      	ldr	r2, [pc, #316]	@ (8006b7c <I2C_ITSlaveCplt+0x30c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00c      	beq.n	8006a5e <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2210      	movs	r2, #16
 8006a4a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	0018      	movs	r0, r3
 8006a50:	f000 fa19 	bl	8006e86 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	0018      	movs	r0, r3
 8006a58:	f7ff fdd8 	bl	800660c <I2C_ITSlaveSeqCplt>
 8006a5c:	e01d      	b.n	8006a9a <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2210      	movs	r2, #16
 8006a64:	61da      	str	r2, [r3, #28]
 8006a66:	e018      	b.n	8006a9a <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2210      	movs	r2, #16
 8006a6e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a74:	2204      	movs	r2, #4
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <I2C_ITSlaveCplt+0x21c>
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	2380      	movs	r3, #128	@ 0x80
 8006a86:	045b      	lsls	r3, r3, #17
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d106      	bne.n	8006a9a <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	0011      	movs	r1, r2
 8006a94:	0018      	movs	r0, r3
 8006a96:	f000 f8cb 	bl	8006c30 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2242      	movs	r2, #66	@ 0x42
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d013      	beq.n	8006ad8 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	0011      	movs	r1, r2
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f000 f8b9 	bl	8006c30 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2241      	movs	r2, #65	@ 0x41
 8006ac2:	5c9b      	ldrb	r3, [r3, r2]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b28      	cmp	r3, #40	@ 0x28
 8006ac8:	d147      	bne.n	8006b5a <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	0011      	movs	r1, r2
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f000 f855 	bl	8006b80 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ad6:	e040      	b.n	8006b5a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006adc:	4a27      	ldr	r2, [pc, #156]	@ (8006b7c <I2C_ITSlaveCplt+0x30c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d016      	beq.n	8006b10 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f7ff fd91 	bl	800660c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a23      	ldr	r2, [pc, #140]	@ (8006b7c <I2C_ITSlaveCplt+0x30c>)
 8006aee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2241      	movs	r2, #65	@ 0x41
 8006af4:	2120      	movs	r1, #32
 8006af6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2240      	movs	r2, #64	@ 0x40
 8006b02:	2100      	movs	r1, #0
 8006b04:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f7fe fef0 	bl	80058ee <HAL_I2C_ListenCpltCallback>
}
 8006b0e:	e024      	b.n	8006b5a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2241      	movs	r2, #65	@ 0x41
 8006b14:	5c9b      	ldrb	r3, [r3, r2]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b22      	cmp	r3, #34	@ 0x22
 8006b1a:	d10f      	bne.n	8006b3c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2241      	movs	r2, #65	@ 0x41
 8006b20:	2120      	movs	r1, #32
 8006b22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2240      	movs	r2, #64	@ 0x40
 8006b2e:	2100      	movs	r1, #0
 8006b30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	0018      	movs	r0, r3
 8006b36:	f7fe fec2 	bl	80058be <HAL_I2C_SlaveRxCpltCallback>
}
 8006b3a:	e00e      	b.n	8006b5a <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2241      	movs	r2, #65	@ 0x41
 8006b40:	2120      	movs	r1, #32
 8006b42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2240      	movs	r2, #64	@ 0x40
 8006b4e:	2100      	movs	r1, #0
 8006b50:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	0018      	movs	r0, r3
 8006b56:	f7fe feaa 	bl	80058ae <HAL_I2C_SlaveTxCpltCallback>
}
 8006b5a:	46c0      	nop			@ (mov r8, r8)
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	b006      	add	sp, #24
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	46c0      	nop			@ (mov r8, r8)
 8006b64:	00008001 	.word	0x00008001
 8006b68:	00008002 	.word	0x00008002
 8006b6c:	00008003 	.word	0x00008003
 8006b70:	fe00e800 	.word	0xfe00e800
 8006b74:	ffffbfff 	.word	0xffffbfff
 8006b78:	ffff7fff 	.word	0xffff7fff
 8006b7c:	ffff0000 	.word	0xffff0000

08006b80 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a26      	ldr	r2, [pc, #152]	@ (8006c28 <I2C_ITListenCplt+0xa8>)
 8006b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2241      	movs	r2, #65	@ 0x41
 8006b9a:	2120      	movs	r1, #32
 8006b9c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2242      	movs	r2, #66	@ 0x42
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2204      	movs	r2, #4
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	d022      	beq.n	8006bfa <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d012      	beq.n	8006bfa <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8006c2c <I2C_ITListenCplt+0xac>)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	0011      	movs	r1, r2
 8006c00:	0018      	movs	r0, r3
 8006c02:	f000 fa45 	bl	8007090 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2210      	movs	r2, #16
 8006c0c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2240      	movs	r2, #64	@ 0x40
 8006c12:	2100      	movs	r1, #0
 8006c14:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f7fe fe68 	bl	80058ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006c1e:	46c0      	nop			@ (mov r8, r8)
 8006c20:	46bd      	mov	sp, r7
 8006c22:	b002      	add	sp, #8
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	46c0      	nop			@ (mov r8, r8)
 8006c28:	ffff0000 	.word	0xffff0000
 8006c2c:	00008003 	.word	0x00008003

08006c30 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c3a:	200f      	movs	r0, #15
 8006c3c:	183b      	adds	r3, r7, r0
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	2141      	movs	r1, #65	@ 0x41
 8006c42:	5c52      	ldrb	r2, [r2, r1]
 8006c44:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2242      	movs	r2, #66	@ 0x42
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a72      	ldr	r2, [pc, #456]	@ (8006e1c <I2C_ITError+0x1ec>)
 8006c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006c66:	183b      	adds	r3, r7, r0
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b28      	cmp	r3, #40	@ 0x28
 8006c6c:	d007      	beq.n	8006c7e <I2C_ITError+0x4e>
 8006c6e:	183b      	adds	r3, r7, r0
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b29      	cmp	r3, #41	@ 0x29
 8006c74:	d003      	beq.n	8006c7e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006c76:	183b      	adds	r3, r7, r0
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c7c:	d10c      	bne.n	8006c98 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2103      	movs	r1, #3
 8006c82:	0018      	movs	r0, r3
 8006c84:	f000 fa04 	bl	8007090 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2241      	movs	r2, #65	@ 0x41
 8006c8c:	2128      	movs	r1, #40	@ 0x28
 8006c8e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a63      	ldr	r2, [pc, #396]	@ (8006e20 <I2C_ITError+0x1f0>)
 8006c94:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c96:	e032      	b.n	8006cfe <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c98:	4a62      	ldr	r2, [pc, #392]	@ (8006e24 <I2C_ITError+0x1f4>)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	0011      	movs	r1, r2
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f000 f9f6 	bl	8007090 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f000 f8ed 	bl	8006e86 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2241      	movs	r2, #65	@ 0x41
 8006cb0:	5c9b      	ldrb	r3, [r3, r2]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b60      	cmp	r3, #96	@ 0x60
 8006cb6:	d01f      	beq.n	8006cf8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2241      	movs	r2, #65	@ 0x41
 8006cbc:	2120      	movs	r1, #32
 8006cbe:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	4013      	ands	r3, r2
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d114      	bne.n	8006cf8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	2210      	movs	r2, #16
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d109      	bne.n	8006cf0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2210      	movs	r2, #16
 8006ce2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce8:	2204      	movs	r2, #4
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d02:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d03b      	beq.n	8006d84 <I2C_ITError+0x154>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b11      	cmp	r3, #17
 8006d10:	d002      	beq.n	8006d18 <I2C_ITError+0xe8>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b21      	cmp	r3, #33	@ 0x21
 8006d16:	d135      	bne.n	8006d84 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	2380      	movs	r3, #128	@ 0x80
 8006d20:	01db      	lsls	r3, r3, #7
 8006d22:	401a      	ands	r2, r3
 8006d24:	2380      	movs	r3, #128	@ 0x80
 8006d26:	01db      	lsls	r3, r3, #7
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d107      	bne.n	8006d3c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	493c      	ldr	r1, [pc, #240]	@ (8006e28 <I2C_ITError+0x1f8>)
 8006d38:	400a      	ands	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7fe f93e 	bl	8004fc2 <HAL_DMA_GetState>
 8006d46:	0003      	movs	r3, r0
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d016      	beq.n	8006d7a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d50:	4a36      	ldr	r2, [pc, #216]	@ (8006e2c <I2C_ITError+0x1fc>)
 8006d52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2240      	movs	r2, #64	@ 0x40
 8006d58:	2100      	movs	r1, #0
 8006d5a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	0018      	movs	r0, r3
 8006d62:	f7fe f847 	bl	8004df4 <HAL_DMA_Abort_IT>
 8006d66:	1e03      	subs	r3, r0, #0
 8006d68:	d051      	beq.n	8006e0e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d74:	0018      	movs	r0, r3
 8006d76:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d78:	e049      	b.n	8006e0e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f000 f859 	bl	8006e34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d82:	e044      	b.n	8006e0e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d03b      	beq.n	8006e04 <I2C_ITError+0x1d4>
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b12      	cmp	r3, #18
 8006d90:	d002      	beq.n	8006d98 <I2C_ITError+0x168>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b22      	cmp	r3, #34	@ 0x22
 8006d96:	d135      	bne.n	8006e04 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	2380      	movs	r3, #128	@ 0x80
 8006da0:	021b      	lsls	r3, r3, #8
 8006da2:	401a      	ands	r2, r3
 8006da4:	2380      	movs	r3, #128	@ 0x80
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d107      	bne.n	8006dbc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	491e      	ldr	r1, [pc, #120]	@ (8006e30 <I2C_ITError+0x200>)
 8006db8:	400a      	ands	r2, r1
 8006dba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f7fe f8fe 	bl	8004fc2 <HAL_DMA_GetState>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d016      	beq.n	8006dfa <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd0:	4a16      	ldr	r2, [pc, #88]	@ (8006e2c <I2C_ITError+0x1fc>)
 8006dd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2240      	movs	r2, #64	@ 0x40
 8006dd8:	2100      	movs	r1, #0
 8006dda:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de0:	0018      	movs	r0, r3
 8006de2:	f7fe f807 	bl	8004df4 <HAL_DMA_Abort_IT>
 8006de6:	1e03      	subs	r3, r0, #0
 8006de8:	d013      	beq.n	8006e12 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df4:	0018      	movs	r0, r3
 8006df6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006df8:	e00b      	b.n	8006e12 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f000 f819 	bl	8006e34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e02:	e006      	b.n	8006e12 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	0018      	movs	r0, r3
 8006e08:	f000 f814 	bl	8006e34 <I2C_TreatErrorCallback>
  }
}
 8006e0c:	e002      	b.n	8006e14 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	e000      	b.n	8006e14 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e12:	46c0      	nop			@ (mov r8, r8)
}
 8006e14:	46c0      	nop			@ (mov r8, r8)
 8006e16:	46bd      	mov	sp, r7
 8006e18:	b004      	add	sp, #16
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	ffff0000 	.word	0xffff0000
 8006e20:	08005bc9 	.word	0x08005bc9
 8006e24:	00008003 	.word	0x00008003
 8006e28:	ffffbfff 	.word	0xffffbfff
 8006e2c:	08006ecb 	.word	0x08006ecb
 8006e30:	ffff7fff 	.word	0xffff7fff

08006e34 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2241      	movs	r2, #65	@ 0x41
 8006e40:	5c9b      	ldrb	r3, [r3, r2]
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b60      	cmp	r3, #96	@ 0x60
 8006e46:	d10f      	bne.n	8006e68 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2241      	movs	r2, #65	@ 0x41
 8006e4c:	2120      	movs	r1, #32
 8006e4e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2240      	movs	r2, #64	@ 0x40
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	0018      	movs	r0, r3
 8006e62:	f7fe fd64 	bl	800592e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e66:	e00a      	b.n	8006e7e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2240      	movs	r2, #64	@ 0x40
 8006e72:	2100      	movs	r1, #0
 8006e74:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	0018      	movs	r0, r3
 8006e7a:	f7fe fd50 	bl	800591e <HAL_I2C_ErrorCallback>
}
 8006e7e:	46c0      	nop			@ (mov r8, r8)
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b002      	add	sp, #8
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	2202      	movs	r2, #2
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d103      	bne.n	8006ea4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d007      	beq.n	8006ec2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699a      	ldr	r2, [r3, #24]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	619a      	str	r2, [r3, #24]
  }
}
 8006ec2:	46c0      	nop			@ (mov r8, r8)
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	b002      	add	sp, #8
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	0018      	movs	r0, r3
 8006efc:	f7ff ff9a 	bl	8006e34 <I2C_TreatErrorCallback>
}
 8006f00:	46c0      	nop			@ (mov r8, r8)
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b004      	add	sp, #16
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f08:	b590      	push	{r4, r7, lr}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	0008      	movs	r0, r1
 8006f12:	0011      	movs	r1, r2
 8006f14:	607b      	str	r3, [r7, #4]
 8006f16:	240a      	movs	r4, #10
 8006f18:	193b      	adds	r3, r7, r4
 8006f1a:	1c02      	adds	r2, r0, #0
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	2009      	movs	r0, #9
 8006f20:	183b      	adds	r3, r7, r0
 8006f22:	1c0a      	adds	r2, r1, #0
 8006f24:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f26:	193b      	adds	r3, r7, r4
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	059b      	lsls	r3, r3, #22
 8006f2c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f2e:	183b      	adds	r3, r7, r0
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	0419      	lsls	r1, r3, #16
 8006f34:	23ff      	movs	r3, #255	@ 0xff
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f3a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	4313      	orrs	r3, r2
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	085b      	lsrs	r3, r3, #1
 8006f48:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f52:	0d51      	lsrs	r1, r2, #21
 8006f54:	2280      	movs	r2, #128	@ 0x80
 8006f56:	00d2      	lsls	r2, r2, #3
 8006f58:	400a      	ands	r2, r1
 8006f5a:	4907      	ldr	r1, [pc, #28]	@ (8006f78 <I2C_TransferConfig+0x70>)
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	43d2      	mvns	r2, r2
 8006f60:	401a      	ands	r2, r3
 8006f62:	0011      	movs	r1, r2
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f6e:	46c0      	nop			@ (mov r8, r8)
 8006f70:	46bd      	mov	sp, r7
 8006f72:	b007      	add	sp, #28
 8006f74:	bd90      	pop	{r4, r7, pc}
 8006f76:	46c0      	nop			@ (mov r8, r8)
 8006f78:	03ff63ff 	.word	0x03ff63ff

08006f7c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	000a      	movs	r2, r1
 8006f86:	1cbb      	adds	r3, r7, #2
 8006f88:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f92:	4b3c      	ldr	r3, [pc, #240]	@ (8007084 <I2C_Enable_IRQ+0x108>)
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d035      	beq.n	8007004 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8007088 <I2C_Enable_IRQ+0x10c>)
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d030      	beq.n	8007004 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006fa6:	4b39      	ldr	r3, [pc, #228]	@ (800708c <I2C_Enable_IRQ+0x110>)
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d02b      	beq.n	8007004 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006fac:	1cbb      	adds	r3, r7, #2
 8006fae:	2200      	movs	r2, #0
 8006fb0:	5e9b      	ldrsh	r3, [r3, r2]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da03      	bge.n	8006fbe <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	22b8      	movs	r2, #184	@ 0xb8
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006fbe:	1cbb      	adds	r3, r7, #2
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	22f2      	movs	r2, #242	@ 0xf2
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006fd0:	1cbb      	adds	r3, r7, #2
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	d003      	beq.n	8006fe2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	22f4      	movs	r2, #244	@ 0xf4
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006fe2:	1cbb      	adds	r3, r7, #2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	2b10      	cmp	r3, #16
 8006fe8:	d103      	bne.n	8006ff2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2290      	movs	r2, #144	@ 0x90
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006ff2:	1cbb      	adds	r3, r7, #2
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d137      	bne.n	800706a <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007002:	e032      	b.n	800706a <I2C_Enable_IRQ+0xee>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007004:	1cbb      	adds	r3, r7, #2
 8007006:	2200      	movs	r2, #0
 8007008:	5e9b      	ldrsh	r3, [r3, r2]
 800700a:	2b00      	cmp	r3, #0
 800700c:	da03      	bge.n	8007016 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	22b8      	movs	r2, #184	@ 0xb8
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007016:	1cbb      	adds	r3, r7, #2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	2201      	movs	r2, #1
 800701c:	4013      	ands	r3, r2
 800701e:	d003      	beq.n	8007028 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	22f2      	movs	r2, #242	@ 0xf2
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007028:	1cbb      	adds	r3, r7, #2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	2202      	movs	r2, #2
 800702e:	4013      	ands	r3, r2
 8007030:	d003      	beq.n	800703a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	22f4      	movs	r2, #244	@ 0xf4
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800703a:	1cbb      	adds	r3, r7, #2
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	2b10      	cmp	r3, #16
 8007040:	d103      	bne.n	800704a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2290      	movs	r2, #144	@ 0x90
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800704a:	1cbb      	adds	r3, r7, #2
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	2b20      	cmp	r3, #32
 8007050:	d103      	bne.n	800705a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2260      	movs	r2, #96	@ 0x60
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800705a:	1cbb      	adds	r3, r7, #2
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	2b40      	cmp	r3, #64	@ 0x40
 8007060:	d103      	bne.n	800706a <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2240      	movs	r2, #64	@ 0x40
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6819      	ldr	r1, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	430a      	orrs	r2, r1
 8007078:	601a      	str	r2, [r3, #0]
}
 800707a:	46c0      	nop			@ (mov r8, r8)
 800707c:	46bd      	mov	sp, r7
 800707e:	b004      	add	sp, #16
 8007080:	bd80      	pop	{r7, pc}
 8007082:	46c0      	nop			@ (mov r8, r8)
 8007084:	08005dc9 	.word	0x08005dc9
 8007088:	08006271 	.word	0x08006271
 800708c:	08005fdd 	.word	0x08005fdd

08007090 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	000a      	movs	r2, r1
 800709a:	1cbb      	adds	r3, r7, #2
 800709c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80070a2:	1cbb      	adds	r3, r7, #2
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	2201      	movs	r2, #1
 80070a8:	4013      	ands	r3, r2
 80070aa:	d010      	beq.n	80070ce <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2242      	movs	r2, #66	@ 0x42
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2241      	movs	r2, #65	@ 0x41
 80070b8:	5c9b      	ldrb	r3, [r3, r2]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	001a      	movs	r2, r3
 80070be:	2328      	movs	r3, #40	@ 0x28
 80070c0:	4013      	ands	r3, r2
 80070c2:	2b28      	cmp	r3, #40	@ 0x28
 80070c4:	d003      	beq.n	80070ce <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	22b0      	movs	r2, #176	@ 0xb0
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80070ce:	1cbb      	adds	r3, r7, #2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	2202      	movs	r2, #2
 80070d4:	4013      	ands	r3, r2
 80070d6:	d010      	beq.n	80070fa <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2244      	movs	r2, #68	@ 0x44
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2241      	movs	r2, #65	@ 0x41
 80070e4:	5c9b      	ldrb	r3, [r3, r2]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	001a      	movs	r2, r3
 80070ea:	2328      	movs	r3, #40	@ 0x28
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b28      	cmp	r3, #40	@ 0x28
 80070f0:	d003      	beq.n	80070fa <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	22b0      	movs	r2, #176	@ 0xb0
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80070fa:	1cbb      	adds	r3, r7, #2
 80070fc:	2200      	movs	r2, #0
 80070fe:	5e9b      	ldrsh	r3, [r3, r2]
 8007100:	2b00      	cmp	r3, #0
 8007102:	da03      	bge.n	800710c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	22b8      	movs	r2, #184	@ 0xb8
 8007108:	4313      	orrs	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800710c:	1cbb      	adds	r3, r7, #2
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	2b10      	cmp	r3, #16
 8007112:	d103      	bne.n	800711c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2290      	movs	r2, #144	@ 0x90
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800711c:	1cbb      	adds	r3, r7, #2
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	2b20      	cmp	r3, #32
 8007122:	d103      	bne.n	800712c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2220      	movs	r2, #32
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800712c:	1cbb      	adds	r3, r7, #2
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	2b40      	cmp	r3, #64	@ 0x40
 8007132:	d103      	bne.n	800713c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2240      	movs	r2, #64	@ 0x40
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	43d9      	mvns	r1, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	400a      	ands	r2, r1
 800714c:	601a      	str	r2, [r3, #0]
}
 800714e:	46c0      	nop			@ (mov r8, r8)
 8007150:	46bd      	mov	sp, r7
 8007152:	b004      	add	sp, #16
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2241      	movs	r2, #65	@ 0x41
 8007166:	5c9b      	ldrb	r3, [r3, r2]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b20      	cmp	r3, #32
 800716c:	d138      	bne.n	80071e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2240      	movs	r2, #64	@ 0x40
 8007172:	5c9b      	ldrb	r3, [r3, r2]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007178:	2302      	movs	r3, #2
 800717a:	e032      	b.n	80071e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2240      	movs	r2, #64	@ 0x40
 8007180:	2101      	movs	r1, #1
 8007182:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2241      	movs	r2, #65	@ 0x41
 8007188:	2124      	movs	r1, #36	@ 0x24
 800718a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2101      	movs	r1, #1
 8007198:	438a      	bics	r2, r1
 800719a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4911      	ldr	r1, [pc, #68]	@ (80071ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80071a8:	400a      	ands	r2, r1
 80071aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6819      	ldr	r1, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2101      	movs	r1, #1
 80071c8:	430a      	orrs	r2, r1
 80071ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2241      	movs	r2, #65	@ 0x41
 80071d0:	2120      	movs	r1, #32
 80071d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2240      	movs	r2, #64	@ 0x40
 80071d8:	2100      	movs	r1, #0
 80071da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	e000      	b.n	80071e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071e0:	2302      	movs	r3, #2
  }
}
 80071e2:	0018      	movs	r0, r3
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b002      	add	sp, #8
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	ffffefff 	.word	0xffffefff

080071f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2241      	movs	r2, #65	@ 0x41
 80071fe:	5c9b      	ldrb	r3, [r3, r2]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b20      	cmp	r3, #32
 8007204:	d139      	bne.n	800727a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2240      	movs	r2, #64	@ 0x40
 800720a:	5c9b      	ldrb	r3, [r3, r2]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007210:	2302      	movs	r3, #2
 8007212:	e033      	b.n	800727c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2240      	movs	r2, #64	@ 0x40
 8007218:	2101      	movs	r1, #1
 800721a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2241      	movs	r2, #65	@ 0x41
 8007220:	2124      	movs	r1, #36	@ 0x24
 8007222:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2101      	movs	r1, #1
 8007230:	438a      	bics	r2, r1
 8007232:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a11      	ldr	r2, [pc, #68]	@ (8007284 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007240:	4013      	ands	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2101      	movs	r1, #1
 8007262:	430a      	orrs	r2, r1
 8007264:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2241      	movs	r2, #65	@ 0x41
 800726a:	2120      	movs	r1, #32
 800726c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2240      	movs	r2, #64	@ 0x40
 8007272:	2100      	movs	r1, #0
 8007274:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	e000      	b.n	800727c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800727a:	2302      	movs	r3, #2
  }
}
 800727c:	0018      	movs	r0, r3
 800727e:	46bd      	mov	sp, r7
 8007280:	b004      	add	sp, #16
 8007282:	bd80      	pop	{r7, pc}
 8007284:	fffff0ff 	.word	0xfffff0ff

08007288 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	000a      	movs	r2, r1
 8007292:	1cfb      	adds	r3, r7, #3
 8007294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8007296:	4b09      	ldr	r3, [pc, #36]	@ (80072bc <HAL_PWR_EnterSLEEPMode+0x34>)
 8007298:	691a      	ldr	r2, [r3, #16]
 800729a:	4b08      	ldr	r3, [pc, #32]	@ (80072bc <HAL_PWR_EnterSLEEPMode+0x34>)
 800729c:	2104      	movs	r1, #4
 800729e:	438a      	bics	r2, r1
 80072a0:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80072a2:	1cfb      	adds	r3, r7, #3
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d101      	bne.n	80072ae <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80072aa:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80072ac:	e002      	b.n	80072b4 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 80072ae:	bf40      	sev
    __WFE();
 80072b0:	bf20      	wfe
    __WFE();
 80072b2:	bf20      	wfe
}
 80072b4:	46c0      	nop			@ (mov r8, r8)
 80072b6:	46bd      	mov	sp, r7
 80072b8:	b002      	add	sp, #8
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	e000ed00 	.word	0xe000ed00

080072c0 <HAL_PWR_EnterSTANDBYMode>:
  *            not used and the core is supplied directly from an external source.
  *            Consequently, the Standby mode is not available on those devices.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= (uint32_t)PWR_CR_PDDS;
 80072c4:	4b07      	ldr	r3, [pc, #28]	@ (80072e4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80072ca:	2102      	movs	r1, #2
 80072cc:	430a      	orrs	r2, r1
 80072ce:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80072d0:	4b05      	ldr	r3, [pc, #20]	@ (80072e8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80072d2:	691a      	ldr	r2, [r3, #16]
 80072d4:	4b04      	ldr	r3, [pc, #16]	@ (80072e8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80072d6:	2104      	movs	r1, #4
 80072d8:	430a      	orrs	r2, r1
 80072da:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80072dc:	bf30      	wfi
}
 80072de:	46c0      	nop			@ (mov r8, r8)
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	40007000 	.word	0x40007000
 80072e8:	e000ed00 	.word	0xe000ed00

080072ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d102      	bne.n	8007300 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	f000 fb76 	bl	80079ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2201      	movs	r2, #1
 8007306:	4013      	ands	r3, r2
 8007308:	d100      	bne.n	800730c <HAL_RCC_OscConfig+0x20>
 800730a:	e08e      	b.n	800742a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800730c:	4bc5      	ldr	r3, [pc, #788]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	220c      	movs	r2, #12
 8007312:	4013      	ands	r3, r2
 8007314:	2b04      	cmp	r3, #4
 8007316:	d00e      	beq.n	8007336 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007318:	4bc2      	ldr	r3, [pc, #776]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	220c      	movs	r2, #12
 800731e:	4013      	ands	r3, r2
 8007320:	2b08      	cmp	r3, #8
 8007322:	d117      	bne.n	8007354 <HAL_RCC_OscConfig+0x68>
 8007324:	4bbf      	ldr	r3, [pc, #764]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	23c0      	movs	r3, #192	@ 0xc0
 800732a:	025b      	lsls	r3, r3, #9
 800732c:	401a      	ands	r2, r3
 800732e:	2380      	movs	r3, #128	@ 0x80
 8007330:	025b      	lsls	r3, r3, #9
 8007332:	429a      	cmp	r2, r3
 8007334:	d10e      	bne.n	8007354 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007336:	4bbb      	ldr	r3, [pc, #748]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	2380      	movs	r3, #128	@ 0x80
 800733c:	029b      	lsls	r3, r3, #10
 800733e:	4013      	ands	r3, r2
 8007340:	d100      	bne.n	8007344 <HAL_RCC_OscConfig+0x58>
 8007342:	e071      	b.n	8007428 <HAL_RCC_OscConfig+0x13c>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d000      	beq.n	800734e <HAL_RCC_OscConfig+0x62>
 800734c:	e06c      	b.n	8007428 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	f000 fb4c 	bl	80079ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d107      	bne.n	800736c <HAL_RCC_OscConfig+0x80>
 800735c:	4bb1      	ldr	r3, [pc, #708]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	4bb0      	ldr	r3, [pc, #704]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007362:	2180      	movs	r1, #128	@ 0x80
 8007364:	0249      	lsls	r1, r1, #9
 8007366:	430a      	orrs	r2, r1
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	e02f      	b.n	80073cc <HAL_RCC_OscConfig+0xe0>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10c      	bne.n	800738e <HAL_RCC_OscConfig+0xa2>
 8007374:	4bab      	ldr	r3, [pc, #684]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	4baa      	ldr	r3, [pc, #680]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800737a:	49ab      	ldr	r1, [pc, #684]	@ (8007628 <HAL_RCC_OscConfig+0x33c>)
 800737c:	400a      	ands	r2, r1
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	4ba8      	ldr	r3, [pc, #672]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	4ba7      	ldr	r3, [pc, #668]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007386:	49a9      	ldr	r1, [pc, #676]	@ (800762c <HAL_RCC_OscConfig+0x340>)
 8007388:	400a      	ands	r2, r1
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	e01e      	b.n	80073cc <HAL_RCC_OscConfig+0xe0>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b05      	cmp	r3, #5
 8007394:	d10e      	bne.n	80073b4 <HAL_RCC_OscConfig+0xc8>
 8007396:	4ba3      	ldr	r3, [pc, #652]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	4ba2      	ldr	r3, [pc, #648]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800739c:	2180      	movs	r1, #128	@ 0x80
 800739e:	02c9      	lsls	r1, r1, #11
 80073a0:	430a      	orrs	r2, r1
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	4b9f      	ldr	r3, [pc, #636]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b9e      	ldr	r3, [pc, #632]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80073aa:	2180      	movs	r1, #128	@ 0x80
 80073ac:	0249      	lsls	r1, r1, #9
 80073ae:	430a      	orrs	r2, r1
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	e00b      	b.n	80073cc <HAL_RCC_OscConfig+0xe0>
 80073b4:	4b9b      	ldr	r3, [pc, #620]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	4b9a      	ldr	r3, [pc, #616]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80073ba:	499b      	ldr	r1, [pc, #620]	@ (8007628 <HAL_RCC_OscConfig+0x33c>)
 80073bc:	400a      	ands	r2, r1
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	4b98      	ldr	r3, [pc, #608]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	4b97      	ldr	r3, [pc, #604]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80073c6:	4999      	ldr	r1, [pc, #612]	@ (800762c <HAL_RCC_OscConfig+0x340>)
 80073c8:	400a      	ands	r2, r1
 80073ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d014      	beq.n	80073fe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073d4:	f7fc fc68 	bl	8003ca8 <HAL_GetTick>
 80073d8:	0003      	movs	r3, r0
 80073da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073dc:	e008      	b.n	80073f0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073de:	f7fc fc63 	bl	8003ca8 <HAL_GetTick>
 80073e2:	0002      	movs	r2, r0
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b64      	cmp	r3, #100	@ 0x64
 80073ea:	d901      	bls.n	80073f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e2fd      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f0:	4b8c      	ldr	r3, [pc, #560]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	2380      	movs	r3, #128	@ 0x80
 80073f6:	029b      	lsls	r3, r3, #10
 80073f8:	4013      	ands	r3, r2
 80073fa:	d0f0      	beq.n	80073de <HAL_RCC_OscConfig+0xf2>
 80073fc:	e015      	b.n	800742a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073fe:	f7fc fc53 	bl	8003ca8 <HAL_GetTick>
 8007402:	0003      	movs	r3, r0
 8007404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007406:	e008      	b.n	800741a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007408:	f7fc fc4e 	bl	8003ca8 <HAL_GetTick>
 800740c:	0002      	movs	r2, r0
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b64      	cmp	r3, #100	@ 0x64
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e2e8      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800741a:	4b82      	ldr	r3, [pc, #520]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	2380      	movs	r3, #128	@ 0x80
 8007420:	029b      	lsls	r3, r3, #10
 8007422:	4013      	ands	r3, r2
 8007424:	d1f0      	bne.n	8007408 <HAL_RCC_OscConfig+0x11c>
 8007426:	e000      	b.n	800742a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007428:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2202      	movs	r2, #2
 8007430:	4013      	ands	r3, r2
 8007432:	d100      	bne.n	8007436 <HAL_RCC_OscConfig+0x14a>
 8007434:	e06c      	b.n	8007510 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007436:	4b7b      	ldr	r3, [pc, #492]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	220c      	movs	r2, #12
 800743c:	4013      	ands	r3, r2
 800743e:	d00e      	beq.n	800745e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007440:	4b78      	ldr	r3, [pc, #480]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	220c      	movs	r2, #12
 8007446:	4013      	ands	r3, r2
 8007448:	2b08      	cmp	r3, #8
 800744a:	d11f      	bne.n	800748c <HAL_RCC_OscConfig+0x1a0>
 800744c:	4b75      	ldr	r3, [pc, #468]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	23c0      	movs	r3, #192	@ 0xc0
 8007452:	025b      	lsls	r3, r3, #9
 8007454:	401a      	ands	r2, r3
 8007456:	2380      	movs	r3, #128	@ 0x80
 8007458:	021b      	lsls	r3, r3, #8
 800745a:	429a      	cmp	r2, r3
 800745c:	d116      	bne.n	800748c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800745e:	4b71      	ldr	r3, [pc, #452]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2202      	movs	r2, #2
 8007464:	4013      	ands	r3, r2
 8007466:	d005      	beq.n	8007474 <HAL_RCC_OscConfig+0x188>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d001      	beq.n	8007474 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e2bb      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007474:	4b6b      	ldr	r3, [pc, #428]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	22f8      	movs	r2, #248	@ 0xf8
 800747a:	4393      	bics	r3, r2
 800747c:	0019      	movs	r1, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	00da      	lsls	r2, r3, #3
 8007484:	4b67      	ldr	r3, [pc, #412]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007486:	430a      	orrs	r2, r1
 8007488:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748a:	e041      	b.n	8007510 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d024      	beq.n	80074de <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007494:	4b63      	ldr	r3, [pc, #396]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	4b62      	ldr	r3, [pc, #392]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800749a:	2101      	movs	r1, #1
 800749c:	430a      	orrs	r2, r1
 800749e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a0:	f7fc fc02 	bl	8003ca8 <HAL_GetTick>
 80074a4:	0003      	movs	r3, r0
 80074a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a8:	e008      	b.n	80074bc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074aa:	f7fc fbfd 	bl	8003ca8 <HAL_GetTick>
 80074ae:	0002      	movs	r2, r0
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e297      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074bc:	4b59      	ldr	r3, [pc, #356]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2202      	movs	r2, #2
 80074c2:	4013      	ands	r3, r2
 80074c4:	d0f1      	beq.n	80074aa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074c6:	4b57      	ldr	r3, [pc, #348]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	22f8      	movs	r2, #248	@ 0xf8
 80074cc:	4393      	bics	r3, r2
 80074ce:	0019      	movs	r1, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	00da      	lsls	r2, r3, #3
 80074d6:	4b53      	ldr	r3, [pc, #332]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80074d8:	430a      	orrs	r2, r1
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	e018      	b.n	8007510 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074de:	4b51      	ldr	r3, [pc, #324]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	4b50      	ldr	r3, [pc, #320]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80074e4:	2101      	movs	r1, #1
 80074e6:	438a      	bics	r2, r1
 80074e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ea:	f7fc fbdd 	bl	8003ca8 <HAL_GetTick>
 80074ee:	0003      	movs	r3, r0
 80074f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074f2:	e008      	b.n	8007506 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074f4:	f7fc fbd8 	bl	8003ca8 <HAL_GetTick>
 80074f8:	0002      	movs	r2, r0
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e272      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007506:	4b47      	ldr	r3, [pc, #284]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2202      	movs	r2, #2
 800750c:	4013      	ands	r3, r2
 800750e:	d1f1      	bne.n	80074f4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2208      	movs	r2, #8
 8007516:	4013      	ands	r3, r2
 8007518:	d036      	beq.n	8007588 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d019      	beq.n	8007556 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007522:	4b40      	ldr	r3, [pc, #256]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007526:	4b3f      	ldr	r3, [pc, #252]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007528:	2101      	movs	r1, #1
 800752a:	430a      	orrs	r2, r1
 800752c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800752e:	f7fc fbbb 	bl	8003ca8 <HAL_GetTick>
 8007532:	0003      	movs	r3, r0
 8007534:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007538:	f7fc fbb6 	bl	8003ca8 <HAL_GetTick>
 800753c:	0002      	movs	r2, r0
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e250      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800754a:	4b36      	ldr	r3, [pc, #216]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800754c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754e:	2202      	movs	r2, #2
 8007550:	4013      	ands	r3, r2
 8007552:	d0f1      	beq.n	8007538 <HAL_RCC_OscConfig+0x24c>
 8007554:	e018      	b.n	8007588 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007556:	4b33      	ldr	r3, [pc, #204]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007558:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800755a:	4b32      	ldr	r3, [pc, #200]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800755c:	2101      	movs	r1, #1
 800755e:	438a      	bics	r2, r1
 8007560:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007562:	f7fc fba1 	bl	8003ca8 <HAL_GetTick>
 8007566:	0003      	movs	r3, r0
 8007568:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800756c:	f7fc fb9c 	bl	8003ca8 <HAL_GetTick>
 8007570:	0002      	movs	r2, r0
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b02      	cmp	r3, #2
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e236      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800757e:	4b29      	ldr	r3, [pc, #164]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007582:	2202      	movs	r2, #2
 8007584:	4013      	ands	r3, r2
 8007586:	d1f1      	bne.n	800756c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2204      	movs	r2, #4
 800758e:	4013      	ands	r3, r2
 8007590:	d100      	bne.n	8007594 <HAL_RCC_OscConfig+0x2a8>
 8007592:	e0b5      	b.n	8007700 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007594:	201f      	movs	r0, #31
 8007596:	183b      	adds	r3, r7, r0
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800759c:	4b21      	ldr	r3, [pc, #132]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800759e:	69da      	ldr	r2, [r3, #28]
 80075a0:	2380      	movs	r3, #128	@ 0x80
 80075a2:	055b      	lsls	r3, r3, #21
 80075a4:	4013      	ands	r3, r2
 80075a6:	d110      	bne.n	80075ca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075a8:	4b1e      	ldr	r3, [pc, #120]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80075aa:	69da      	ldr	r2, [r3, #28]
 80075ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80075ae:	2180      	movs	r1, #128	@ 0x80
 80075b0:	0549      	lsls	r1, r1, #21
 80075b2:	430a      	orrs	r2, r1
 80075b4:	61da      	str	r2, [r3, #28]
 80075b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 80075b8:	69da      	ldr	r2, [r3, #28]
 80075ba:	2380      	movs	r3, #128	@ 0x80
 80075bc:	055b      	lsls	r3, r3, #21
 80075be:	4013      	ands	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80075c4:	183b      	adds	r3, r7, r0
 80075c6:	2201      	movs	r2, #1
 80075c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ca:	4b19      	ldr	r3, [pc, #100]	@ (8007630 <HAL_RCC_OscConfig+0x344>)
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	2380      	movs	r3, #128	@ 0x80
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	4013      	ands	r3, r2
 80075d4:	d11a      	bne.n	800760c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075d6:	4b16      	ldr	r3, [pc, #88]	@ (8007630 <HAL_RCC_OscConfig+0x344>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	4b15      	ldr	r3, [pc, #84]	@ (8007630 <HAL_RCC_OscConfig+0x344>)
 80075dc:	2180      	movs	r1, #128	@ 0x80
 80075de:	0049      	lsls	r1, r1, #1
 80075e0:	430a      	orrs	r2, r1
 80075e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075e4:	f7fc fb60 	bl	8003ca8 <HAL_GetTick>
 80075e8:	0003      	movs	r3, r0
 80075ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ec:	e008      	b.n	8007600 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ee:	f7fc fb5b 	bl	8003ca8 <HAL_GetTick>
 80075f2:	0002      	movs	r2, r0
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b64      	cmp	r3, #100	@ 0x64
 80075fa:	d901      	bls.n	8007600 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e1f5      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007600:	4b0b      	ldr	r3, [pc, #44]	@ (8007630 <HAL_RCC_OscConfig+0x344>)
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	2380      	movs	r3, #128	@ 0x80
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	4013      	ands	r3, r2
 800760a:	d0f0      	beq.n	80075ee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d10f      	bne.n	8007634 <HAL_RCC_OscConfig+0x348>
 8007614:	4b03      	ldr	r3, [pc, #12]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 8007616:	6a1a      	ldr	r2, [r3, #32]
 8007618:	4b02      	ldr	r3, [pc, #8]	@ (8007624 <HAL_RCC_OscConfig+0x338>)
 800761a:	2101      	movs	r1, #1
 800761c:	430a      	orrs	r2, r1
 800761e:	621a      	str	r2, [r3, #32]
 8007620:	e036      	b.n	8007690 <HAL_RCC_OscConfig+0x3a4>
 8007622:	46c0      	nop			@ (mov r8, r8)
 8007624:	40021000 	.word	0x40021000
 8007628:	fffeffff 	.word	0xfffeffff
 800762c:	fffbffff 	.word	0xfffbffff
 8007630:	40007000 	.word	0x40007000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10c      	bne.n	8007656 <HAL_RCC_OscConfig+0x36a>
 800763c:	4bca      	ldr	r3, [pc, #808]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800763e:	6a1a      	ldr	r2, [r3, #32]
 8007640:	4bc9      	ldr	r3, [pc, #804]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007642:	2101      	movs	r1, #1
 8007644:	438a      	bics	r2, r1
 8007646:	621a      	str	r2, [r3, #32]
 8007648:	4bc7      	ldr	r3, [pc, #796]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800764a:	6a1a      	ldr	r2, [r3, #32]
 800764c:	4bc6      	ldr	r3, [pc, #792]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800764e:	2104      	movs	r1, #4
 8007650:	438a      	bics	r2, r1
 8007652:	621a      	str	r2, [r3, #32]
 8007654:	e01c      	b.n	8007690 <HAL_RCC_OscConfig+0x3a4>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	2b05      	cmp	r3, #5
 800765c:	d10c      	bne.n	8007678 <HAL_RCC_OscConfig+0x38c>
 800765e:	4bc2      	ldr	r3, [pc, #776]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007660:	6a1a      	ldr	r2, [r3, #32]
 8007662:	4bc1      	ldr	r3, [pc, #772]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007664:	2104      	movs	r1, #4
 8007666:	430a      	orrs	r2, r1
 8007668:	621a      	str	r2, [r3, #32]
 800766a:	4bbf      	ldr	r3, [pc, #764]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800766c:	6a1a      	ldr	r2, [r3, #32]
 800766e:	4bbe      	ldr	r3, [pc, #760]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007670:	2101      	movs	r1, #1
 8007672:	430a      	orrs	r2, r1
 8007674:	621a      	str	r2, [r3, #32]
 8007676:	e00b      	b.n	8007690 <HAL_RCC_OscConfig+0x3a4>
 8007678:	4bbb      	ldr	r3, [pc, #748]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800767a:	6a1a      	ldr	r2, [r3, #32]
 800767c:	4bba      	ldr	r3, [pc, #744]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800767e:	2101      	movs	r1, #1
 8007680:	438a      	bics	r2, r1
 8007682:	621a      	str	r2, [r3, #32]
 8007684:	4bb8      	ldr	r3, [pc, #736]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007686:	6a1a      	ldr	r2, [r3, #32]
 8007688:	4bb7      	ldr	r3, [pc, #732]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800768a:	2104      	movs	r1, #4
 800768c:	438a      	bics	r2, r1
 800768e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d014      	beq.n	80076c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007698:	f7fc fb06 	bl	8003ca8 <HAL_GetTick>
 800769c:	0003      	movs	r3, r0
 800769e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a0:	e009      	b.n	80076b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076a2:	f7fc fb01 	bl	8003ca8 <HAL_GetTick>
 80076a6:	0002      	movs	r2, r0
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	4aaf      	ldr	r2, [pc, #700]	@ (800796c <HAL_RCC_OscConfig+0x680>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e19a      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076b6:	4bac      	ldr	r3, [pc, #688]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	2202      	movs	r2, #2
 80076bc:	4013      	ands	r3, r2
 80076be:	d0f0      	beq.n	80076a2 <HAL_RCC_OscConfig+0x3b6>
 80076c0:	e013      	b.n	80076ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076c2:	f7fc faf1 	bl	8003ca8 <HAL_GetTick>
 80076c6:	0003      	movs	r3, r0
 80076c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ca:	e009      	b.n	80076e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076cc:	f7fc faec 	bl	8003ca8 <HAL_GetTick>
 80076d0:	0002      	movs	r2, r0
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	4aa5      	ldr	r2, [pc, #660]	@ (800796c <HAL_RCC_OscConfig+0x680>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d901      	bls.n	80076e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e185      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076e0:	4ba1      	ldr	r3, [pc, #644]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	2202      	movs	r2, #2
 80076e6:	4013      	ands	r3, r2
 80076e8:	d1f0      	bne.n	80076cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80076ea:	231f      	movs	r3, #31
 80076ec:	18fb      	adds	r3, r7, r3
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d105      	bne.n	8007700 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076f4:	4b9c      	ldr	r3, [pc, #624]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80076f6:	69da      	ldr	r2, [r3, #28]
 80076f8:	4b9b      	ldr	r3, [pc, #620]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80076fa:	499d      	ldr	r1, [pc, #628]	@ (8007970 <HAL_RCC_OscConfig+0x684>)
 80076fc:	400a      	ands	r2, r1
 80076fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2210      	movs	r2, #16
 8007706:	4013      	ands	r3, r2
 8007708:	d063      	beq.n	80077d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d12a      	bne.n	8007768 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007712:	4b95      	ldr	r3, [pc, #596]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007716:	4b94      	ldr	r3, [pc, #592]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007718:	2104      	movs	r1, #4
 800771a:	430a      	orrs	r2, r1
 800771c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800771e:	4b92      	ldr	r3, [pc, #584]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007722:	4b91      	ldr	r3, [pc, #580]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007724:	2101      	movs	r1, #1
 8007726:	430a      	orrs	r2, r1
 8007728:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800772a:	f7fc fabd 	bl	8003ca8 <HAL_GetTick>
 800772e:	0003      	movs	r3, r0
 8007730:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007734:	f7fc fab8 	bl	8003ca8 <HAL_GetTick>
 8007738:	0002      	movs	r2, r0
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e152      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007746:	4b88      	ldr	r3, [pc, #544]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800774a:	2202      	movs	r2, #2
 800774c:	4013      	ands	r3, r2
 800774e:	d0f1      	beq.n	8007734 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007750:	4b85      	ldr	r3, [pc, #532]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007754:	22f8      	movs	r2, #248	@ 0xf8
 8007756:	4393      	bics	r3, r2
 8007758:	0019      	movs	r1, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	00da      	lsls	r2, r3, #3
 8007760:	4b81      	ldr	r3, [pc, #516]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007762:	430a      	orrs	r2, r1
 8007764:	635a      	str	r2, [r3, #52]	@ 0x34
 8007766:	e034      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	3305      	adds	r3, #5
 800776e:	d111      	bne.n	8007794 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8007770:	4b7d      	ldr	r3, [pc, #500]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007774:	4b7c      	ldr	r3, [pc, #496]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007776:	2104      	movs	r1, #4
 8007778:	438a      	bics	r2, r1
 800777a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800777c:	4b7a      	ldr	r3, [pc, #488]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800777e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007780:	22f8      	movs	r2, #248	@ 0xf8
 8007782:	4393      	bics	r3, r2
 8007784:	0019      	movs	r1, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	00da      	lsls	r2, r3, #3
 800778c:	4b76      	ldr	r3, [pc, #472]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800778e:	430a      	orrs	r2, r1
 8007790:	635a      	str	r2, [r3, #52]	@ 0x34
 8007792:	e01e      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007794:	4b74      	ldr	r3, [pc, #464]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007796:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007798:	4b73      	ldr	r3, [pc, #460]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800779a:	2104      	movs	r1, #4
 800779c:	430a      	orrs	r2, r1
 800779e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80077a0:	4b71      	ldr	r3, [pc, #452]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80077a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077a4:	4b70      	ldr	r3, [pc, #448]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80077a6:	2101      	movs	r1, #1
 80077a8:	438a      	bics	r2, r1
 80077aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ac:	f7fc fa7c 	bl	8003ca8 <HAL_GetTick>
 80077b0:	0003      	movs	r3, r0
 80077b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80077b4:	e008      	b.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80077b6:	f7fc fa77 	bl	8003ca8 <HAL_GetTick>
 80077ba:	0002      	movs	r2, r0
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e111      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80077c8:	4b67      	ldr	r3, [pc, #412]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80077ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077cc:	2202      	movs	r2, #2
 80077ce:	4013      	ands	r3, r2
 80077d0:	d1f1      	bne.n	80077b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2220      	movs	r2, #32
 80077d8:	4013      	ands	r3, r2
 80077da:	d05c      	beq.n	8007896 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80077dc:	4b62      	ldr	r3, [pc, #392]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	220c      	movs	r2, #12
 80077e2:	4013      	ands	r3, r2
 80077e4:	2b0c      	cmp	r3, #12
 80077e6:	d00e      	beq.n	8007806 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80077e8:	4b5f      	ldr	r3, [pc, #380]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	220c      	movs	r2, #12
 80077ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80077f0:	2b08      	cmp	r3, #8
 80077f2:	d114      	bne.n	800781e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80077f4:	4b5c      	ldr	r3, [pc, #368]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	23c0      	movs	r3, #192	@ 0xc0
 80077fa:	025b      	lsls	r3, r3, #9
 80077fc:	401a      	ands	r2, r3
 80077fe:	23c0      	movs	r3, #192	@ 0xc0
 8007800:	025b      	lsls	r3, r3, #9
 8007802:	429a      	cmp	r2, r3
 8007804:	d10b      	bne.n	800781e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007806:	4b58      	ldr	r3, [pc, #352]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800780a:	2380      	movs	r3, #128	@ 0x80
 800780c:	029b      	lsls	r3, r3, #10
 800780e:	4013      	ands	r3, r2
 8007810:	d040      	beq.n	8007894 <HAL_RCC_OscConfig+0x5a8>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d03c      	beq.n	8007894 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e0e6      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d01b      	beq.n	800785e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007826:	4b50      	ldr	r3, [pc, #320]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800782a:	4b4f      	ldr	r3, [pc, #316]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800782c:	2180      	movs	r1, #128	@ 0x80
 800782e:	0249      	lsls	r1, r1, #9
 8007830:	430a      	orrs	r2, r1
 8007832:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007834:	f7fc fa38 	bl	8003ca8 <HAL_GetTick>
 8007838:	0003      	movs	r3, r0
 800783a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800783c:	e008      	b.n	8007850 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800783e:	f7fc fa33 	bl	8003ca8 <HAL_GetTick>
 8007842:	0002      	movs	r2, r0
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b02      	cmp	r3, #2
 800784a:	d901      	bls.n	8007850 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e0cd      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007850:	4b45      	ldr	r3, [pc, #276]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007854:	2380      	movs	r3, #128	@ 0x80
 8007856:	029b      	lsls	r3, r3, #10
 8007858:	4013      	ands	r3, r2
 800785a:	d0f0      	beq.n	800783e <HAL_RCC_OscConfig+0x552>
 800785c:	e01b      	b.n	8007896 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800785e:	4b42      	ldr	r3, [pc, #264]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007862:	4b41      	ldr	r3, [pc, #260]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007864:	4943      	ldr	r1, [pc, #268]	@ (8007974 <HAL_RCC_OscConfig+0x688>)
 8007866:	400a      	ands	r2, r1
 8007868:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800786a:	f7fc fa1d 	bl	8003ca8 <HAL_GetTick>
 800786e:	0003      	movs	r3, r0
 8007870:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8007872:	e008      	b.n	8007886 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007874:	f7fc fa18 	bl	8003ca8 <HAL_GetTick>
 8007878:	0002      	movs	r2, r0
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d901      	bls.n	8007886 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e0b2      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8007886:	4b38      	ldr	r3, [pc, #224]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800788a:	2380      	movs	r3, #128	@ 0x80
 800788c:	029b      	lsls	r3, r3, #10
 800788e:	4013      	ands	r3, r2
 8007890:	d1f0      	bne.n	8007874 <HAL_RCC_OscConfig+0x588>
 8007892:	e000      	b.n	8007896 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007894:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	d100      	bne.n	80078a0 <HAL_RCC_OscConfig+0x5b4>
 800789e:	e0a4      	b.n	80079ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078a0:	4b31      	ldr	r3, [pc, #196]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	220c      	movs	r2, #12
 80078a6:	4013      	ands	r3, r2
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d100      	bne.n	80078ae <HAL_RCC_OscConfig+0x5c2>
 80078ac:	e078      	b.n	80079a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d14c      	bne.n	8007950 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80078bc:	492e      	ldr	r1, [pc, #184]	@ (8007978 <HAL_RCC_OscConfig+0x68c>)
 80078be:	400a      	ands	r2, r1
 80078c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078c2:	f7fc f9f1 	bl	8003ca8 <HAL_GetTick>
 80078c6:	0003      	movs	r3, r0
 80078c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078ca:	e008      	b.n	80078de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078cc:	f7fc f9ec 	bl	8003ca8 <HAL_GetTick>
 80078d0:	0002      	movs	r2, r0
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e086      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078de:	4b22      	ldr	r3, [pc, #136]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	2380      	movs	r3, #128	@ 0x80
 80078e4:	049b      	lsls	r3, r3, #18
 80078e6:	4013      	ands	r3, r2
 80078e8:	d1f0      	bne.n	80078cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80078ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ee:	220f      	movs	r2, #15
 80078f0:	4393      	bics	r3, r2
 80078f2:	0019      	movs	r1, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 80078fa:	430a      	orrs	r2, r1
 80078fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	4a1e      	ldr	r2, [pc, #120]	@ (800797c <HAL_RCC_OscConfig+0x690>)
 8007904:	4013      	ands	r3, r2
 8007906:	0019      	movs	r1, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007910:	431a      	orrs	r2, r3
 8007912:	4b15      	ldr	r3, [pc, #84]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007914:	430a      	orrs	r2, r1
 8007916:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007918:	4b13      	ldr	r3, [pc, #76]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	4b12      	ldr	r3, [pc, #72]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 800791e:	2180      	movs	r1, #128	@ 0x80
 8007920:	0449      	lsls	r1, r1, #17
 8007922:	430a      	orrs	r2, r1
 8007924:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007926:	f7fc f9bf 	bl	8003ca8 <HAL_GetTick>
 800792a:	0003      	movs	r3, r0
 800792c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007930:	f7fc f9ba 	bl	8003ca8 <HAL_GetTick>
 8007934:	0002      	movs	r2, r0
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e054      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007942:	4b09      	ldr	r3, [pc, #36]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	2380      	movs	r3, #128	@ 0x80
 8007948:	049b      	lsls	r3, r3, #18
 800794a:	4013      	ands	r3, r2
 800794c:	d0f0      	beq.n	8007930 <HAL_RCC_OscConfig+0x644>
 800794e:	e04c      	b.n	80079ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007950:	4b05      	ldr	r3, [pc, #20]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	4b04      	ldr	r3, [pc, #16]	@ (8007968 <HAL_RCC_OscConfig+0x67c>)
 8007956:	4908      	ldr	r1, [pc, #32]	@ (8007978 <HAL_RCC_OscConfig+0x68c>)
 8007958:	400a      	ands	r2, r1
 800795a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800795c:	f7fc f9a4 	bl	8003ca8 <HAL_GetTick>
 8007960:	0003      	movs	r3, r0
 8007962:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007964:	e015      	b.n	8007992 <HAL_RCC_OscConfig+0x6a6>
 8007966:	46c0      	nop			@ (mov r8, r8)
 8007968:	40021000 	.word	0x40021000
 800796c:	00001388 	.word	0x00001388
 8007970:	efffffff 	.word	0xefffffff
 8007974:	fffeffff 	.word	0xfffeffff
 8007978:	feffffff 	.word	0xfeffffff
 800797c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007980:	f7fc f992 	bl	8003ca8 <HAL_GetTick>
 8007984:	0002      	movs	r2, r0
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e02c      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007992:	4b18      	ldr	r3, [pc, #96]	@ (80079f4 <HAL_RCC_OscConfig+0x708>)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	2380      	movs	r3, #128	@ 0x80
 8007998:	049b      	lsls	r3, r3, #18
 800799a:	4013      	ands	r3, r2
 800799c:	d1f0      	bne.n	8007980 <HAL_RCC_OscConfig+0x694>
 800799e:	e024      	b.n	80079ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e01f      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80079ac:	4b11      	ldr	r3, [pc, #68]	@ (80079f4 <HAL_RCC_OscConfig+0x708>)
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80079b2:	4b10      	ldr	r3, [pc, #64]	@ (80079f4 <HAL_RCC_OscConfig+0x708>)
 80079b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	23c0      	movs	r3, #192	@ 0xc0
 80079bc:	025b      	lsls	r3, r3, #9
 80079be:	401a      	ands	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d10e      	bne.n	80079e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	220f      	movs	r2, #15
 80079cc:	401a      	ands	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d107      	bne.n	80079e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	23f0      	movs	r3, #240	@ 0xf0
 80079da:	039b      	lsls	r3, r3, #14
 80079dc:	401a      	ands	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d001      	beq.n	80079ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e000      	b.n	80079ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	0018      	movs	r0, r3
 80079ee:	46bd      	mov	sp, r7
 80079f0:	b008      	add	sp, #32
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	40021000 	.word	0x40021000

080079f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e0bf      	b.n	8007b8c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a0c:	4b61      	ldr	r3, [pc, #388]	@ (8007b94 <HAL_RCC_ClockConfig+0x19c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2201      	movs	r2, #1
 8007a12:	4013      	ands	r3, r2
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d911      	bls.n	8007a3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a1a:	4b5e      	ldr	r3, [pc, #376]	@ (8007b94 <HAL_RCC_ClockConfig+0x19c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	4393      	bics	r3, r2
 8007a22:	0019      	movs	r1, r3
 8007a24:	4b5b      	ldr	r3, [pc, #364]	@ (8007b94 <HAL_RCC_ClockConfig+0x19c>)
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a2c:	4b59      	ldr	r3, [pc, #356]	@ (8007b94 <HAL_RCC_ClockConfig+0x19c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2201      	movs	r2, #1
 8007a32:	4013      	ands	r3, r2
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d001      	beq.n	8007a3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e0a6      	b.n	8007b8c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2202      	movs	r2, #2
 8007a44:	4013      	ands	r3, r2
 8007a46:	d015      	beq.n	8007a74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2204      	movs	r2, #4
 8007a4e:	4013      	ands	r3, r2
 8007a50:	d006      	beq.n	8007a60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007a52:	4b51      	ldr	r3, [pc, #324]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	4b50      	ldr	r3, [pc, #320]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007a58:	21e0      	movs	r1, #224	@ 0xe0
 8007a5a:	00c9      	lsls	r1, r1, #3
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a60:	4b4d      	ldr	r3, [pc, #308]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	22f0      	movs	r2, #240	@ 0xf0
 8007a66:	4393      	bics	r3, r2
 8007a68:	0019      	movs	r1, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007a70:	430a      	orrs	r2, r1
 8007a72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d04c      	beq.n	8007b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d107      	bne.n	8007a96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a86:	4b44      	ldr	r3, [pc, #272]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	2380      	movs	r3, #128	@ 0x80
 8007a8c:	029b      	lsls	r3, r3, #10
 8007a8e:	4013      	ands	r3, r2
 8007a90:	d120      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e07a      	b.n	8007b8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d107      	bne.n	8007aae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	2380      	movs	r3, #128	@ 0x80
 8007aa4:	049b      	lsls	r3, r3, #18
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	d114      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e06e      	b.n	8007b8c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d107      	bne.n	8007ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007ab6:	4b38      	ldr	r3, [pc, #224]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aba:	2380      	movs	r3, #128	@ 0x80
 8007abc:	029b      	lsls	r3, r3, #10
 8007abe:	4013      	ands	r3, r2
 8007ac0:	d108      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e062      	b.n	8007b8c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ac6:	4b34      	ldr	r3, [pc, #208]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2202      	movs	r2, #2
 8007acc:	4013      	ands	r3, r2
 8007ace:	d101      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e05b      	b.n	8007b8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ad4:	4b30      	ldr	r3, [pc, #192]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2203      	movs	r2, #3
 8007ada:	4393      	bics	r3, r2
 8007adc:	0019      	movs	r1, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ae8:	f7fc f8de 	bl	8003ca8 <HAL_GetTick>
 8007aec:	0003      	movs	r3, r0
 8007aee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007af0:	e009      	b.n	8007b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007af2:	f7fc f8d9 	bl	8003ca8 <HAL_GetTick>
 8007af6:	0002      	movs	r2, r0
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	4a27      	ldr	r2, [pc, #156]	@ (8007b9c <HAL_RCC_ClockConfig+0x1a4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e042      	b.n	8007b8c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b06:	4b24      	ldr	r3, [pc, #144]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	220c      	movs	r2, #12
 8007b0c:	401a      	ands	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d1ec      	bne.n	8007af2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b18:	4b1e      	ldr	r3, [pc, #120]	@ (8007b94 <HAL_RCC_ClockConfig+0x19c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	4013      	ands	r3, r2
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d211      	bcs.n	8007b4a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b26:	4b1b      	ldr	r3, [pc, #108]	@ (8007b94 <HAL_RCC_ClockConfig+0x19c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4393      	bics	r3, r2
 8007b2e:	0019      	movs	r1, r3
 8007b30:	4b18      	ldr	r3, [pc, #96]	@ (8007b94 <HAL_RCC_ClockConfig+0x19c>)
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b38:	4b16      	ldr	r3, [pc, #88]	@ (8007b94 <HAL_RCC_ClockConfig+0x19c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	4013      	ands	r3, r2
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d001      	beq.n	8007b4a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e020      	b.n	8007b8c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2204      	movs	r2, #4
 8007b50:	4013      	ands	r3, r2
 8007b52:	d009      	beq.n	8007b68 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007b54:	4b10      	ldr	r3, [pc, #64]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	4a11      	ldr	r2, [pc, #68]	@ (8007ba0 <HAL_RCC_ClockConfig+0x1a8>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	0019      	movs	r1, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007b64:	430a      	orrs	r2, r1
 8007b66:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007b68:	f000 f820 	bl	8007bac <HAL_RCC_GetSysClockFreq>
 8007b6c:	0001      	movs	r1, r0
 8007b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b98 <HAL_RCC_ClockConfig+0x1a0>)
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	091b      	lsrs	r3, r3, #4
 8007b74:	220f      	movs	r2, #15
 8007b76:	4013      	ands	r3, r2
 8007b78:	4a0a      	ldr	r2, [pc, #40]	@ (8007ba4 <HAL_RCC_ClockConfig+0x1ac>)
 8007b7a:	5cd3      	ldrb	r3, [r2, r3]
 8007b7c:	000a      	movs	r2, r1
 8007b7e:	40da      	lsrs	r2, r3
 8007b80:	4b09      	ldr	r3, [pc, #36]	@ (8007ba8 <HAL_RCC_ClockConfig+0x1b0>)
 8007b82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007b84:	2000      	movs	r0, #0
 8007b86:	f7fc f849 	bl	8003c1c <HAL_InitTick>
  
  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	b004      	add	sp, #16
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40022000 	.word	0x40022000
 8007b98:	40021000 	.word	0x40021000
 8007b9c:	00001388 	.word	0x00001388
 8007ba0:	fffff8ff 	.word	0xfffff8ff
 8007ba4:	0800edbc 	.word	0x0800edbc
 8007ba8:	20000048 	.word	0x20000048

08007bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60bb      	str	r3, [r7, #8]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	220c      	movs	r2, #12
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	2b0c      	cmp	r3, #12
 8007bd4:	d046      	beq.n	8007c64 <HAL_RCC_GetSysClockFreq+0xb8>
 8007bd6:	d848      	bhi.n	8007c6a <HAL_RCC_GetSysClockFreq+0xbe>
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	d002      	beq.n	8007be2 <HAL_RCC_GetSysClockFreq+0x36>
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d003      	beq.n	8007be8 <HAL_RCC_GetSysClockFreq+0x3c>
 8007be0:	e043      	b.n	8007c6a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007be2:	4b27      	ldr	r3, [pc, #156]	@ (8007c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007be4:	613b      	str	r3, [r7, #16]
      break;
 8007be6:	e043      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	0c9b      	lsrs	r3, r3, #18
 8007bec:	220f      	movs	r2, #15
 8007bee:	4013      	ands	r3, r2
 8007bf0:	4a24      	ldr	r2, [pc, #144]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007bf2:	5cd3      	ldrb	r3, [r2, r3]
 8007bf4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007bf6:	4b21      	ldr	r3, [pc, #132]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfa:	220f      	movs	r2, #15
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	4a22      	ldr	r2, [pc, #136]	@ (8007c88 <HAL_RCC_GetSysClockFreq+0xdc>)
 8007c00:	5cd3      	ldrb	r3, [r2, r3]
 8007c02:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	23c0      	movs	r3, #192	@ 0xc0
 8007c08:	025b      	lsls	r3, r3, #9
 8007c0a:	401a      	ands	r2, r3
 8007c0c:	2380      	movs	r3, #128	@ 0x80
 8007c0e:	025b      	lsls	r3, r3, #9
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d109      	bne.n	8007c28 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	481a      	ldr	r0, [pc, #104]	@ (8007c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007c18:	f7f8 fa90 	bl	800013c <__udivsi3>
 8007c1c:	0003      	movs	r3, r0
 8007c1e:	001a      	movs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4353      	muls	r3, r2
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	e01a      	b.n	8007c5e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	23c0      	movs	r3, #192	@ 0xc0
 8007c2c:	025b      	lsls	r3, r3, #9
 8007c2e:	401a      	ands	r2, r3
 8007c30:	23c0      	movs	r3, #192	@ 0xc0
 8007c32:	025b      	lsls	r3, r3, #9
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d109      	bne.n	8007c4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	4814      	ldr	r0, [pc, #80]	@ (8007c8c <HAL_RCC_GetSysClockFreq+0xe0>)
 8007c3c:	f7f8 fa7e 	bl	800013c <__udivsi3>
 8007c40:	0003      	movs	r3, r0
 8007c42:	001a      	movs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4353      	muls	r3, r2
 8007c48:	617b      	str	r3, [r7, #20]
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	480c      	ldr	r0, [pc, #48]	@ (8007c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007c50:	f7f8 fa74 	bl	800013c <__udivsi3>
 8007c54:	0003      	movs	r3, r0
 8007c56:	001a      	movs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4353      	muls	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	613b      	str	r3, [r7, #16]
      break;
 8007c62:	e005      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8007c64:	4b09      	ldr	r3, [pc, #36]	@ (8007c8c <HAL_RCC_GetSysClockFreq+0xe0>)
 8007c66:	613b      	str	r3, [r7, #16]
      break;
 8007c68:	e002      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007c6a:	4b05      	ldr	r3, [pc, #20]	@ (8007c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007c6c:	613b      	str	r3, [r7, #16]
      break;
 8007c6e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007c70:	693b      	ldr	r3, [r7, #16]
}
 8007c72:	0018      	movs	r0, r3
 8007c74:	46bd      	mov	sp, r7
 8007c76:	b006      	add	sp, #24
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	46c0      	nop			@ (mov r8, r8)
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	007a1200 	.word	0x007a1200
 8007c84:	0800edd4 	.word	0x0800edd4
 8007c88:	0800ede4 	.word	0x0800ede4
 8007c8c:	02dc6c00 	.word	0x02dc6c00

08007c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c94:	4b02      	ldr	r3, [pc, #8]	@ (8007ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007c96:	681b      	ldr	r3, [r3, #0]
}
 8007c98:	0018      	movs	r0, r3
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	46c0      	nop			@ (mov r8, r8)
 8007ca0:	20000048 	.word	0x20000048

08007ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8007ca8:	f7ff fff2 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 8007cac:	0001      	movs	r1, r0
 8007cae:	4b06      	ldr	r3, [pc, #24]	@ (8007cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	0a1b      	lsrs	r3, r3, #8
 8007cb4:	2207      	movs	r2, #7
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	4a04      	ldr	r2, [pc, #16]	@ (8007ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cba:	5cd3      	ldrb	r3, [r2, r3]
 8007cbc:	40d9      	lsrs	r1, r3
 8007cbe:	000b      	movs	r3, r1
}    
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	40021000 	.word	0x40021000
 8007ccc:	0800edcc 	.word	0x0800edcc

08007cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	2380      	movs	r3, #128	@ 0x80
 8007ce6:	025b      	lsls	r3, r3, #9
 8007ce8:	4013      	ands	r3, r2
 8007cea:	d100      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8007cec:	e08e      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8007cee:	2017      	movs	r0, #23
 8007cf0:	183b      	adds	r3, r7, r0
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007cf8:	69da      	ldr	r2, [r3, #28]
 8007cfa:	2380      	movs	r3, #128	@ 0x80
 8007cfc:	055b      	lsls	r3, r3, #21
 8007cfe:	4013      	ands	r3, r2
 8007d00:	d110      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d02:	4b6b      	ldr	r3, [pc, #428]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d04:	69da      	ldr	r2, [r3, #28]
 8007d06:	4b6a      	ldr	r3, [pc, #424]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d08:	2180      	movs	r1, #128	@ 0x80
 8007d0a:	0549      	lsls	r1, r1, #21
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	61da      	str	r2, [r3, #28]
 8007d10:	4b67      	ldr	r3, [pc, #412]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d12:	69da      	ldr	r2, [r3, #28]
 8007d14:	2380      	movs	r3, #128	@ 0x80
 8007d16:	055b      	lsls	r3, r3, #21
 8007d18:	4013      	ands	r3, r2
 8007d1a:	60bb      	str	r3, [r7, #8]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d1e:	183b      	adds	r3, r7, r0
 8007d20:	2201      	movs	r2, #1
 8007d22:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d24:	4b63      	ldr	r3, [pc, #396]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	2380      	movs	r3, #128	@ 0x80
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d11a      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d30:	4b60      	ldr	r3, [pc, #384]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	4b5f      	ldr	r3, [pc, #380]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007d36:	2180      	movs	r1, #128	@ 0x80
 8007d38:	0049      	lsls	r1, r1, #1
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d3e:	f7fb ffb3 	bl	8003ca8 <HAL_GetTick>
 8007d42:	0003      	movs	r3, r0
 8007d44:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d46:	e008      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d48:	f7fb ffae 	bl	8003ca8 <HAL_GetTick>
 8007d4c:	0002      	movs	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b64      	cmp	r3, #100	@ 0x64
 8007d54:	d901      	bls.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e0a6      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d5a:	4b56      	ldr	r3, [pc, #344]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	2380      	movs	r3, #128	@ 0x80
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	4013      	ands	r3, r2
 8007d64:	d0f0      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d66:	4b52      	ldr	r3, [pc, #328]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d68:	6a1a      	ldr	r2, [r3, #32]
 8007d6a:	23c0      	movs	r3, #192	@ 0xc0
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4013      	ands	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d034      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	23c0      	movs	r3, #192	@ 0xc0
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4013      	ands	r3, r2
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d02c      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d88:	4b49      	ldr	r3, [pc, #292]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007d8e:	4013      	ands	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d92:	4b47      	ldr	r3, [pc, #284]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d94:	6a1a      	ldr	r2, [r3, #32]
 8007d96:	4b46      	ldr	r3, [pc, #280]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d98:	2180      	movs	r1, #128	@ 0x80
 8007d9a:	0249      	lsls	r1, r1, #9
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007da0:	4b43      	ldr	r3, [pc, #268]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007da2:	6a1a      	ldr	r2, [r3, #32]
 8007da4:	4b42      	ldr	r3, [pc, #264]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007da6:	4945      	ldr	r1, [pc, #276]	@ (8007ebc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8007da8:	400a      	ands	r2, r1
 8007daa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007dac:	4b40      	ldr	r3, [pc, #256]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2201      	movs	r2, #1
 8007db6:	4013      	ands	r3, r2
 8007db8:	d013      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dba:	f7fb ff75 	bl	8003ca8 <HAL_GetTick>
 8007dbe:	0003      	movs	r3, r0
 8007dc0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dc2:	e009      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dc4:	f7fb ff70 	bl	8003ca8 <HAL_GetTick>
 8007dc8:	0002      	movs	r2, r0
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	4a3c      	ldr	r2, [pc, #240]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d901      	bls.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e067      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dd8:	4b35      	ldr	r3, [pc, #212]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	4013      	ands	r3, r2
 8007de0:	d0f0      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007de2:	4b33      	ldr	r3, [pc, #204]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	4a34      	ldr	r2, [pc, #208]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	0019      	movs	r1, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	4b2f      	ldr	r3, [pc, #188]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007df2:	430a      	orrs	r2, r1
 8007df4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007df6:	2317      	movs	r3, #23
 8007df8:	18fb      	adds	r3, r7, r3
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d105      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e00:	4b2b      	ldr	r3, [pc, #172]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e02:	69da      	ldr	r2, [r3, #28]
 8007e04:	4b2a      	ldr	r3, [pc, #168]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e06:	492f      	ldr	r1, [pc, #188]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8007e08:	400a      	ands	r2, r1
 8007e0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2201      	movs	r2, #1
 8007e12:	4013      	ands	r3, r2
 8007e14:	d009      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e16:	4b26      	ldr	r3, [pc, #152]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	4393      	bics	r3, r2
 8007e1e:	0019      	movs	r1, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689a      	ldr	r2, [r3, #8]
 8007e24:	4b22      	ldr	r3, [pc, #136]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e26:	430a      	orrs	r2, r1
 8007e28:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	4013      	ands	r3, r2
 8007e32:	d009      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e34:	4b1e      	ldr	r3, [pc, #120]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e38:	4a23      	ldr	r2, [pc, #140]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	0019      	movs	r1, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	4b1b      	ldr	r3, [pc, #108]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e44:	430a      	orrs	r2, r1
 8007e46:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	2380      	movs	r3, #128	@ 0x80
 8007e4e:	02db      	lsls	r3, r3, #11
 8007e50:	4013      	ands	r3, r2
 8007e52:	d009      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e54:	4b16      	ldr	r3, [pc, #88]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e58:	4a1c      	ldr	r2, [pc, #112]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	0019      	movs	r1, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	4b13      	ldr	r3, [pc, #76]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e64:	430a      	orrs	r2, r1
 8007e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	4013      	ands	r3, r2
 8007e70:	d009      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e72:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e76:	2210      	movs	r2, #16
 8007e78:	4393      	bics	r3, r2
 8007e7a:	0019      	movs	r1, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	695a      	ldr	r2, [r3, #20]
 8007e80:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e82:	430a      	orrs	r2, r1
 8007e84:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	2380      	movs	r3, #128	@ 0x80
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	4013      	ands	r3, r2
 8007e90:	d009      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e92:	4b07      	ldr	r3, [pc, #28]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e96:	2240      	movs	r2, #64	@ 0x40
 8007e98:	4393      	bics	r3, r2
 8007e9a:	0019      	movs	r1, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	699a      	ldr	r2, [r3, #24]
 8007ea0:	4b03      	ldr	r3, [pc, #12]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	b006      	add	sp, #24
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	40021000 	.word	0x40021000
 8007eb4:	40007000 	.word	0x40007000
 8007eb8:	fffffcff 	.word	0xfffffcff
 8007ebc:	fffeffff 	.word	0xfffeffff
 8007ec0:	00001388 	.word	0x00001388
 8007ec4:	efffffff 	.word	0xefffffff
 8007ec8:	fffcffff 	.word	0xfffcffff
 8007ecc:	fff3ffff 	.word	0xfff3ffff

08007ed0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ed0:	b5b0      	push	{r4, r5, r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ed8:	230f      	movs	r3, #15
 8007eda:	18fb      	adds	r3, r7, r3
 8007edc:	2201      	movs	r2, #1
 8007ede:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e081      	b.n	8007fee <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	7f5b      	ldrb	r3, [r3, #29]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d106      	bne.n	8007f02 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	0018      	movs	r0, r3
 8007efe:	f7fb f9ff 	bl	8003300 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	2210      	movs	r2, #16
 8007f10:	4013      	ands	r3, r2
 8007f12:	2b10      	cmp	r3, #16
 8007f14:	d05c      	beq.n	8007fd0 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	22ca      	movs	r2, #202	@ 0xca
 8007f1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2253      	movs	r2, #83	@ 0x53
 8007f24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007f26:	250f      	movs	r5, #15
 8007f28:	197c      	adds	r4, r7, r5
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	f000 fbcd 	bl	80086cc <RTC_EnterInitMode>
 8007f32:	0003      	movs	r3, r0
 8007f34:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8007f36:	0028      	movs	r0, r5
 8007f38:	183b      	adds	r3, r7, r0
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d12c      	bne.n	8007f9a <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	492b      	ldr	r1, [pc, #172]	@ (8007ff8 <HAL_RTC_Init+0x128>)
 8007f4c:	400a      	ands	r2, r1
 8007f4e:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6899      	ldr	r1, [r3, #8]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	431a      	orrs	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	68d2      	ldr	r2, [r2, #12]
 8007f76:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6919      	ldr	r1, [r3, #16]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	041a      	lsls	r2, r3, #16
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007f8c:	183c      	adds	r4, r7, r0
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	0018      	movs	r0, r3
 8007f92:	f000 fbde 	bl	8008752 <RTC_ExitInitMode>
 8007f96:	0003      	movs	r3, r0
 8007f98:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8007f9a:	230f      	movs	r3, #15
 8007f9c:	18fb      	adds	r3, r7, r3
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d110      	bne.n	8007fc6 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4913      	ldr	r1, [pc, #76]	@ (8007ffc <HAL_RTC_Init+0x12c>)
 8007fb0:	400a      	ands	r2, r1
 8007fb2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	699a      	ldr	r2, [r3, #24]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	22ff      	movs	r2, #255	@ 0xff
 8007fcc:	625a      	str	r2, [r3, #36]	@ 0x24
 8007fce:	e003      	b.n	8007fd8 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007fd0:	230f      	movs	r3, #15
 8007fd2:	18fb      	adds	r3, r7, r3
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8007fd8:	230f      	movs	r3, #15
 8007fda:	18fb      	adds	r3, r7, r3
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d102      	bne.n	8007fe8 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007fe8:	230f      	movs	r3, #15
 8007fea:	18fb      	adds	r3, r7, r3
 8007fec:	781b      	ldrb	r3, [r3, #0]
}
 8007fee:	0018      	movs	r0, r3
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	b004      	add	sp, #16
 8007ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ff6:	46c0      	nop			@ (mov r8, r8)
 8007ff8:	ff8fffbf 	.word	0xff8fffbf
 8007ffc:	fffbffff 	.word	0xfffbffff

08008000 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008000:	b5b0      	push	{r4, r5, r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	7f1b      	ldrb	r3, [r3, #28]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d101      	bne.n	800801c <HAL_RTC_SetTime+0x1c>
 8008018:	2302      	movs	r3, #2
 800801a:	e08e      	b.n	800813a <HAL_RTC_SetTime+0x13a>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2201      	movs	r2, #1
 8008020:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2202      	movs	r2, #2
 8008026:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d125      	bne.n	800807a <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	2240      	movs	r2, #64	@ 0x40
 8008036:	4013      	ands	r3, r2
 8008038:	d102      	bne.n	8008040 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2200      	movs	r2, #0
 800803e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	0018      	movs	r0, r3
 8008046:	f000 fbad 	bl	80087a4 <RTC_ByteToBcd2>
 800804a:	0003      	movs	r3, r0
 800804c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	0018      	movs	r0, r3
 8008054:	f000 fba6 	bl	80087a4 <RTC_ByteToBcd2>
 8008058:	0003      	movs	r3, r0
 800805a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800805c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	789b      	ldrb	r3, [r3, #2]
 8008062:	0018      	movs	r0, r3
 8008064:	f000 fb9e 	bl	80087a4 <RTC_ByteToBcd2>
 8008068:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800806a:	0022      	movs	r2, r4
 800806c:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	78db      	ldrb	r3, [r3, #3]
 8008072:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008074:	4313      	orrs	r3, r2
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	e017      	b.n	80080aa <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	2240      	movs	r2, #64	@ 0x40
 8008082:	4013      	ands	r3, r2
 8008084:	d102      	bne.n	800808c <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2200      	movs	r2, #0
 800808a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	785b      	ldrb	r3, [r3, #1]
 8008096:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008098:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800809e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	78db      	ldrb	r3, [r3, #3]
 80080a4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	22ca      	movs	r2, #202	@ 0xca
 80080b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2253      	movs	r2, #83	@ 0x53
 80080b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80080ba:	2513      	movs	r5, #19
 80080bc:	197c      	adds	r4, r7, r5
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	0018      	movs	r0, r3
 80080c2:	f000 fb03 	bl	80086cc <RTC_EnterInitMode>
 80080c6:	0003      	movs	r3, r0
 80080c8:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80080ca:	0028      	movs	r0, r5
 80080cc:	183b      	adds	r3, r7, r0
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d120      	bne.n	8008116 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	491a      	ldr	r1, [pc, #104]	@ (8008144 <HAL_RTC_SetTime+0x144>)
 80080dc:	400a      	ands	r2, r1
 80080de:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689a      	ldr	r2, [r3, #8]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4917      	ldr	r1, [pc, #92]	@ (8008148 <HAL_RTC_SetTime+0x148>)
 80080ec:	400a      	ands	r2, r1
 80080ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6899      	ldr	r1, [r3, #8]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	431a      	orrs	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	430a      	orrs	r2, r1
 8008106:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008108:	183c      	adds	r4, r7, r0
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	0018      	movs	r0, r3
 800810e:	f000 fb20 	bl	8008752 <RTC_ExitInitMode>
 8008112:	0003      	movs	r3, r0
 8008114:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8008116:	2313      	movs	r3, #19
 8008118:	18fb      	adds	r3, r7, r3
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d102      	bne.n	8008126 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2201      	movs	r2, #1
 8008124:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	22ff      	movs	r2, #255	@ 0xff
 800812c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	771a      	strb	r2, [r3, #28]

  return status;
 8008134:	2313      	movs	r3, #19
 8008136:	18fb      	adds	r3, r7, r3
 8008138:	781b      	ldrb	r3, [r3, #0]
}
 800813a:	0018      	movs	r0, r3
 800813c:	46bd      	mov	sp, r7
 800813e:	b006      	add	sp, #24
 8008140:	bdb0      	pop	{r4, r5, r7, pc}
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	007f7f7f 	.word	0x007f7f7f
 8008148:	fffbffff 	.word	0xfffbffff

0800814c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800814c:	b5b0      	push	{r4, r5, r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	7f1b      	ldrb	r3, [r3, #28]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d101      	bne.n	8008168 <HAL_RTC_SetDate+0x1c>
 8008164:	2302      	movs	r3, #2
 8008166:	e07a      	b.n	800825e <HAL_RTC_SetDate+0x112>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2201      	movs	r2, #1
 800816c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2202      	movs	r2, #2
 8008172:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10e      	bne.n	8008198 <HAL_RTC_SetDate+0x4c>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	785b      	ldrb	r3, [r3, #1]
 800817e:	001a      	movs	r2, r3
 8008180:	2310      	movs	r3, #16
 8008182:	4013      	ands	r3, r2
 8008184:	d008      	beq.n	8008198 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	785b      	ldrb	r3, [r3, #1]
 800818a:	2210      	movs	r2, #16
 800818c:	4393      	bics	r3, r2
 800818e:	b2db      	uxtb	r3, r3
 8008190:	330a      	adds	r3, #10
 8008192:	b2da      	uxtb	r2, r3
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d11c      	bne.n	80081d8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	78db      	ldrb	r3, [r3, #3]
 80081a2:	0018      	movs	r0, r3
 80081a4:	f000 fafe 	bl	80087a4 <RTC_ByteToBcd2>
 80081a8:	0003      	movs	r3, r0
 80081aa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	785b      	ldrb	r3, [r3, #1]
 80081b0:	0018      	movs	r0, r3
 80081b2:	f000 faf7 	bl	80087a4 <RTC_ByteToBcd2>
 80081b6:	0003      	movs	r3, r0
 80081b8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80081ba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	789b      	ldrb	r3, [r3, #2]
 80081c0:	0018      	movs	r0, r3
 80081c2:	f000 faef 	bl	80087a4 <RTC_ByteToBcd2>
 80081c6:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80081c8:	0022      	movs	r2, r4
 80081ca:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	e00e      	b.n	80081f6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	78db      	ldrb	r3, [r3, #3]
 80081dc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80081e4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80081ea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	22ca      	movs	r2, #202	@ 0xca
 80081fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2253      	movs	r2, #83	@ 0x53
 8008204:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008206:	2513      	movs	r5, #19
 8008208:	197c      	adds	r4, r7, r5
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	0018      	movs	r0, r3
 800820e:	f000 fa5d 	bl	80086cc <RTC_EnterInitMode>
 8008212:	0003      	movs	r3, r0
 8008214:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008216:	0028      	movs	r0, r5
 8008218:	183b      	adds	r3, r7, r0
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10c      	bne.n	800823a <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4910      	ldr	r1, [pc, #64]	@ (8008268 <HAL_RTC_SetDate+0x11c>)
 8008228:	400a      	ands	r2, r1
 800822a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800822c:	183c      	adds	r4, r7, r0
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	0018      	movs	r0, r3
 8008232:	f000 fa8e 	bl	8008752 <RTC_ExitInitMode>
 8008236:	0003      	movs	r3, r0
 8008238:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800823a:	2313      	movs	r3, #19
 800823c:	18fb      	adds	r3, r7, r3
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	22ff      	movs	r2, #255	@ 0xff
 8008250:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	771a      	strb	r2, [r3, #28]

  return status;
 8008258:	2313      	movs	r3, #19
 800825a:	18fb      	adds	r3, r7, r3
 800825c:	781b      	ldrb	r3, [r3, #0]
}
 800825e:	0018      	movs	r0, r3
 8008260:	46bd      	mov	sp, r7
 8008262:	b006      	add	sp, #24
 8008264:	bdb0      	pop	{r4, r5, r7, pc}
 8008266:	46c0      	nop			@ (mov r8, r8)
 8008268:	00ffff3f 	.word	0x00ffff3f

0800826c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800826c:	b590      	push	{r4, r7, lr}
 800826e:	b089      	sub	sp, #36	@ 0x24
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8008278:	4b75      	ldr	r3, [pc, #468]	@ (8008450 <HAL_RTC_SetAlarm_IT+0x1e4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	22fa      	movs	r2, #250	@ 0xfa
 800827e:	01d1      	lsls	r1, r2, #7
 8008280:	0018      	movs	r0, r3
 8008282:	f7f7 ff5b 	bl	800013c <__udivsi3>
 8008286:	0003      	movs	r3, r0
 8008288:	001a      	movs	r2, r3
 800828a:	0013      	movs	r3, r2
 800828c:	015b      	lsls	r3, r3, #5
 800828e:	1a9b      	subs	r3, r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	189b      	adds	r3, r3, r2
 8008294:	00db      	lsls	r3, r3, #3
 8008296:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	7f1b      	ldrb	r3, [r3, #28]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d101      	bne.n	80082ac <HAL_RTC_SetAlarm_IT+0x40>
 80082a8:	2302      	movs	r3, #2
 80082aa:	e0cd      	b.n	8008448 <HAL_RTC_SetAlarm_IT+0x1dc>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2202      	movs	r2, #2
 80082b6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d136      	bne.n	800832c <HAL_RTC_SetAlarm_IT+0xc0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2240      	movs	r2, #64	@ 0x40
 80082c6:	4013      	ands	r3, r2
 80082c8:	d102      	bne.n	80082d0 <HAL_RTC_SetAlarm_IT+0x64>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2200      	movs	r2, #0
 80082ce:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	0018      	movs	r0, r3
 80082d6:	f000 fa65 	bl	80087a4 <RTC_ByteToBcd2>
 80082da:	0003      	movs	r3, r0
 80082dc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	785b      	ldrb	r3, [r3, #1]
 80082e2:	0018      	movs	r0, r3
 80082e4:	f000 fa5e 	bl	80087a4 <RTC_ByteToBcd2>
 80082e8:	0003      	movs	r3, r0
 80082ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80082ec:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	789b      	ldrb	r3, [r3, #2]
 80082f2:	0018      	movs	r0, r3
 80082f4:	f000 fa56 	bl	80087a4 <RTC_ByteToBcd2>
 80082f8:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80082fa:	0022      	movs	r2, r4
 80082fc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	78db      	ldrb	r3, [r3, #3]
 8008302:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008304:	431a      	orrs	r2, r3
 8008306:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2220      	movs	r2, #32
 800830c:	5c9b      	ldrb	r3, [r3, r2]
 800830e:	0018      	movs	r0, r3
 8008310:	f000 fa48 	bl	80087a4 <RTC_ByteToBcd2>
 8008314:	0003      	movs	r3, r0
 8008316:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8008318:	0022      	movs	r2, r4
 800831a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008320:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008326:	4313      	orrs	r3, r2
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	e022      	b.n	8008372 <HAL_RTC_SetAlarm_IT+0x106>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	2240      	movs	r2, #64	@ 0x40
 8008334:	4013      	ands	r3, r2
 8008336:	d102      	bne.n	800833e <HAL_RTC_SetAlarm_IT+0xd2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2200      	movs	r2, #0
 800833c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	785b      	ldrb	r3, [r3, #1]
 8008348:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800834a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008350:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	78db      	ldrb	r3, [r3, #3]
 8008356:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008358:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2120      	movs	r1, #32
 800835e:	5c5b      	ldrb	r3, [r3, r1]
 8008360:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8008362:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008368:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800836e:	4313      	orrs	r3, r2
 8008370:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800837a:	4313      	orrs	r3, r2
 800837c:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	22ca      	movs	r2, #202	@ 0xca
 8008384:	625a      	str	r2, [r3, #36]	@ 0x24
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2253      	movs	r2, #83	@ 0x53
 800838c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	492e      	ldr	r1, [pc, #184]	@ (8008454 <HAL_RTC_SetAlarm_IT+0x1e8>)
 800839a:	400a      	ands	r2, r1
 800839c:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	22ff      	movs	r2, #255	@ 0xff
 80083a6:	401a      	ands	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	492a      	ldr	r1, [pc, #168]	@ (8008458 <HAL_RTC_SetAlarm_IT+0x1ec>)
 80083ae:	430a      	orrs	r2, r1
 80083b0:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10b      	bne.n	80083d6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	22ff      	movs	r2, #255	@ 0xff
 80083c4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2203      	movs	r2, #3
 80083ca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e038      	b.n	8008448 <HAL_RTC_SetAlarm_IT+0x1dc>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	4013      	ands	r3, r2
 80083e0:	d0e7      	beq.n	80083b2 <HAL_RTC_SetAlarm_IT+0x146>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2180      	movs	r1, #128	@ 0x80
 80083fe:	0049      	lsls	r1, r1, #1
 8008400:	430a      	orrs	r2, r1
 8008402:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689a      	ldr	r2, [r3, #8]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2180      	movs	r1, #128	@ 0x80
 8008410:	0149      	lsls	r1, r1, #5
 8008412:	430a      	orrs	r2, r1
 8008414:	609a      	str	r2, [r3, #8]

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008416:	4b11      	ldr	r3, [pc, #68]	@ (800845c <HAL_RTC_SetAlarm_IT+0x1f0>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	4b10      	ldr	r3, [pc, #64]	@ (800845c <HAL_RTC_SetAlarm_IT+0x1f0>)
 800841c:	2180      	movs	r1, #128	@ 0x80
 800841e:	0289      	lsls	r1, r1, #10
 8008420:	430a      	orrs	r2, r1
 8008422:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008424:	4b0d      	ldr	r3, [pc, #52]	@ (800845c <HAL_RTC_SetAlarm_IT+0x1f0>)
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	4b0c      	ldr	r3, [pc, #48]	@ (800845c <HAL_RTC_SetAlarm_IT+0x1f0>)
 800842a:	2180      	movs	r1, #128	@ 0x80
 800842c:	0289      	lsls	r1, r1, #10
 800842e:	430a      	orrs	r2, r1
 8008430:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	22ff      	movs	r2, #255	@ 0xff
 8008438:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	0018      	movs	r0, r3
 800844a:	46bd      	mov	sp, r7
 800844c:	b009      	add	sp, #36	@ 0x24
 800844e:	bd90      	pop	{r4, r7, pc}
 8008450:	20000048 	.word	0x20000048
 8008454:	fffffeff 	.word	0xfffffeff
 8008458:	fffffe7f 	.word	0xfffffe7f
 800845c:	40010400 	.word	0x40010400

08008460 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be:
  *            @arg RTC_ALARM_A: Alarm A
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	7f1b      	ldrb	r3, [r3, #28]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d101      	bne.n	800847a <HAL_RTC_DeactivateAlarm+0x1a>
 8008476:	2302      	movs	r3, #2
 8008478:	e048      	b.n	800850c <HAL_RTC_DeactivateAlarm+0xac>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	22ca      	movs	r2, #202	@ 0xca
 800848c:	625a      	str	r2, [r3, #36]	@ 0x24
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2253      	movs	r2, #83	@ 0x53
 8008494:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	491c      	ldr	r1, [pc, #112]	@ (8008514 <HAL_RTC_DeactivateAlarm+0xb4>)
 80084a2:	400a      	ands	r2, r1
 80084a4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4919      	ldr	r1, [pc, #100]	@ (8008518 <HAL_RTC_DeactivateAlarm+0xb8>)
 80084b2:	400a      	ands	r2, r1
 80084b4:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80084b6:	f7fb fbf7 	bl	8003ca8 <HAL_GetTick>
 80084ba:	0003      	movs	r3, r0
 80084bc:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80084be:	e014      	b.n	80084ea <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80084c0:	f7fb fbf2 	bl	8003ca8 <HAL_GetTick>
 80084c4:	0002      	movs	r2, r0
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	1ad2      	subs	r2, r2, r3
 80084ca:	23fa      	movs	r3, #250	@ 0xfa
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d90b      	bls.n	80084ea <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	22ff      	movs	r2, #255	@ 0xff
 80084d8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2203      	movs	r2, #3
 80084de:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e010      	b.n	800850c <HAL_RTC_DeactivateAlarm+0xac>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	4013      	ands	r3, r2
 80084f4:	d0e4      	beq.n	80084c0 <HAL_RTC_DeactivateAlarm+0x60>
      }
    }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	22ff      	movs	r2, #255	@ 0xff
 80084fc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	0018      	movs	r0, r3
 800850e:	46bd      	mov	sp, r7
 8008510:	b004      	add	sp, #16
 8008512:	bd80      	pop	{r7, pc}
 8008514:	fffffeff 	.word	0xfffffeff
 8008518:	ffffefff 	.word	0xffffefff

0800851c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  sAlarm->Alarm = RTC_ALARM_A;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2280      	movs	r2, #128	@ 0x80
 8008536:	0052      	lsls	r2, r2, #1
 8008538:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	617b      	str	r3, [r7, #20]
  subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008548:	045b      	lsls	r3, r3, #17
 800854a:	0c5b      	lsrs	r3, r3, #17
 800854c:	613b      	str	r3, [r7, #16]

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	0c1b      	lsrs	r3, r3, #16
 8008552:	b2db      	uxtb	r3, r3
 8008554:	223f      	movs	r2, #63	@ 0x3f
 8008556:	4013      	ands	r3, r2
 8008558:	b2da      	uxtb	r2, r3
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	0a1b      	lsrs	r3, r3, #8
 8008562:	b2db      	uxtb	r3, r3
 8008564:	227f      	movs	r2, #127	@ 0x7f
 8008566:	4013      	ands	r3, r2
 8008568:	b2da      	uxtb	r2, r3
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	227f      	movs	r2, #127	@ 0x7f
 8008574:	4013      	ands	r3, r2
 8008576:	b2da      	uxtb	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	0d9b      	lsrs	r3, r3, #22
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2201      	movs	r2, #1
 8008584:	4013      	ands	r3, r2
 8008586:	b2da      	uxtb	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	0e1b      	lsrs	r3, r3, #24
 8008596:	b2db      	uxtb	r3, r3
 8008598:	223f      	movs	r2, #63	@ 0x3f
 800859a:	4013      	ands	r3, r2
 800859c:	b2d9      	uxtb	r1, r3
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2220      	movs	r2, #32
 80085a2:	5499      	strb	r1, [r3, r2]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	2380      	movs	r3, #128	@ 0x80
 80085a8:	05db      	lsls	r3, r3, #23
 80085aa:	401a      	ands	r2, r3
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	4a19      	ldr	r2, [pc, #100]	@ (8008618 <HAL_RTC_GetAlarm+0xfc>)
 80085b4:	401a      	ands	r2, r3
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d125      	bne.n	800860c <HAL_RTC_GetAlarm+0xf0>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	0018      	movs	r0, r3
 80085c6:	f000 f90e 	bl	80087e6 <RTC_Bcd2ToByte>
 80085ca:	0003      	movs	r3, r0
 80085cc:	001a      	movs	r2, r3
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	0018      	movs	r0, r3
 80085d8:	f000 f905 	bl	80087e6 <RTC_Bcd2ToByte>
 80085dc:	0003      	movs	r3, r0
 80085de:	001a      	movs	r2, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	789b      	ldrb	r3, [r3, #2]
 80085e8:	0018      	movs	r0, r3
 80085ea:	f000 f8fc 	bl	80087e6 <RTC_Bcd2ToByte>
 80085ee:	0003      	movs	r3, r0
 80085f0:	001a      	movs	r2, r3
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2220      	movs	r2, #32
 80085fa:	5c9b      	ldrb	r3, [r3, r2]
 80085fc:	0018      	movs	r0, r3
 80085fe:	f000 f8f2 	bl	80087e6 <RTC_Bcd2ToByte>
 8008602:	0003      	movs	r3, r0
 8008604:	0019      	movs	r1, r3
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2220      	movs	r2, #32
 800860a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	0018      	movs	r0, r3
 8008610:	46bd      	mov	sp, r7
 8008612:	b006      	add	sp, #24
 8008614:	bd80      	pop	{r7, pc}
 8008616:	46c0      	nop			@ (mov r8, r8)
 8008618:	80808080 	.word	0x80808080

0800861c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008624:	4b13      	ldr	r3, [pc, #76]	@ (8008674 <HAL_RTC_AlarmIRQHandler+0x58>)
 8008626:	2280      	movs	r2, #128	@ 0x80
 8008628:	0292      	lsls	r2, r2, #10
 800862a:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	2380      	movs	r3, #128	@ 0x80
 8008634:	015b      	lsls	r3, r3, #5
 8008636:	4013      	ands	r3, r2
 8008638:	d014      	beq.n	8008664 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	2380      	movs	r3, #128	@ 0x80
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	4013      	ands	r3, r2
 8008646:	d00d      	beq.n	8008664 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	22ff      	movs	r2, #255	@ 0xff
 8008650:	401a      	ands	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4908      	ldr	r1, [pc, #32]	@ (8008678 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8008658:	430a      	orrs	r2, r1
 800865a:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	0018      	movs	r0, r3
 8008660:	f7fa fd6c 	bl	800313c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	775a      	strb	r2, [r3, #29]
}
 800866a:	46c0      	nop			@ (mov r8, r8)
 800866c:	46bd      	mov	sp, r7
 800866e:	b002      	add	sp, #8
 8008670:	bd80      	pop	{r7, pc}
 8008672:	46c0      	nop			@ (mov r8, r8)
 8008674:	40010400 	.word	0x40010400
 8008678:	fffffe7f 	.word	0xfffffe7f

0800867c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a0e      	ldr	r2, [pc, #56]	@ (80086c8 <HAL_RTC_WaitForSynchro+0x4c>)
 800868e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008690:	f7fb fb0a 	bl	8003ca8 <HAL_GetTick>
 8008694:	0003      	movs	r3, r0
 8008696:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008698:	e00a      	b.n	80086b0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800869a:	f7fb fb05 	bl	8003ca8 <HAL_GetTick>
 800869e:	0002      	movs	r2, r0
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	1ad2      	subs	r2, r2, r3
 80086a4:	23fa      	movs	r3, #250	@ 0xfa
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d901      	bls.n	80086b0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e006      	b.n	80086be <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	2220      	movs	r2, #32
 80086b8:	4013      	ands	r3, r2
 80086ba:	d0ee      	beq.n	800869a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	0018      	movs	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	b004      	add	sp, #16
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	46c0      	nop			@ (mov r8, r8)
 80086c8:	0001fd5d 	.word	0x0001fd5d

080086cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80086d8:	230f      	movs	r3, #15
 80086da:	18fb      	adds	r3, r7, r3
 80086dc:	2200      	movs	r2, #0
 80086de:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	2240      	movs	r2, #64	@ 0x40
 80086e8:	4013      	ands	r3, r2
 80086ea:	d12b      	bne.n	8008744 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68da      	ldr	r2, [r3, #12]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2180      	movs	r1, #128	@ 0x80
 80086f8:	430a      	orrs	r2, r1
 80086fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086fc:	f7fb fad4 	bl	8003ca8 <HAL_GetTick>
 8008700:	0003      	movs	r3, r0
 8008702:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008704:	e013      	b.n	800872e <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008706:	f7fb facf 	bl	8003ca8 <HAL_GetTick>
 800870a:	0002      	movs	r2, r0
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	1ad2      	subs	r2, r2, r3
 8008710:	200f      	movs	r0, #15
 8008712:	183b      	adds	r3, r7, r0
 8008714:	1839      	adds	r1, r7, r0
 8008716:	7809      	ldrb	r1, [r1, #0]
 8008718:	7019      	strb	r1, [r3, #0]
 800871a:	23fa      	movs	r3, #250	@ 0xfa
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	429a      	cmp	r2, r3
 8008720:	d905      	bls.n	800872e <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2204      	movs	r2, #4
 8008726:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008728:	183b      	adds	r3, r7, r0
 800872a:	2201      	movs	r2, #1
 800872c:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	2240      	movs	r2, #64	@ 0x40
 8008736:	4013      	ands	r3, r2
 8008738:	d104      	bne.n	8008744 <RTC_EnterInitMode+0x78>
 800873a:	230f      	movs	r3, #15
 800873c:	18fb      	adds	r3, r7, r3
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d1e0      	bne.n	8008706 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8008744:	230f      	movs	r3, #15
 8008746:	18fb      	adds	r3, r7, r3
 8008748:	781b      	ldrb	r3, [r3, #0]
}
 800874a:	0018      	movs	r0, r3
 800874c:	46bd      	mov	sp, r7
 800874e:	b004      	add	sp, #16
 8008750:	bd80      	pop	{r7, pc}

08008752 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008752:	b590      	push	{r4, r7, lr}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800875a:	240f      	movs	r4, #15
 800875c:	193b      	adds	r3, r7, r4
 800875e:	2200      	movs	r2, #0
 8008760:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2180      	movs	r1, #128	@ 0x80
 800876e:	438a      	bics	r2, r1
 8008770:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	2220      	movs	r2, #32
 800877a:	4013      	ands	r3, r2
 800877c:	d10b      	bne.n	8008796 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	0018      	movs	r0, r3
 8008782:	f7ff ff7b 	bl	800867c <HAL_RTC_WaitForSynchro>
 8008786:	1e03      	subs	r3, r0, #0
 8008788:	d005      	beq.n	8008796 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2204      	movs	r2, #4
 800878e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008790:	193b      	adds	r3, r7, r4
 8008792:	2201      	movs	r2, #1
 8008794:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8008796:	230f      	movs	r3, #15
 8008798:	18fb      	adds	r3, r7, r3
 800879a:	781b      	ldrb	r3, [r3, #0]
}
 800879c:	0018      	movs	r0, r3
 800879e:	46bd      	mov	sp, r7
 80087a0:	b005      	add	sp, #20
 80087a2:	bd90      	pop	{r4, r7, pc}

080087a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	0002      	movs	r2, r0
 80087ac:	1dfb      	adds	r3, r7, #7
 80087ae:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80087b4:	e007      	b.n	80087c6 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3301      	adds	r3, #1
 80087ba:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80087bc:	1dfb      	adds	r3, r7, #7
 80087be:	1dfa      	adds	r2, r7, #7
 80087c0:	7812      	ldrb	r2, [r2, #0]
 80087c2:	3a0a      	subs	r2, #10
 80087c4:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80087c6:	1dfb      	adds	r3, r7, #7
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b09      	cmp	r3, #9
 80087cc:	d8f3      	bhi.n	80087b6 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	1dfb      	adds	r3, r7, #7
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	4313      	orrs	r3, r2
 80087dc:	b2db      	uxtb	r3, r3
}
 80087de:	0018      	movs	r0, r3
 80087e0:	46bd      	mov	sp, r7
 80087e2:	b004      	add	sp, #16
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b084      	sub	sp, #16
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	0002      	movs	r2, r0
 80087ee:	1dfb      	adds	r3, r7, #7
 80087f0:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80087f6:	1dfb      	adds	r3, r7, #7
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	091b      	lsrs	r3, r3, #4
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	001a      	movs	r2, r3
 8008800:	0013      	movs	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	189b      	adds	r3, r3, r2
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	b2da      	uxtb	r2, r3
 800880e:	1dfb      	adds	r3, r7, #7
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	210f      	movs	r1, #15
 8008814:	400b      	ands	r3, r1
 8008816:	b2db      	uxtb	r3, r3
 8008818:	18d3      	adds	r3, r2, r3
 800881a:	b2db      	uxtb	r3, r3
}
 800881c:	0018      	movs	r0, r3
 800881e:	46bd      	mov	sp, r7
 8008820:	b004      	add	sp, #16
 8008822:	bd80      	pop	{r7, pc}

08008824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e042      	b.n	80088bc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	223d      	movs	r2, #61	@ 0x3d
 800883a:	5c9b      	ldrb	r3, [r3, r2]
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d107      	bne.n	8008852 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	223c      	movs	r2, #60	@ 0x3c
 8008846:	2100      	movs	r1, #0
 8008848:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	0018      	movs	r0, r3
 800884e:	f7fb f80f 	bl	8003870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	223d      	movs	r2, #61	@ 0x3d
 8008856:	2102      	movs	r1, #2
 8008858:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3304      	adds	r3, #4
 8008862:	0019      	movs	r1, r3
 8008864:	0010      	movs	r0, r2
 8008866:	f000 fad9 	bl	8008e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2246      	movs	r2, #70	@ 0x46
 800886e:	2101      	movs	r1, #1
 8008870:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	223e      	movs	r2, #62	@ 0x3e
 8008876:	2101      	movs	r1, #1
 8008878:	5499      	strb	r1, [r3, r2]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	223f      	movs	r2, #63	@ 0x3f
 800887e:	2101      	movs	r1, #1
 8008880:	5499      	strb	r1, [r3, r2]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2240      	movs	r2, #64	@ 0x40
 8008886:	2101      	movs	r1, #1
 8008888:	5499      	strb	r1, [r3, r2]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2241      	movs	r2, #65	@ 0x41
 800888e:	2101      	movs	r1, #1
 8008890:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2242      	movs	r2, #66	@ 0x42
 8008896:	2101      	movs	r1, #1
 8008898:	5499      	strb	r1, [r3, r2]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2243      	movs	r2, #67	@ 0x43
 800889e:	2101      	movs	r1, #1
 80088a0:	5499      	strb	r1, [r3, r2]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2244      	movs	r2, #68	@ 0x44
 80088a6:	2101      	movs	r1, #1
 80088a8:	5499      	strb	r1, [r3, r2]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2245      	movs	r2, #69	@ 0x45
 80088ae:	2101      	movs	r1, #1
 80088b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	223d      	movs	r2, #61	@ 0x3d
 80088b6:	2101      	movs	r1, #1
 80088b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	0018      	movs	r0, r3
 80088be:	46bd      	mov	sp, r7
 80088c0:	b002      	add	sp, #8
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	223d      	movs	r2, #61	@ 0x3d
 80088d0:	5c9b      	ldrb	r3, [r3, r2]
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d001      	beq.n	80088dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e033      	b.n	8008944 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	223d      	movs	r2, #61	@ 0x3d
 80088e0:	2102      	movs	r1, #2
 80088e2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a18      	ldr	r2, [pc, #96]	@ (800894c <HAL_TIM_Base_Start+0x88>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d00f      	beq.n	800890e <HAL_TIM_Base_Start+0x4a>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	2380      	movs	r3, #128	@ 0x80
 80088f4:	05db      	lsls	r3, r3, #23
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d009      	beq.n	800890e <HAL_TIM_Base_Start+0x4a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a14      	ldr	r2, [pc, #80]	@ (8008950 <HAL_TIM_Base_Start+0x8c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d004      	beq.n	800890e <HAL_TIM_Base_Start+0x4a>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a12      	ldr	r2, [pc, #72]	@ (8008954 <HAL_TIM_Base_Start+0x90>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d111      	bne.n	8008932 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	2207      	movs	r2, #7
 8008916:	4013      	ands	r3, r2
 8008918:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b06      	cmp	r3, #6
 800891e:	d010      	beq.n	8008942 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2101      	movs	r1, #1
 800892c:	430a      	orrs	r2, r1
 800892e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008930:	e007      	b.n	8008942 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2101      	movs	r1, #1
 800893e:	430a      	orrs	r2, r1
 8008940:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	0018      	movs	r0, r3
 8008946:	46bd      	mov	sp, r7
 8008948:	b004      	add	sp, #16
 800894a:	bd80      	pop	{r7, pc}
 800894c:	40012c00 	.word	0x40012c00
 8008950:	40000400 	.word	0x40000400
 8008954:	40014000 	.word	0x40014000

08008958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	223d      	movs	r2, #61	@ 0x3d
 8008964:	5c9b      	ldrb	r3, [r3, r2]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b01      	cmp	r3, #1
 800896a:	d001      	beq.n	8008970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e03b      	b.n	80089e8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	223d      	movs	r2, #61	@ 0x3d
 8008974:	2102      	movs	r1, #2
 8008976:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2101      	movs	r1, #1
 8008984:	430a      	orrs	r2, r1
 8008986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a18      	ldr	r2, [pc, #96]	@ (80089f0 <HAL_TIM_Base_Start_IT+0x98>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d00f      	beq.n	80089b2 <HAL_TIM_Base_Start_IT+0x5a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	2380      	movs	r3, #128	@ 0x80
 8008998:	05db      	lsls	r3, r3, #23
 800899a:	429a      	cmp	r2, r3
 800899c:	d009      	beq.n	80089b2 <HAL_TIM_Base_Start_IT+0x5a>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a14      	ldr	r2, [pc, #80]	@ (80089f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d004      	beq.n	80089b2 <HAL_TIM_Base_Start_IT+0x5a>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a12      	ldr	r2, [pc, #72]	@ (80089f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d111      	bne.n	80089d6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2207      	movs	r2, #7
 80089ba:	4013      	ands	r3, r2
 80089bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b06      	cmp	r3, #6
 80089c2:	d010      	beq.n	80089e6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2101      	movs	r1, #1
 80089d0:	430a      	orrs	r2, r1
 80089d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089d4:	e007      	b.n	80089e6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2101      	movs	r1, #1
 80089e2:	430a      	orrs	r2, r1
 80089e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	0018      	movs	r0, r3
 80089ea:	46bd      	mov	sp, r7
 80089ec:	b004      	add	sp, #16
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	40012c00 	.word	0x40012c00
 80089f4:	40000400 	.word	0x40000400
 80089f8:	40014000 	.word	0x40014000

080089fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2101      	movs	r1, #1
 8008a10:	438a      	bics	r2, r1
 8008a12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8008a50 <HAL_TIM_Base_Stop_IT+0x54>)
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	d10d      	bne.n	8008a3c <HAL_TIM_Base_Stop_IT+0x40>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	4a0b      	ldr	r2, [pc, #44]	@ (8008a54 <HAL_TIM_Base_Stop_IT+0x58>)
 8008a28:	4013      	ands	r3, r2
 8008a2a:	d107      	bne.n	8008a3c <HAL_TIM_Base_Stop_IT+0x40>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2101      	movs	r1, #1
 8008a38:	438a      	bics	r2, r1
 8008a3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	223d      	movs	r2, #61	@ 0x3d
 8008a40:	2101      	movs	r1, #1
 8008a42:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	0018      	movs	r0, r3
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	b002      	add	sp, #8
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	46c0      	nop			@ (mov r8, r8)
 8008a50:	00001111 	.word	0x00001111
 8008a54:	00000444 	.word	0x00000444

08008a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2202      	movs	r2, #2
 8008a74:	4013      	ands	r3, r2
 8008a76:	d021      	beq.n	8008abc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	d01d      	beq.n	8008abc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2203      	movs	r2, #3
 8008a86:	4252      	negs	r2, r2
 8008a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	2203      	movs	r2, #3
 8008a98:	4013      	ands	r3, r2
 8008a9a:	d004      	beq.n	8008aa6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f000 f9a4 	bl	8008dec <HAL_TIM_IC_CaptureCallback>
 8008aa4:	e007      	b.n	8008ab6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f000 f997 	bl	8008ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	0018      	movs	r0, r3
 8008ab2:	f000 f9a3 	bl	8008dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2204      	movs	r2, #4
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	d022      	beq.n	8008b0a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2204      	movs	r2, #4
 8008ac8:	4013      	ands	r3, r2
 8008aca:	d01e      	beq.n	8008b0a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2205      	movs	r2, #5
 8008ad2:	4252      	negs	r2, r2
 8008ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	699a      	ldr	r2, [r3, #24]
 8008ae2:	23c0      	movs	r3, #192	@ 0xc0
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	d004      	beq.n	8008af4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	0018      	movs	r0, r3
 8008aee:	f000 f97d 	bl	8008dec <HAL_TIM_IC_CaptureCallback>
 8008af2:	e007      	b.n	8008b04 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	0018      	movs	r0, r3
 8008af8:	f000 f970 	bl	8008ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	0018      	movs	r0, r3
 8008b00:	f000 f97c 	bl	8008dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2208      	movs	r2, #8
 8008b0e:	4013      	ands	r3, r2
 8008b10:	d021      	beq.n	8008b56 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2208      	movs	r2, #8
 8008b16:	4013      	ands	r3, r2
 8008b18:	d01d      	beq.n	8008b56 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2209      	movs	r2, #9
 8008b20:	4252      	negs	r2, r2
 8008b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2204      	movs	r2, #4
 8008b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	2203      	movs	r2, #3
 8008b32:	4013      	ands	r3, r2
 8008b34:	d004      	beq.n	8008b40 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	0018      	movs	r0, r3
 8008b3a:	f000 f957 	bl	8008dec <HAL_TIM_IC_CaptureCallback>
 8008b3e:	e007      	b.n	8008b50 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	0018      	movs	r0, r3
 8008b44:	f000 f94a 	bl	8008ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f000 f956 	bl	8008dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2210      	movs	r2, #16
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	d022      	beq.n	8008ba4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2210      	movs	r2, #16
 8008b62:	4013      	ands	r3, r2
 8008b64:	d01e      	beq.n	8008ba4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2211      	movs	r2, #17
 8008b6c:	4252      	negs	r2, r2
 8008b6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2208      	movs	r2, #8
 8008b74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	69da      	ldr	r2, [r3, #28]
 8008b7c:	23c0      	movs	r3, #192	@ 0xc0
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4013      	ands	r3, r2
 8008b82:	d004      	beq.n	8008b8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	0018      	movs	r0, r3
 8008b88:	f000 f930 	bl	8008dec <HAL_TIM_IC_CaptureCallback>
 8008b8c:	e007      	b.n	8008b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	0018      	movs	r0, r3
 8008b92:	f000 f923 	bl	8008ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f000 f92f 	bl	8008dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	4013      	ands	r3, r2
 8008baa:	d00c      	beq.n	8008bc6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	d008      	beq.n	8008bc6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2202      	movs	r2, #2
 8008bba:	4252      	negs	r2, r2
 8008bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	0018      	movs	r0, r3
 8008bc2:	f7fa f8ad 	bl	8002d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2280      	movs	r2, #128	@ 0x80
 8008bca:	4013      	ands	r3, r2
 8008bcc:	d00c      	beq.n	8008be8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2280      	movs	r2, #128	@ 0x80
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	d008      	beq.n	8008be8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2281      	movs	r2, #129	@ 0x81
 8008bdc:	4252      	negs	r2, r2
 8008bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	0018      	movs	r0, r3
 8008be4:	f000 faa8 	bl	8009138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2240      	movs	r2, #64	@ 0x40
 8008bec:	4013      	ands	r3, r2
 8008bee:	d00c      	beq.n	8008c0a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2240      	movs	r2, #64	@ 0x40
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	d008      	beq.n	8008c0a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2241      	movs	r2, #65	@ 0x41
 8008bfe:	4252      	negs	r2, r2
 8008c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	0018      	movs	r0, r3
 8008c06:	f000 f901 	bl	8008e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	4013      	ands	r3, r2
 8008c10:	d00c      	beq.n	8008c2c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2220      	movs	r2, #32
 8008c16:	4013      	ands	r3, r2
 8008c18:	d008      	beq.n	8008c2c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2221      	movs	r2, #33	@ 0x21
 8008c20:	4252      	negs	r2, r2
 8008c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	0018      	movs	r0, r3
 8008c28:	f000 fa7e 	bl	8009128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c2c:	46c0      	nop			@ (mov r8, r8)
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	b004      	add	sp, #16
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c3e:	230f      	movs	r3, #15
 8008c40:	18fb      	adds	r3, r7, r3
 8008c42:	2200      	movs	r2, #0
 8008c44:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	223c      	movs	r2, #60	@ 0x3c
 8008c4a:	5c9b      	ldrb	r3, [r3, r2]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d101      	bne.n	8008c54 <HAL_TIM_ConfigClockSource+0x20>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e0bc      	b.n	8008dce <HAL_TIM_ConfigClockSource+0x19a>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	223c      	movs	r2, #60	@ 0x3c
 8008c58:	2101      	movs	r1, #1
 8008c5a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	223d      	movs	r2, #61	@ 0x3d
 8008c60:	2102      	movs	r1, #2
 8008c62:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2277      	movs	r2, #119	@ 0x77
 8008c70:	4393      	bics	r3, r2
 8008c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	4a58      	ldr	r2, [pc, #352]	@ (8008dd8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8008c78:	4013      	ands	r3, r2
 8008c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2280      	movs	r2, #128	@ 0x80
 8008c8a:	0192      	lsls	r2, r2, #6
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d040      	beq.n	8008d12 <HAL_TIM_ConfigClockSource+0xde>
 8008c90:	2280      	movs	r2, #128	@ 0x80
 8008c92:	0192      	lsls	r2, r2, #6
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d900      	bls.n	8008c9a <HAL_TIM_ConfigClockSource+0x66>
 8008c98:	e088      	b.n	8008dac <HAL_TIM_ConfigClockSource+0x178>
 8008c9a:	2280      	movs	r2, #128	@ 0x80
 8008c9c:	0152      	lsls	r2, r2, #5
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d100      	bne.n	8008ca4 <HAL_TIM_ConfigClockSource+0x70>
 8008ca2:	e088      	b.n	8008db6 <HAL_TIM_ConfigClockSource+0x182>
 8008ca4:	2280      	movs	r2, #128	@ 0x80
 8008ca6:	0152      	lsls	r2, r2, #5
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d900      	bls.n	8008cae <HAL_TIM_ConfigClockSource+0x7a>
 8008cac:	e07e      	b.n	8008dac <HAL_TIM_ConfigClockSource+0x178>
 8008cae:	2b70      	cmp	r3, #112	@ 0x70
 8008cb0:	d018      	beq.n	8008ce4 <HAL_TIM_ConfigClockSource+0xb0>
 8008cb2:	d900      	bls.n	8008cb6 <HAL_TIM_ConfigClockSource+0x82>
 8008cb4:	e07a      	b.n	8008dac <HAL_TIM_ConfigClockSource+0x178>
 8008cb6:	2b60      	cmp	r3, #96	@ 0x60
 8008cb8:	d04f      	beq.n	8008d5a <HAL_TIM_ConfigClockSource+0x126>
 8008cba:	d900      	bls.n	8008cbe <HAL_TIM_ConfigClockSource+0x8a>
 8008cbc:	e076      	b.n	8008dac <HAL_TIM_ConfigClockSource+0x178>
 8008cbe:	2b50      	cmp	r3, #80	@ 0x50
 8008cc0:	d03b      	beq.n	8008d3a <HAL_TIM_ConfigClockSource+0x106>
 8008cc2:	d900      	bls.n	8008cc6 <HAL_TIM_ConfigClockSource+0x92>
 8008cc4:	e072      	b.n	8008dac <HAL_TIM_ConfigClockSource+0x178>
 8008cc6:	2b40      	cmp	r3, #64	@ 0x40
 8008cc8:	d057      	beq.n	8008d7a <HAL_TIM_ConfigClockSource+0x146>
 8008cca:	d900      	bls.n	8008cce <HAL_TIM_ConfigClockSource+0x9a>
 8008ccc:	e06e      	b.n	8008dac <HAL_TIM_ConfigClockSource+0x178>
 8008cce:	2b30      	cmp	r3, #48	@ 0x30
 8008cd0:	d063      	beq.n	8008d9a <HAL_TIM_ConfigClockSource+0x166>
 8008cd2:	d86b      	bhi.n	8008dac <HAL_TIM_ConfigClockSource+0x178>
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d060      	beq.n	8008d9a <HAL_TIM_ConfigClockSource+0x166>
 8008cd8:	d868      	bhi.n	8008dac <HAL_TIM_ConfigClockSource+0x178>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d05d      	beq.n	8008d9a <HAL_TIM_ConfigClockSource+0x166>
 8008cde:	2b10      	cmp	r3, #16
 8008ce0:	d05b      	beq.n	8008d9a <HAL_TIM_ConfigClockSource+0x166>
 8008ce2:	e063      	b.n	8008dac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cf4:	f000 f99a 	bl	800902c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2277      	movs	r2, #119	@ 0x77
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	609a      	str	r2, [r3, #8]
      break;
 8008d10:	e052      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d22:	f000 f983 	bl	800902c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2180      	movs	r1, #128	@ 0x80
 8008d32:	01c9      	lsls	r1, r1, #7
 8008d34:	430a      	orrs	r2, r1
 8008d36:	609a      	str	r2, [r3, #8]
      break;
 8008d38:	e03e      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d46:	001a      	movs	r2, r3
 8008d48:	f000 f8f6 	bl	8008f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2150      	movs	r1, #80	@ 0x50
 8008d52:	0018      	movs	r0, r3
 8008d54:	f000 f950 	bl	8008ff8 <TIM_ITRx_SetConfig>
      break;
 8008d58:	e02e      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d66:	001a      	movs	r2, r3
 8008d68:	f000 f914 	bl	8008f94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2160      	movs	r1, #96	@ 0x60
 8008d72:	0018      	movs	r0, r3
 8008d74:	f000 f940 	bl	8008ff8 <TIM_ITRx_SetConfig>
      break;
 8008d78:	e01e      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d86:	001a      	movs	r2, r3
 8008d88:	f000 f8d6 	bl	8008f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2140      	movs	r1, #64	@ 0x40
 8008d92:	0018      	movs	r0, r3
 8008d94:	f000 f930 	bl	8008ff8 <TIM_ITRx_SetConfig>
      break;
 8008d98:	e00e      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	0019      	movs	r1, r3
 8008da4:	0010      	movs	r0, r2
 8008da6:	f000 f927 	bl	8008ff8 <TIM_ITRx_SetConfig>
      break;
 8008daa:	e005      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008dac:	230f      	movs	r3, #15
 8008dae:	18fb      	adds	r3, r7, r3
 8008db0:	2201      	movs	r2, #1
 8008db2:	701a      	strb	r2, [r3, #0]
      break;
 8008db4:	e000      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8008db6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	223d      	movs	r2, #61	@ 0x3d
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	223c      	movs	r2, #60	@ 0x3c
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	5499      	strb	r1, [r3, r2]

  return status;
 8008dc8:	230f      	movs	r3, #15
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	781b      	ldrb	r3, [r3, #0]
}
 8008dce:	0018      	movs	r0, r3
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	b004      	add	sp, #16
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	46c0      	nop			@ (mov r8, r8)
 8008dd8:	ffff00ff 	.word	0xffff00ff

08008ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008de4:	46c0      	nop			@ (mov r8, r8)
 8008de6:	46bd      	mov	sp, r7
 8008de8:	b002      	add	sp, #8
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008df4:	46c0      	nop			@ (mov r8, r8)
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b002      	add	sp, #8
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e04:	46c0      	nop			@ (mov r8, r8)
 8008e06:	46bd      	mov	sp, r7
 8008e08:	b002      	add	sp, #8
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e14:	46c0      	nop			@ (mov r8, r8)
 8008e16:	46bd      	mov	sp, r7
 8008e18:	b002      	add	sp, #8
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8008f1c <TIM_Base_SetConfig+0x100>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d008      	beq.n	8008e46 <TIM_Base_SetConfig+0x2a>
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	2380      	movs	r3, #128	@ 0x80
 8008e38:	05db      	lsls	r3, r3, #23
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d003      	beq.n	8008e46 <TIM_Base_SetConfig+0x2a>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a37      	ldr	r2, [pc, #220]	@ (8008f20 <TIM_Base_SetConfig+0x104>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d108      	bne.n	8008e58 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2270      	movs	r2, #112	@ 0x70
 8008e4a:	4393      	bics	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a30      	ldr	r2, [pc, #192]	@ (8008f1c <TIM_Base_SetConfig+0x100>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d018      	beq.n	8008e92 <TIM_Base_SetConfig+0x76>
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	2380      	movs	r3, #128	@ 0x80
 8008e64:	05db      	lsls	r3, r3, #23
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d013      	beq.n	8008e92 <TIM_Base_SetConfig+0x76>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8008f20 <TIM_Base_SetConfig+0x104>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00f      	beq.n	8008e92 <TIM_Base_SetConfig+0x76>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a2b      	ldr	r2, [pc, #172]	@ (8008f24 <TIM_Base_SetConfig+0x108>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00b      	beq.n	8008e92 <TIM_Base_SetConfig+0x76>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8008f28 <TIM_Base_SetConfig+0x10c>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d007      	beq.n	8008e92 <TIM_Base_SetConfig+0x76>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a29      	ldr	r2, [pc, #164]	@ (8008f2c <TIM_Base_SetConfig+0x110>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d003      	beq.n	8008e92 <TIM_Base_SetConfig+0x76>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a28      	ldr	r2, [pc, #160]	@ (8008f30 <TIM_Base_SetConfig+0x114>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d108      	bne.n	8008ea4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	4a27      	ldr	r2, [pc, #156]	@ (8008f34 <TIM_Base_SetConfig+0x118>)
 8008e96:	4013      	ands	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2280      	movs	r2, #128	@ 0x80
 8008ea8:	4393      	bics	r3, r2
 8008eaa:	001a      	movs	r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a13      	ldr	r2, [pc, #76]	@ (8008f1c <TIM_Base_SetConfig+0x100>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d00b      	beq.n	8008eea <TIM_Base_SetConfig+0xce>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a14      	ldr	r2, [pc, #80]	@ (8008f28 <TIM_Base_SetConfig+0x10c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d007      	beq.n	8008eea <TIM_Base_SetConfig+0xce>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a13      	ldr	r2, [pc, #76]	@ (8008f2c <TIM_Base_SetConfig+0x110>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d003      	beq.n	8008eea <TIM_Base_SetConfig+0xce>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a12      	ldr	r2, [pc, #72]	@ (8008f30 <TIM_Base_SetConfig+0x114>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d103      	bne.n	8008ef2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	691a      	ldr	r2, [r3, #16]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	2201      	movs	r2, #1
 8008efe:	4013      	ands	r3, r2
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d106      	bne.n	8008f12 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	4393      	bics	r3, r2
 8008f0c:	001a      	movs	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	611a      	str	r2, [r3, #16]
  }
}
 8008f12:	46c0      	nop			@ (mov r8, r8)
 8008f14:	46bd      	mov	sp, r7
 8008f16:	b004      	add	sp, #16
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	46c0      	nop			@ (mov r8, r8)
 8008f1c:	40012c00 	.word	0x40012c00
 8008f20:	40000400 	.word	0x40000400
 8008f24:	40002000 	.word	0x40002000
 8008f28:	40014000 	.word	0x40014000
 8008f2c:	40014400 	.word	0x40014400
 8008f30:	40014800 	.word	0x40014800
 8008f34:	fffffcff 	.word	0xfffffcff

08008f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	4393      	bics	r3, r2
 8008f52:	001a      	movs	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	22f0      	movs	r2, #240	@ 0xf0
 8008f62:	4393      	bics	r3, r2
 8008f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	220a      	movs	r2, #10
 8008f74:	4393      	bics	r3, r2
 8008f76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	621a      	str	r2, [r3, #32]
}
 8008f8c:	46c0      	nop			@ (mov r8, r8)
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	b006      	add	sp, #24
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6a1b      	ldr	r3, [r3, #32]
 8008fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	2210      	movs	r2, #16
 8008fac:	4393      	bics	r3, r2
 8008fae:	001a      	movs	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8008ff4 <TIM_TI2_ConfigInputStage+0x60>)
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	031b      	lsls	r3, r3, #12
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	22a0      	movs	r2, #160	@ 0xa0
 8008fd0:	4393      	bics	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	621a      	str	r2, [r3, #32]
}
 8008fea:	46c0      	nop			@ (mov r8, r8)
 8008fec:	46bd      	mov	sp, r7
 8008fee:	b006      	add	sp, #24
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	46c0      	nop			@ (mov r8, r8)
 8008ff4:	ffff0fff 	.word	0xffff0fff

08008ff8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2270      	movs	r2, #112	@ 0x70
 800900c:	4393      	bics	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4313      	orrs	r3, r2
 8009016:	2207      	movs	r2, #7
 8009018:	4313      	orrs	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	609a      	str	r2, [r3, #8]
}
 8009022:	46c0      	nop			@ (mov r8, r8)
 8009024:	46bd      	mov	sp, r7
 8009026:	b004      	add	sp, #16
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	4a09      	ldr	r2, [pc, #36]	@ (8009068 <TIM_ETR_SetConfig+0x3c>)
 8009044:	4013      	ands	r3, r2
 8009046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	021a      	lsls	r2, r3, #8
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	431a      	orrs	r2, r3
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	4313      	orrs	r3, r2
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	609a      	str	r2, [r3, #8]
}
 8009060:	46c0      	nop			@ (mov r8, r8)
 8009062:	46bd      	mov	sp, r7
 8009064:	b006      	add	sp, #24
 8009066:	bd80      	pop	{r7, pc}
 8009068:	ffff00ff 	.word	0xffff00ff

0800906c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	223c      	movs	r2, #60	@ 0x3c
 800907a:	5c9b      	ldrb	r3, [r3, r2]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d101      	bne.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009080:	2302      	movs	r3, #2
 8009082:	e047      	b.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	223c      	movs	r2, #60	@ 0x3c
 8009088:	2101      	movs	r1, #1
 800908a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	223d      	movs	r2, #61	@ 0x3d
 8009090:	2102      	movs	r1, #2
 8009092:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2270      	movs	r2, #112	@ 0x70
 80090a8:	4393      	bics	r3, r2
 80090aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a16      	ldr	r2, [pc, #88]	@ (800911c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d00f      	beq.n	80090e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	2380      	movs	r3, #128	@ 0x80
 80090ce:	05db      	lsls	r3, r3, #23
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d009      	beq.n	80090e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a11      	ldr	r2, [pc, #68]	@ (8009120 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d004      	beq.n	80090e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a10      	ldr	r2, [pc, #64]	@ (8009124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d10c      	bne.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	2280      	movs	r2, #128	@ 0x80
 80090ec:	4393      	bics	r3, r2
 80090ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	223d      	movs	r2, #61	@ 0x3d
 8009106:	2101      	movs	r1, #1
 8009108:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	223c      	movs	r2, #60	@ 0x3c
 800910e:	2100      	movs	r1, #0
 8009110:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	0018      	movs	r0, r3
 8009116:	46bd      	mov	sp, r7
 8009118:	b004      	add	sp, #16
 800911a:	bd80      	pop	{r7, pc}
 800911c:	40012c00 	.word	0x40012c00
 8009120:	40000400 	.word	0x40000400
 8009124:	40014000 	.word	0x40014000

08009128 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009130:	46c0      	nop			@ (mov r8, r8)
 8009132:	46bd      	mov	sp, r7
 8009134:	b002      	add	sp, #8
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009140:	46c0      	nop			@ (mov r8, r8)
 8009142:	46bd      	mov	sp, r7
 8009144:	b002      	add	sp, #8
 8009146:	bd80      	pop	{r7, pc}

08009148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e044      	b.n	80091e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d107      	bne.n	8009172 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2278      	movs	r2, #120	@ 0x78
 8009166:	2100      	movs	r1, #0
 8009168:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	0018      	movs	r0, r3
 800916e:	f7fa fc89 	bl	8003a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2224      	movs	r2, #36	@ 0x24
 8009176:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2101      	movs	r1, #1
 8009184:	438a      	bics	r2, r1
 8009186:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918c:	2b00      	cmp	r3, #0
 800918e:	d003      	beq.n	8009198 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	0018      	movs	r0, r3
 8009194:	f000 fda8 	bl	8009ce8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	0018      	movs	r0, r3
 800919c:	f000 fbbc 	bl	8009918 <UART_SetConfig>
 80091a0:	0003      	movs	r3, r0
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d101      	bne.n	80091aa <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e01c      	b.n	80091e4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	490d      	ldr	r1, [pc, #52]	@ (80091ec <HAL_UART_Init+0xa4>)
 80091b6:	400a      	ands	r2, r1
 80091b8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	212a      	movs	r1, #42	@ 0x2a
 80091c6:	438a      	bics	r2, r1
 80091c8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2101      	movs	r1, #1
 80091d6:	430a      	orrs	r2, r1
 80091d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	0018      	movs	r0, r3
 80091de:	f000 fe37 	bl	8009e50 <UART_CheckIdleState>
 80091e2:	0003      	movs	r3, r0
}
 80091e4:	0018      	movs	r0, r3
 80091e6:	46bd      	mov	sp, r7
 80091e8:	b002      	add	sp, #8
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	ffffb7ff 	.word	0xffffb7ff

080091f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08a      	sub	sp, #40	@ 0x28
 80091f4:	af02      	add	r7, sp, #8
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	1dbb      	adds	r3, r7, #6
 80091fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009204:	2b20      	cmp	r3, #32
 8009206:	d000      	beq.n	800920a <HAL_UART_Transmit+0x1a>
 8009208:	e08c      	b.n	8009324 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <HAL_UART_Transmit+0x28>
 8009210:	1dbb      	adds	r3, r7, #6
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e084      	b.n	8009326 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	2380      	movs	r3, #128	@ 0x80
 8009222:	015b      	lsls	r3, r3, #5
 8009224:	429a      	cmp	r2, r3
 8009226:	d109      	bne.n	800923c <HAL_UART_Transmit+0x4c>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d105      	bne.n	800923c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2201      	movs	r2, #1
 8009234:	4013      	ands	r3, r2
 8009236:	d001      	beq.n	800923c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e074      	b.n	8009326 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2284      	movs	r2, #132	@ 0x84
 8009240:	2100      	movs	r1, #0
 8009242:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2221      	movs	r2, #33	@ 0x21
 8009248:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800924a:	f7fa fd2d 	bl	8003ca8 <HAL_GetTick>
 800924e:	0003      	movs	r3, r0
 8009250:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	1dba      	adds	r2, r7, #6
 8009256:	2150      	movs	r1, #80	@ 0x50
 8009258:	8812      	ldrh	r2, [r2, #0]
 800925a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	1dba      	adds	r2, r7, #6
 8009260:	2152      	movs	r1, #82	@ 0x52
 8009262:	8812      	ldrh	r2, [r2, #0]
 8009264:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	689a      	ldr	r2, [r3, #8]
 800926a:	2380      	movs	r3, #128	@ 0x80
 800926c:	015b      	lsls	r3, r3, #5
 800926e:	429a      	cmp	r2, r3
 8009270:	d108      	bne.n	8009284 <HAL_UART_Transmit+0x94>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d104      	bne.n	8009284 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800927a:	2300      	movs	r3, #0
 800927c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	61bb      	str	r3, [r7, #24]
 8009282:	e003      	b.n	800928c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009288:	2300      	movs	r3, #0
 800928a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800928c:	e02f      	b.n	80092ee <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	0013      	movs	r3, r2
 8009298:	2200      	movs	r2, #0
 800929a:	2180      	movs	r1, #128	@ 0x80
 800929c:	f000 fe80 	bl	8009fa0 <UART_WaitOnFlagUntilTimeout>
 80092a0:	1e03      	subs	r3, r0, #0
 80092a2:	d004      	beq.n	80092ae <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2220      	movs	r2, #32
 80092a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e03b      	b.n	8009326 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10b      	bne.n	80092cc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	881a      	ldrh	r2, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	05d2      	lsls	r2, r2, #23
 80092be:	0dd2      	lsrs	r2, r2, #23
 80092c0:	b292      	uxth	r2, r2
 80092c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	3302      	adds	r3, #2
 80092c8:	61bb      	str	r3, [r7, #24]
 80092ca:	e007      	b.n	80092dc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	3301      	adds	r3, #1
 80092da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2252      	movs	r2, #82	@ 0x52
 80092e0:	5a9b      	ldrh	r3, [r3, r2]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	3b01      	subs	r3, #1
 80092e6:	b299      	uxth	r1, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2252      	movs	r2, #82	@ 0x52
 80092ec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2252      	movs	r2, #82	@ 0x52
 80092f2:	5a9b      	ldrh	r3, [r3, r2]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1c9      	bne.n	800928e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	0013      	movs	r3, r2
 8009304:	2200      	movs	r2, #0
 8009306:	2140      	movs	r1, #64	@ 0x40
 8009308:	f000 fe4a 	bl	8009fa0 <UART_WaitOnFlagUntilTimeout>
 800930c:	1e03      	subs	r3, r0, #0
 800930e:	d004      	beq.n	800931a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2220      	movs	r2, #32
 8009314:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e005      	b.n	8009326 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2220      	movs	r2, #32
 800931e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	e000      	b.n	8009326 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8009324:	2302      	movs	r3, #2
  }
}
 8009326:	0018      	movs	r0, r3
 8009328:	46bd      	mov	sp, r7
 800932a:	b008      	add	sp, #32
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009330:	b590      	push	{r4, r7, lr}
 8009332:	b0ab      	sub	sp, #172	@ 0xac
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	22a4      	movs	r2, #164	@ 0xa4
 8009340:	18b9      	adds	r1, r7, r2
 8009342:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	20a0      	movs	r0, #160	@ 0xa0
 800934c:	1839      	adds	r1, r7, r0
 800934e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	219c      	movs	r1, #156	@ 0x9c
 8009358:	1879      	adds	r1, r7, r1
 800935a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800935c:	0011      	movs	r1, r2
 800935e:	18bb      	adds	r3, r7, r2
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a99      	ldr	r2, [pc, #612]	@ (80095c8 <HAL_UART_IRQHandler+0x298>)
 8009364:	4013      	ands	r3, r2
 8009366:	2298      	movs	r2, #152	@ 0x98
 8009368:	18bc      	adds	r4, r7, r2
 800936a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800936c:	18bb      	adds	r3, r7, r2
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d114      	bne.n	800939e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009374:	187b      	adds	r3, r7, r1
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2220      	movs	r2, #32
 800937a:	4013      	ands	r3, r2
 800937c:	d00f      	beq.n	800939e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800937e:	183b      	adds	r3, r7, r0
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2220      	movs	r2, #32
 8009384:	4013      	ands	r3, r2
 8009386:	d00a      	beq.n	800939e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800938c:	2b00      	cmp	r3, #0
 800938e:	d100      	bne.n	8009392 <HAL_UART_IRQHandler+0x62>
 8009390:	e29e      	b.n	80098d0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	0010      	movs	r0, r2
 800939a:	4798      	blx	r3
      }
      return;
 800939c:	e298      	b.n	80098d0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800939e:	2398      	movs	r3, #152	@ 0x98
 80093a0:	18fb      	adds	r3, r7, r3
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d100      	bne.n	80093aa <HAL_UART_IRQHandler+0x7a>
 80093a8:	e114      	b.n	80095d4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80093aa:	239c      	movs	r3, #156	@ 0x9c
 80093ac:	18fb      	adds	r3, r7, r3
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2201      	movs	r2, #1
 80093b2:	4013      	ands	r3, r2
 80093b4:	d106      	bne.n	80093c4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80093b6:	23a0      	movs	r3, #160	@ 0xa0
 80093b8:	18fb      	adds	r3, r7, r3
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a83      	ldr	r2, [pc, #524]	@ (80095cc <HAL_UART_IRQHandler+0x29c>)
 80093be:	4013      	ands	r3, r2
 80093c0:	d100      	bne.n	80093c4 <HAL_UART_IRQHandler+0x94>
 80093c2:	e107      	b.n	80095d4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093c4:	23a4      	movs	r3, #164	@ 0xa4
 80093c6:	18fb      	adds	r3, r7, r3
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2201      	movs	r2, #1
 80093cc:	4013      	ands	r3, r2
 80093ce:	d012      	beq.n	80093f6 <HAL_UART_IRQHandler+0xc6>
 80093d0:	23a0      	movs	r3, #160	@ 0xa0
 80093d2:	18fb      	adds	r3, r7, r3
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	2380      	movs	r3, #128	@ 0x80
 80093d8:	005b      	lsls	r3, r3, #1
 80093da:	4013      	ands	r3, r2
 80093dc:	d00b      	beq.n	80093f6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2201      	movs	r2, #1
 80093e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2284      	movs	r2, #132	@ 0x84
 80093ea:	589b      	ldr	r3, [r3, r2]
 80093ec:	2201      	movs	r2, #1
 80093ee:	431a      	orrs	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2184      	movs	r1, #132	@ 0x84
 80093f4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093f6:	23a4      	movs	r3, #164	@ 0xa4
 80093f8:	18fb      	adds	r3, r7, r3
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2202      	movs	r2, #2
 80093fe:	4013      	ands	r3, r2
 8009400:	d011      	beq.n	8009426 <HAL_UART_IRQHandler+0xf6>
 8009402:	239c      	movs	r3, #156	@ 0x9c
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2201      	movs	r2, #1
 800940a:	4013      	ands	r3, r2
 800940c:	d00b      	beq.n	8009426 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2202      	movs	r2, #2
 8009414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2284      	movs	r2, #132	@ 0x84
 800941a:	589b      	ldr	r3, [r3, r2]
 800941c:	2204      	movs	r2, #4
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2184      	movs	r1, #132	@ 0x84
 8009424:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009426:	23a4      	movs	r3, #164	@ 0xa4
 8009428:	18fb      	adds	r3, r7, r3
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2204      	movs	r2, #4
 800942e:	4013      	ands	r3, r2
 8009430:	d011      	beq.n	8009456 <HAL_UART_IRQHandler+0x126>
 8009432:	239c      	movs	r3, #156	@ 0x9c
 8009434:	18fb      	adds	r3, r7, r3
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2201      	movs	r2, #1
 800943a:	4013      	ands	r3, r2
 800943c:	d00b      	beq.n	8009456 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2204      	movs	r2, #4
 8009444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2284      	movs	r2, #132	@ 0x84
 800944a:	589b      	ldr	r3, [r3, r2]
 800944c:	2202      	movs	r2, #2
 800944e:	431a      	orrs	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2184      	movs	r1, #132	@ 0x84
 8009454:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009456:	23a4      	movs	r3, #164	@ 0xa4
 8009458:	18fb      	adds	r3, r7, r3
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2208      	movs	r2, #8
 800945e:	4013      	ands	r3, r2
 8009460:	d017      	beq.n	8009492 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009462:	23a0      	movs	r3, #160	@ 0xa0
 8009464:	18fb      	adds	r3, r7, r3
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2220      	movs	r2, #32
 800946a:	4013      	ands	r3, r2
 800946c:	d105      	bne.n	800947a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800946e:	239c      	movs	r3, #156	@ 0x9c
 8009470:	18fb      	adds	r3, r7, r3
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2201      	movs	r2, #1
 8009476:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009478:	d00b      	beq.n	8009492 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2208      	movs	r2, #8
 8009480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2284      	movs	r2, #132	@ 0x84
 8009486:	589b      	ldr	r3, [r3, r2]
 8009488:	2208      	movs	r2, #8
 800948a:	431a      	orrs	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2184      	movs	r1, #132	@ 0x84
 8009490:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009492:	23a4      	movs	r3, #164	@ 0xa4
 8009494:	18fb      	adds	r3, r7, r3
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	2380      	movs	r3, #128	@ 0x80
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	4013      	ands	r3, r2
 800949e:	d013      	beq.n	80094c8 <HAL_UART_IRQHandler+0x198>
 80094a0:	23a0      	movs	r3, #160	@ 0xa0
 80094a2:	18fb      	adds	r3, r7, r3
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	2380      	movs	r3, #128	@ 0x80
 80094a8:	04db      	lsls	r3, r3, #19
 80094aa:	4013      	ands	r3, r2
 80094ac:	d00c      	beq.n	80094c8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2280      	movs	r2, #128	@ 0x80
 80094b4:	0112      	lsls	r2, r2, #4
 80094b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2284      	movs	r2, #132	@ 0x84
 80094bc:	589b      	ldr	r3, [r3, r2]
 80094be:	2220      	movs	r2, #32
 80094c0:	431a      	orrs	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2184      	movs	r1, #132	@ 0x84
 80094c6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2284      	movs	r2, #132	@ 0x84
 80094cc:	589b      	ldr	r3, [r3, r2]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d100      	bne.n	80094d4 <HAL_UART_IRQHandler+0x1a4>
 80094d2:	e1ff      	b.n	80098d4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80094d4:	23a4      	movs	r3, #164	@ 0xa4
 80094d6:	18fb      	adds	r3, r7, r3
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2220      	movs	r2, #32
 80094dc:	4013      	ands	r3, r2
 80094de:	d00e      	beq.n	80094fe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80094e0:	23a0      	movs	r3, #160	@ 0xa0
 80094e2:	18fb      	adds	r3, r7, r3
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2220      	movs	r2, #32
 80094e8:	4013      	ands	r3, r2
 80094ea:	d008      	beq.n	80094fe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d004      	beq.n	80094fe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	0010      	movs	r0, r2
 80094fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2284      	movs	r2, #132	@ 0x84
 8009502:	589b      	ldr	r3, [r3, r2]
 8009504:	2194      	movs	r1, #148	@ 0x94
 8009506:	187a      	adds	r2, r7, r1
 8009508:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	2240      	movs	r2, #64	@ 0x40
 8009512:	4013      	ands	r3, r2
 8009514:	2b40      	cmp	r3, #64	@ 0x40
 8009516:	d004      	beq.n	8009522 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009518:	187b      	adds	r3, r7, r1
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2228      	movs	r2, #40	@ 0x28
 800951e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009520:	d047      	beq.n	80095b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	0018      	movs	r0, r3
 8009526:	f000 fdab 	bl	800a080 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	2240      	movs	r2, #64	@ 0x40
 8009532:	4013      	ands	r3, r2
 8009534:	2b40      	cmp	r3, #64	@ 0x40
 8009536:	d137      	bne.n	80095a8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009538:	f3ef 8310 	mrs	r3, PRIMASK
 800953c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800953e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009540:	2090      	movs	r0, #144	@ 0x90
 8009542:	183a      	adds	r2, r7, r0
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	2301      	movs	r3, #1
 8009548:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800954a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800954c:	f383 8810 	msr	PRIMASK, r3
}
 8009550:	46c0      	nop			@ (mov r8, r8)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689a      	ldr	r2, [r3, #8]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2140      	movs	r1, #64	@ 0x40
 800955e:	438a      	bics	r2, r1
 8009560:	609a      	str	r2, [r3, #8]
 8009562:	183b      	adds	r3, r7, r0
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009568:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800956a:	f383 8810 	msr	PRIMASK, r3
}
 800956e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009574:	2b00      	cmp	r3, #0
 8009576:	d012      	beq.n	800959e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800957c:	4a14      	ldr	r2, [pc, #80]	@ (80095d0 <HAL_UART_IRQHandler+0x2a0>)
 800957e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009584:	0018      	movs	r0, r3
 8009586:	f7fb fc35 	bl	8004df4 <HAL_DMA_Abort_IT>
 800958a:	1e03      	subs	r3, r0, #0
 800958c:	d01a      	beq.n	80095c4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009598:	0018      	movs	r0, r3
 800959a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800959c:	e012      	b.n	80095c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	0018      	movs	r0, r3
 80095a2:	f000 f9a5 	bl	80098f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a6:	e00d      	b.n	80095c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	0018      	movs	r0, r3
 80095ac:	f000 f9a0 	bl	80098f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b0:	e008      	b.n	80095c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	0018      	movs	r0, r3
 80095b6:	f000 f99b 	bl	80098f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2284      	movs	r2, #132	@ 0x84
 80095be:	2100      	movs	r1, #0
 80095c0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80095c2:	e187      	b.n	80098d4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c4:	46c0      	nop			@ (mov r8, r8)
    return;
 80095c6:	e185      	b.n	80098d4 <HAL_UART_IRQHandler+0x5a4>
 80095c8:	0000080f 	.word	0x0000080f
 80095cc:	04000120 	.word	0x04000120
 80095d0:	0800a149 	.word	0x0800a149

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d000      	beq.n	80095de <HAL_UART_IRQHandler+0x2ae>
 80095dc:	e139      	b.n	8009852 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095de:	23a4      	movs	r3, #164	@ 0xa4
 80095e0:	18fb      	adds	r3, r7, r3
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2210      	movs	r2, #16
 80095e6:	4013      	ands	r3, r2
 80095e8:	d100      	bne.n	80095ec <HAL_UART_IRQHandler+0x2bc>
 80095ea:	e132      	b.n	8009852 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095ec:	23a0      	movs	r3, #160	@ 0xa0
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2210      	movs	r2, #16
 80095f4:	4013      	ands	r3, r2
 80095f6:	d100      	bne.n	80095fa <HAL_UART_IRQHandler+0x2ca>
 80095f8:	e12b      	b.n	8009852 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2210      	movs	r2, #16
 8009600:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	2240      	movs	r2, #64	@ 0x40
 800960a:	4013      	ands	r3, r2
 800960c:	2b40      	cmp	r3, #64	@ 0x40
 800960e:	d000      	beq.n	8009612 <HAL_UART_IRQHandler+0x2e2>
 8009610:	e09f      	b.n	8009752 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	217e      	movs	r1, #126	@ 0x7e
 800961c:	187b      	adds	r3, r7, r1
 800961e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8009620:	187b      	adds	r3, r7, r1
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d100      	bne.n	800962a <HAL_UART_IRQHandler+0x2fa>
 8009628:	e156      	b.n	80098d8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2258      	movs	r2, #88	@ 0x58
 800962e:	5a9b      	ldrh	r3, [r3, r2]
 8009630:	187a      	adds	r2, r7, r1
 8009632:	8812      	ldrh	r2, [r2, #0]
 8009634:	429a      	cmp	r2, r3
 8009636:	d300      	bcc.n	800963a <HAL_UART_IRQHandler+0x30a>
 8009638:	e14e      	b.n	80098d8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	187a      	adds	r2, r7, r1
 800963e:	215a      	movs	r1, #90	@ 0x5a
 8009640:	8812      	ldrh	r2, [r2, #0]
 8009642:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	2b20      	cmp	r3, #32
 800964c:	d06f      	beq.n	800972e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800964e:	f3ef 8310 	mrs	r3, PRIMASK
 8009652:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009656:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009658:	2301      	movs	r3, #1
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800965c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800965e:	f383 8810 	msr	PRIMASK, r3
}
 8009662:	46c0      	nop			@ (mov r8, r8)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	499e      	ldr	r1, [pc, #632]	@ (80098e8 <HAL_UART_IRQHandler+0x5b8>)
 8009670:	400a      	ands	r2, r1
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009676:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967a:	f383 8810 	msr	PRIMASK, r3
}
 800967e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009680:	f3ef 8310 	mrs	r3, PRIMASK
 8009684:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8009686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009688:	677b      	str	r3, [r7, #116]	@ 0x74
 800968a:	2301      	movs	r3, #1
 800968c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800968e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009690:	f383 8810 	msr	PRIMASK, r3
}
 8009694:	46c0      	nop			@ (mov r8, r8)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2101      	movs	r1, #1
 80096a2:	438a      	bics	r2, r1
 80096a4:	609a      	str	r2, [r3, #8]
 80096a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096a8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096ac:	f383 8810 	msr	PRIMASK, r3
}
 80096b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096b2:	f3ef 8310 	mrs	r3, PRIMASK
 80096b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80096b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80096bc:	2301      	movs	r3, #1
 80096be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096c2:	f383 8810 	msr	PRIMASK, r3
}
 80096c6:	46c0      	nop			@ (mov r8, r8)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689a      	ldr	r2, [r3, #8]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2140      	movs	r1, #64	@ 0x40
 80096d4:	438a      	bics	r2, r1
 80096d6:	609a      	str	r2, [r3, #8]
 80096d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096da:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096de:	f383 8810 	msr	PRIMASK, r3
}
 80096e2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2280      	movs	r2, #128	@ 0x80
 80096e8:	2120      	movs	r1, #32
 80096ea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096f2:	f3ef 8310 	mrs	r3, PRIMASK
 80096f6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80096f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80096fc:	2301      	movs	r3, #1
 80096fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009702:	f383 8810 	msr	PRIMASK, r3
}
 8009706:	46c0      	nop			@ (mov r8, r8)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2110      	movs	r1, #16
 8009714:	438a      	bics	r2, r1
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800971a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800971c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800971e:	f383 8810 	msr	PRIMASK, r3
}
 8009722:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009728:	0018      	movs	r0, r3
 800972a:	f7fb fb2b 	bl	8004d84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2202      	movs	r2, #2
 8009732:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2258      	movs	r2, #88	@ 0x58
 8009738:	5a9a      	ldrh	r2, [r3, r2]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	215a      	movs	r1, #90	@ 0x5a
 800973e:	5a5b      	ldrh	r3, [r3, r1]
 8009740:	b29b      	uxth	r3, r3
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	b29a      	uxth	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	0011      	movs	r1, r2
 800974a:	0018      	movs	r0, r3
 800974c:	f000 f8d8 	bl	8009900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009750:	e0c2      	b.n	80098d8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2258      	movs	r2, #88	@ 0x58
 8009756:	5a99      	ldrh	r1, [r3, r2]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	225a      	movs	r2, #90	@ 0x5a
 800975c:	5a9b      	ldrh	r3, [r3, r2]
 800975e:	b29a      	uxth	r2, r3
 8009760:	208e      	movs	r0, #142	@ 0x8e
 8009762:	183b      	adds	r3, r7, r0
 8009764:	1a8a      	subs	r2, r1, r2
 8009766:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	225a      	movs	r2, #90	@ 0x5a
 800976c:	5a9b      	ldrh	r3, [r3, r2]
 800976e:	b29b      	uxth	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d100      	bne.n	8009776 <HAL_UART_IRQHandler+0x446>
 8009774:	e0b2      	b.n	80098dc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8009776:	183b      	adds	r3, r7, r0
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d100      	bne.n	8009780 <HAL_UART_IRQHandler+0x450>
 800977e:	e0ad      	b.n	80098dc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009780:	f3ef 8310 	mrs	r3, PRIMASK
 8009784:	60fb      	str	r3, [r7, #12]
  return(result);
 8009786:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009788:	2488      	movs	r4, #136	@ 0x88
 800978a:	193a      	adds	r2, r7, r4
 800978c:	6013      	str	r3, [r2, #0]
 800978e:	2301      	movs	r3, #1
 8009790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f383 8810 	msr	PRIMASK, r3
}
 8009798:	46c0      	nop			@ (mov r8, r8)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4951      	ldr	r1, [pc, #324]	@ (80098ec <HAL_UART_IRQHandler+0x5bc>)
 80097a6:	400a      	ands	r2, r1
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	193b      	adds	r3, r7, r4
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f383 8810 	msr	PRIMASK, r3
}
 80097b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097b8:	f3ef 8310 	mrs	r3, PRIMASK
 80097bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80097be:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c0:	2484      	movs	r4, #132	@ 0x84
 80097c2:	193a      	adds	r2, r7, r4
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	2301      	movs	r3, #1
 80097c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	f383 8810 	msr	PRIMASK, r3
}
 80097d0:	46c0      	nop			@ (mov r8, r8)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	689a      	ldr	r2, [r3, #8]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2101      	movs	r1, #1
 80097de:	438a      	bics	r2, r1
 80097e0:	609a      	str	r2, [r3, #8]
 80097e2:	193b      	adds	r3, r7, r4
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	f383 8810 	msr	PRIMASK, r3
}
 80097ee:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2280      	movs	r2, #128	@ 0x80
 80097f4:	2120      	movs	r1, #32
 80097f6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009804:	f3ef 8310 	mrs	r3, PRIMASK
 8009808:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800980a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980c:	2480      	movs	r4, #128	@ 0x80
 800980e:	193a      	adds	r2, r7, r4
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	2301      	movs	r3, #1
 8009814:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009818:	f383 8810 	msr	PRIMASK, r3
}
 800981c:	46c0      	nop			@ (mov r8, r8)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2110      	movs	r1, #16
 800982a:	438a      	bics	r2, r1
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	193b      	adds	r3, r7, r4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009836:	f383 8810 	msr	PRIMASK, r3
}
 800983a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2202      	movs	r2, #2
 8009840:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009842:	183b      	adds	r3, r7, r0
 8009844:	881a      	ldrh	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	0011      	movs	r1, r2
 800984a:	0018      	movs	r0, r3
 800984c:	f000 f858 	bl	8009900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009850:	e044      	b.n	80098dc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009852:	23a4      	movs	r3, #164	@ 0xa4
 8009854:	18fb      	adds	r3, r7, r3
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	2380      	movs	r3, #128	@ 0x80
 800985a:	035b      	lsls	r3, r3, #13
 800985c:	4013      	ands	r3, r2
 800985e:	d010      	beq.n	8009882 <HAL_UART_IRQHandler+0x552>
 8009860:	239c      	movs	r3, #156	@ 0x9c
 8009862:	18fb      	adds	r3, r7, r3
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	2380      	movs	r3, #128	@ 0x80
 8009868:	03db      	lsls	r3, r3, #15
 800986a:	4013      	ands	r3, r2
 800986c:	d009      	beq.n	8009882 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2280      	movs	r2, #128	@ 0x80
 8009874:	0352      	lsls	r2, r2, #13
 8009876:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	0018      	movs	r0, r3
 800987c:	f000 fca6 	bl	800a1cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009880:	e02f      	b.n	80098e2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009882:	23a4      	movs	r3, #164	@ 0xa4
 8009884:	18fb      	adds	r3, r7, r3
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2280      	movs	r2, #128	@ 0x80
 800988a:	4013      	ands	r3, r2
 800988c:	d00f      	beq.n	80098ae <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800988e:	23a0      	movs	r3, #160	@ 0xa0
 8009890:	18fb      	adds	r3, r7, r3
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2280      	movs	r2, #128	@ 0x80
 8009896:	4013      	ands	r3, r2
 8009898:	d009      	beq.n	80098ae <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d01e      	beq.n	80098e0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	0010      	movs	r0, r2
 80098aa:	4798      	blx	r3
    }
    return;
 80098ac:	e018      	b.n	80098e0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098ae:	23a4      	movs	r3, #164	@ 0xa4
 80098b0:	18fb      	adds	r3, r7, r3
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2240      	movs	r2, #64	@ 0x40
 80098b6:	4013      	ands	r3, r2
 80098b8:	d013      	beq.n	80098e2 <HAL_UART_IRQHandler+0x5b2>
 80098ba:	23a0      	movs	r3, #160	@ 0xa0
 80098bc:	18fb      	adds	r3, r7, r3
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2240      	movs	r2, #64	@ 0x40
 80098c2:	4013      	ands	r3, r2
 80098c4:	d00d      	beq.n	80098e2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	0018      	movs	r0, r3
 80098ca:	f000 fc54 	bl	800a176 <UART_EndTransmit_IT>
    return;
 80098ce:	e008      	b.n	80098e2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80098d0:	46c0      	nop			@ (mov r8, r8)
 80098d2:	e006      	b.n	80098e2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80098d4:	46c0      	nop			@ (mov r8, r8)
 80098d6:	e004      	b.n	80098e2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80098d8:	46c0      	nop			@ (mov r8, r8)
 80098da:	e002      	b.n	80098e2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80098dc:	46c0      	nop			@ (mov r8, r8)
 80098de:	e000      	b.n	80098e2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80098e0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80098e2:	46bd      	mov	sp, r7
 80098e4:	b02b      	add	sp, #172	@ 0xac
 80098e6:	bd90      	pop	{r4, r7, pc}
 80098e8:	fffffeff 	.word	0xfffffeff
 80098ec:	fffffedf 	.word	0xfffffedf

080098f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098f8:	46c0      	nop			@ (mov r8, r8)
 80098fa:	46bd      	mov	sp, r7
 80098fc:	b002      	add	sp, #8
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	000a      	movs	r2, r1
 800990a:	1cbb      	adds	r3, r7, #2
 800990c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800990e:	46c0      	nop			@ (mov r8, r8)
 8009910:	46bd      	mov	sp, r7
 8009912:	b002      	add	sp, #8
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b088      	sub	sp, #32
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009920:	231e      	movs	r3, #30
 8009922:	18fb      	adds	r3, r7, r3
 8009924:	2200      	movs	r2, #0
 8009926:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	689a      	ldr	r2, [r3, #8]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	431a      	orrs	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	4313      	orrs	r3, r2
 800993e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4abe      	ldr	r2, [pc, #760]	@ (8009c40 <UART_SetConfig+0x328>)
 8009948:	4013      	ands	r3, r2
 800994a:	0019      	movs	r1, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	430a      	orrs	r2, r1
 8009954:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	4ab9      	ldr	r2, [pc, #740]	@ (8009c44 <UART_SetConfig+0x32c>)
 800995e:	4013      	ands	r3, r2
 8009960:	0019      	movs	r1, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68da      	ldr	r2, [r3, #12]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	430a      	orrs	r2, r1
 800996c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	4313      	orrs	r3, r2
 800997c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	4ab0      	ldr	r2, [pc, #704]	@ (8009c48 <UART_SetConfig+0x330>)
 8009986:	4013      	ands	r3, r2
 8009988:	0019      	movs	r1, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	430a      	orrs	r2, r1
 8009992:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4aac      	ldr	r2, [pc, #688]	@ (8009c4c <UART_SetConfig+0x334>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d127      	bne.n	80099ee <UART_SetConfig+0xd6>
 800999e:	4bac      	ldr	r3, [pc, #688]	@ (8009c50 <UART_SetConfig+0x338>)
 80099a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099a2:	2203      	movs	r2, #3
 80099a4:	4013      	ands	r3, r2
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d00d      	beq.n	80099c6 <UART_SetConfig+0xae>
 80099aa:	d81b      	bhi.n	80099e4 <UART_SetConfig+0xcc>
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d014      	beq.n	80099da <UART_SetConfig+0xc2>
 80099b0:	d818      	bhi.n	80099e4 <UART_SetConfig+0xcc>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d002      	beq.n	80099bc <UART_SetConfig+0xa4>
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d00a      	beq.n	80099d0 <UART_SetConfig+0xb8>
 80099ba:	e013      	b.n	80099e4 <UART_SetConfig+0xcc>
 80099bc:	231f      	movs	r3, #31
 80099be:	18fb      	adds	r3, r7, r3
 80099c0:	2200      	movs	r2, #0
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	e0bd      	b.n	8009b42 <UART_SetConfig+0x22a>
 80099c6:	231f      	movs	r3, #31
 80099c8:	18fb      	adds	r3, r7, r3
 80099ca:	2202      	movs	r2, #2
 80099cc:	701a      	strb	r2, [r3, #0]
 80099ce:	e0b8      	b.n	8009b42 <UART_SetConfig+0x22a>
 80099d0:	231f      	movs	r3, #31
 80099d2:	18fb      	adds	r3, r7, r3
 80099d4:	2204      	movs	r2, #4
 80099d6:	701a      	strb	r2, [r3, #0]
 80099d8:	e0b3      	b.n	8009b42 <UART_SetConfig+0x22a>
 80099da:	231f      	movs	r3, #31
 80099dc:	18fb      	adds	r3, r7, r3
 80099de:	2208      	movs	r2, #8
 80099e0:	701a      	strb	r2, [r3, #0]
 80099e2:	e0ae      	b.n	8009b42 <UART_SetConfig+0x22a>
 80099e4:	231f      	movs	r3, #31
 80099e6:	18fb      	adds	r3, r7, r3
 80099e8:	2210      	movs	r2, #16
 80099ea:	701a      	strb	r2, [r3, #0]
 80099ec:	e0a9      	b.n	8009b42 <UART_SetConfig+0x22a>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a98      	ldr	r2, [pc, #608]	@ (8009c54 <UART_SetConfig+0x33c>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d134      	bne.n	8009a62 <UART_SetConfig+0x14a>
 80099f8:	4b95      	ldr	r3, [pc, #596]	@ (8009c50 <UART_SetConfig+0x338>)
 80099fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099fc:	23c0      	movs	r3, #192	@ 0xc0
 80099fe:	029b      	lsls	r3, r3, #10
 8009a00:	4013      	ands	r3, r2
 8009a02:	22c0      	movs	r2, #192	@ 0xc0
 8009a04:	0292      	lsls	r2, r2, #10
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d017      	beq.n	8009a3a <UART_SetConfig+0x122>
 8009a0a:	22c0      	movs	r2, #192	@ 0xc0
 8009a0c:	0292      	lsls	r2, r2, #10
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d822      	bhi.n	8009a58 <UART_SetConfig+0x140>
 8009a12:	2280      	movs	r2, #128	@ 0x80
 8009a14:	0292      	lsls	r2, r2, #10
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d019      	beq.n	8009a4e <UART_SetConfig+0x136>
 8009a1a:	2280      	movs	r2, #128	@ 0x80
 8009a1c:	0292      	lsls	r2, r2, #10
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d81a      	bhi.n	8009a58 <UART_SetConfig+0x140>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d004      	beq.n	8009a30 <UART_SetConfig+0x118>
 8009a26:	2280      	movs	r2, #128	@ 0x80
 8009a28:	0252      	lsls	r2, r2, #9
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d00a      	beq.n	8009a44 <UART_SetConfig+0x12c>
 8009a2e:	e013      	b.n	8009a58 <UART_SetConfig+0x140>
 8009a30:	231f      	movs	r3, #31
 8009a32:	18fb      	adds	r3, r7, r3
 8009a34:	2200      	movs	r2, #0
 8009a36:	701a      	strb	r2, [r3, #0]
 8009a38:	e083      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009a3a:	231f      	movs	r3, #31
 8009a3c:	18fb      	adds	r3, r7, r3
 8009a3e:	2202      	movs	r2, #2
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	e07e      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009a44:	231f      	movs	r3, #31
 8009a46:	18fb      	adds	r3, r7, r3
 8009a48:	2204      	movs	r2, #4
 8009a4a:	701a      	strb	r2, [r3, #0]
 8009a4c:	e079      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009a4e:	231f      	movs	r3, #31
 8009a50:	18fb      	adds	r3, r7, r3
 8009a52:	2208      	movs	r2, #8
 8009a54:	701a      	strb	r2, [r3, #0]
 8009a56:	e074      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009a58:	231f      	movs	r3, #31
 8009a5a:	18fb      	adds	r3, r7, r3
 8009a5c:	2210      	movs	r2, #16
 8009a5e:	701a      	strb	r2, [r3, #0]
 8009a60:	e06f      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a7c      	ldr	r2, [pc, #496]	@ (8009c58 <UART_SetConfig+0x340>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d134      	bne.n	8009ad6 <UART_SetConfig+0x1be>
 8009a6c:	4b78      	ldr	r3, [pc, #480]	@ (8009c50 <UART_SetConfig+0x338>)
 8009a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a70:	23c0      	movs	r3, #192	@ 0xc0
 8009a72:	031b      	lsls	r3, r3, #12
 8009a74:	4013      	ands	r3, r2
 8009a76:	22c0      	movs	r2, #192	@ 0xc0
 8009a78:	0312      	lsls	r2, r2, #12
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d017      	beq.n	8009aae <UART_SetConfig+0x196>
 8009a7e:	22c0      	movs	r2, #192	@ 0xc0
 8009a80:	0312      	lsls	r2, r2, #12
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d822      	bhi.n	8009acc <UART_SetConfig+0x1b4>
 8009a86:	2280      	movs	r2, #128	@ 0x80
 8009a88:	0312      	lsls	r2, r2, #12
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d019      	beq.n	8009ac2 <UART_SetConfig+0x1aa>
 8009a8e:	2280      	movs	r2, #128	@ 0x80
 8009a90:	0312      	lsls	r2, r2, #12
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d81a      	bhi.n	8009acc <UART_SetConfig+0x1b4>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d004      	beq.n	8009aa4 <UART_SetConfig+0x18c>
 8009a9a:	2280      	movs	r2, #128	@ 0x80
 8009a9c:	02d2      	lsls	r2, r2, #11
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00a      	beq.n	8009ab8 <UART_SetConfig+0x1a0>
 8009aa2:	e013      	b.n	8009acc <UART_SetConfig+0x1b4>
 8009aa4:	231f      	movs	r3, #31
 8009aa6:	18fb      	adds	r3, r7, r3
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	701a      	strb	r2, [r3, #0]
 8009aac:	e049      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009aae:	231f      	movs	r3, #31
 8009ab0:	18fb      	adds	r3, r7, r3
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	e044      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009ab8:	231f      	movs	r3, #31
 8009aba:	18fb      	adds	r3, r7, r3
 8009abc:	2204      	movs	r2, #4
 8009abe:	701a      	strb	r2, [r3, #0]
 8009ac0:	e03f      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009ac2:	231f      	movs	r3, #31
 8009ac4:	18fb      	adds	r3, r7, r3
 8009ac6:	2208      	movs	r2, #8
 8009ac8:	701a      	strb	r2, [r3, #0]
 8009aca:	e03a      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009acc:	231f      	movs	r3, #31
 8009ace:	18fb      	adds	r3, r7, r3
 8009ad0:	2210      	movs	r2, #16
 8009ad2:	701a      	strb	r2, [r3, #0]
 8009ad4:	e035      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a60      	ldr	r2, [pc, #384]	@ (8009c5c <UART_SetConfig+0x344>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d104      	bne.n	8009aea <UART_SetConfig+0x1d2>
 8009ae0:	231f      	movs	r3, #31
 8009ae2:	18fb      	adds	r3, r7, r3
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	701a      	strb	r2, [r3, #0]
 8009ae8:	e02b      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a5c      	ldr	r2, [pc, #368]	@ (8009c60 <UART_SetConfig+0x348>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d104      	bne.n	8009afe <UART_SetConfig+0x1e6>
 8009af4:	231f      	movs	r3, #31
 8009af6:	18fb      	adds	r3, r7, r3
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
 8009afc:	e021      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a58      	ldr	r2, [pc, #352]	@ (8009c64 <UART_SetConfig+0x34c>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d104      	bne.n	8009b12 <UART_SetConfig+0x1fa>
 8009b08:	231f      	movs	r3, #31
 8009b0a:	18fb      	adds	r3, r7, r3
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	701a      	strb	r2, [r3, #0]
 8009b10:	e017      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a54      	ldr	r2, [pc, #336]	@ (8009c68 <UART_SetConfig+0x350>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d104      	bne.n	8009b26 <UART_SetConfig+0x20e>
 8009b1c:	231f      	movs	r3, #31
 8009b1e:	18fb      	adds	r3, r7, r3
 8009b20:	2200      	movs	r2, #0
 8009b22:	701a      	strb	r2, [r3, #0]
 8009b24:	e00d      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a50      	ldr	r2, [pc, #320]	@ (8009c6c <UART_SetConfig+0x354>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d104      	bne.n	8009b3a <UART_SetConfig+0x222>
 8009b30:	231f      	movs	r3, #31
 8009b32:	18fb      	adds	r3, r7, r3
 8009b34:	2200      	movs	r2, #0
 8009b36:	701a      	strb	r2, [r3, #0]
 8009b38:	e003      	b.n	8009b42 <UART_SetConfig+0x22a>
 8009b3a:	231f      	movs	r3, #31
 8009b3c:	18fb      	adds	r3, r7, r3
 8009b3e:	2210      	movs	r2, #16
 8009b40:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	69da      	ldr	r2, [r3, #28]
 8009b46:	2380      	movs	r3, #128	@ 0x80
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d15c      	bne.n	8009c08 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8009b4e:	231f      	movs	r3, #31
 8009b50:	18fb      	adds	r3, r7, r3
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b08      	cmp	r3, #8
 8009b56:	d015      	beq.n	8009b84 <UART_SetConfig+0x26c>
 8009b58:	dc18      	bgt.n	8009b8c <UART_SetConfig+0x274>
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	d00d      	beq.n	8009b7a <UART_SetConfig+0x262>
 8009b5e:	dc15      	bgt.n	8009b8c <UART_SetConfig+0x274>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d002      	beq.n	8009b6a <UART_SetConfig+0x252>
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d005      	beq.n	8009b74 <UART_SetConfig+0x25c>
 8009b68:	e010      	b.n	8009b8c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b6a:	f7fe f89b 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8009b6e:	0003      	movs	r3, r0
 8009b70:	61bb      	str	r3, [r7, #24]
        break;
 8009b72:	e012      	b.n	8009b9a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b74:	4b3e      	ldr	r3, [pc, #248]	@ (8009c70 <UART_SetConfig+0x358>)
 8009b76:	61bb      	str	r3, [r7, #24]
        break;
 8009b78:	e00f      	b.n	8009b9a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b7a:	f7fe f817 	bl	8007bac <HAL_RCC_GetSysClockFreq>
 8009b7e:	0003      	movs	r3, r0
 8009b80:	61bb      	str	r3, [r7, #24]
        break;
 8009b82:	e00a      	b.n	8009b9a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b84:	2380      	movs	r3, #128	@ 0x80
 8009b86:	021b      	lsls	r3, r3, #8
 8009b88:	61bb      	str	r3, [r7, #24]
        break;
 8009b8a:	e006      	b.n	8009b9a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b90:	231e      	movs	r3, #30
 8009b92:	18fb      	adds	r3, r7, r3
 8009b94:	2201      	movs	r2, #1
 8009b96:	701a      	strb	r2, [r3, #0]
        break;
 8009b98:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d100      	bne.n	8009ba2 <UART_SetConfig+0x28a>
 8009ba0:	e095      	b.n	8009cce <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	005a      	lsls	r2, r3, #1
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	085b      	lsrs	r3, r3, #1
 8009bac:	18d2      	adds	r2, r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	0019      	movs	r1, r3
 8009bb4:	0010      	movs	r0, r2
 8009bb6:	f7f6 fac1 	bl	800013c <__udivsi3>
 8009bba:	0003      	movs	r3, r0
 8009bbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2b0f      	cmp	r3, #15
 8009bc2:	d91c      	bls.n	8009bfe <UART_SetConfig+0x2e6>
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	2380      	movs	r3, #128	@ 0x80
 8009bc8:	025b      	lsls	r3, r3, #9
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d217      	bcs.n	8009bfe <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	200e      	movs	r0, #14
 8009bd4:	183b      	adds	r3, r7, r0
 8009bd6:	210f      	movs	r1, #15
 8009bd8:	438a      	bics	r2, r1
 8009bda:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	085b      	lsrs	r3, r3, #1
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	2207      	movs	r2, #7
 8009be4:	4013      	ands	r3, r2
 8009be6:	b299      	uxth	r1, r3
 8009be8:	183b      	adds	r3, r7, r0
 8009bea:	183a      	adds	r2, r7, r0
 8009bec:	8812      	ldrh	r2, [r2, #0]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	183a      	adds	r2, r7, r0
 8009bf8:	8812      	ldrh	r2, [r2, #0]
 8009bfa:	60da      	str	r2, [r3, #12]
 8009bfc:	e067      	b.n	8009cce <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8009bfe:	231e      	movs	r3, #30
 8009c00:	18fb      	adds	r3, r7, r3
 8009c02:	2201      	movs	r2, #1
 8009c04:	701a      	strb	r2, [r3, #0]
 8009c06:	e062      	b.n	8009cce <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c08:	231f      	movs	r3, #31
 8009c0a:	18fb      	adds	r3, r7, r3
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b08      	cmp	r3, #8
 8009c10:	d030      	beq.n	8009c74 <UART_SetConfig+0x35c>
 8009c12:	dc33      	bgt.n	8009c7c <UART_SetConfig+0x364>
 8009c14:	2b04      	cmp	r3, #4
 8009c16:	d00d      	beq.n	8009c34 <UART_SetConfig+0x31c>
 8009c18:	dc30      	bgt.n	8009c7c <UART_SetConfig+0x364>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <UART_SetConfig+0x30c>
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d005      	beq.n	8009c2e <UART_SetConfig+0x316>
 8009c22:	e02b      	b.n	8009c7c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c24:	f7fe f83e 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8009c28:	0003      	movs	r3, r0
 8009c2a:	61bb      	str	r3, [r7, #24]
        break;
 8009c2c:	e02d      	b.n	8009c8a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c2e:	4b10      	ldr	r3, [pc, #64]	@ (8009c70 <UART_SetConfig+0x358>)
 8009c30:	61bb      	str	r3, [r7, #24]
        break;
 8009c32:	e02a      	b.n	8009c8a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c34:	f7fd ffba 	bl	8007bac <HAL_RCC_GetSysClockFreq>
 8009c38:	0003      	movs	r3, r0
 8009c3a:	61bb      	str	r3, [r7, #24]
        break;
 8009c3c:	e025      	b.n	8009c8a <UART_SetConfig+0x372>
 8009c3e:	46c0      	nop			@ (mov r8, r8)
 8009c40:	efff69f3 	.word	0xefff69f3
 8009c44:	ffffcfff 	.word	0xffffcfff
 8009c48:	fffff4ff 	.word	0xfffff4ff
 8009c4c:	40013800 	.word	0x40013800
 8009c50:	40021000 	.word	0x40021000
 8009c54:	40004400 	.word	0x40004400
 8009c58:	40004800 	.word	0x40004800
 8009c5c:	40004c00 	.word	0x40004c00
 8009c60:	40005000 	.word	0x40005000
 8009c64:	40011400 	.word	0x40011400
 8009c68:	40011800 	.word	0x40011800
 8009c6c:	40011c00 	.word	0x40011c00
 8009c70:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c74:	2380      	movs	r3, #128	@ 0x80
 8009c76:	021b      	lsls	r3, r3, #8
 8009c78:	61bb      	str	r3, [r7, #24]
        break;
 8009c7a:	e006      	b.n	8009c8a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c80:	231e      	movs	r3, #30
 8009c82:	18fb      	adds	r3, r7, r3
 8009c84:	2201      	movs	r2, #1
 8009c86:	701a      	strb	r2, [r3, #0]
        break;
 8009c88:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d01e      	beq.n	8009cce <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	085a      	lsrs	r2, r3, #1
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	18d2      	adds	r2, r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	0019      	movs	r1, r3
 8009ca0:	0010      	movs	r0, r2
 8009ca2:	f7f6 fa4b 	bl	800013c <__udivsi3>
 8009ca6:	0003      	movs	r3, r0
 8009ca8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2b0f      	cmp	r3, #15
 8009cae:	d90a      	bls.n	8009cc6 <UART_SetConfig+0x3ae>
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	2380      	movs	r3, #128	@ 0x80
 8009cb4:	025b      	lsls	r3, r3, #9
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d205      	bcs.n	8009cc6 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	60da      	str	r2, [r3, #12]
 8009cc4:	e003      	b.n	8009cce <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8009cc6:	231e      	movs	r3, #30
 8009cc8:	18fb      	adds	r3, r7, r3
 8009cca:	2201      	movs	r2, #1
 8009ccc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009cda:	231e      	movs	r3, #30
 8009cdc:	18fb      	adds	r3, r7, r3
 8009cde:	781b      	ldrb	r3, [r3, #0]
}
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	b008      	add	sp, #32
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf4:	2208      	movs	r2, #8
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	d00b      	beq.n	8009d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	4a4a      	ldr	r2, [pc, #296]	@ (8009e2c <UART_AdvFeatureConfig+0x144>)
 8009d02:	4013      	ands	r3, r2
 8009d04:	0019      	movs	r1, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d16:	2201      	movs	r2, #1
 8009d18:	4013      	ands	r3, r2
 8009d1a:	d00b      	beq.n	8009d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	4a43      	ldr	r2, [pc, #268]	@ (8009e30 <UART_AdvFeatureConfig+0x148>)
 8009d24:	4013      	ands	r3, r2
 8009d26:	0019      	movs	r1, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d38:	2202      	movs	r2, #2
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	d00b      	beq.n	8009d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	4a3b      	ldr	r2, [pc, #236]	@ (8009e34 <UART_AdvFeatureConfig+0x14c>)
 8009d46:	4013      	ands	r3, r2
 8009d48:	0019      	movs	r1, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	430a      	orrs	r2, r1
 8009d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5a:	2204      	movs	r2, #4
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	d00b      	beq.n	8009d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	4a34      	ldr	r2, [pc, #208]	@ (8009e38 <UART_AdvFeatureConfig+0x150>)
 8009d68:	4013      	ands	r3, r2
 8009d6a:	0019      	movs	r1, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d7c:	2210      	movs	r2, #16
 8009d7e:	4013      	ands	r3, r2
 8009d80:	d00b      	beq.n	8009d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	4a2c      	ldr	r2, [pc, #176]	@ (8009e3c <UART_AdvFeatureConfig+0x154>)
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	0019      	movs	r1, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9e:	2220      	movs	r2, #32
 8009da0:	4013      	ands	r3, r2
 8009da2:	d00b      	beq.n	8009dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	4a25      	ldr	r2, [pc, #148]	@ (8009e40 <UART_AdvFeatureConfig+0x158>)
 8009dac:	4013      	ands	r3, r2
 8009dae:	0019      	movs	r1, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc0:	2240      	movs	r2, #64	@ 0x40
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	d01d      	beq.n	8009e02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8009e44 <UART_AdvFeatureConfig+0x15c>)
 8009dce:	4013      	ands	r3, r2
 8009dd0:	0019      	movs	r1, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009de2:	2380      	movs	r3, #128	@ 0x80
 8009de4:	035b      	lsls	r3, r3, #13
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d10b      	bne.n	8009e02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	4a15      	ldr	r2, [pc, #84]	@ (8009e48 <UART_AdvFeatureConfig+0x160>)
 8009df2:	4013      	ands	r3, r2
 8009df4:	0019      	movs	r1, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e06:	2280      	movs	r2, #128	@ 0x80
 8009e08:	4013      	ands	r3, r2
 8009e0a:	d00b      	beq.n	8009e24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	4a0e      	ldr	r2, [pc, #56]	@ (8009e4c <UART_AdvFeatureConfig+0x164>)
 8009e14:	4013      	ands	r3, r2
 8009e16:	0019      	movs	r1, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	605a      	str	r2, [r3, #4]
  }
}
 8009e24:	46c0      	nop			@ (mov r8, r8)
 8009e26:	46bd      	mov	sp, r7
 8009e28:	b002      	add	sp, #8
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	ffff7fff 	.word	0xffff7fff
 8009e30:	fffdffff 	.word	0xfffdffff
 8009e34:	fffeffff 	.word	0xfffeffff
 8009e38:	fffbffff 	.word	0xfffbffff
 8009e3c:	ffffefff 	.word	0xffffefff
 8009e40:	ffffdfff 	.word	0xffffdfff
 8009e44:	ffefffff 	.word	0xffefffff
 8009e48:	ff9fffff 	.word	0xff9fffff
 8009e4c:	fff7ffff 	.word	0xfff7ffff

08009e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b092      	sub	sp, #72	@ 0x48
 8009e54:	af02      	add	r7, sp, #8
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2284      	movs	r2, #132	@ 0x84
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e60:	f7f9 ff22 	bl	8003ca8 <HAL_GetTick>
 8009e64:	0003      	movs	r3, r0
 8009e66:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2208      	movs	r2, #8
 8009e70:	4013      	ands	r3, r2
 8009e72:	2b08      	cmp	r3, #8
 8009e74:	d12c      	bne.n	8009ed0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e78:	2280      	movs	r2, #128	@ 0x80
 8009e7a:	0391      	lsls	r1, r2, #14
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	4a46      	ldr	r2, [pc, #280]	@ (8009f98 <UART_CheckIdleState+0x148>)
 8009e80:	9200      	str	r2, [sp, #0]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f000 f88c 	bl	8009fa0 <UART_WaitOnFlagUntilTimeout>
 8009e88:	1e03      	subs	r3, r0, #0
 8009e8a:	d021      	beq.n	8009ed0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e90:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009e94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e96:	2301      	movs	r3, #1
 8009e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9c:	f383 8810 	msr	PRIMASK, r3
}
 8009ea0:	46c0      	nop			@ (mov r8, r8)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2180      	movs	r1, #128	@ 0x80
 8009eae:	438a      	bics	r2, r1
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb8:	f383 8810 	msr	PRIMASK, r3
}
 8009ebc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2278      	movs	r2, #120	@ 0x78
 8009ec8:	2100      	movs	r1, #0
 8009eca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e05f      	b.n	8009f90 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2204      	movs	r2, #4
 8009ed8:	4013      	ands	r3, r2
 8009eda:	2b04      	cmp	r3, #4
 8009edc:	d146      	bne.n	8009f6c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ee0:	2280      	movs	r2, #128	@ 0x80
 8009ee2:	03d1      	lsls	r1, r2, #15
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8009f98 <UART_CheckIdleState+0x148>)
 8009ee8:	9200      	str	r2, [sp, #0]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f000 f858 	bl	8009fa0 <UART_WaitOnFlagUntilTimeout>
 8009ef0:	1e03      	subs	r3, r0, #0
 8009ef2:	d03b      	beq.n	8009f6c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009efa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009efe:	2301      	movs	r3, #1
 8009f00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f383 8810 	msr	PRIMASK, r3
}
 8009f08:	46c0      	nop			@ (mov r8, r8)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4921      	ldr	r1, [pc, #132]	@ (8009f9c <UART_CheckIdleState+0x14c>)
 8009f16:	400a      	ands	r2, r1
 8009f18:	601a      	str	r2, [r3, #0]
 8009f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f383 8810 	msr	PRIMASK, r3
}
 8009f24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f26:	f3ef 8310 	mrs	r3, PRIMASK
 8009f2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f2c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f30:	2301      	movs	r3, #1
 8009f32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	f383 8810 	msr	PRIMASK, r3
}
 8009f3a:	46c0      	nop			@ (mov r8, r8)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	689a      	ldr	r2, [r3, #8]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2101      	movs	r1, #1
 8009f48:	438a      	bics	r2, r1
 8009f4a:	609a      	str	r2, [r3, #8]
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	f383 8810 	msr	PRIMASK, r3
}
 8009f56:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2280      	movs	r2, #128	@ 0x80
 8009f5c:	2120      	movs	r1, #32
 8009f5e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2278      	movs	r2, #120	@ 0x78
 8009f64:	2100      	movs	r1, #0
 8009f66:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e011      	b.n	8009f90 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2220      	movs	r2, #32
 8009f70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2280      	movs	r2, #128	@ 0x80
 8009f76:	2120      	movs	r1, #32
 8009f78:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2278      	movs	r2, #120	@ 0x78
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	0018      	movs	r0, r3
 8009f92:	46bd      	mov	sp, r7
 8009f94:	b010      	add	sp, #64	@ 0x40
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	01ffffff 	.word	0x01ffffff
 8009f9c:	fffffedf 	.word	0xfffffedf

08009fa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	603b      	str	r3, [r7, #0]
 8009fac:	1dfb      	adds	r3, r7, #7
 8009fae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fb0:	e051      	b.n	800a056 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	d04e      	beq.n	800a056 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fb8:	f7f9 fe76 	bl	8003ca8 <HAL_GetTick>
 8009fbc:	0002      	movs	r2, r0
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	69ba      	ldr	r2, [r7, #24]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d302      	bcc.n	8009fce <UART_WaitOnFlagUntilTimeout+0x2e>
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	e051      	b.n	800a076 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2204      	movs	r2, #4
 8009fda:	4013      	ands	r3, r2
 8009fdc:	d03b      	beq.n	800a056 <UART_WaitOnFlagUntilTimeout+0xb6>
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2b80      	cmp	r3, #128	@ 0x80
 8009fe2:	d038      	beq.n	800a056 <UART_WaitOnFlagUntilTimeout+0xb6>
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2b40      	cmp	r3, #64	@ 0x40
 8009fe8:	d035      	beq.n	800a056 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	69db      	ldr	r3, [r3, #28]
 8009ff0:	2208      	movs	r2, #8
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	2b08      	cmp	r3, #8
 8009ff6:	d111      	bne.n	800a01c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2208      	movs	r2, #8
 8009ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	0018      	movs	r0, r3
 800a004:	f000 f83c 	bl	800a080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2284      	movs	r2, #132	@ 0x84
 800a00c:	2108      	movs	r1, #8
 800a00e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2278      	movs	r2, #120	@ 0x78
 800a014:	2100      	movs	r1, #0
 800a016:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e02c      	b.n	800a076 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	69da      	ldr	r2, [r3, #28]
 800a022:	2380      	movs	r3, #128	@ 0x80
 800a024:	011b      	lsls	r3, r3, #4
 800a026:	401a      	ands	r2, r3
 800a028:	2380      	movs	r3, #128	@ 0x80
 800a02a:	011b      	lsls	r3, r3, #4
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d112      	bne.n	800a056 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2280      	movs	r2, #128	@ 0x80
 800a036:	0112      	lsls	r2, r2, #4
 800a038:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	0018      	movs	r0, r3
 800a03e:	f000 f81f 	bl	800a080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2284      	movs	r2, #132	@ 0x84
 800a046:	2120      	movs	r1, #32
 800a048:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2278      	movs	r2, #120	@ 0x78
 800a04e:	2100      	movs	r1, #0
 800a050:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e00f      	b.n	800a076 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69db      	ldr	r3, [r3, #28]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	4013      	ands	r3, r2
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	425a      	negs	r2, r3
 800a066:	4153      	adcs	r3, r2
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	001a      	movs	r2, r3
 800a06c:	1dfb      	adds	r3, r7, #7
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d09e      	beq.n	8009fb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	0018      	movs	r0, r3
 800a078:	46bd      	mov	sp, r7
 800a07a:	b004      	add	sp, #16
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08e      	sub	sp, #56	@ 0x38
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a088:	f3ef 8310 	mrs	r3, PRIMASK
 800a08c:	617b      	str	r3, [r7, #20]
  return(result);
 800a08e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
 800a092:	2301      	movs	r3, #1
 800a094:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	f383 8810 	msr	PRIMASK, r3
}
 800a09c:	46c0      	nop			@ (mov r8, r8)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4926      	ldr	r1, [pc, #152]	@ (800a144 <UART_EndRxTransfer+0xc4>)
 800a0aa:	400a      	ands	r2, r1
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	f383 8810 	msr	PRIMASK, r3
}
 800a0b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ba:	f3ef 8310 	mrs	r3, PRIMASK
 800a0be:	623b      	str	r3, [r7, #32]
  return(result);
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ca:	f383 8810 	msr	PRIMASK, r3
}
 800a0ce:	46c0      	nop			@ (mov r8, r8)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2101      	movs	r1, #1
 800a0dc:	438a      	bics	r2, r1
 800a0de:	609a      	str	r2, [r3, #8]
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e6:	f383 8810 	msr	PRIMASK, r3
}
 800a0ea:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d118      	bne.n	800a126 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0fe:	2301      	movs	r3, #1
 800a100:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f383 8810 	msr	PRIMASK, r3
}
 800a108:	46c0      	nop			@ (mov r8, r8)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2110      	movs	r1, #16
 800a116:	438a      	bics	r2, r1
 800a118:	601a      	str	r2, [r3, #0]
 800a11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f383 8810 	msr	PRIMASK, r3
}
 800a124:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2280      	movs	r2, #128	@ 0x80
 800a12a:	2120      	movs	r1, #32
 800a12c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a13a:	46c0      	nop			@ (mov r8, r8)
 800a13c:	46bd      	mov	sp, r7
 800a13e:	b00e      	add	sp, #56	@ 0x38
 800a140:	bd80      	pop	{r7, pc}
 800a142:	46c0      	nop			@ (mov r8, r8)
 800a144:	fffffedf 	.word	0xfffffedf

0800a148 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a154:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	225a      	movs	r2, #90	@ 0x5a
 800a15a:	2100      	movs	r1, #0
 800a15c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2252      	movs	r2, #82	@ 0x52
 800a162:	2100      	movs	r1, #0
 800a164:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	0018      	movs	r0, r3
 800a16a:	f7ff fbc1 	bl	80098f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a16e:	46c0      	nop			@ (mov r8, r8)
 800a170:	46bd      	mov	sp, r7
 800a172:	b004      	add	sp, #16
 800a174:	bd80      	pop	{r7, pc}

0800a176 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b086      	sub	sp, #24
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a17e:	f3ef 8310 	mrs	r3, PRIMASK
 800a182:	60bb      	str	r3, [r7, #8]
  return(result);
 800a184:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	2301      	movs	r3, #1
 800a18a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f383 8810 	msr	PRIMASK, r3
}
 800a192:	46c0      	nop			@ (mov r8, r8)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2140      	movs	r1, #64	@ 0x40
 800a1a0:	438a      	bics	r2, r1
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f383 8810 	msr	PRIMASK, r3
}
 800a1ae:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	0018      	movs	r0, r3
 800a1c0:	f7f8 fda6 	bl	8002d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1c4:	46c0      	nop			@ (mov r8, r8)
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	b006      	add	sp, #24
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1d4:	46c0      	nop			@ (mov r8, r8)
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	b002      	add	sp, #8
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <__cvt>:
 800a1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1de:	001f      	movs	r7, r3
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	0016      	movs	r6, r2
 800a1e4:	b08b      	sub	sp, #44	@ 0x2c
 800a1e6:	429f      	cmp	r7, r3
 800a1e8:	da04      	bge.n	800a1f4 <__cvt+0x18>
 800a1ea:	2180      	movs	r1, #128	@ 0x80
 800a1ec:	0609      	lsls	r1, r1, #24
 800a1ee:	187b      	adds	r3, r7, r1
 800a1f0:	001f      	movs	r7, r3
 800a1f2:	232d      	movs	r3, #45	@ 0x2d
 800a1f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a1f6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a1f8:	7013      	strb	r3, [r2, #0]
 800a1fa:	2320      	movs	r3, #32
 800a1fc:	2203      	movs	r2, #3
 800a1fe:	439d      	bics	r5, r3
 800a200:	2d46      	cmp	r5, #70	@ 0x46
 800a202:	d007      	beq.n	800a214 <__cvt+0x38>
 800a204:	002b      	movs	r3, r5
 800a206:	3b45      	subs	r3, #69	@ 0x45
 800a208:	4259      	negs	r1, r3
 800a20a:	414b      	adcs	r3, r1
 800a20c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a20e:	3a01      	subs	r2, #1
 800a210:	18cb      	adds	r3, r1, r3
 800a212:	9310      	str	r3, [sp, #64]	@ 0x40
 800a214:	ab09      	add	r3, sp, #36	@ 0x24
 800a216:	9304      	str	r3, [sp, #16]
 800a218:	ab08      	add	r3, sp, #32
 800a21a:	9303      	str	r3, [sp, #12]
 800a21c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a21e:	9200      	str	r2, [sp, #0]
 800a220:	9302      	str	r3, [sp, #8]
 800a222:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a224:	0032      	movs	r2, r6
 800a226:	9301      	str	r3, [sp, #4]
 800a228:	003b      	movs	r3, r7
 800a22a:	f001 f89b 	bl	800b364 <_dtoa_r>
 800a22e:	0004      	movs	r4, r0
 800a230:	2d47      	cmp	r5, #71	@ 0x47
 800a232:	d11b      	bne.n	800a26c <__cvt+0x90>
 800a234:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a236:	07db      	lsls	r3, r3, #31
 800a238:	d511      	bpl.n	800a25e <__cvt+0x82>
 800a23a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a23c:	18c3      	adds	r3, r0, r3
 800a23e:	9307      	str	r3, [sp, #28]
 800a240:	2200      	movs	r2, #0
 800a242:	2300      	movs	r3, #0
 800a244:	0030      	movs	r0, r6
 800a246:	0039      	movs	r1, r7
 800a248:	f7f6 f8fe 	bl	8000448 <__aeabi_dcmpeq>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d001      	beq.n	800a254 <__cvt+0x78>
 800a250:	9b07      	ldr	r3, [sp, #28]
 800a252:	9309      	str	r3, [sp, #36]	@ 0x24
 800a254:	2230      	movs	r2, #48	@ 0x30
 800a256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a258:	9907      	ldr	r1, [sp, #28]
 800a25a:	428b      	cmp	r3, r1
 800a25c:	d320      	bcc.n	800a2a0 <__cvt+0xc4>
 800a25e:	0020      	movs	r0, r4
 800a260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a262:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a264:	1b1b      	subs	r3, r3, r4
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	b00b      	add	sp, #44	@ 0x2c
 800a26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a26c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a26e:	18c3      	adds	r3, r0, r3
 800a270:	9307      	str	r3, [sp, #28]
 800a272:	2d46      	cmp	r5, #70	@ 0x46
 800a274:	d1e4      	bne.n	800a240 <__cvt+0x64>
 800a276:	7803      	ldrb	r3, [r0, #0]
 800a278:	2b30      	cmp	r3, #48	@ 0x30
 800a27a:	d10c      	bne.n	800a296 <__cvt+0xba>
 800a27c:	2200      	movs	r2, #0
 800a27e:	2300      	movs	r3, #0
 800a280:	0030      	movs	r0, r6
 800a282:	0039      	movs	r1, r7
 800a284:	f7f6 f8e0 	bl	8000448 <__aeabi_dcmpeq>
 800a288:	2800      	cmp	r0, #0
 800a28a:	d104      	bne.n	800a296 <__cvt+0xba>
 800a28c:	2301      	movs	r3, #1
 800a28e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a298:	9a07      	ldr	r2, [sp, #28]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	18d3      	adds	r3, r2, r3
 800a29e:	e7ce      	b.n	800a23e <__cvt+0x62>
 800a2a0:	1c59      	adds	r1, r3, #1
 800a2a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a2a4:	701a      	strb	r2, [r3, #0]
 800a2a6:	e7d6      	b.n	800a256 <__cvt+0x7a>

0800a2a8 <__exponent>:
 800a2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2aa:	232b      	movs	r3, #43	@ 0x2b
 800a2ac:	0005      	movs	r5, r0
 800a2ae:	000c      	movs	r4, r1
 800a2b0:	b085      	sub	sp, #20
 800a2b2:	7002      	strb	r2, [r0, #0]
 800a2b4:	2900      	cmp	r1, #0
 800a2b6:	da01      	bge.n	800a2bc <__exponent+0x14>
 800a2b8:	424c      	negs	r4, r1
 800a2ba:	3302      	adds	r3, #2
 800a2bc:	706b      	strb	r3, [r5, #1]
 800a2be:	2c09      	cmp	r4, #9
 800a2c0:	dd2c      	ble.n	800a31c <__exponent+0x74>
 800a2c2:	ab02      	add	r3, sp, #8
 800a2c4:	1dde      	adds	r6, r3, #7
 800a2c6:	0020      	movs	r0, r4
 800a2c8:	210a      	movs	r1, #10
 800a2ca:	f7f6 f8a7 	bl	800041c <__aeabi_idivmod>
 800a2ce:	0037      	movs	r7, r6
 800a2d0:	3130      	adds	r1, #48	@ 0x30
 800a2d2:	3e01      	subs	r6, #1
 800a2d4:	0020      	movs	r0, r4
 800a2d6:	7031      	strb	r1, [r6, #0]
 800a2d8:	210a      	movs	r1, #10
 800a2da:	9401      	str	r4, [sp, #4]
 800a2dc:	f7f5 ffb8 	bl	8000250 <__divsi3>
 800a2e0:	9b01      	ldr	r3, [sp, #4]
 800a2e2:	0004      	movs	r4, r0
 800a2e4:	2b63      	cmp	r3, #99	@ 0x63
 800a2e6:	dcee      	bgt.n	800a2c6 <__exponent+0x1e>
 800a2e8:	1eba      	subs	r2, r7, #2
 800a2ea:	1ca8      	adds	r0, r5, #2
 800a2ec:	0001      	movs	r1, r0
 800a2ee:	0013      	movs	r3, r2
 800a2f0:	3430      	adds	r4, #48	@ 0x30
 800a2f2:	7014      	strb	r4, [r2, #0]
 800a2f4:	ac02      	add	r4, sp, #8
 800a2f6:	3407      	adds	r4, #7
 800a2f8:	429c      	cmp	r4, r3
 800a2fa:	d80a      	bhi.n	800a312 <__exponent+0x6a>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	42a2      	cmp	r2, r4
 800a300:	d803      	bhi.n	800a30a <__exponent+0x62>
 800a302:	3309      	adds	r3, #9
 800a304:	aa02      	add	r2, sp, #8
 800a306:	189b      	adds	r3, r3, r2
 800a308:	1bdb      	subs	r3, r3, r7
 800a30a:	18c0      	adds	r0, r0, r3
 800a30c:	1b40      	subs	r0, r0, r5
 800a30e:	b005      	add	sp, #20
 800a310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a312:	781c      	ldrb	r4, [r3, #0]
 800a314:	3301      	adds	r3, #1
 800a316:	700c      	strb	r4, [r1, #0]
 800a318:	3101      	adds	r1, #1
 800a31a:	e7eb      	b.n	800a2f4 <__exponent+0x4c>
 800a31c:	2330      	movs	r3, #48	@ 0x30
 800a31e:	18e4      	adds	r4, r4, r3
 800a320:	70ab      	strb	r3, [r5, #2]
 800a322:	1d28      	adds	r0, r5, #4
 800a324:	70ec      	strb	r4, [r5, #3]
 800a326:	e7f1      	b.n	800a30c <__exponent+0x64>

0800a328 <_printf_float>:
 800a328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32a:	b097      	sub	sp, #92	@ 0x5c
 800a32c:	000d      	movs	r5, r1
 800a32e:	920a      	str	r2, [sp, #40]	@ 0x28
 800a330:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800a332:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a334:	9009      	str	r0, [sp, #36]	@ 0x24
 800a336:	f000 fef9 	bl	800b12c <_localeconv_r>
 800a33a:	6803      	ldr	r3, [r0, #0]
 800a33c:	0018      	movs	r0, r3
 800a33e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a340:	f7f5 fee0 	bl	8000104 <strlen>
 800a344:	2300      	movs	r3, #0
 800a346:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a348:	9314      	str	r3, [sp, #80]	@ 0x50
 800a34a:	7e2b      	ldrb	r3, [r5, #24]
 800a34c:	2207      	movs	r2, #7
 800a34e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a350:	682b      	ldr	r3, [r5, #0]
 800a352:	930e      	str	r3, [sp, #56]	@ 0x38
 800a354:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	05c9      	lsls	r1, r1, #23
 800a35a:	d545      	bpl.n	800a3e8 <_printf_float+0xc0>
 800a35c:	189b      	adds	r3, r3, r2
 800a35e:	4393      	bics	r3, r2
 800a360:	001a      	movs	r2, r3
 800a362:	3208      	adds	r2, #8
 800a364:	6022      	str	r2, [r4, #0]
 800a366:	2201      	movs	r2, #1
 800a368:	681e      	ldr	r6, [r3, #0]
 800a36a:	685f      	ldr	r7, [r3, #4]
 800a36c:	007b      	lsls	r3, r7, #1
 800a36e:	085b      	lsrs	r3, r3, #1
 800a370:	9311      	str	r3, [sp, #68]	@ 0x44
 800a372:	9610      	str	r6, [sp, #64]	@ 0x40
 800a374:	64ae      	str	r6, [r5, #72]	@ 0x48
 800a376:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800a378:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a37a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a37c:	4ba7      	ldr	r3, [pc, #668]	@ (800a61c <_printf_float+0x2f4>)
 800a37e:	4252      	negs	r2, r2
 800a380:	f7f7 ff0a 	bl	8002198 <__aeabi_dcmpun>
 800a384:	2800      	cmp	r0, #0
 800a386:	d131      	bne.n	800a3ec <_printf_float+0xc4>
 800a388:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a38a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a38c:	2201      	movs	r2, #1
 800a38e:	4ba3      	ldr	r3, [pc, #652]	@ (800a61c <_printf_float+0x2f4>)
 800a390:	4252      	negs	r2, r2
 800a392:	f7f6 f869 	bl	8000468 <__aeabi_dcmple>
 800a396:	2800      	cmp	r0, #0
 800a398:	d128      	bne.n	800a3ec <_printf_float+0xc4>
 800a39a:	2200      	movs	r2, #0
 800a39c:	2300      	movs	r3, #0
 800a39e:	0030      	movs	r0, r6
 800a3a0:	0039      	movs	r1, r7
 800a3a2:	f7f6 f857 	bl	8000454 <__aeabi_dcmplt>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d003      	beq.n	800a3b2 <_printf_float+0x8a>
 800a3aa:	002b      	movs	r3, r5
 800a3ac:	222d      	movs	r2, #45	@ 0x2d
 800a3ae:	3343      	adds	r3, #67	@ 0x43
 800a3b0:	701a      	strb	r2, [r3, #0]
 800a3b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3b4:	4f9a      	ldr	r7, [pc, #616]	@ (800a620 <_printf_float+0x2f8>)
 800a3b6:	2b47      	cmp	r3, #71	@ 0x47
 800a3b8:	d900      	bls.n	800a3bc <_printf_float+0x94>
 800a3ba:	4f9a      	ldr	r7, [pc, #616]	@ (800a624 <_printf_float+0x2fc>)
 800a3bc:	2303      	movs	r3, #3
 800a3be:	2400      	movs	r4, #0
 800a3c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3c2:	612b      	str	r3, [r5, #16]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	439a      	bics	r2, r3
 800a3c8:	602a      	str	r2, [r5, #0]
 800a3ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3cc:	0029      	movs	r1, r5
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3d4:	aa15      	add	r2, sp, #84	@ 0x54
 800a3d6:	f000 f9e5 	bl	800a7a4 <_printf_common>
 800a3da:	3001      	adds	r0, #1
 800a3dc:	d000      	beq.n	800a3e0 <_printf_float+0xb8>
 800a3de:	e09f      	b.n	800a520 <_printf_float+0x1f8>
 800a3e0:	2001      	movs	r0, #1
 800a3e2:	4240      	negs	r0, r0
 800a3e4:	b017      	add	sp, #92	@ 0x5c
 800a3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3e8:	3307      	adds	r3, #7
 800a3ea:	e7b8      	b.n	800a35e <_printf_float+0x36>
 800a3ec:	0032      	movs	r2, r6
 800a3ee:	003b      	movs	r3, r7
 800a3f0:	0030      	movs	r0, r6
 800a3f2:	0039      	movs	r1, r7
 800a3f4:	f7f7 fed0 	bl	8002198 <__aeabi_dcmpun>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d00b      	beq.n	800a414 <_printf_float+0xec>
 800a3fc:	2f00      	cmp	r7, #0
 800a3fe:	da03      	bge.n	800a408 <_printf_float+0xe0>
 800a400:	002b      	movs	r3, r5
 800a402:	222d      	movs	r2, #45	@ 0x2d
 800a404:	3343      	adds	r3, #67	@ 0x43
 800a406:	701a      	strb	r2, [r3, #0]
 800a408:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a40a:	4f87      	ldr	r7, [pc, #540]	@ (800a628 <_printf_float+0x300>)
 800a40c:	2b47      	cmp	r3, #71	@ 0x47
 800a40e:	d9d5      	bls.n	800a3bc <_printf_float+0x94>
 800a410:	4f86      	ldr	r7, [pc, #536]	@ (800a62c <_printf_float+0x304>)
 800a412:	e7d3      	b.n	800a3bc <_printf_float+0x94>
 800a414:	2220      	movs	r2, #32
 800a416:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a418:	686b      	ldr	r3, [r5, #4]
 800a41a:	4394      	bics	r4, r2
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	d146      	bne.n	800a4ae <_printf_float+0x186>
 800a420:	3307      	adds	r3, #7
 800a422:	606b      	str	r3, [r5, #4]
 800a424:	2380      	movs	r3, #128	@ 0x80
 800a426:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a428:	00db      	lsls	r3, r3, #3
 800a42a:	4313      	orrs	r3, r2
 800a42c:	2200      	movs	r2, #0
 800a42e:	602b      	str	r3, [r5, #0]
 800a430:	9206      	str	r2, [sp, #24]
 800a432:	aa14      	add	r2, sp, #80	@ 0x50
 800a434:	9205      	str	r2, [sp, #20]
 800a436:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a438:	a90a      	add	r1, sp, #40	@ 0x28
 800a43a:	9204      	str	r2, [sp, #16]
 800a43c:	aa13      	add	r2, sp, #76	@ 0x4c
 800a43e:	9203      	str	r2, [sp, #12]
 800a440:	2223      	movs	r2, #35	@ 0x23
 800a442:	1852      	adds	r2, r2, r1
 800a444:	9202      	str	r2, [sp, #8]
 800a446:	9301      	str	r3, [sp, #4]
 800a448:	686b      	ldr	r3, [r5, #4]
 800a44a:	0032      	movs	r2, r6
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a450:	003b      	movs	r3, r7
 800a452:	f7ff fec3 	bl	800a1dc <__cvt>
 800a456:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a458:	0007      	movs	r7, r0
 800a45a:	2c47      	cmp	r4, #71	@ 0x47
 800a45c:	d12d      	bne.n	800a4ba <_printf_float+0x192>
 800a45e:	1cd3      	adds	r3, r2, #3
 800a460:	db02      	blt.n	800a468 <_printf_float+0x140>
 800a462:	686b      	ldr	r3, [r5, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	dd48      	ble.n	800a4fa <_printf_float+0x1d2>
 800a468:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a46a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a46c:	3b02      	subs	r3, #2
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	930c      	str	r3, [sp, #48]	@ 0x30
 800a472:	0028      	movs	r0, r5
 800a474:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a476:	3901      	subs	r1, #1
 800a478:	3050      	adds	r0, #80	@ 0x50
 800a47a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a47c:	f7ff ff14 	bl	800a2a8 <__exponent>
 800a480:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a482:	0004      	movs	r4, r0
 800a484:	1813      	adds	r3, r2, r0
 800a486:	612b      	str	r3, [r5, #16]
 800a488:	2a01      	cmp	r2, #1
 800a48a:	dc02      	bgt.n	800a492 <_printf_float+0x16a>
 800a48c:	682a      	ldr	r2, [r5, #0]
 800a48e:	07d2      	lsls	r2, r2, #31
 800a490:	d501      	bpl.n	800a496 <_printf_float+0x16e>
 800a492:	3301      	adds	r3, #1
 800a494:	612b      	str	r3, [r5, #16]
 800a496:	2323      	movs	r3, #35	@ 0x23
 800a498:	aa0a      	add	r2, sp, #40	@ 0x28
 800a49a:	189b      	adds	r3, r3, r2
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d100      	bne.n	800a4a4 <_printf_float+0x17c>
 800a4a2:	e792      	b.n	800a3ca <_printf_float+0xa2>
 800a4a4:	002b      	movs	r3, r5
 800a4a6:	222d      	movs	r2, #45	@ 0x2d
 800a4a8:	3343      	adds	r3, #67	@ 0x43
 800a4aa:	701a      	strb	r2, [r3, #0]
 800a4ac:	e78d      	b.n	800a3ca <_printf_float+0xa2>
 800a4ae:	2c47      	cmp	r4, #71	@ 0x47
 800a4b0:	d1b8      	bne.n	800a424 <_printf_float+0xfc>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1b6      	bne.n	800a424 <_printf_float+0xfc>
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	e7b3      	b.n	800a422 <_printf_float+0xfa>
 800a4ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4bc:	0011      	movs	r1, r2
 800a4be:	2b65      	cmp	r3, #101	@ 0x65
 800a4c0:	d9d7      	bls.n	800a472 <_printf_float+0x14a>
 800a4c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4c4:	2b66      	cmp	r3, #102	@ 0x66
 800a4c6:	d11a      	bne.n	800a4fe <_printf_float+0x1d6>
 800a4c8:	686b      	ldr	r3, [r5, #4]
 800a4ca:	2a00      	cmp	r2, #0
 800a4cc:	dd09      	ble.n	800a4e2 <_printf_float+0x1ba>
 800a4ce:	612a      	str	r2, [r5, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <_printf_float+0x1b2>
 800a4d4:	6829      	ldr	r1, [r5, #0]
 800a4d6:	07c9      	lsls	r1, r1, #31
 800a4d8:	d50b      	bpl.n	800a4f2 <_printf_float+0x1ca>
 800a4da:	3301      	adds	r3, #1
 800a4dc:	189b      	adds	r3, r3, r2
 800a4de:	612b      	str	r3, [r5, #16]
 800a4e0:	e007      	b.n	800a4f2 <_printf_float+0x1ca>
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d103      	bne.n	800a4ee <_printf_float+0x1c6>
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	6829      	ldr	r1, [r5, #0]
 800a4ea:	4211      	tst	r1, r2
 800a4ec:	d000      	beq.n	800a4f0 <_printf_float+0x1c8>
 800a4ee:	1c9a      	adds	r2, r3, #2
 800a4f0:	612a      	str	r2, [r5, #16]
 800a4f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a4f4:	2400      	movs	r4, #0
 800a4f6:	65ab      	str	r3, [r5, #88]	@ 0x58
 800a4f8:	e7cd      	b.n	800a496 <_printf_float+0x16e>
 800a4fa:	2367      	movs	r3, #103	@ 0x67
 800a4fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a500:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a502:	4299      	cmp	r1, r3
 800a504:	db06      	blt.n	800a514 <_printf_float+0x1ec>
 800a506:	682b      	ldr	r3, [r5, #0]
 800a508:	6129      	str	r1, [r5, #16]
 800a50a:	07db      	lsls	r3, r3, #31
 800a50c:	d5f1      	bpl.n	800a4f2 <_printf_float+0x1ca>
 800a50e:	3101      	adds	r1, #1
 800a510:	6129      	str	r1, [r5, #16]
 800a512:	e7ee      	b.n	800a4f2 <_printf_float+0x1ca>
 800a514:	2201      	movs	r2, #1
 800a516:	2900      	cmp	r1, #0
 800a518:	dce0      	bgt.n	800a4dc <_printf_float+0x1b4>
 800a51a:	1892      	adds	r2, r2, r2
 800a51c:	1a52      	subs	r2, r2, r1
 800a51e:	e7dd      	b.n	800a4dc <_printf_float+0x1b4>
 800a520:	682a      	ldr	r2, [r5, #0]
 800a522:	0553      	lsls	r3, r2, #21
 800a524:	d408      	bmi.n	800a538 <_printf_float+0x210>
 800a526:	692b      	ldr	r3, [r5, #16]
 800a528:	003a      	movs	r2, r7
 800a52a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a52c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a52e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a530:	47a0      	blx	r4
 800a532:	3001      	adds	r0, #1
 800a534:	d129      	bne.n	800a58a <_printf_float+0x262>
 800a536:	e753      	b.n	800a3e0 <_printf_float+0xb8>
 800a538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a53a:	2b65      	cmp	r3, #101	@ 0x65
 800a53c:	d800      	bhi.n	800a540 <_printf_float+0x218>
 800a53e:	e0da      	b.n	800a6f6 <_printf_float+0x3ce>
 800a540:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a542:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a544:	2200      	movs	r2, #0
 800a546:	2300      	movs	r3, #0
 800a548:	f7f5 ff7e 	bl	8000448 <__aeabi_dcmpeq>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d033      	beq.n	800a5b8 <_printf_float+0x290>
 800a550:	2301      	movs	r3, #1
 800a552:	4a37      	ldr	r2, [pc, #220]	@ (800a630 <_printf_float+0x308>)
 800a554:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a558:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a55a:	47a0      	blx	r4
 800a55c:	3001      	adds	r0, #1
 800a55e:	d100      	bne.n	800a562 <_printf_float+0x23a>
 800a560:	e73e      	b.n	800a3e0 <_printf_float+0xb8>
 800a562:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a564:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a566:	42b3      	cmp	r3, r6
 800a568:	db02      	blt.n	800a570 <_printf_float+0x248>
 800a56a:	682b      	ldr	r3, [r5, #0]
 800a56c:	07db      	lsls	r3, r3, #31
 800a56e:	d50c      	bpl.n	800a58a <_printf_float+0x262>
 800a570:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a572:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a574:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a576:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a578:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a57a:	47a0      	blx	r4
 800a57c:	2400      	movs	r4, #0
 800a57e:	3001      	adds	r0, #1
 800a580:	d100      	bne.n	800a584 <_printf_float+0x25c>
 800a582:	e72d      	b.n	800a3e0 <_printf_float+0xb8>
 800a584:	1e73      	subs	r3, r6, #1
 800a586:	42a3      	cmp	r3, r4
 800a588:	dc0a      	bgt.n	800a5a0 <_printf_float+0x278>
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	079b      	lsls	r3, r3, #30
 800a58e:	d500      	bpl.n	800a592 <_printf_float+0x26a>
 800a590:	e105      	b.n	800a79e <_printf_float+0x476>
 800a592:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a594:	68e8      	ldr	r0, [r5, #12]
 800a596:	4298      	cmp	r0, r3
 800a598:	db00      	blt.n	800a59c <_printf_float+0x274>
 800a59a:	e723      	b.n	800a3e4 <_printf_float+0xbc>
 800a59c:	0018      	movs	r0, r3
 800a59e:	e721      	b.n	800a3e4 <_printf_float+0xbc>
 800a5a0:	002a      	movs	r2, r5
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5a8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a5aa:	321a      	adds	r2, #26
 800a5ac:	47b8      	blx	r7
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	d100      	bne.n	800a5b4 <_printf_float+0x28c>
 800a5b2:	e715      	b.n	800a3e0 <_printf_float+0xb8>
 800a5b4:	3401      	adds	r4, #1
 800a5b6:	e7e5      	b.n	800a584 <_printf_float+0x25c>
 800a5b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	dc3a      	bgt.n	800a634 <_printf_float+0x30c>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	4a1b      	ldr	r2, [pc, #108]	@ (800a630 <_printf_float+0x308>)
 800a5c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a5c8:	47a0      	blx	r4
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d100      	bne.n	800a5d0 <_printf_float+0x2a8>
 800a5ce:	e707      	b.n	800a3e0 <_printf_float+0xb8>
 800a5d0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a5d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5d4:	4333      	orrs	r3, r6
 800a5d6:	d102      	bne.n	800a5de <_printf_float+0x2b6>
 800a5d8:	682b      	ldr	r3, [r5, #0]
 800a5da:	07db      	lsls	r3, r3, #31
 800a5dc:	d5d5      	bpl.n	800a58a <_printf_float+0x262>
 800a5de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a5e8:	47a0      	blx	r4
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	d100      	bne.n	800a5f2 <_printf_float+0x2ca>
 800a5f0:	e6f6      	b.n	800a3e0 <_printf_float+0xb8>
 800a5f2:	930c      	str	r3, [sp, #48]	@ 0x30
 800a5f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a5f8:	425b      	negs	r3, r3
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	dc01      	bgt.n	800a602 <_printf_float+0x2da>
 800a5fe:	0033      	movs	r3, r6
 800a600:	e792      	b.n	800a528 <_printf_float+0x200>
 800a602:	002a      	movs	r2, r5
 800a604:	2301      	movs	r3, #1
 800a606:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a608:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a60a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a60c:	321a      	adds	r2, #26
 800a60e:	47a0      	blx	r4
 800a610:	3001      	adds	r0, #1
 800a612:	d100      	bne.n	800a616 <_printf_float+0x2ee>
 800a614:	e6e4      	b.n	800a3e0 <_printf_float+0xb8>
 800a616:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a618:	3301      	adds	r3, #1
 800a61a:	e7ea      	b.n	800a5f2 <_printf_float+0x2ca>
 800a61c:	7fefffff 	.word	0x7fefffff
 800a620:	0800edf4 	.word	0x0800edf4
 800a624:	0800edf8 	.word	0x0800edf8
 800a628:	0800edfc 	.word	0x0800edfc
 800a62c:	0800ee00 	.word	0x0800ee00
 800a630:	0800ee04 	.word	0x0800ee04
 800a634:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a636:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a638:	930c      	str	r3, [sp, #48]	@ 0x30
 800a63a:	429e      	cmp	r6, r3
 800a63c:	dd00      	ble.n	800a640 <_printf_float+0x318>
 800a63e:	001e      	movs	r6, r3
 800a640:	2e00      	cmp	r6, #0
 800a642:	dc31      	bgt.n	800a6a8 <_printf_float+0x380>
 800a644:	43f3      	mvns	r3, r6
 800a646:	2400      	movs	r4, #0
 800a648:	17db      	asrs	r3, r3, #31
 800a64a:	4033      	ands	r3, r6
 800a64c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a64e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a650:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a652:	1af3      	subs	r3, r6, r3
 800a654:	42a3      	cmp	r3, r4
 800a656:	dc30      	bgt.n	800a6ba <_printf_float+0x392>
 800a658:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a65a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a65c:	429a      	cmp	r2, r3
 800a65e:	dc38      	bgt.n	800a6d2 <_printf_float+0x3aa>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	07db      	lsls	r3, r3, #31
 800a664:	d435      	bmi.n	800a6d2 <_printf_float+0x3aa>
 800a666:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a668:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a66a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a66c:	1b9b      	subs	r3, r3, r6
 800a66e:	1b14      	subs	r4, r2, r4
 800a670:	429c      	cmp	r4, r3
 800a672:	dd00      	ble.n	800a676 <_printf_float+0x34e>
 800a674:	001c      	movs	r4, r3
 800a676:	2c00      	cmp	r4, #0
 800a678:	dc34      	bgt.n	800a6e4 <_printf_float+0x3bc>
 800a67a:	43e3      	mvns	r3, r4
 800a67c:	2600      	movs	r6, #0
 800a67e:	17db      	asrs	r3, r3, #31
 800a680:	401c      	ands	r4, r3
 800a682:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a684:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	1b1b      	subs	r3, r3, r4
 800a68a:	42b3      	cmp	r3, r6
 800a68c:	dc00      	bgt.n	800a690 <_printf_float+0x368>
 800a68e:	e77c      	b.n	800a58a <_printf_float+0x262>
 800a690:	002a      	movs	r2, r5
 800a692:	2301      	movs	r3, #1
 800a694:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a698:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a69a:	321a      	adds	r2, #26
 800a69c:	47b8      	blx	r7
 800a69e:	3001      	adds	r0, #1
 800a6a0:	d100      	bne.n	800a6a4 <_printf_float+0x37c>
 800a6a2:	e69d      	b.n	800a3e0 <_printf_float+0xb8>
 800a6a4:	3601      	adds	r6, #1
 800a6a6:	e7ec      	b.n	800a682 <_printf_float+0x35a>
 800a6a8:	0033      	movs	r3, r6
 800a6aa:	003a      	movs	r2, r7
 800a6ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a6b2:	47a0      	blx	r4
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d1c5      	bne.n	800a644 <_printf_float+0x31c>
 800a6b8:	e692      	b.n	800a3e0 <_printf_float+0xb8>
 800a6ba:	002a      	movs	r2, r5
 800a6bc:	2301      	movs	r3, #1
 800a6be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6c2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a6c4:	321a      	adds	r2, #26
 800a6c6:	47b0      	blx	r6
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	d100      	bne.n	800a6ce <_printf_float+0x3a6>
 800a6cc:	e688      	b.n	800a3e0 <_printf_float+0xb8>
 800a6ce:	3401      	adds	r4, #1
 800a6d0:	e7bd      	b.n	800a64e <_printf_float+0x326>
 800a6d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a6dc:	47a0      	blx	r4
 800a6de:	3001      	adds	r0, #1
 800a6e0:	d1c1      	bne.n	800a666 <_printf_float+0x33e>
 800a6e2:	e67d      	b.n	800a3e0 <_printf_float+0xb8>
 800a6e4:	19ba      	adds	r2, r7, r6
 800a6e6:	0023      	movs	r3, r4
 800a6e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a6ee:	47b0      	blx	r6
 800a6f0:	3001      	adds	r0, #1
 800a6f2:	d1c2      	bne.n	800a67a <_printf_float+0x352>
 800a6f4:	e674      	b.n	800a3e0 <_printf_float+0xb8>
 800a6f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a6f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	dc02      	bgt.n	800a704 <_printf_float+0x3dc>
 800a6fe:	2301      	movs	r3, #1
 800a700:	421a      	tst	r2, r3
 800a702:	d039      	beq.n	800a778 <_printf_float+0x450>
 800a704:	2301      	movs	r3, #1
 800a706:	003a      	movs	r2, r7
 800a708:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a70a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a70c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a70e:	47b0      	blx	r6
 800a710:	3001      	adds	r0, #1
 800a712:	d100      	bne.n	800a716 <_printf_float+0x3ee>
 800a714:	e664      	b.n	800a3e0 <_printf_float+0xb8>
 800a716:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a718:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a71a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a71c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a71e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a720:	47b0      	blx	r6
 800a722:	3001      	adds	r0, #1
 800a724:	d100      	bne.n	800a728 <_printf_float+0x400>
 800a726:	e65b      	b.n	800a3e0 <_printf_float+0xb8>
 800a728:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a72a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a72c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a72e:	2200      	movs	r2, #0
 800a730:	3b01      	subs	r3, #1
 800a732:	930c      	str	r3, [sp, #48]	@ 0x30
 800a734:	2300      	movs	r3, #0
 800a736:	f7f5 fe87 	bl	8000448 <__aeabi_dcmpeq>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d11a      	bne.n	800a774 <_printf_float+0x44c>
 800a73e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a740:	1c7a      	adds	r2, r7, #1
 800a742:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a744:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a746:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a748:	47b0      	blx	r6
 800a74a:	3001      	adds	r0, #1
 800a74c:	d10e      	bne.n	800a76c <_printf_float+0x444>
 800a74e:	e647      	b.n	800a3e0 <_printf_float+0xb8>
 800a750:	002a      	movs	r2, r5
 800a752:	2301      	movs	r3, #1
 800a754:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a758:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a75a:	321a      	adds	r2, #26
 800a75c:	47b8      	blx	r7
 800a75e:	3001      	adds	r0, #1
 800a760:	d100      	bne.n	800a764 <_printf_float+0x43c>
 800a762:	e63d      	b.n	800a3e0 <_printf_float+0xb8>
 800a764:	3601      	adds	r6, #1
 800a766:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a768:	429e      	cmp	r6, r3
 800a76a:	dbf1      	blt.n	800a750 <_printf_float+0x428>
 800a76c:	002a      	movs	r2, r5
 800a76e:	0023      	movs	r3, r4
 800a770:	3250      	adds	r2, #80	@ 0x50
 800a772:	e6da      	b.n	800a52a <_printf_float+0x202>
 800a774:	2600      	movs	r6, #0
 800a776:	e7f6      	b.n	800a766 <_printf_float+0x43e>
 800a778:	003a      	movs	r2, r7
 800a77a:	e7e2      	b.n	800a742 <_printf_float+0x41a>
 800a77c:	002a      	movs	r2, r5
 800a77e:	2301      	movs	r3, #1
 800a780:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a784:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a786:	3219      	adds	r2, #25
 800a788:	47b0      	blx	r6
 800a78a:	3001      	adds	r0, #1
 800a78c:	d100      	bne.n	800a790 <_printf_float+0x468>
 800a78e:	e627      	b.n	800a3e0 <_printf_float+0xb8>
 800a790:	3401      	adds	r4, #1
 800a792:	68eb      	ldr	r3, [r5, #12]
 800a794:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a796:	1a9b      	subs	r3, r3, r2
 800a798:	42a3      	cmp	r3, r4
 800a79a:	dcef      	bgt.n	800a77c <_printf_float+0x454>
 800a79c:	e6f9      	b.n	800a592 <_printf_float+0x26a>
 800a79e:	2400      	movs	r4, #0
 800a7a0:	e7f7      	b.n	800a792 <_printf_float+0x46a>
 800a7a2:	46c0      	nop			@ (mov r8, r8)

0800a7a4 <_printf_common>:
 800a7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7a6:	0016      	movs	r6, r2
 800a7a8:	9301      	str	r3, [sp, #4]
 800a7aa:	688a      	ldr	r2, [r1, #8]
 800a7ac:	690b      	ldr	r3, [r1, #16]
 800a7ae:	000c      	movs	r4, r1
 800a7b0:	9000      	str	r0, [sp, #0]
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	da00      	bge.n	800a7b8 <_printf_common+0x14>
 800a7b6:	0013      	movs	r3, r2
 800a7b8:	0022      	movs	r2, r4
 800a7ba:	6033      	str	r3, [r6, #0]
 800a7bc:	3243      	adds	r2, #67	@ 0x43
 800a7be:	7812      	ldrb	r2, [r2, #0]
 800a7c0:	2a00      	cmp	r2, #0
 800a7c2:	d001      	beq.n	800a7c8 <_printf_common+0x24>
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	6033      	str	r3, [r6, #0]
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	069b      	lsls	r3, r3, #26
 800a7cc:	d502      	bpl.n	800a7d4 <_printf_common+0x30>
 800a7ce:	6833      	ldr	r3, [r6, #0]
 800a7d0:	3302      	adds	r3, #2
 800a7d2:	6033      	str	r3, [r6, #0]
 800a7d4:	6822      	ldr	r2, [r4, #0]
 800a7d6:	2306      	movs	r3, #6
 800a7d8:	0015      	movs	r5, r2
 800a7da:	401d      	ands	r5, r3
 800a7dc:	421a      	tst	r2, r3
 800a7de:	d027      	beq.n	800a830 <_printf_common+0x8c>
 800a7e0:	0023      	movs	r3, r4
 800a7e2:	3343      	adds	r3, #67	@ 0x43
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	1e5a      	subs	r2, r3, #1
 800a7e8:	4193      	sbcs	r3, r2
 800a7ea:	6822      	ldr	r2, [r4, #0]
 800a7ec:	0692      	lsls	r2, r2, #26
 800a7ee:	d430      	bmi.n	800a852 <_printf_common+0xae>
 800a7f0:	0022      	movs	r2, r4
 800a7f2:	9901      	ldr	r1, [sp, #4]
 800a7f4:	9800      	ldr	r0, [sp, #0]
 800a7f6:	9d08      	ldr	r5, [sp, #32]
 800a7f8:	3243      	adds	r2, #67	@ 0x43
 800a7fa:	47a8      	blx	r5
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d025      	beq.n	800a84c <_printf_common+0xa8>
 800a800:	2206      	movs	r2, #6
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	2500      	movs	r5, #0
 800a806:	4013      	ands	r3, r2
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d105      	bne.n	800a818 <_printf_common+0x74>
 800a80c:	6833      	ldr	r3, [r6, #0]
 800a80e:	68e5      	ldr	r5, [r4, #12]
 800a810:	1aed      	subs	r5, r5, r3
 800a812:	43eb      	mvns	r3, r5
 800a814:	17db      	asrs	r3, r3, #31
 800a816:	401d      	ands	r5, r3
 800a818:	68a3      	ldr	r3, [r4, #8]
 800a81a:	6922      	ldr	r2, [r4, #16]
 800a81c:	4293      	cmp	r3, r2
 800a81e:	dd01      	ble.n	800a824 <_printf_common+0x80>
 800a820:	1a9b      	subs	r3, r3, r2
 800a822:	18ed      	adds	r5, r5, r3
 800a824:	2600      	movs	r6, #0
 800a826:	42b5      	cmp	r5, r6
 800a828:	d120      	bne.n	800a86c <_printf_common+0xc8>
 800a82a:	2000      	movs	r0, #0
 800a82c:	e010      	b.n	800a850 <_printf_common+0xac>
 800a82e:	3501      	adds	r5, #1
 800a830:	68e3      	ldr	r3, [r4, #12]
 800a832:	6832      	ldr	r2, [r6, #0]
 800a834:	1a9b      	subs	r3, r3, r2
 800a836:	42ab      	cmp	r3, r5
 800a838:	ddd2      	ble.n	800a7e0 <_printf_common+0x3c>
 800a83a:	0022      	movs	r2, r4
 800a83c:	2301      	movs	r3, #1
 800a83e:	9901      	ldr	r1, [sp, #4]
 800a840:	9800      	ldr	r0, [sp, #0]
 800a842:	9f08      	ldr	r7, [sp, #32]
 800a844:	3219      	adds	r2, #25
 800a846:	47b8      	blx	r7
 800a848:	3001      	adds	r0, #1
 800a84a:	d1f0      	bne.n	800a82e <_printf_common+0x8a>
 800a84c:	2001      	movs	r0, #1
 800a84e:	4240      	negs	r0, r0
 800a850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a852:	2030      	movs	r0, #48	@ 0x30
 800a854:	18e1      	adds	r1, r4, r3
 800a856:	3143      	adds	r1, #67	@ 0x43
 800a858:	7008      	strb	r0, [r1, #0]
 800a85a:	0021      	movs	r1, r4
 800a85c:	1c5a      	adds	r2, r3, #1
 800a85e:	3145      	adds	r1, #69	@ 0x45
 800a860:	7809      	ldrb	r1, [r1, #0]
 800a862:	18a2      	adds	r2, r4, r2
 800a864:	3243      	adds	r2, #67	@ 0x43
 800a866:	3302      	adds	r3, #2
 800a868:	7011      	strb	r1, [r2, #0]
 800a86a:	e7c1      	b.n	800a7f0 <_printf_common+0x4c>
 800a86c:	0022      	movs	r2, r4
 800a86e:	2301      	movs	r3, #1
 800a870:	9901      	ldr	r1, [sp, #4]
 800a872:	9800      	ldr	r0, [sp, #0]
 800a874:	9f08      	ldr	r7, [sp, #32]
 800a876:	321a      	adds	r2, #26
 800a878:	47b8      	blx	r7
 800a87a:	3001      	adds	r0, #1
 800a87c:	d0e6      	beq.n	800a84c <_printf_common+0xa8>
 800a87e:	3601      	adds	r6, #1
 800a880:	e7d1      	b.n	800a826 <_printf_common+0x82>
	...

0800a884 <_printf_i>:
 800a884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a886:	b08b      	sub	sp, #44	@ 0x2c
 800a888:	9206      	str	r2, [sp, #24]
 800a88a:	000a      	movs	r2, r1
 800a88c:	3243      	adds	r2, #67	@ 0x43
 800a88e:	9307      	str	r3, [sp, #28]
 800a890:	9005      	str	r0, [sp, #20]
 800a892:	9203      	str	r2, [sp, #12]
 800a894:	7e0a      	ldrb	r2, [r1, #24]
 800a896:	000c      	movs	r4, r1
 800a898:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a89a:	2a78      	cmp	r2, #120	@ 0x78
 800a89c:	d809      	bhi.n	800a8b2 <_printf_i+0x2e>
 800a89e:	2a62      	cmp	r2, #98	@ 0x62
 800a8a0:	d80b      	bhi.n	800a8ba <_printf_i+0x36>
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	d100      	bne.n	800a8a8 <_printf_i+0x24>
 800a8a6:	e0bc      	b.n	800aa22 <_printf_i+0x19e>
 800a8a8:	497b      	ldr	r1, [pc, #492]	@ (800aa98 <_printf_i+0x214>)
 800a8aa:	9104      	str	r1, [sp, #16]
 800a8ac:	2a58      	cmp	r2, #88	@ 0x58
 800a8ae:	d100      	bne.n	800a8b2 <_printf_i+0x2e>
 800a8b0:	e090      	b.n	800a9d4 <_printf_i+0x150>
 800a8b2:	0025      	movs	r5, r4
 800a8b4:	3542      	adds	r5, #66	@ 0x42
 800a8b6:	702a      	strb	r2, [r5, #0]
 800a8b8:	e022      	b.n	800a900 <_printf_i+0x7c>
 800a8ba:	0010      	movs	r0, r2
 800a8bc:	3863      	subs	r0, #99	@ 0x63
 800a8be:	2815      	cmp	r0, #21
 800a8c0:	d8f7      	bhi.n	800a8b2 <_printf_i+0x2e>
 800a8c2:	f7f5 fc31 	bl	8000128 <__gnu_thumb1_case_shi>
 800a8c6:	0016      	.short	0x0016
 800a8c8:	fff6001f 	.word	0xfff6001f
 800a8cc:	fff6fff6 	.word	0xfff6fff6
 800a8d0:	001ffff6 	.word	0x001ffff6
 800a8d4:	fff6fff6 	.word	0xfff6fff6
 800a8d8:	fff6fff6 	.word	0xfff6fff6
 800a8dc:	003600a1 	.word	0x003600a1
 800a8e0:	fff60080 	.word	0xfff60080
 800a8e4:	00b2fff6 	.word	0x00b2fff6
 800a8e8:	0036fff6 	.word	0x0036fff6
 800a8ec:	fff6fff6 	.word	0xfff6fff6
 800a8f0:	0084      	.short	0x0084
 800a8f2:	0025      	movs	r5, r4
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	3542      	adds	r5, #66	@ 0x42
 800a8f8:	1d11      	adds	r1, r2, #4
 800a8fa:	6019      	str	r1, [r3, #0]
 800a8fc:	6813      	ldr	r3, [r2, #0]
 800a8fe:	702b      	strb	r3, [r5, #0]
 800a900:	2301      	movs	r3, #1
 800a902:	e0a0      	b.n	800aa46 <_printf_i+0x1c2>
 800a904:	6818      	ldr	r0, [r3, #0]
 800a906:	6809      	ldr	r1, [r1, #0]
 800a908:	1d02      	adds	r2, r0, #4
 800a90a:	060d      	lsls	r5, r1, #24
 800a90c:	d50b      	bpl.n	800a926 <_printf_i+0xa2>
 800a90e:	6806      	ldr	r6, [r0, #0]
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	2e00      	cmp	r6, #0
 800a914:	da03      	bge.n	800a91e <_printf_i+0x9a>
 800a916:	232d      	movs	r3, #45	@ 0x2d
 800a918:	9a03      	ldr	r2, [sp, #12]
 800a91a:	4276      	negs	r6, r6
 800a91c:	7013      	strb	r3, [r2, #0]
 800a91e:	4b5e      	ldr	r3, [pc, #376]	@ (800aa98 <_printf_i+0x214>)
 800a920:	270a      	movs	r7, #10
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	e018      	b.n	800a958 <_printf_i+0xd4>
 800a926:	6806      	ldr	r6, [r0, #0]
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	0649      	lsls	r1, r1, #25
 800a92c:	d5f1      	bpl.n	800a912 <_printf_i+0x8e>
 800a92e:	b236      	sxth	r6, r6
 800a930:	e7ef      	b.n	800a912 <_printf_i+0x8e>
 800a932:	6808      	ldr	r0, [r1, #0]
 800a934:	6819      	ldr	r1, [r3, #0]
 800a936:	c940      	ldmia	r1!, {r6}
 800a938:	0605      	lsls	r5, r0, #24
 800a93a:	d402      	bmi.n	800a942 <_printf_i+0xbe>
 800a93c:	0640      	lsls	r0, r0, #25
 800a93e:	d500      	bpl.n	800a942 <_printf_i+0xbe>
 800a940:	b2b6      	uxth	r6, r6
 800a942:	6019      	str	r1, [r3, #0]
 800a944:	4b54      	ldr	r3, [pc, #336]	@ (800aa98 <_printf_i+0x214>)
 800a946:	270a      	movs	r7, #10
 800a948:	9304      	str	r3, [sp, #16]
 800a94a:	2a6f      	cmp	r2, #111	@ 0x6f
 800a94c:	d100      	bne.n	800a950 <_printf_i+0xcc>
 800a94e:	3f02      	subs	r7, #2
 800a950:	0023      	movs	r3, r4
 800a952:	2200      	movs	r2, #0
 800a954:	3343      	adds	r3, #67	@ 0x43
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	6863      	ldr	r3, [r4, #4]
 800a95a:	60a3      	str	r3, [r4, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	db03      	blt.n	800a968 <_printf_i+0xe4>
 800a960:	2104      	movs	r1, #4
 800a962:	6822      	ldr	r2, [r4, #0]
 800a964:	438a      	bics	r2, r1
 800a966:	6022      	str	r2, [r4, #0]
 800a968:	2e00      	cmp	r6, #0
 800a96a:	d102      	bne.n	800a972 <_printf_i+0xee>
 800a96c:	9d03      	ldr	r5, [sp, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00c      	beq.n	800a98c <_printf_i+0x108>
 800a972:	9d03      	ldr	r5, [sp, #12]
 800a974:	0030      	movs	r0, r6
 800a976:	0039      	movs	r1, r7
 800a978:	f7f5 fc66 	bl	8000248 <__aeabi_uidivmod>
 800a97c:	9b04      	ldr	r3, [sp, #16]
 800a97e:	3d01      	subs	r5, #1
 800a980:	5c5b      	ldrb	r3, [r3, r1]
 800a982:	702b      	strb	r3, [r5, #0]
 800a984:	0033      	movs	r3, r6
 800a986:	0006      	movs	r6, r0
 800a988:	429f      	cmp	r7, r3
 800a98a:	d9f3      	bls.n	800a974 <_printf_i+0xf0>
 800a98c:	2f08      	cmp	r7, #8
 800a98e:	d109      	bne.n	800a9a4 <_printf_i+0x120>
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	07db      	lsls	r3, r3, #31
 800a994:	d506      	bpl.n	800a9a4 <_printf_i+0x120>
 800a996:	6862      	ldr	r2, [r4, #4]
 800a998:	6923      	ldr	r3, [r4, #16]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	dc02      	bgt.n	800a9a4 <_printf_i+0x120>
 800a99e:	2330      	movs	r3, #48	@ 0x30
 800a9a0:	3d01      	subs	r5, #1
 800a9a2:	702b      	strb	r3, [r5, #0]
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	1b5b      	subs	r3, r3, r5
 800a9a8:	6123      	str	r3, [r4, #16]
 800a9aa:	9b07      	ldr	r3, [sp, #28]
 800a9ac:	0021      	movs	r1, r4
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	9805      	ldr	r0, [sp, #20]
 800a9b2:	9b06      	ldr	r3, [sp, #24]
 800a9b4:	aa09      	add	r2, sp, #36	@ 0x24
 800a9b6:	f7ff fef5 	bl	800a7a4 <_printf_common>
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	d148      	bne.n	800aa50 <_printf_i+0x1cc>
 800a9be:	2001      	movs	r0, #1
 800a9c0:	4240      	negs	r0, r0
 800a9c2:	b00b      	add	sp, #44	@ 0x2c
 800a9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c6:	2220      	movs	r2, #32
 800a9c8:	6809      	ldr	r1, [r1, #0]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	6022      	str	r2, [r4, #0]
 800a9ce:	2278      	movs	r2, #120	@ 0x78
 800a9d0:	4932      	ldr	r1, [pc, #200]	@ (800aa9c <_printf_i+0x218>)
 800a9d2:	9104      	str	r1, [sp, #16]
 800a9d4:	0021      	movs	r1, r4
 800a9d6:	3145      	adds	r1, #69	@ 0x45
 800a9d8:	700a      	strb	r2, [r1, #0]
 800a9da:	6819      	ldr	r1, [r3, #0]
 800a9dc:	6822      	ldr	r2, [r4, #0]
 800a9de:	c940      	ldmia	r1!, {r6}
 800a9e0:	0610      	lsls	r0, r2, #24
 800a9e2:	d402      	bmi.n	800a9ea <_printf_i+0x166>
 800a9e4:	0650      	lsls	r0, r2, #25
 800a9e6:	d500      	bpl.n	800a9ea <_printf_i+0x166>
 800a9e8:	b2b6      	uxth	r6, r6
 800a9ea:	6019      	str	r1, [r3, #0]
 800a9ec:	07d3      	lsls	r3, r2, #31
 800a9ee:	d502      	bpl.n	800a9f6 <_printf_i+0x172>
 800a9f0:	2320      	movs	r3, #32
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	2e00      	cmp	r6, #0
 800a9f8:	d001      	beq.n	800a9fe <_printf_i+0x17a>
 800a9fa:	2710      	movs	r7, #16
 800a9fc:	e7a8      	b.n	800a950 <_printf_i+0xcc>
 800a9fe:	2220      	movs	r2, #32
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	4393      	bics	r3, r2
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	e7f8      	b.n	800a9fa <_printf_i+0x176>
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	680d      	ldr	r5, [r1, #0]
 800aa0c:	1d10      	adds	r0, r2, #4
 800aa0e:	6949      	ldr	r1, [r1, #20]
 800aa10:	6018      	str	r0, [r3, #0]
 800aa12:	6813      	ldr	r3, [r2, #0]
 800aa14:	062e      	lsls	r6, r5, #24
 800aa16:	d501      	bpl.n	800aa1c <_printf_i+0x198>
 800aa18:	6019      	str	r1, [r3, #0]
 800aa1a:	e002      	b.n	800aa22 <_printf_i+0x19e>
 800aa1c:	066d      	lsls	r5, r5, #25
 800aa1e:	d5fb      	bpl.n	800aa18 <_printf_i+0x194>
 800aa20:	8019      	strh	r1, [r3, #0]
 800aa22:	2300      	movs	r3, #0
 800aa24:	9d03      	ldr	r5, [sp, #12]
 800aa26:	6123      	str	r3, [r4, #16]
 800aa28:	e7bf      	b.n	800a9aa <_printf_i+0x126>
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	1d11      	adds	r1, r2, #4
 800aa2e:	6019      	str	r1, [r3, #0]
 800aa30:	6815      	ldr	r5, [r2, #0]
 800aa32:	2100      	movs	r1, #0
 800aa34:	0028      	movs	r0, r5
 800aa36:	6862      	ldr	r2, [r4, #4]
 800aa38:	f000 fbf7 	bl	800b22a <memchr>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d001      	beq.n	800aa44 <_printf_i+0x1c0>
 800aa40:	1b40      	subs	r0, r0, r5
 800aa42:	6060      	str	r0, [r4, #4]
 800aa44:	6863      	ldr	r3, [r4, #4]
 800aa46:	6123      	str	r3, [r4, #16]
 800aa48:	2300      	movs	r3, #0
 800aa4a:	9a03      	ldr	r2, [sp, #12]
 800aa4c:	7013      	strb	r3, [r2, #0]
 800aa4e:	e7ac      	b.n	800a9aa <_printf_i+0x126>
 800aa50:	002a      	movs	r2, r5
 800aa52:	6923      	ldr	r3, [r4, #16]
 800aa54:	9906      	ldr	r1, [sp, #24]
 800aa56:	9805      	ldr	r0, [sp, #20]
 800aa58:	9d07      	ldr	r5, [sp, #28]
 800aa5a:	47a8      	blx	r5
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d0ae      	beq.n	800a9be <_printf_i+0x13a>
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	079b      	lsls	r3, r3, #30
 800aa64:	d415      	bmi.n	800aa92 <_printf_i+0x20e>
 800aa66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa68:	68e0      	ldr	r0, [r4, #12]
 800aa6a:	4298      	cmp	r0, r3
 800aa6c:	daa9      	bge.n	800a9c2 <_printf_i+0x13e>
 800aa6e:	0018      	movs	r0, r3
 800aa70:	e7a7      	b.n	800a9c2 <_printf_i+0x13e>
 800aa72:	0022      	movs	r2, r4
 800aa74:	2301      	movs	r3, #1
 800aa76:	9906      	ldr	r1, [sp, #24]
 800aa78:	9805      	ldr	r0, [sp, #20]
 800aa7a:	9e07      	ldr	r6, [sp, #28]
 800aa7c:	3219      	adds	r2, #25
 800aa7e:	47b0      	blx	r6
 800aa80:	3001      	adds	r0, #1
 800aa82:	d09c      	beq.n	800a9be <_printf_i+0x13a>
 800aa84:	3501      	adds	r5, #1
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa8a:	1a9b      	subs	r3, r3, r2
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	dcf0      	bgt.n	800aa72 <_printf_i+0x1ee>
 800aa90:	e7e9      	b.n	800aa66 <_printf_i+0x1e2>
 800aa92:	2500      	movs	r5, #0
 800aa94:	e7f7      	b.n	800aa86 <_printf_i+0x202>
 800aa96:	46c0      	nop			@ (mov r8, r8)
 800aa98:	0800ee06 	.word	0x0800ee06
 800aa9c:	0800ee17 	.word	0x0800ee17

0800aaa0 <_scanf_float>:
 800aaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa2:	b08b      	sub	sp, #44	@ 0x2c
 800aaa4:	0016      	movs	r6, r2
 800aaa6:	9003      	str	r0, [sp, #12]
 800aaa8:	22ae      	movs	r2, #174	@ 0xae
 800aaaa:	2000      	movs	r0, #0
 800aaac:	9307      	str	r3, [sp, #28]
 800aaae:	688b      	ldr	r3, [r1, #8]
 800aab0:	000c      	movs	r4, r1
 800aab2:	1e59      	subs	r1, r3, #1
 800aab4:	0052      	lsls	r2, r2, #1
 800aab6:	9006      	str	r0, [sp, #24]
 800aab8:	4291      	cmp	r1, r2
 800aaba:	d905      	bls.n	800aac8 <_scanf_float+0x28>
 800aabc:	3b5e      	subs	r3, #94	@ 0x5e
 800aabe:	3bff      	subs	r3, #255	@ 0xff
 800aac0:	9306      	str	r3, [sp, #24]
 800aac2:	235e      	movs	r3, #94	@ 0x5e
 800aac4:	33ff      	adds	r3, #255	@ 0xff
 800aac6:	60a3      	str	r3, [r4, #8]
 800aac8:	23f0      	movs	r3, #240	@ 0xf0
 800aaca:	6822      	ldr	r2, [r4, #0]
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	4313      	orrs	r3, r2
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	0023      	movs	r3, r4
 800aad4:	2500      	movs	r5, #0
 800aad6:	331c      	adds	r3, #28
 800aad8:	001f      	movs	r7, r3
 800aada:	9304      	str	r3, [sp, #16]
 800aadc:	9502      	str	r5, [sp, #8]
 800aade:	9509      	str	r5, [sp, #36]	@ 0x24
 800aae0:	9508      	str	r5, [sp, #32]
 800aae2:	9501      	str	r5, [sp, #4]
 800aae4:	9505      	str	r5, [sp, #20]
 800aae6:	68a2      	ldr	r2, [r4, #8]
 800aae8:	2a00      	cmp	r2, #0
 800aaea:	d00a      	beq.n	800ab02 <_scanf_float+0x62>
 800aaec:	6833      	ldr	r3, [r6, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	2b4e      	cmp	r3, #78	@ 0x4e
 800aaf2:	d844      	bhi.n	800ab7e <_scanf_float+0xde>
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	2b40      	cmp	r3, #64	@ 0x40
 800aaf8:	d82c      	bhi.n	800ab54 <_scanf_float+0xb4>
 800aafa:	382b      	subs	r0, #43	@ 0x2b
 800aafc:	b2c1      	uxtb	r1, r0
 800aafe:	290e      	cmp	r1, #14
 800ab00:	d92a      	bls.n	800ab58 <_scanf_float+0xb8>
 800ab02:	9b01      	ldr	r3, [sp, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d003      	beq.n	800ab10 <_scanf_float+0x70>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	4aa6      	ldr	r2, [pc, #664]	@ (800ada4 <_scanf_float+0x304>)
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	6023      	str	r3, [r4, #0]
 800ab10:	9b02      	ldr	r3, [sp, #8]
 800ab12:	3b01      	subs	r3, #1
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d900      	bls.n	800ab1a <_scanf_float+0x7a>
 800ab18:	e0fe      	b.n	800ad18 <_scanf_float+0x278>
 800ab1a:	25be      	movs	r5, #190	@ 0xbe
 800ab1c:	006d      	lsls	r5, r5, #1
 800ab1e:	9b04      	ldr	r3, [sp, #16]
 800ab20:	429f      	cmp	r7, r3
 800ab22:	d900      	bls.n	800ab26 <_scanf_float+0x86>
 800ab24:	e0ee      	b.n	800ad04 <_scanf_float+0x264>
 800ab26:	2001      	movs	r0, #1
 800ab28:	b00b      	add	sp, #44	@ 0x2c
 800ab2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	3861      	subs	r0, #97	@ 0x61
 800ab30:	280d      	cmp	r0, #13
 800ab32:	d8e6      	bhi.n	800ab02 <_scanf_float+0x62>
 800ab34:	f7f5 faf8 	bl	8000128 <__gnu_thumb1_case_shi>
 800ab38:	ffe50089 	.word	0xffe50089
 800ab3c:	ffe5ffe5 	.word	0xffe5ffe5
 800ab40:	00a700bb 	.word	0x00a700bb
 800ab44:	ffe5ffe5 	.word	0xffe5ffe5
 800ab48:	ffe5008f 	.word	0xffe5008f
 800ab4c:	ffe5ffe5 	.word	0xffe5ffe5
 800ab50:	006bffe5 	.word	0x006bffe5
 800ab54:	3841      	subs	r0, #65	@ 0x41
 800ab56:	e7eb      	b.n	800ab30 <_scanf_float+0x90>
 800ab58:	280e      	cmp	r0, #14
 800ab5a:	d8d2      	bhi.n	800ab02 <_scanf_float+0x62>
 800ab5c:	f7f5 fae4 	bl	8000128 <__gnu_thumb1_case_shi>
 800ab60:	ffd1004f 	.word	0xffd1004f
 800ab64:	009d004f 	.word	0x009d004f
 800ab68:	0021ffd1 	.word	0x0021ffd1
 800ab6c:	00410041 	.word	0x00410041
 800ab70:	00410041 	.word	0x00410041
 800ab74:	00410041 	.word	0x00410041
 800ab78:	00410041 	.word	0x00410041
 800ab7c:	0041      	.short	0x0041
 800ab7e:	2b6e      	cmp	r3, #110	@ 0x6e
 800ab80:	d80a      	bhi.n	800ab98 <_scanf_float+0xf8>
 800ab82:	2b60      	cmp	r3, #96	@ 0x60
 800ab84:	d8d2      	bhi.n	800ab2c <_scanf_float+0x8c>
 800ab86:	2b54      	cmp	r3, #84	@ 0x54
 800ab88:	d100      	bne.n	800ab8c <_scanf_float+0xec>
 800ab8a:	e081      	b.n	800ac90 <_scanf_float+0x1f0>
 800ab8c:	2b59      	cmp	r3, #89	@ 0x59
 800ab8e:	d1b8      	bne.n	800ab02 <_scanf_float+0x62>
 800ab90:	2d07      	cmp	r5, #7
 800ab92:	d1b6      	bne.n	800ab02 <_scanf_float+0x62>
 800ab94:	2508      	movs	r5, #8
 800ab96:	e02f      	b.n	800abf8 <_scanf_float+0x158>
 800ab98:	2b74      	cmp	r3, #116	@ 0x74
 800ab9a:	d079      	beq.n	800ac90 <_scanf_float+0x1f0>
 800ab9c:	2b79      	cmp	r3, #121	@ 0x79
 800ab9e:	d0f7      	beq.n	800ab90 <_scanf_float+0xf0>
 800aba0:	e7af      	b.n	800ab02 <_scanf_float+0x62>
 800aba2:	6821      	ldr	r1, [r4, #0]
 800aba4:	05c8      	lsls	r0, r1, #23
 800aba6:	d51c      	bpl.n	800abe2 <_scanf_float+0x142>
 800aba8:	2380      	movs	r3, #128	@ 0x80
 800abaa:	4399      	bics	r1, r3
 800abac:	9b01      	ldr	r3, [sp, #4]
 800abae:	6021      	str	r1, [r4, #0]
 800abb0:	3301      	adds	r3, #1
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	9b06      	ldr	r3, [sp, #24]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <_scanf_float+0x122>
 800abba:	3b01      	subs	r3, #1
 800abbc:	3201      	adds	r2, #1
 800abbe:	9306      	str	r3, [sp, #24]
 800abc0:	60a2      	str	r2, [r4, #8]
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	3b01      	subs	r3, #1
 800abc6:	60a3      	str	r3, [r4, #8]
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	3301      	adds	r3, #1
 800abcc:	6123      	str	r3, [r4, #16]
 800abce:	6873      	ldr	r3, [r6, #4]
 800abd0:	3b01      	subs	r3, #1
 800abd2:	6073      	str	r3, [r6, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	dc00      	bgt.n	800abda <_scanf_float+0x13a>
 800abd8:	e08a      	b.n	800acf0 <_scanf_float+0x250>
 800abda:	6833      	ldr	r3, [r6, #0]
 800abdc:	3301      	adds	r3, #1
 800abde:	6033      	str	r3, [r6, #0]
 800abe0:	e781      	b.n	800aae6 <_scanf_float+0x46>
 800abe2:	9a02      	ldr	r2, [sp, #8]
 800abe4:	1951      	adds	r1, r2, r5
 800abe6:	2900      	cmp	r1, #0
 800abe8:	d000      	beq.n	800abec <_scanf_float+0x14c>
 800abea:	e78a      	b.n	800ab02 <_scanf_float+0x62>
 800abec:	000d      	movs	r5, r1
 800abee:	6822      	ldr	r2, [r4, #0]
 800abf0:	486d      	ldr	r0, [pc, #436]	@ (800ada8 <_scanf_float+0x308>)
 800abf2:	9102      	str	r1, [sp, #8]
 800abf4:	4002      	ands	r2, r0
 800abf6:	6022      	str	r2, [r4, #0]
 800abf8:	703b      	strb	r3, [r7, #0]
 800abfa:	3701      	adds	r7, #1
 800abfc:	e7e1      	b.n	800abc2 <_scanf_float+0x122>
 800abfe:	2180      	movs	r1, #128	@ 0x80
 800ac00:	6822      	ldr	r2, [r4, #0]
 800ac02:	420a      	tst	r2, r1
 800ac04:	d100      	bne.n	800ac08 <_scanf_float+0x168>
 800ac06:	e77c      	b.n	800ab02 <_scanf_float+0x62>
 800ac08:	438a      	bics	r2, r1
 800ac0a:	6022      	str	r2, [r4, #0]
 800ac0c:	e7f4      	b.n	800abf8 <_scanf_float+0x158>
 800ac0e:	9a02      	ldr	r2, [sp, #8]
 800ac10:	2a00      	cmp	r2, #0
 800ac12:	d10f      	bne.n	800ac34 <_scanf_float+0x194>
 800ac14:	9a01      	ldr	r2, [sp, #4]
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	d10f      	bne.n	800ac3a <_scanf_float+0x19a>
 800ac1a:	6822      	ldr	r2, [r4, #0]
 800ac1c:	21e0      	movs	r1, #224	@ 0xe0
 800ac1e:	0010      	movs	r0, r2
 800ac20:	00c9      	lsls	r1, r1, #3
 800ac22:	4008      	ands	r0, r1
 800ac24:	4288      	cmp	r0, r1
 800ac26:	d108      	bne.n	800ac3a <_scanf_float+0x19a>
 800ac28:	4960      	ldr	r1, [pc, #384]	@ (800adac <_scanf_float+0x30c>)
 800ac2a:	400a      	ands	r2, r1
 800ac2c:	6022      	str	r2, [r4, #0]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	9202      	str	r2, [sp, #8]
 800ac32:	e7e1      	b.n	800abf8 <_scanf_float+0x158>
 800ac34:	9a02      	ldr	r2, [sp, #8]
 800ac36:	2a02      	cmp	r2, #2
 800ac38:	d058      	beq.n	800acec <_scanf_float+0x24c>
 800ac3a:	2d01      	cmp	r5, #1
 800ac3c:	d002      	beq.n	800ac44 <_scanf_float+0x1a4>
 800ac3e:	2d04      	cmp	r5, #4
 800ac40:	d000      	beq.n	800ac44 <_scanf_float+0x1a4>
 800ac42:	e75e      	b.n	800ab02 <_scanf_float+0x62>
 800ac44:	3501      	adds	r5, #1
 800ac46:	b2ed      	uxtb	r5, r5
 800ac48:	e7d6      	b.n	800abf8 <_scanf_float+0x158>
 800ac4a:	9a02      	ldr	r2, [sp, #8]
 800ac4c:	2a01      	cmp	r2, #1
 800ac4e:	d000      	beq.n	800ac52 <_scanf_float+0x1b2>
 800ac50:	e757      	b.n	800ab02 <_scanf_float+0x62>
 800ac52:	2202      	movs	r2, #2
 800ac54:	e7ec      	b.n	800ac30 <_scanf_float+0x190>
 800ac56:	2d00      	cmp	r5, #0
 800ac58:	d110      	bne.n	800ac7c <_scanf_float+0x1dc>
 800ac5a:	9a01      	ldr	r2, [sp, #4]
 800ac5c:	2a00      	cmp	r2, #0
 800ac5e:	d000      	beq.n	800ac62 <_scanf_float+0x1c2>
 800ac60:	e752      	b.n	800ab08 <_scanf_float+0x68>
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	21e0      	movs	r1, #224	@ 0xe0
 800ac66:	0010      	movs	r0, r2
 800ac68:	00c9      	lsls	r1, r1, #3
 800ac6a:	4008      	ands	r0, r1
 800ac6c:	4288      	cmp	r0, r1
 800ac6e:	d000      	beq.n	800ac72 <_scanf_float+0x1d2>
 800ac70:	e11d      	b.n	800aeae <_scanf_float+0x40e>
 800ac72:	494e      	ldr	r1, [pc, #312]	@ (800adac <_scanf_float+0x30c>)
 800ac74:	3501      	adds	r5, #1
 800ac76:	400a      	ands	r2, r1
 800ac78:	6022      	str	r2, [r4, #0]
 800ac7a:	e7bd      	b.n	800abf8 <_scanf_float+0x158>
 800ac7c:	21fd      	movs	r1, #253	@ 0xfd
 800ac7e:	1eea      	subs	r2, r5, #3
 800ac80:	420a      	tst	r2, r1
 800ac82:	d0df      	beq.n	800ac44 <_scanf_float+0x1a4>
 800ac84:	e73d      	b.n	800ab02 <_scanf_float+0x62>
 800ac86:	2d02      	cmp	r5, #2
 800ac88:	d000      	beq.n	800ac8c <_scanf_float+0x1ec>
 800ac8a:	e73a      	b.n	800ab02 <_scanf_float+0x62>
 800ac8c:	2503      	movs	r5, #3
 800ac8e:	e7b3      	b.n	800abf8 <_scanf_float+0x158>
 800ac90:	2d06      	cmp	r5, #6
 800ac92:	d000      	beq.n	800ac96 <_scanf_float+0x1f6>
 800ac94:	e735      	b.n	800ab02 <_scanf_float+0x62>
 800ac96:	2507      	movs	r5, #7
 800ac98:	e7ae      	b.n	800abf8 <_scanf_float+0x158>
 800ac9a:	6822      	ldr	r2, [r4, #0]
 800ac9c:	0591      	lsls	r1, r2, #22
 800ac9e:	d400      	bmi.n	800aca2 <_scanf_float+0x202>
 800aca0:	e72f      	b.n	800ab02 <_scanf_float+0x62>
 800aca2:	4943      	ldr	r1, [pc, #268]	@ (800adb0 <_scanf_float+0x310>)
 800aca4:	400a      	ands	r2, r1
 800aca6:	6022      	str	r2, [r4, #0]
 800aca8:	9a01      	ldr	r2, [sp, #4]
 800acaa:	9205      	str	r2, [sp, #20]
 800acac:	e7a4      	b.n	800abf8 <_scanf_float+0x158>
 800acae:	21a0      	movs	r1, #160	@ 0xa0
 800acb0:	2080      	movs	r0, #128	@ 0x80
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	00c9      	lsls	r1, r1, #3
 800acb6:	4011      	ands	r1, r2
 800acb8:	00c0      	lsls	r0, r0, #3
 800acba:	4281      	cmp	r1, r0
 800acbc:	d006      	beq.n	800accc <_scanf_float+0x22c>
 800acbe:	4202      	tst	r2, r0
 800acc0:	d100      	bne.n	800acc4 <_scanf_float+0x224>
 800acc2:	e71e      	b.n	800ab02 <_scanf_float+0x62>
 800acc4:	9901      	ldr	r1, [sp, #4]
 800acc6:	2900      	cmp	r1, #0
 800acc8:	d100      	bne.n	800accc <_scanf_float+0x22c>
 800acca:	e0f0      	b.n	800aeae <_scanf_float+0x40e>
 800accc:	0591      	lsls	r1, r2, #22
 800acce:	d404      	bmi.n	800acda <_scanf_float+0x23a>
 800acd0:	9901      	ldr	r1, [sp, #4]
 800acd2:	9805      	ldr	r0, [sp, #20]
 800acd4:	9709      	str	r7, [sp, #36]	@ 0x24
 800acd6:	1a09      	subs	r1, r1, r0
 800acd8:	9108      	str	r1, [sp, #32]
 800acda:	4934      	ldr	r1, [pc, #208]	@ (800adac <_scanf_float+0x30c>)
 800acdc:	400a      	ands	r2, r1
 800acde:	21c0      	movs	r1, #192	@ 0xc0
 800ace0:	0049      	lsls	r1, r1, #1
 800ace2:	430a      	orrs	r2, r1
 800ace4:	6022      	str	r2, [r4, #0]
 800ace6:	2200      	movs	r2, #0
 800ace8:	9201      	str	r2, [sp, #4]
 800acea:	e785      	b.n	800abf8 <_scanf_float+0x158>
 800acec:	2203      	movs	r2, #3
 800acee:	e79f      	b.n	800ac30 <_scanf_float+0x190>
 800acf0:	23c0      	movs	r3, #192	@ 0xc0
 800acf2:	005b      	lsls	r3, r3, #1
 800acf4:	0031      	movs	r1, r6
 800acf6:	58e3      	ldr	r3, [r4, r3]
 800acf8:	9803      	ldr	r0, [sp, #12]
 800acfa:	4798      	blx	r3
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d100      	bne.n	800ad02 <_scanf_float+0x262>
 800ad00:	e6f1      	b.n	800aae6 <_scanf_float+0x46>
 800ad02:	e6fe      	b.n	800ab02 <_scanf_float+0x62>
 800ad04:	3f01      	subs	r7, #1
 800ad06:	5963      	ldr	r3, [r4, r5]
 800ad08:	0032      	movs	r2, r6
 800ad0a:	7839      	ldrb	r1, [r7, #0]
 800ad0c:	9803      	ldr	r0, [sp, #12]
 800ad0e:	4798      	blx	r3
 800ad10:	6923      	ldr	r3, [r4, #16]
 800ad12:	3b01      	subs	r3, #1
 800ad14:	6123      	str	r3, [r4, #16]
 800ad16:	e702      	b.n	800ab1e <_scanf_float+0x7e>
 800ad18:	1e6b      	subs	r3, r5, #1
 800ad1a:	2b06      	cmp	r3, #6
 800ad1c:	d80e      	bhi.n	800ad3c <_scanf_float+0x29c>
 800ad1e:	9702      	str	r7, [sp, #8]
 800ad20:	2d02      	cmp	r5, #2
 800ad22:	d920      	bls.n	800ad66 <_scanf_float+0x2c6>
 800ad24:	1beb      	subs	r3, r5, r7
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	9306      	str	r3, [sp, #24]
 800ad2a:	9b02      	ldr	r3, [sp, #8]
 800ad2c:	9a06      	ldr	r2, [sp, #24]
 800ad2e:	189b      	adds	r3, r3, r2
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d127      	bne.n	800ad86 <_scanf_float+0x2e6>
 800ad36:	3d03      	subs	r5, #3
 800ad38:	b2ed      	uxtb	r5, r5
 800ad3a:	1b7f      	subs	r7, r7, r5
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	05da      	lsls	r2, r3, #23
 800ad40:	d553      	bpl.n	800adea <_scanf_float+0x34a>
 800ad42:	055b      	lsls	r3, r3, #21
 800ad44:	d536      	bpl.n	800adb4 <_scanf_float+0x314>
 800ad46:	25be      	movs	r5, #190	@ 0xbe
 800ad48:	006d      	lsls	r5, r5, #1
 800ad4a:	9b04      	ldr	r3, [sp, #16]
 800ad4c:	429f      	cmp	r7, r3
 800ad4e:	d800      	bhi.n	800ad52 <_scanf_float+0x2b2>
 800ad50:	e6e9      	b.n	800ab26 <_scanf_float+0x86>
 800ad52:	3f01      	subs	r7, #1
 800ad54:	5963      	ldr	r3, [r4, r5]
 800ad56:	0032      	movs	r2, r6
 800ad58:	7839      	ldrb	r1, [r7, #0]
 800ad5a:	9803      	ldr	r0, [sp, #12]
 800ad5c:	4798      	blx	r3
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	6123      	str	r3, [r4, #16]
 800ad64:	e7f1      	b.n	800ad4a <_scanf_float+0x2aa>
 800ad66:	25be      	movs	r5, #190	@ 0xbe
 800ad68:	006d      	lsls	r5, r5, #1
 800ad6a:	9b04      	ldr	r3, [sp, #16]
 800ad6c:	429f      	cmp	r7, r3
 800ad6e:	d800      	bhi.n	800ad72 <_scanf_float+0x2d2>
 800ad70:	e6d9      	b.n	800ab26 <_scanf_float+0x86>
 800ad72:	3f01      	subs	r7, #1
 800ad74:	5963      	ldr	r3, [r4, r5]
 800ad76:	0032      	movs	r2, r6
 800ad78:	7839      	ldrb	r1, [r7, #0]
 800ad7a:	9803      	ldr	r0, [sp, #12]
 800ad7c:	4798      	blx	r3
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	6123      	str	r3, [r4, #16]
 800ad84:	e7f1      	b.n	800ad6a <_scanf_float+0x2ca>
 800ad86:	9b02      	ldr	r3, [sp, #8]
 800ad88:	0032      	movs	r2, r6
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	7819      	ldrb	r1, [r3, #0]
 800ad8e:	9302      	str	r3, [sp, #8]
 800ad90:	23be      	movs	r3, #190	@ 0xbe
 800ad92:	005b      	lsls	r3, r3, #1
 800ad94:	58e3      	ldr	r3, [r4, r3]
 800ad96:	9803      	ldr	r0, [sp, #12]
 800ad98:	4798      	blx	r3
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	6123      	str	r3, [r4, #16]
 800ada0:	e7c3      	b.n	800ad2a <_scanf_float+0x28a>
 800ada2:	46c0      	nop			@ (mov r8, r8)
 800ada4:	fffffeff 	.word	0xfffffeff
 800ada8:	fffffe7f 	.word	0xfffffe7f
 800adac:	fffff87f 	.word	0xfffff87f
 800adb0:	fffffd7f 	.word	0xfffffd7f
 800adb4:	6923      	ldr	r3, [r4, #16]
 800adb6:	1e7d      	subs	r5, r7, #1
 800adb8:	7829      	ldrb	r1, [r5, #0]
 800adba:	3b01      	subs	r3, #1
 800adbc:	6123      	str	r3, [r4, #16]
 800adbe:	2965      	cmp	r1, #101	@ 0x65
 800adc0:	d00c      	beq.n	800addc <_scanf_float+0x33c>
 800adc2:	2945      	cmp	r1, #69	@ 0x45
 800adc4:	d00a      	beq.n	800addc <_scanf_float+0x33c>
 800adc6:	23be      	movs	r3, #190	@ 0xbe
 800adc8:	005b      	lsls	r3, r3, #1
 800adca:	58e3      	ldr	r3, [r4, r3]
 800adcc:	0032      	movs	r2, r6
 800adce:	9803      	ldr	r0, [sp, #12]
 800add0:	4798      	blx	r3
 800add2:	6923      	ldr	r3, [r4, #16]
 800add4:	1ebd      	subs	r5, r7, #2
 800add6:	3b01      	subs	r3, #1
 800add8:	7829      	ldrb	r1, [r5, #0]
 800adda:	6123      	str	r3, [r4, #16]
 800addc:	23be      	movs	r3, #190	@ 0xbe
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	0032      	movs	r2, r6
 800ade2:	58e3      	ldr	r3, [r4, r3]
 800ade4:	9803      	ldr	r0, [sp, #12]
 800ade6:	4798      	blx	r3
 800ade8:	002f      	movs	r7, r5
 800adea:	6821      	ldr	r1, [r4, #0]
 800adec:	2310      	movs	r3, #16
 800adee:	000a      	movs	r2, r1
 800adf0:	401a      	ands	r2, r3
 800adf2:	4219      	tst	r1, r3
 800adf4:	d001      	beq.n	800adfa <_scanf_float+0x35a>
 800adf6:	2000      	movs	r0, #0
 800adf8:	e696      	b.n	800ab28 <_scanf_float+0x88>
 800adfa:	21c0      	movs	r1, #192	@ 0xc0
 800adfc:	703a      	strb	r2, [r7, #0]
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	00c9      	lsls	r1, r1, #3
 800ae02:	400b      	ands	r3, r1
 800ae04:	2180      	movs	r1, #128	@ 0x80
 800ae06:	00c9      	lsls	r1, r1, #3
 800ae08:	428b      	cmp	r3, r1
 800ae0a:	d11c      	bne.n	800ae46 <_scanf_float+0x3a6>
 800ae0c:	9b05      	ldr	r3, [sp, #20]
 800ae0e:	9a01      	ldr	r2, [sp, #4]
 800ae10:	9905      	ldr	r1, [sp, #20]
 800ae12:	1a9a      	subs	r2, r3, r2
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	428b      	cmp	r3, r1
 800ae18:	d121      	bne.n	800ae5e <_scanf_float+0x3be>
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	9904      	ldr	r1, [sp, #16]
 800ae1e:	9803      	ldr	r0, [sp, #12]
 800ae20:	f002 fc6e 	bl	800d700 <_strtod_r>
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	6822      	ldr	r2, [r4, #0]
 800ae28:	0006      	movs	r6, r0
 800ae2a:	000f      	movs	r7, r1
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	0791      	lsls	r1, r2, #30
 800ae30:	d522      	bpl.n	800ae78 <_scanf_float+0x3d8>
 800ae32:	9907      	ldr	r1, [sp, #28]
 800ae34:	1d1a      	adds	r2, r3, #4
 800ae36:	600a      	str	r2, [r1, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	601e      	str	r6, [r3, #0]
 800ae3c:	605f      	str	r7, [r3, #4]
 800ae3e:	68e3      	ldr	r3, [r4, #12]
 800ae40:	3301      	adds	r3, #1
 800ae42:	60e3      	str	r3, [r4, #12]
 800ae44:	e7d7      	b.n	800adf6 <_scanf_float+0x356>
 800ae46:	9b08      	ldr	r3, [sp, #32]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d0e6      	beq.n	800ae1a <_scanf_float+0x37a>
 800ae4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae4e:	9803      	ldr	r0, [sp, #12]
 800ae50:	1c59      	adds	r1, r3, #1
 800ae52:	230a      	movs	r3, #10
 800ae54:	f002 fce6 	bl	800d824 <_strtol_r>
 800ae58:	9b08      	ldr	r3, [sp, #32]
 800ae5a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800ae5c:	1ac2      	subs	r2, r0, r3
 800ae5e:	0023      	movs	r3, r4
 800ae60:	3370      	adds	r3, #112	@ 0x70
 800ae62:	33ff      	adds	r3, #255	@ 0xff
 800ae64:	429f      	cmp	r7, r3
 800ae66:	d302      	bcc.n	800ae6e <_scanf_float+0x3ce>
 800ae68:	0027      	movs	r7, r4
 800ae6a:	376f      	adds	r7, #111	@ 0x6f
 800ae6c:	37ff      	adds	r7, #255	@ 0xff
 800ae6e:	0038      	movs	r0, r7
 800ae70:	4910      	ldr	r1, [pc, #64]	@ (800aeb4 <_scanf_float+0x414>)
 800ae72:	f000 f8e7 	bl	800b044 <siprintf>
 800ae76:	e7d0      	b.n	800ae1a <_scanf_float+0x37a>
 800ae78:	1d19      	adds	r1, r3, #4
 800ae7a:	0752      	lsls	r2, r2, #29
 800ae7c:	d502      	bpl.n	800ae84 <_scanf_float+0x3e4>
 800ae7e:	9a07      	ldr	r2, [sp, #28]
 800ae80:	6011      	str	r1, [r2, #0]
 800ae82:	e7d9      	b.n	800ae38 <_scanf_float+0x398>
 800ae84:	9a07      	ldr	r2, [sp, #28]
 800ae86:	0030      	movs	r0, r6
 800ae88:	6011      	str	r1, [r2, #0]
 800ae8a:	681d      	ldr	r5, [r3, #0]
 800ae8c:	0032      	movs	r2, r6
 800ae8e:	003b      	movs	r3, r7
 800ae90:	0039      	movs	r1, r7
 800ae92:	f7f7 f981 	bl	8002198 <__aeabi_dcmpun>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d004      	beq.n	800aea4 <_scanf_float+0x404>
 800ae9a:	4807      	ldr	r0, [pc, #28]	@ (800aeb8 <_scanf_float+0x418>)
 800ae9c:	f000 f9d0 	bl	800b240 <nanf>
 800aea0:	6028      	str	r0, [r5, #0]
 800aea2:	e7cc      	b.n	800ae3e <_scanf_float+0x39e>
 800aea4:	0030      	movs	r0, r6
 800aea6:	0039      	movs	r1, r7
 800aea8:	f7f7 fa6e 	bl	8002388 <__aeabi_d2f>
 800aeac:	e7f8      	b.n	800aea0 <_scanf_float+0x400>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	9301      	str	r3, [sp, #4]
 800aeb2:	e62d      	b.n	800ab10 <_scanf_float+0x70>
 800aeb4:	0800ee28 	.word	0x0800ee28
 800aeb8:	0800f1bd 	.word	0x0800f1bd

0800aebc <std>:
 800aebc:	2300      	movs	r3, #0
 800aebe:	b510      	push	{r4, lr}
 800aec0:	0004      	movs	r4, r0
 800aec2:	6003      	str	r3, [r0, #0]
 800aec4:	6043      	str	r3, [r0, #4]
 800aec6:	6083      	str	r3, [r0, #8]
 800aec8:	8181      	strh	r1, [r0, #12]
 800aeca:	6643      	str	r3, [r0, #100]	@ 0x64
 800aecc:	81c2      	strh	r2, [r0, #14]
 800aece:	6103      	str	r3, [r0, #16]
 800aed0:	6143      	str	r3, [r0, #20]
 800aed2:	6183      	str	r3, [r0, #24]
 800aed4:	0019      	movs	r1, r3
 800aed6:	2208      	movs	r2, #8
 800aed8:	305c      	adds	r0, #92	@ 0x5c
 800aeda:	f000 f91f 	bl	800b11c <memset>
 800aede:	4b0b      	ldr	r3, [pc, #44]	@ (800af0c <std+0x50>)
 800aee0:	6224      	str	r4, [r4, #32]
 800aee2:	6263      	str	r3, [r4, #36]	@ 0x24
 800aee4:	4b0a      	ldr	r3, [pc, #40]	@ (800af10 <std+0x54>)
 800aee6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aee8:	4b0a      	ldr	r3, [pc, #40]	@ (800af14 <std+0x58>)
 800aeea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aeec:	4b0a      	ldr	r3, [pc, #40]	@ (800af18 <std+0x5c>)
 800aeee:	6323      	str	r3, [r4, #48]	@ 0x30
 800aef0:	4b0a      	ldr	r3, [pc, #40]	@ (800af1c <std+0x60>)
 800aef2:	429c      	cmp	r4, r3
 800aef4:	d005      	beq.n	800af02 <std+0x46>
 800aef6:	4b0a      	ldr	r3, [pc, #40]	@ (800af20 <std+0x64>)
 800aef8:	429c      	cmp	r4, r3
 800aefa:	d002      	beq.n	800af02 <std+0x46>
 800aefc:	4b09      	ldr	r3, [pc, #36]	@ (800af24 <std+0x68>)
 800aefe:	429c      	cmp	r4, r3
 800af00:	d103      	bne.n	800af0a <std+0x4e>
 800af02:	0020      	movs	r0, r4
 800af04:	3058      	adds	r0, #88	@ 0x58
 800af06:	f000 f98d 	bl	800b224 <__retarget_lock_init_recursive>
 800af0a:	bd10      	pop	{r4, pc}
 800af0c:	0800b085 	.word	0x0800b085
 800af10:	0800b0ad 	.word	0x0800b0ad
 800af14:	0800b0e5 	.word	0x0800b0e5
 800af18:	0800b111 	.word	0x0800b111
 800af1c:	200005bc 	.word	0x200005bc
 800af20:	20000624 	.word	0x20000624
 800af24:	2000068c 	.word	0x2000068c

0800af28 <stdio_exit_handler>:
 800af28:	b510      	push	{r4, lr}
 800af2a:	4a03      	ldr	r2, [pc, #12]	@ (800af38 <stdio_exit_handler+0x10>)
 800af2c:	4903      	ldr	r1, [pc, #12]	@ (800af3c <stdio_exit_handler+0x14>)
 800af2e:	4804      	ldr	r0, [pc, #16]	@ (800af40 <stdio_exit_handler+0x18>)
 800af30:	f000 f86c 	bl	800b00c <_fwalk_sglue>
 800af34:	bd10      	pop	{r4, pc}
 800af36:	46c0      	nop			@ (mov r8, r8)
 800af38:	20000054 	.word	0x20000054
 800af3c:	0800dbf5 	.word	0x0800dbf5
 800af40:	20000064 	.word	0x20000064

0800af44 <cleanup_stdio>:
 800af44:	6841      	ldr	r1, [r0, #4]
 800af46:	4b0b      	ldr	r3, [pc, #44]	@ (800af74 <cleanup_stdio+0x30>)
 800af48:	b510      	push	{r4, lr}
 800af4a:	0004      	movs	r4, r0
 800af4c:	4299      	cmp	r1, r3
 800af4e:	d001      	beq.n	800af54 <cleanup_stdio+0x10>
 800af50:	f002 fe50 	bl	800dbf4 <_fflush_r>
 800af54:	68a1      	ldr	r1, [r4, #8]
 800af56:	4b08      	ldr	r3, [pc, #32]	@ (800af78 <cleanup_stdio+0x34>)
 800af58:	4299      	cmp	r1, r3
 800af5a:	d002      	beq.n	800af62 <cleanup_stdio+0x1e>
 800af5c:	0020      	movs	r0, r4
 800af5e:	f002 fe49 	bl	800dbf4 <_fflush_r>
 800af62:	68e1      	ldr	r1, [r4, #12]
 800af64:	4b05      	ldr	r3, [pc, #20]	@ (800af7c <cleanup_stdio+0x38>)
 800af66:	4299      	cmp	r1, r3
 800af68:	d002      	beq.n	800af70 <cleanup_stdio+0x2c>
 800af6a:	0020      	movs	r0, r4
 800af6c:	f002 fe42 	bl	800dbf4 <_fflush_r>
 800af70:	bd10      	pop	{r4, pc}
 800af72:	46c0      	nop			@ (mov r8, r8)
 800af74:	200005bc 	.word	0x200005bc
 800af78:	20000624 	.word	0x20000624
 800af7c:	2000068c 	.word	0x2000068c

0800af80 <global_stdio_init.part.0>:
 800af80:	b510      	push	{r4, lr}
 800af82:	4b09      	ldr	r3, [pc, #36]	@ (800afa8 <global_stdio_init.part.0+0x28>)
 800af84:	4a09      	ldr	r2, [pc, #36]	@ (800afac <global_stdio_init.part.0+0x2c>)
 800af86:	2104      	movs	r1, #4
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	4809      	ldr	r0, [pc, #36]	@ (800afb0 <global_stdio_init.part.0+0x30>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	f7ff ff95 	bl	800aebc <std>
 800af92:	2201      	movs	r2, #1
 800af94:	2109      	movs	r1, #9
 800af96:	4807      	ldr	r0, [pc, #28]	@ (800afb4 <global_stdio_init.part.0+0x34>)
 800af98:	f7ff ff90 	bl	800aebc <std>
 800af9c:	2202      	movs	r2, #2
 800af9e:	2112      	movs	r1, #18
 800afa0:	4805      	ldr	r0, [pc, #20]	@ (800afb8 <global_stdio_init.part.0+0x38>)
 800afa2:	f7ff ff8b 	bl	800aebc <std>
 800afa6:	bd10      	pop	{r4, pc}
 800afa8:	200006f4 	.word	0x200006f4
 800afac:	0800af29 	.word	0x0800af29
 800afb0:	200005bc 	.word	0x200005bc
 800afb4:	20000624 	.word	0x20000624
 800afb8:	2000068c 	.word	0x2000068c

0800afbc <__sfp_lock_acquire>:
 800afbc:	b510      	push	{r4, lr}
 800afbe:	4802      	ldr	r0, [pc, #8]	@ (800afc8 <__sfp_lock_acquire+0xc>)
 800afc0:	f000 f931 	bl	800b226 <__retarget_lock_acquire_recursive>
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	46c0      	nop			@ (mov r8, r8)
 800afc8:	200006fd 	.word	0x200006fd

0800afcc <__sfp_lock_release>:
 800afcc:	b510      	push	{r4, lr}
 800afce:	4802      	ldr	r0, [pc, #8]	@ (800afd8 <__sfp_lock_release+0xc>)
 800afd0:	f000 f92a 	bl	800b228 <__retarget_lock_release_recursive>
 800afd4:	bd10      	pop	{r4, pc}
 800afd6:	46c0      	nop			@ (mov r8, r8)
 800afd8:	200006fd 	.word	0x200006fd

0800afdc <__sinit>:
 800afdc:	b510      	push	{r4, lr}
 800afde:	0004      	movs	r4, r0
 800afe0:	f7ff ffec 	bl	800afbc <__sfp_lock_acquire>
 800afe4:	6a23      	ldr	r3, [r4, #32]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <__sinit+0x14>
 800afea:	f7ff ffef 	bl	800afcc <__sfp_lock_release>
 800afee:	bd10      	pop	{r4, pc}
 800aff0:	4b04      	ldr	r3, [pc, #16]	@ (800b004 <__sinit+0x28>)
 800aff2:	6223      	str	r3, [r4, #32]
 800aff4:	4b04      	ldr	r3, [pc, #16]	@ (800b008 <__sinit+0x2c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1f6      	bne.n	800afea <__sinit+0xe>
 800affc:	f7ff ffc0 	bl	800af80 <global_stdio_init.part.0>
 800b000:	e7f3      	b.n	800afea <__sinit+0xe>
 800b002:	46c0      	nop			@ (mov r8, r8)
 800b004:	0800af45 	.word	0x0800af45
 800b008:	200006f4 	.word	0x200006f4

0800b00c <_fwalk_sglue>:
 800b00c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b00e:	0014      	movs	r4, r2
 800b010:	2600      	movs	r6, #0
 800b012:	9000      	str	r0, [sp, #0]
 800b014:	9101      	str	r1, [sp, #4]
 800b016:	68a5      	ldr	r5, [r4, #8]
 800b018:	6867      	ldr	r7, [r4, #4]
 800b01a:	3f01      	subs	r7, #1
 800b01c:	d504      	bpl.n	800b028 <_fwalk_sglue+0x1c>
 800b01e:	6824      	ldr	r4, [r4, #0]
 800b020:	2c00      	cmp	r4, #0
 800b022:	d1f8      	bne.n	800b016 <_fwalk_sglue+0xa>
 800b024:	0030      	movs	r0, r6
 800b026:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b028:	89ab      	ldrh	r3, [r5, #12]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d908      	bls.n	800b040 <_fwalk_sglue+0x34>
 800b02e:	220e      	movs	r2, #14
 800b030:	5eab      	ldrsh	r3, [r5, r2]
 800b032:	3301      	adds	r3, #1
 800b034:	d004      	beq.n	800b040 <_fwalk_sglue+0x34>
 800b036:	0029      	movs	r1, r5
 800b038:	9800      	ldr	r0, [sp, #0]
 800b03a:	9b01      	ldr	r3, [sp, #4]
 800b03c:	4798      	blx	r3
 800b03e:	4306      	orrs	r6, r0
 800b040:	3568      	adds	r5, #104	@ 0x68
 800b042:	e7ea      	b.n	800b01a <_fwalk_sglue+0xe>

0800b044 <siprintf>:
 800b044:	b40e      	push	{r1, r2, r3}
 800b046:	b500      	push	{lr}
 800b048:	490b      	ldr	r1, [pc, #44]	@ (800b078 <siprintf+0x34>)
 800b04a:	b09c      	sub	sp, #112	@ 0x70
 800b04c:	ab1d      	add	r3, sp, #116	@ 0x74
 800b04e:	9002      	str	r0, [sp, #8]
 800b050:	9006      	str	r0, [sp, #24]
 800b052:	9107      	str	r1, [sp, #28]
 800b054:	9104      	str	r1, [sp, #16]
 800b056:	4809      	ldr	r0, [pc, #36]	@ (800b07c <siprintf+0x38>)
 800b058:	4909      	ldr	r1, [pc, #36]	@ (800b080 <siprintf+0x3c>)
 800b05a:	cb04      	ldmia	r3!, {r2}
 800b05c:	9105      	str	r1, [sp, #20]
 800b05e:	6800      	ldr	r0, [r0, #0]
 800b060:	a902      	add	r1, sp, #8
 800b062:	9301      	str	r3, [sp, #4]
 800b064:	f002 fc42 	bl	800d8ec <_svfiprintf_r>
 800b068:	2200      	movs	r2, #0
 800b06a:	9b02      	ldr	r3, [sp, #8]
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	b01c      	add	sp, #112	@ 0x70
 800b070:	bc08      	pop	{r3}
 800b072:	b003      	add	sp, #12
 800b074:	4718      	bx	r3
 800b076:	46c0      	nop			@ (mov r8, r8)
 800b078:	7fffffff 	.word	0x7fffffff
 800b07c:	20000060 	.word	0x20000060
 800b080:	ffff0208 	.word	0xffff0208

0800b084 <__sread>:
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	000c      	movs	r4, r1
 800b088:	250e      	movs	r5, #14
 800b08a:	5f49      	ldrsh	r1, [r1, r5]
 800b08c:	f000 f878 	bl	800b180 <_read_r>
 800b090:	2800      	cmp	r0, #0
 800b092:	db03      	blt.n	800b09c <__sread+0x18>
 800b094:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b096:	181b      	adds	r3, r3, r0
 800b098:	6563      	str	r3, [r4, #84]	@ 0x54
 800b09a:	bd70      	pop	{r4, r5, r6, pc}
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	4a02      	ldr	r2, [pc, #8]	@ (800b0a8 <__sread+0x24>)
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	81a3      	strh	r3, [r4, #12]
 800b0a4:	e7f9      	b.n	800b09a <__sread+0x16>
 800b0a6:	46c0      	nop			@ (mov r8, r8)
 800b0a8:	ffffefff 	.word	0xffffefff

0800b0ac <__swrite>:
 800b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ae:	001f      	movs	r7, r3
 800b0b0:	898b      	ldrh	r3, [r1, #12]
 800b0b2:	0005      	movs	r5, r0
 800b0b4:	000c      	movs	r4, r1
 800b0b6:	0016      	movs	r6, r2
 800b0b8:	05db      	lsls	r3, r3, #23
 800b0ba:	d505      	bpl.n	800b0c8 <__swrite+0x1c>
 800b0bc:	230e      	movs	r3, #14
 800b0be:	5ec9      	ldrsh	r1, [r1, r3]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	f000 f848 	bl	800b158 <_lseek_r>
 800b0c8:	89a3      	ldrh	r3, [r4, #12]
 800b0ca:	4a05      	ldr	r2, [pc, #20]	@ (800b0e0 <__swrite+0x34>)
 800b0cc:	0028      	movs	r0, r5
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	0032      	movs	r2, r6
 800b0d4:	230e      	movs	r3, #14
 800b0d6:	5ee1      	ldrsh	r1, [r4, r3]
 800b0d8:	003b      	movs	r3, r7
 800b0da:	f000 f865 	bl	800b1a8 <_write_r>
 800b0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0e0:	ffffefff 	.word	0xffffefff

0800b0e4 <__sseek>:
 800b0e4:	b570      	push	{r4, r5, r6, lr}
 800b0e6:	000c      	movs	r4, r1
 800b0e8:	250e      	movs	r5, #14
 800b0ea:	5f49      	ldrsh	r1, [r1, r5]
 800b0ec:	f000 f834 	bl	800b158 <_lseek_r>
 800b0f0:	89a3      	ldrh	r3, [r4, #12]
 800b0f2:	1c42      	adds	r2, r0, #1
 800b0f4:	d103      	bne.n	800b0fe <__sseek+0x1a>
 800b0f6:	4a05      	ldr	r2, [pc, #20]	@ (800b10c <__sseek+0x28>)
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	81a3      	strh	r3, [r4, #12]
 800b0fc:	bd70      	pop	{r4, r5, r6, pc}
 800b0fe:	2280      	movs	r2, #128	@ 0x80
 800b100:	0152      	lsls	r2, r2, #5
 800b102:	4313      	orrs	r3, r2
 800b104:	81a3      	strh	r3, [r4, #12]
 800b106:	6560      	str	r0, [r4, #84]	@ 0x54
 800b108:	e7f8      	b.n	800b0fc <__sseek+0x18>
 800b10a:	46c0      	nop			@ (mov r8, r8)
 800b10c:	ffffefff 	.word	0xffffefff

0800b110 <__sclose>:
 800b110:	b510      	push	{r4, lr}
 800b112:	230e      	movs	r3, #14
 800b114:	5ec9      	ldrsh	r1, [r1, r3]
 800b116:	f000 f80d 	bl	800b134 <_close_r>
 800b11a:	bd10      	pop	{r4, pc}

0800b11c <memset>:
 800b11c:	0003      	movs	r3, r0
 800b11e:	1882      	adds	r2, r0, r2
 800b120:	4293      	cmp	r3, r2
 800b122:	d100      	bne.n	800b126 <memset+0xa>
 800b124:	4770      	bx	lr
 800b126:	7019      	strb	r1, [r3, #0]
 800b128:	3301      	adds	r3, #1
 800b12a:	e7f9      	b.n	800b120 <memset+0x4>

0800b12c <_localeconv_r>:
 800b12c:	4800      	ldr	r0, [pc, #0]	@ (800b130 <_localeconv_r+0x4>)
 800b12e:	4770      	bx	lr
 800b130:	200001a0 	.word	0x200001a0

0800b134 <_close_r>:
 800b134:	2300      	movs	r3, #0
 800b136:	b570      	push	{r4, r5, r6, lr}
 800b138:	4d06      	ldr	r5, [pc, #24]	@ (800b154 <_close_r+0x20>)
 800b13a:	0004      	movs	r4, r0
 800b13c:	0008      	movs	r0, r1
 800b13e:	602b      	str	r3, [r5, #0]
 800b140:	f7f8 fa3c 	bl	80035bc <_close>
 800b144:	1c43      	adds	r3, r0, #1
 800b146:	d103      	bne.n	800b150 <_close_r+0x1c>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d000      	beq.n	800b150 <_close_r+0x1c>
 800b14e:	6023      	str	r3, [r4, #0]
 800b150:	bd70      	pop	{r4, r5, r6, pc}
 800b152:	46c0      	nop			@ (mov r8, r8)
 800b154:	200006f8 	.word	0x200006f8

0800b158 <_lseek_r>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	0004      	movs	r4, r0
 800b15c:	0008      	movs	r0, r1
 800b15e:	0011      	movs	r1, r2
 800b160:	001a      	movs	r2, r3
 800b162:	2300      	movs	r3, #0
 800b164:	4d05      	ldr	r5, [pc, #20]	@ (800b17c <_lseek_r+0x24>)
 800b166:	602b      	str	r3, [r5, #0]
 800b168:	f7f8 fa49 	bl	80035fe <_lseek>
 800b16c:	1c43      	adds	r3, r0, #1
 800b16e:	d103      	bne.n	800b178 <_lseek_r+0x20>
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d000      	beq.n	800b178 <_lseek_r+0x20>
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	bd70      	pop	{r4, r5, r6, pc}
 800b17a:	46c0      	nop			@ (mov r8, r8)
 800b17c:	200006f8 	.word	0x200006f8

0800b180 <_read_r>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	0004      	movs	r4, r0
 800b184:	0008      	movs	r0, r1
 800b186:	0011      	movs	r1, r2
 800b188:	001a      	movs	r2, r3
 800b18a:	2300      	movs	r3, #0
 800b18c:	4d05      	ldr	r5, [pc, #20]	@ (800b1a4 <_read_r+0x24>)
 800b18e:	602b      	str	r3, [r5, #0]
 800b190:	f7f8 f9db 	bl	800354a <_read>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d103      	bne.n	800b1a0 <_read_r+0x20>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d000      	beq.n	800b1a0 <_read_r+0x20>
 800b19e:	6023      	str	r3, [r4, #0]
 800b1a0:	bd70      	pop	{r4, r5, r6, pc}
 800b1a2:	46c0      	nop			@ (mov r8, r8)
 800b1a4:	200006f8 	.word	0x200006f8

0800b1a8 <_write_r>:
 800b1a8:	b570      	push	{r4, r5, r6, lr}
 800b1aa:	0004      	movs	r4, r0
 800b1ac:	0008      	movs	r0, r1
 800b1ae:	0011      	movs	r1, r2
 800b1b0:	001a      	movs	r2, r3
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4d05      	ldr	r5, [pc, #20]	@ (800b1cc <_write_r+0x24>)
 800b1b6:	602b      	str	r3, [r5, #0]
 800b1b8:	f7f8 f9e4 	bl	8003584 <_write>
 800b1bc:	1c43      	adds	r3, r0, #1
 800b1be:	d103      	bne.n	800b1c8 <_write_r+0x20>
 800b1c0:	682b      	ldr	r3, [r5, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d000      	beq.n	800b1c8 <_write_r+0x20>
 800b1c6:	6023      	str	r3, [r4, #0]
 800b1c8:	bd70      	pop	{r4, r5, r6, pc}
 800b1ca:	46c0      	nop			@ (mov r8, r8)
 800b1cc:	200006f8 	.word	0x200006f8

0800b1d0 <__errno>:
 800b1d0:	4b01      	ldr	r3, [pc, #4]	@ (800b1d8 <__errno+0x8>)
 800b1d2:	6818      	ldr	r0, [r3, #0]
 800b1d4:	4770      	bx	lr
 800b1d6:	46c0      	nop			@ (mov r8, r8)
 800b1d8:	20000060 	.word	0x20000060

0800b1dc <__libc_init_array>:
 800b1dc:	b570      	push	{r4, r5, r6, lr}
 800b1de:	2600      	movs	r6, #0
 800b1e0:	4c0c      	ldr	r4, [pc, #48]	@ (800b214 <__libc_init_array+0x38>)
 800b1e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b218 <__libc_init_array+0x3c>)
 800b1e4:	1b64      	subs	r4, r4, r5
 800b1e6:	10a4      	asrs	r4, r4, #2
 800b1e8:	42a6      	cmp	r6, r4
 800b1ea:	d109      	bne.n	800b200 <__libc_init_array+0x24>
 800b1ec:	2600      	movs	r6, #0
 800b1ee:	f003 fc43 	bl	800ea78 <_init>
 800b1f2:	4c0a      	ldr	r4, [pc, #40]	@ (800b21c <__libc_init_array+0x40>)
 800b1f4:	4d0a      	ldr	r5, [pc, #40]	@ (800b220 <__libc_init_array+0x44>)
 800b1f6:	1b64      	subs	r4, r4, r5
 800b1f8:	10a4      	asrs	r4, r4, #2
 800b1fa:	42a6      	cmp	r6, r4
 800b1fc:	d105      	bne.n	800b20a <__libc_init_array+0x2e>
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}
 800b200:	00b3      	lsls	r3, r6, #2
 800b202:	58eb      	ldr	r3, [r5, r3]
 800b204:	4798      	blx	r3
 800b206:	3601      	adds	r6, #1
 800b208:	e7ee      	b.n	800b1e8 <__libc_init_array+0xc>
 800b20a:	00b3      	lsls	r3, r6, #2
 800b20c:	58eb      	ldr	r3, [r5, r3]
 800b20e:	4798      	blx	r3
 800b210:	3601      	adds	r6, #1
 800b212:	e7f2      	b.n	800b1fa <__libc_init_array+0x1e>
 800b214:	0800f220 	.word	0x0800f220
 800b218:	0800f220 	.word	0x0800f220
 800b21c:	0800f224 	.word	0x0800f224
 800b220:	0800f220 	.word	0x0800f220

0800b224 <__retarget_lock_init_recursive>:
 800b224:	4770      	bx	lr

0800b226 <__retarget_lock_acquire_recursive>:
 800b226:	4770      	bx	lr

0800b228 <__retarget_lock_release_recursive>:
 800b228:	4770      	bx	lr

0800b22a <memchr>:
 800b22a:	b2c9      	uxtb	r1, r1
 800b22c:	1882      	adds	r2, r0, r2
 800b22e:	4290      	cmp	r0, r2
 800b230:	d101      	bne.n	800b236 <memchr+0xc>
 800b232:	2000      	movs	r0, #0
 800b234:	4770      	bx	lr
 800b236:	7803      	ldrb	r3, [r0, #0]
 800b238:	428b      	cmp	r3, r1
 800b23a:	d0fb      	beq.n	800b234 <memchr+0xa>
 800b23c:	3001      	adds	r0, #1
 800b23e:	e7f6      	b.n	800b22e <memchr+0x4>

0800b240 <nanf>:
 800b240:	4800      	ldr	r0, [pc, #0]	@ (800b244 <nanf+0x4>)
 800b242:	4770      	bx	lr
 800b244:	7fc00000 	.word	0x7fc00000

0800b248 <quorem>:
 800b248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b24a:	6902      	ldr	r2, [r0, #16]
 800b24c:	690f      	ldr	r7, [r1, #16]
 800b24e:	b087      	sub	sp, #28
 800b250:	0006      	movs	r6, r0
 800b252:	000b      	movs	r3, r1
 800b254:	2000      	movs	r0, #0
 800b256:	9102      	str	r1, [sp, #8]
 800b258:	42ba      	cmp	r2, r7
 800b25a:	db6d      	blt.n	800b338 <quorem+0xf0>
 800b25c:	3f01      	subs	r7, #1
 800b25e:	00bc      	lsls	r4, r7, #2
 800b260:	3314      	adds	r3, #20
 800b262:	9305      	str	r3, [sp, #20]
 800b264:	191b      	adds	r3, r3, r4
 800b266:	9303      	str	r3, [sp, #12]
 800b268:	0033      	movs	r3, r6
 800b26a:	3314      	adds	r3, #20
 800b26c:	191c      	adds	r4, r3, r4
 800b26e:	9301      	str	r3, [sp, #4]
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	9304      	str	r3, [sp, #16]
 800b274:	9b03      	ldr	r3, [sp, #12]
 800b276:	9804      	ldr	r0, [sp, #16]
 800b278:	681d      	ldr	r5, [r3, #0]
 800b27a:	3501      	adds	r5, #1
 800b27c:	0029      	movs	r1, r5
 800b27e:	f7f4 ff5d 	bl	800013c <__udivsi3>
 800b282:	9b04      	ldr	r3, [sp, #16]
 800b284:	9000      	str	r0, [sp, #0]
 800b286:	42ab      	cmp	r3, r5
 800b288:	d32b      	bcc.n	800b2e2 <quorem+0x9a>
 800b28a:	9b05      	ldr	r3, [sp, #20]
 800b28c:	9d01      	ldr	r5, [sp, #4]
 800b28e:	469c      	mov	ip, r3
 800b290:	2300      	movs	r3, #0
 800b292:	9305      	str	r3, [sp, #20]
 800b294:	9304      	str	r3, [sp, #16]
 800b296:	4662      	mov	r2, ip
 800b298:	ca08      	ldmia	r2!, {r3}
 800b29a:	6828      	ldr	r0, [r5, #0]
 800b29c:	4694      	mov	ip, r2
 800b29e:	9a00      	ldr	r2, [sp, #0]
 800b2a0:	b299      	uxth	r1, r3
 800b2a2:	4351      	muls	r1, r2
 800b2a4:	9a05      	ldr	r2, [sp, #20]
 800b2a6:	0c1b      	lsrs	r3, r3, #16
 800b2a8:	1889      	adds	r1, r1, r2
 800b2aa:	9a00      	ldr	r2, [sp, #0]
 800b2ac:	4353      	muls	r3, r2
 800b2ae:	0c0a      	lsrs	r2, r1, #16
 800b2b0:	189b      	adds	r3, r3, r2
 800b2b2:	0c1a      	lsrs	r2, r3, #16
 800b2b4:	b289      	uxth	r1, r1
 800b2b6:	9205      	str	r2, [sp, #20]
 800b2b8:	b282      	uxth	r2, r0
 800b2ba:	1a52      	subs	r2, r2, r1
 800b2bc:	9904      	ldr	r1, [sp, #16]
 800b2be:	0c00      	lsrs	r0, r0, #16
 800b2c0:	1852      	adds	r2, r2, r1
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	1411      	asrs	r1, r2, #16
 800b2c6:	1ac3      	subs	r3, r0, r3
 800b2c8:	185b      	adds	r3, r3, r1
 800b2ca:	1419      	asrs	r1, r3, #16
 800b2cc:	b292      	uxth	r2, r2
 800b2ce:	041b      	lsls	r3, r3, #16
 800b2d0:	431a      	orrs	r2, r3
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	9104      	str	r1, [sp, #16]
 800b2d6:	c504      	stmia	r5!, {r2}
 800b2d8:	4563      	cmp	r3, ip
 800b2da:	d2dc      	bcs.n	800b296 <quorem+0x4e>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d030      	beq.n	800b344 <quorem+0xfc>
 800b2e2:	0030      	movs	r0, r6
 800b2e4:	9902      	ldr	r1, [sp, #8]
 800b2e6:	f001 fa11 	bl	800c70c <__mcmp>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	db23      	blt.n	800b336 <quorem+0xee>
 800b2ee:	0034      	movs	r4, r6
 800b2f0:	2500      	movs	r5, #0
 800b2f2:	9902      	ldr	r1, [sp, #8]
 800b2f4:	3414      	adds	r4, #20
 800b2f6:	3114      	adds	r1, #20
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	c901      	ldmia	r1!, {r0}
 800b2fc:	9302      	str	r3, [sp, #8]
 800b2fe:	466b      	mov	r3, sp
 800b300:	891b      	ldrh	r3, [r3, #8]
 800b302:	b282      	uxth	r2, r0
 800b304:	1a9a      	subs	r2, r3, r2
 800b306:	9b02      	ldr	r3, [sp, #8]
 800b308:	1952      	adds	r2, r2, r5
 800b30a:	0c00      	lsrs	r0, r0, #16
 800b30c:	0c1b      	lsrs	r3, r3, #16
 800b30e:	1a1b      	subs	r3, r3, r0
 800b310:	1410      	asrs	r0, r2, #16
 800b312:	181b      	adds	r3, r3, r0
 800b314:	141d      	asrs	r5, r3, #16
 800b316:	b292      	uxth	r2, r2
 800b318:	041b      	lsls	r3, r3, #16
 800b31a:	431a      	orrs	r2, r3
 800b31c:	9b03      	ldr	r3, [sp, #12]
 800b31e:	c404      	stmia	r4!, {r2}
 800b320:	428b      	cmp	r3, r1
 800b322:	d2e9      	bcs.n	800b2f8 <quorem+0xb0>
 800b324:	9a01      	ldr	r2, [sp, #4]
 800b326:	00bb      	lsls	r3, r7, #2
 800b328:	18d3      	adds	r3, r2, r3
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	2a00      	cmp	r2, #0
 800b32e:	d013      	beq.n	800b358 <quorem+0x110>
 800b330:	9b00      	ldr	r3, [sp, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	9800      	ldr	r0, [sp, #0]
 800b338:	b007      	add	sp, #28
 800b33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d104      	bne.n	800b34c <quorem+0x104>
 800b342:	3f01      	subs	r7, #1
 800b344:	9b01      	ldr	r3, [sp, #4]
 800b346:	3c04      	subs	r4, #4
 800b348:	42a3      	cmp	r3, r4
 800b34a:	d3f7      	bcc.n	800b33c <quorem+0xf4>
 800b34c:	6137      	str	r7, [r6, #16]
 800b34e:	e7c8      	b.n	800b2e2 <quorem+0x9a>
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	2a00      	cmp	r2, #0
 800b354:	d104      	bne.n	800b360 <quorem+0x118>
 800b356:	3f01      	subs	r7, #1
 800b358:	9a01      	ldr	r2, [sp, #4]
 800b35a:	3b04      	subs	r3, #4
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d3f7      	bcc.n	800b350 <quorem+0x108>
 800b360:	6137      	str	r7, [r6, #16]
 800b362:	e7e5      	b.n	800b330 <quorem+0xe8>

0800b364 <_dtoa_r>:
 800b364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b366:	0014      	movs	r4, r2
 800b368:	001d      	movs	r5, r3
 800b36a:	69c6      	ldr	r6, [r0, #28]
 800b36c:	b09d      	sub	sp, #116	@ 0x74
 800b36e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b370:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b372:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800b374:	9003      	str	r0, [sp, #12]
 800b376:	2e00      	cmp	r6, #0
 800b378:	d10f      	bne.n	800b39a <_dtoa_r+0x36>
 800b37a:	2010      	movs	r0, #16
 800b37c:	f000 fe30 	bl	800bfe0 <malloc>
 800b380:	9b03      	ldr	r3, [sp, #12]
 800b382:	1e02      	subs	r2, r0, #0
 800b384:	61d8      	str	r0, [r3, #28]
 800b386:	d104      	bne.n	800b392 <_dtoa_r+0x2e>
 800b388:	21ef      	movs	r1, #239	@ 0xef
 800b38a:	4bc7      	ldr	r3, [pc, #796]	@ (800b6a8 <_dtoa_r+0x344>)
 800b38c:	48c7      	ldr	r0, [pc, #796]	@ (800b6ac <_dtoa_r+0x348>)
 800b38e:	f002 fca3 	bl	800dcd8 <__assert_func>
 800b392:	6046      	str	r6, [r0, #4]
 800b394:	6086      	str	r6, [r0, #8]
 800b396:	6006      	str	r6, [r0, #0]
 800b398:	60c6      	str	r6, [r0, #12]
 800b39a:	9b03      	ldr	r3, [sp, #12]
 800b39c:	69db      	ldr	r3, [r3, #28]
 800b39e:	6819      	ldr	r1, [r3, #0]
 800b3a0:	2900      	cmp	r1, #0
 800b3a2:	d00b      	beq.n	800b3bc <_dtoa_r+0x58>
 800b3a4:	685a      	ldr	r2, [r3, #4]
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	4093      	lsls	r3, r2
 800b3aa:	604a      	str	r2, [r1, #4]
 800b3ac:	608b      	str	r3, [r1, #8]
 800b3ae:	9803      	ldr	r0, [sp, #12]
 800b3b0:	f000 ff16 	bl	800c1e0 <_Bfree>
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	9b03      	ldr	r3, [sp, #12]
 800b3b8:	69db      	ldr	r3, [r3, #28]
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	2d00      	cmp	r5, #0
 800b3be:	da1e      	bge.n	800b3fe <_dtoa_r+0x9a>
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	603b      	str	r3, [r7, #0]
 800b3c4:	006b      	lsls	r3, r5, #1
 800b3c6:	085b      	lsrs	r3, r3, #1
 800b3c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3ca:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b3cc:	4bb8      	ldr	r3, [pc, #736]	@ (800b6b0 <_dtoa_r+0x34c>)
 800b3ce:	4ab8      	ldr	r2, [pc, #736]	@ (800b6b0 <_dtoa_r+0x34c>)
 800b3d0:	403b      	ands	r3, r7
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d116      	bne.n	800b404 <_dtoa_r+0xa0>
 800b3d6:	4bb7      	ldr	r3, [pc, #732]	@ (800b6b4 <_dtoa_r+0x350>)
 800b3d8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b3da:	6013      	str	r3, [r2, #0]
 800b3dc:	033b      	lsls	r3, r7, #12
 800b3de:	0b1b      	lsrs	r3, r3, #12
 800b3e0:	4323      	orrs	r3, r4
 800b3e2:	d101      	bne.n	800b3e8 <_dtoa_r+0x84>
 800b3e4:	f000 fd83 	bl	800beee <_dtoa_r+0xb8a>
 800b3e8:	4bb3      	ldr	r3, [pc, #716]	@ (800b6b8 <_dtoa_r+0x354>)
 800b3ea:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b3ec:	9308      	str	r3, [sp, #32]
 800b3ee:	2a00      	cmp	r2, #0
 800b3f0:	d002      	beq.n	800b3f8 <_dtoa_r+0x94>
 800b3f2:	4bb2      	ldr	r3, [pc, #712]	@ (800b6bc <_dtoa_r+0x358>)
 800b3f4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b3f6:	6013      	str	r3, [r2, #0]
 800b3f8:	9808      	ldr	r0, [sp, #32]
 800b3fa:	b01d      	add	sp, #116	@ 0x74
 800b3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3fe:	2300      	movs	r3, #0
 800b400:	603b      	str	r3, [r7, #0]
 800b402:	e7e2      	b.n	800b3ca <_dtoa_r+0x66>
 800b404:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b408:	9212      	str	r2, [sp, #72]	@ 0x48
 800b40a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b40c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b40e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b410:	2200      	movs	r2, #0
 800b412:	2300      	movs	r3, #0
 800b414:	f7f5 f818 	bl	8000448 <__aeabi_dcmpeq>
 800b418:	1e06      	subs	r6, r0, #0
 800b41a:	d00b      	beq.n	800b434 <_dtoa_r+0xd0>
 800b41c:	2301      	movs	r3, #1
 800b41e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <_dtoa_r+0xca>
 800b428:	4ba5      	ldr	r3, [pc, #660]	@ (800b6c0 <_dtoa_r+0x35c>)
 800b42a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	4ba5      	ldr	r3, [pc, #660]	@ (800b6c4 <_dtoa_r+0x360>)
 800b430:	9308      	str	r3, [sp, #32]
 800b432:	e7e1      	b.n	800b3f8 <_dtoa_r+0x94>
 800b434:	ab1a      	add	r3, sp, #104	@ 0x68
 800b436:	9301      	str	r3, [sp, #4]
 800b438:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	9803      	ldr	r0, [sp, #12]
 800b43e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b440:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b442:	f001 fa85 	bl	800c950 <__d2b>
 800b446:	007a      	lsls	r2, r7, #1
 800b448:	9005      	str	r0, [sp, #20]
 800b44a:	0d52      	lsrs	r2, r2, #21
 800b44c:	d100      	bne.n	800b450 <_dtoa_r+0xec>
 800b44e:	e07b      	b.n	800b548 <_dtoa_r+0x1e4>
 800b450:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b452:	9618      	str	r6, [sp, #96]	@ 0x60
 800b454:	0319      	lsls	r1, r3, #12
 800b456:	4b9c      	ldr	r3, [pc, #624]	@ (800b6c8 <_dtoa_r+0x364>)
 800b458:	0b09      	lsrs	r1, r1, #12
 800b45a:	430b      	orrs	r3, r1
 800b45c:	499b      	ldr	r1, [pc, #620]	@ (800b6cc <_dtoa_r+0x368>)
 800b45e:	1857      	adds	r7, r2, r1
 800b460:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b462:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b464:	0019      	movs	r1, r3
 800b466:	2200      	movs	r2, #0
 800b468:	4b99      	ldr	r3, [pc, #612]	@ (800b6d0 <_dtoa_r+0x36c>)
 800b46a:	f7f6 faf9 	bl	8001a60 <__aeabi_dsub>
 800b46e:	4a99      	ldr	r2, [pc, #612]	@ (800b6d4 <_dtoa_r+0x370>)
 800b470:	4b99      	ldr	r3, [pc, #612]	@ (800b6d8 <_dtoa_r+0x374>)
 800b472:	f7f6 f82d 	bl	80014d0 <__aeabi_dmul>
 800b476:	4a99      	ldr	r2, [pc, #612]	@ (800b6dc <_dtoa_r+0x378>)
 800b478:	4b99      	ldr	r3, [pc, #612]	@ (800b6e0 <_dtoa_r+0x37c>)
 800b47a:	f7f5 f881 	bl	8000580 <__aeabi_dadd>
 800b47e:	0004      	movs	r4, r0
 800b480:	0038      	movs	r0, r7
 800b482:	000d      	movs	r5, r1
 800b484:	f7f6 fee6 	bl	8002254 <__aeabi_i2d>
 800b488:	4a96      	ldr	r2, [pc, #600]	@ (800b6e4 <_dtoa_r+0x380>)
 800b48a:	4b97      	ldr	r3, [pc, #604]	@ (800b6e8 <_dtoa_r+0x384>)
 800b48c:	f7f6 f820 	bl	80014d0 <__aeabi_dmul>
 800b490:	0002      	movs	r2, r0
 800b492:	000b      	movs	r3, r1
 800b494:	0020      	movs	r0, r4
 800b496:	0029      	movs	r1, r5
 800b498:	f7f5 f872 	bl	8000580 <__aeabi_dadd>
 800b49c:	0004      	movs	r4, r0
 800b49e:	000d      	movs	r5, r1
 800b4a0:	f7f6 fe9c 	bl	80021dc <__aeabi_d2iz>
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	9004      	str	r0, [sp, #16]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	0020      	movs	r0, r4
 800b4ac:	0029      	movs	r1, r5
 800b4ae:	f7f4 ffd1 	bl	8000454 <__aeabi_dcmplt>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d00b      	beq.n	800b4ce <_dtoa_r+0x16a>
 800b4b6:	9804      	ldr	r0, [sp, #16]
 800b4b8:	f7f6 fecc 	bl	8002254 <__aeabi_i2d>
 800b4bc:	002b      	movs	r3, r5
 800b4be:	0022      	movs	r2, r4
 800b4c0:	f7f4 ffc2 	bl	8000448 <__aeabi_dcmpeq>
 800b4c4:	4243      	negs	r3, r0
 800b4c6:	4158      	adcs	r0, r3
 800b4c8:	9b04      	ldr	r3, [sp, #16]
 800b4ca:	1a1b      	subs	r3, r3, r0
 800b4cc:	9304      	str	r3, [sp, #16]
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4d2:	9b04      	ldr	r3, [sp, #16]
 800b4d4:	2b16      	cmp	r3, #22
 800b4d6:	d810      	bhi.n	800b4fa <_dtoa_r+0x196>
 800b4d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b4da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b4dc:	9a04      	ldr	r2, [sp, #16]
 800b4de:	4b83      	ldr	r3, [pc, #524]	@ (800b6ec <_dtoa_r+0x388>)
 800b4e0:	00d2      	lsls	r2, r2, #3
 800b4e2:	189b      	adds	r3, r3, r2
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	f7f4 ffb4 	bl	8000454 <__aeabi_dcmplt>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d047      	beq.n	800b580 <_dtoa_r+0x21c>
 800b4f0:	9b04      	ldr	r3, [sp, #16]
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	9304      	str	r3, [sp, #16]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b4fe:	9206      	str	r2, [sp, #24]
 800b500:	1bdb      	subs	r3, r3, r7
 800b502:	1e5a      	subs	r2, r3, #1
 800b504:	d53e      	bpl.n	800b584 <_dtoa_r+0x220>
 800b506:	2201      	movs	r2, #1
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	9306      	str	r3, [sp, #24]
 800b50c:	2300      	movs	r3, #0
 800b50e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b510:	9b04      	ldr	r3, [sp, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	db38      	blt.n	800b588 <_dtoa_r+0x224>
 800b516:	9a04      	ldr	r2, [sp, #16]
 800b518:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b51a:	4694      	mov	ip, r2
 800b51c:	4463      	add	r3, ip
 800b51e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b520:	2300      	movs	r3, #0
 800b522:	9214      	str	r2, [sp, #80]	@ 0x50
 800b524:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b526:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b528:	2401      	movs	r4, #1
 800b52a:	2b09      	cmp	r3, #9
 800b52c:	d867      	bhi.n	800b5fe <_dtoa_r+0x29a>
 800b52e:	2b05      	cmp	r3, #5
 800b530:	dd02      	ble.n	800b538 <_dtoa_r+0x1d4>
 800b532:	2400      	movs	r4, #0
 800b534:	3b04      	subs	r3, #4
 800b536:	9322      	str	r3, [sp, #136]	@ 0x88
 800b538:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b53a:	1e98      	subs	r0, r3, #2
 800b53c:	2803      	cmp	r0, #3
 800b53e:	d867      	bhi.n	800b610 <_dtoa_r+0x2ac>
 800b540:	f7f4 fde8 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b544:	5b383a2b 	.word	0x5b383a2b
 800b548:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b54a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800b54c:	18f6      	adds	r6, r6, r3
 800b54e:	4b68      	ldr	r3, [pc, #416]	@ (800b6f0 <_dtoa_r+0x38c>)
 800b550:	18f2      	adds	r2, r6, r3
 800b552:	2a20      	cmp	r2, #32
 800b554:	dd0f      	ble.n	800b576 <_dtoa_r+0x212>
 800b556:	2340      	movs	r3, #64	@ 0x40
 800b558:	1a9b      	subs	r3, r3, r2
 800b55a:	409f      	lsls	r7, r3
 800b55c:	4b65      	ldr	r3, [pc, #404]	@ (800b6f4 <_dtoa_r+0x390>)
 800b55e:	0038      	movs	r0, r7
 800b560:	18f3      	adds	r3, r6, r3
 800b562:	40dc      	lsrs	r4, r3
 800b564:	4320      	orrs	r0, r4
 800b566:	f7f6 fea3 	bl	80022b0 <__aeabi_ui2d>
 800b56a:	2201      	movs	r2, #1
 800b56c:	4b62      	ldr	r3, [pc, #392]	@ (800b6f8 <_dtoa_r+0x394>)
 800b56e:	1e77      	subs	r7, r6, #1
 800b570:	18cb      	adds	r3, r1, r3
 800b572:	9218      	str	r2, [sp, #96]	@ 0x60
 800b574:	e776      	b.n	800b464 <_dtoa_r+0x100>
 800b576:	2320      	movs	r3, #32
 800b578:	0020      	movs	r0, r4
 800b57a:	1a9b      	subs	r3, r3, r2
 800b57c:	4098      	lsls	r0, r3
 800b57e:	e7f2      	b.n	800b566 <_dtoa_r+0x202>
 800b580:	9015      	str	r0, [sp, #84]	@ 0x54
 800b582:	e7ba      	b.n	800b4fa <_dtoa_r+0x196>
 800b584:	920d      	str	r2, [sp, #52]	@ 0x34
 800b586:	e7c3      	b.n	800b510 <_dtoa_r+0x1ac>
 800b588:	9b06      	ldr	r3, [sp, #24]
 800b58a:	9a04      	ldr	r2, [sp, #16]
 800b58c:	1a9b      	subs	r3, r3, r2
 800b58e:	9306      	str	r3, [sp, #24]
 800b590:	4253      	negs	r3, r2
 800b592:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b594:	2300      	movs	r3, #0
 800b596:	9314      	str	r3, [sp, #80]	@ 0x50
 800b598:	e7c5      	b.n	800b526 <_dtoa_r+0x1c2>
 800b59a:	2300      	movs	r3, #0
 800b59c:	9310      	str	r3, [sp, #64]	@ 0x40
 800b59e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b5a0:	930e      	str	r3, [sp, #56]	@ 0x38
 800b5a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	dc13      	bgt.n	800b5d0 <_dtoa_r+0x26c>
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	001a      	movs	r2, r3
 800b5ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800b5ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5b0:	9223      	str	r2, [sp, #140]	@ 0x8c
 800b5b2:	e00d      	b.n	800b5d0 <_dtoa_r+0x26c>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e7f1      	b.n	800b59c <_dtoa_r+0x238>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b5bc:	9310      	str	r3, [sp, #64]	@ 0x40
 800b5be:	4694      	mov	ip, r2
 800b5c0:	9b04      	ldr	r3, [sp, #16]
 800b5c2:	4463      	add	r3, ip
 800b5c4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	dc00      	bgt.n	800b5d0 <_dtoa_r+0x26c>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	9a03      	ldr	r2, [sp, #12]
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	69d0      	ldr	r0, [r2, #28]
 800b5d6:	2204      	movs	r2, #4
 800b5d8:	0015      	movs	r5, r2
 800b5da:	3514      	adds	r5, #20
 800b5dc:	429d      	cmp	r5, r3
 800b5de:	d91b      	bls.n	800b618 <_dtoa_r+0x2b4>
 800b5e0:	6041      	str	r1, [r0, #4]
 800b5e2:	9803      	ldr	r0, [sp, #12]
 800b5e4:	f000 fdb8 	bl	800c158 <_Balloc>
 800b5e8:	9008      	str	r0, [sp, #32]
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	d117      	bne.n	800b61e <_dtoa_r+0x2ba>
 800b5ee:	21b0      	movs	r1, #176	@ 0xb0
 800b5f0:	4b42      	ldr	r3, [pc, #264]	@ (800b6fc <_dtoa_r+0x398>)
 800b5f2:	482e      	ldr	r0, [pc, #184]	@ (800b6ac <_dtoa_r+0x348>)
 800b5f4:	9a08      	ldr	r2, [sp, #32]
 800b5f6:	31ff      	adds	r1, #255	@ 0xff
 800b5f8:	e6c9      	b.n	800b38e <_dtoa_r+0x2a>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e7dd      	b.n	800b5ba <_dtoa_r+0x256>
 800b5fe:	2300      	movs	r3, #0
 800b600:	9410      	str	r4, [sp, #64]	@ 0x40
 800b602:	9322      	str	r3, [sp, #136]	@ 0x88
 800b604:	3b01      	subs	r3, #1
 800b606:	930e      	str	r3, [sp, #56]	@ 0x38
 800b608:	9309      	str	r3, [sp, #36]	@ 0x24
 800b60a:	2200      	movs	r2, #0
 800b60c:	3313      	adds	r3, #19
 800b60e:	e7cf      	b.n	800b5b0 <_dtoa_r+0x24c>
 800b610:	2301      	movs	r3, #1
 800b612:	9310      	str	r3, [sp, #64]	@ 0x40
 800b614:	3b02      	subs	r3, #2
 800b616:	e7f6      	b.n	800b606 <_dtoa_r+0x2a2>
 800b618:	3101      	adds	r1, #1
 800b61a:	0052      	lsls	r2, r2, #1
 800b61c:	e7dc      	b.n	800b5d8 <_dtoa_r+0x274>
 800b61e:	9b03      	ldr	r3, [sp, #12]
 800b620:	9a08      	ldr	r2, [sp, #32]
 800b622:	69db      	ldr	r3, [r3, #28]
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b628:	2b0e      	cmp	r3, #14
 800b62a:	d900      	bls.n	800b62e <_dtoa_r+0x2ca>
 800b62c:	e0d9      	b.n	800b7e2 <_dtoa_r+0x47e>
 800b62e:	2c00      	cmp	r4, #0
 800b630:	d100      	bne.n	800b634 <_dtoa_r+0x2d0>
 800b632:	e0d6      	b.n	800b7e2 <_dtoa_r+0x47e>
 800b634:	9b04      	ldr	r3, [sp, #16]
 800b636:	2b00      	cmp	r3, #0
 800b638:	dd64      	ble.n	800b704 <_dtoa_r+0x3a0>
 800b63a:	210f      	movs	r1, #15
 800b63c:	9a04      	ldr	r2, [sp, #16]
 800b63e:	4b2b      	ldr	r3, [pc, #172]	@ (800b6ec <_dtoa_r+0x388>)
 800b640:	400a      	ands	r2, r1
 800b642:	00d2      	lsls	r2, r2, #3
 800b644:	189b      	adds	r3, r3, r2
 800b646:	681e      	ldr	r6, [r3, #0]
 800b648:	685f      	ldr	r7, [r3, #4]
 800b64a:	9b04      	ldr	r3, [sp, #16]
 800b64c:	2402      	movs	r4, #2
 800b64e:	111d      	asrs	r5, r3, #4
 800b650:	05db      	lsls	r3, r3, #23
 800b652:	d50a      	bpl.n	800b66a <_dtoa_r+0x306>
 800b654:	4b2a      	ldr	r3, [pc, #168]	@ (800b700 <_dtoa_r+0x39c>)
 800b656:	400d      	ands	r5, r1
 800b658:	6a1a      	ldr	r2, [r3, #32]
 800b65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b65c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b65e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b660:	f7f5 faf2 	bl	8000c48 <__aeabi_ddiv>
 800b664:	900a      	str	r0, [sp, #40]	@ 0x28
 800b666:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b668:	3401      	adds	r4, #1
 800b66a:	4b25      	ldr	r3, [pc, #148]	@ (800b700 <_dtoa_r+0x39c>)
 800b66c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b66e:	2d00      	cmp	r5, #0
 800b670:	d108      	bne.n	800b684 <_dtoa_r+0x320>
 800b672:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b674:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b676:	0032      	movs	r2, r6
 800b678:	003b      	movs	r3, r7
 800b67a:	f7f5 fae5 	bl	8000c48 <__aeabi_ddiv>
 800b67e:	900a      	str	r0, [sp, #40]	@ 0x28
 800b680:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b682:	e05a      	b.n	800b73a <_dtoa_r+0x3d6>
 800b684:	2301      	movs	r3, #1
 800b686:	421d      	tst	r5, r3
 800b688:	d009      	beq.n	800b69e <_dtoa_r+0x33a>
 800b68a:	18e4      	adds	r4, r4, r3
 800b68c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b68e:	0030      	movs	r0, r6
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	0039      	movs	r1, r7
 800b696:	f7f5 ff1b 	bl	80014d0 <__aeabi_dmul>
 800b69a:	0006      	movs	r6, r0
 800b69c:	000f      	movs	r7, r1
 800b69e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6a0:	106d      	asrs	r5, r5, #1
 800b6a2:	3308      	adds	r3, #8
 800b6a4:	e7e2      	b.n	800b66c <_dtoa_r+0x308>
 800b6a6:	46c0      	nop			@ (mov r8, r8)
 800b6a8:	0800ee3a 	.word	0x0800ee3a
 800b6ac:	0800ee51 	.word	0x0800ee51
 800b6b0:	7ff00000 	.word	0x7ff00000
 800b6b4:	0000270f 	.word	0x0000270f
 800b6b8:	0800ee36 	.word	0x0800ee36
 800b6bc:	0800ee39 	.word	0x0800ee39
 800b6c0:	0800ee05 	.word	0x0800ee05
 800b6c4:	0800ee04 	.word	0x0800ee04
 800b6c8:	3ff00000 	.word	0x3ff00000
 800b6cc:	fffffc01 	.word	0xfffffc01
 800b6d0:	3ff80000 	.word	0x3ff80000
 800b6d4:	636f4361 	.word	0x636f4361
 800b6d8:	3fd287a7 	.word	0x3fd287a7
 800b6dc:	8b60c8b3 	.word	0x8b60c8b3
 800b6e0:	3fc68a28 	.word	0x3fc68a28
 800b6e4:	509f79fb 	.word	0x509f79fb
 800b6e8:	3fd34413 	.word	0x3fd34413
 800b6ec:	0800ef48 	.word	0x0800ef48
 800b6f0:	00000432 	.word	0x00000432
 800b6f4:	00000412 	.word	0x00000412
 800b6f8:	fe100000 	.word	0xfe100000
 800b6fc:	0800eea9 	.word	0x0800eea9
 800b700:	0800ef20 	.word	0x0800ef20
 800b704:	9b04      	ldr	r3, [sp, #16]
 800b706:	2402      	movs	r4, #2
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d016      	beq.n	800b73a <_dtoa_r+0x3d6>
 800b70c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b70e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b710:	220f      	movs	r2, #15
 800b712:	425d      	negs	r5, r3
 800b714:	402a      	ands	r2, r5
 800b716:	4bd7      	ldr	r3, [pc, #860]	@ (800ba74 <_dtoa_r+0x710>)
 800b718:	00d2      	lsls	r2, r2, #3
 800b71a:	189b      	adds	r3, r3, r2
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	f7f5 fed6 	bl	80014d0 <__aeabi_dmul>
 800b724:	2701      	movs	r7, #1
 800b726:	2300      	movs	r3, #0
 800b728:	900a      	str	r0, [sp, #40]	@ 0x28
 800b72a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b72c:	4ed2      	ldr	r6, [pc, #840]	@ (800ba78 <_dtoa_r+0x714>)
 800b72e:	112d      	asrs	r5, r5, #4
 800b730:	2d00      	cmp	r5, #0
 800b732:	d000      	beq.n	800b736 <_dtoa_r+0x3d2>
 800b734:	e0ba      	b.n	800b8ac <_dtoa_r+0x548>
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1a1      	bne.n	800b67e <_dtoa_r+0x31a>
 800b73a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b73c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b73e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b740:	2b00      	cmp	r3, #0
 800b742:	d100      	bne.n	800b746 <_dtoa_r+0x3e2>
 800b744:	e0bd      	b.n	800b8c2 <_dtoa_r+0x55e>
 800b746:	2200      	movs	r2, #0
 800b748:	0030      	movs	r0, r6
 800b74a:	0039      	movs	r1, r7
 800b74c:	4bcb      	ldr	r3, [pc, #812]	@ (800ba7c <_dtoa_r+0x718>)
 800b74e:	f7f4 fe81 	bl	8000454 <__aeabi_dcmplt>
 800b752:	2800      	cmp	r0, #0
 800b754:	d100      	bne.n	800b758 <_dtoa_r+0x3f4>
 800b756:	e0b4      	b.n	800b8c2 <_dtoa_r+0x55e>
 800b758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d100      	bne.n	800b760 <_dtoa_r+0x3fc>
 800b75e:	e0b0      	b.n	800b8c2 <_dtoa_r+0x55e>
 800b760:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b762:	2b00      	cmp	r3, #0
 800b764:	dd39      	ble.n	800b7da <_dtoa_r+0x476>
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	2200      	movs	r2, #0
 800b76a:	3b01      	subs	r3, #1
 800b76c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b76e:	0030      	movs	r0, r6
 800b770:	4bc3      	ldr	r3, [pc, #780]	@ (800ba80 <_dtoa_r+0x71c>)
 800b772:	0039      	movs	r1, r7
 800b774:	f7f5 feac 	bl	80014d0 <__aeabi_dmul>
 800b778:	900a      	str	r0, [sp, #40]	@ 0x28
 800b77a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b77c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b77e:	3401      	adds	r4, #1
 800b780:	0020      	movs	r0, r4
 800b782:	9311      	str	r3, [sp, #68]	@ 0x44
 800b784:	f7f6 fd66 	bl	8002254 <__aeabi_i2d>
 800b788:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b78a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b78c:	f7f5 fea0 	bl	80014d0 <__aeabi_dmul>
 800b790:	4bbc      	ldr	r3, [pc, #752]	@ (800ba84 <_dtoa_r+0x720>)
 800b792:	2200      	movs	r2, #0
 800b794:	f7f4 fef4 	bl	8000580 <__aeabi_dadd>
 800b798:	4bbb      	ldr	r3, [pc, #748]	@ (800ba88 <_dtoa_r+0x724>)
 800b79a:	0006      	movs	r6, r0
 800b79c:	18cf      	adds	r7, r1, r3
 800b79e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d000      	beq.n	800b7a6 <_dtoa_r+0x442>
 800b7a4:	e091      	b.n	800b8ca <_dtoa_r+0x566>
 800b7a6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b7a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	4bb7      	ldr	r3, [pc, #732]	@ (800ba8c <_dtoa_r+0x728>)
 800b7ae:	f7f6 f957 	bl	8001a60 <__aeabi_dsub>
 800b7b2:	0032      	movs	r2, r6
 800b7b4:	003b      	movs	r3, r7
 800b7b6:	0004      	movs	r4, r0
 800b7b8:	000d      	movs	r5, r1
 800b7ba:	f7f4 fe5f 	bl	800047c <__aeabi_dcmpgt>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d000      	beq.n	800b7c4 <_dtoa_r+0x460>
 800b7c2:	e29d      	b.n	800bd00 <_dtoa_r+0x99c>
 800b7c4:	2180      	movs	r1, #128	@ 0x80
 800b7c6:	0609      	lsls	r1, r1, #24
 800b7c8:	187b      	adds	r3, r7, r1
 800b7ca:	0032      	movs	r2, r6
 800b7cc:	0020      	movs	r0, r4
 800b7ce:	0029      	movs	r1, r5
 800b7d0:	f7f4 fe40 	bl	8000454 <__aeabi_dcmplt>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d000      	beq.n	800b7da <_dtoa_r+0x476>
 800b7d8:	e130      	b.n	800ba3c <_dtoa_r+0x6d8>
 800b7da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7dc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b7de:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b7e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	da00      	bge.n	800b7ea <_dtoa_r+0x486>
 800b7e8:	e177      	b.n	800bada <_dtoa_r+0x776>
 800b7ea:	9a04      	ldr	r2, [sp, #16]
 800b7ec:	2a0e      	cmp	r2, #14
 800b7ee:	dd00      	ble.n	800b7f2 <_dtoa_r+0x48e>
 800b7f0:	e173      	b.n	800bada <_dtoa_r+0x776>
 800b7f2:	4ba0      	ldr	r3, [pc, #640]	@ (800ba74 <_dtoa_r+0x710>)
 800b7f4:	00d2      	lsls	r2, r2, #3
 800b7f6:	189b      	adds	r3, r3, r2
 800b7f8:	685c      	ldr	r4, [r3, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	9306      	str	r3, [sp, #24]
 800b7fe:	9407      	str	r4, [sp, #28]
 800b800:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b802:	2b00      	cmp	r3, #0
 800b804:	da03      	bge.n	800b80e <_dtoa_r+0x4aa>
 800b806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b808:	2b00      	cmp	r3, #0
 800b80a:	dc00      	bgt.n	800b80e <_dtoa_r+0x4aa>
 800b80c:	e106      	b.n	800ba1c <_dtoa_r+0x6b8>
 800b80e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b810:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b814:	9d08      	ldr	r5, [sp, #32]
 800b816:	3b01      	subs	r3, #1
 800b818:	195b      	adds	r3, r3, r5
 800b81a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b81c:	9a06      	ldr	r2, [sp, #24]
 800b81e:	9b07      	ldr	r3, [sp, #28]
 800b820:	0030      	movs	r0, r6
 800b822:	0039      	movs	r1, r7
 800b824:	f7f5 fa10 	bl	8000c48 <__aeabi_ddiv>
 800b828:	f7f6 fcd8 	bl	80021dc <__aeabi_d2iz>
 800b82c:	9009      	str	r0, [sp, #36]	@ 0x24
 800b82e:	f7f6 fd11 	bl	8002254 <__aeabi_i2d>
 800b832:	9a06      	ldr	r2, [sp, #24]
 800b834:	9b07      	ldr	r3, [sp, #28]
 800b836:	f7f5 fe4b 	bl	80014d0 <__aeabi_dmul>
 800b83a:	0002      	movs	r2, r0
 800b83c:	000b      	movs	r3, r1
 800b83e:	0030      	movs	r0, r6
 800b840:	0039      	movs	r1, r7
 800b842:	f7f6 f90d 	bl	8001a60 <__aeabi_dsub>
 800b846:	002b      	movs	r3, r5
 800b848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b84a:	3501      	adds	r5, #1
 800b84c:	3230      	adds	r2, #48	@ 0x30
 800b84e:	701a      	strb	r2, [r3, #0]
 800b850:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b852:	002c      	movs	r4, r5
 800b854:	429a      	cmp	r2, r3
 800b856:	d000      	beq.n	800b85a <_dtoa_r+0x4f6>
 800b858:	e131      	b.n	800babe <_dtoa_r+0x75a>
 800b85a:	0002      	movs	r2, r0
 800b85c:	000b      	movs	r3, r1
 800b85e:	f7f4 fe8f 	bl	8000580 <__aeabi_dadd>
 800b862:	9a06      	ldr	r2, [sp, #24]
 800b864:	9b07      	ldr	r3, [sp, #28]
 800b866:	0006      	movs	r6, r0
 800b868:	000f      	movs	r7, r1
 800b86a:	f7f4 fe07 	bl	800047c <__aeabi_dcmpgt>
 800b86e:	2800      	cmp	r0, #0
 800b870:	d000      	beq.n	800b874 <_dtoa_r+0x510>
 800b872:	e10f      	b.n	800ba94 <_dtoa_r+0x730>
 800b874:	9a06      	ldr	r2, [sp, #24]
 800b876:	9b07      	ldr	r3, [sp, #28]
 800b878:	0030      	movs	r0, r6
 800b87a:	0039      	movs	r1, r7
 800b87c:	f7f4 fde4 	bl	8000448 <__aeabi_dcmpeq>
 800b880:	2800      	cmp	r0, #0
 800b882:	d003      	beq.n	800b88c <_dtoa_r+0x528>
 800b884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b886:	07dd      	lsls	r5, r3, #31
 800b888:	d500      	bpl.n	800b88c <_dtoa_r+0x528>
 800b88a:	e103      	b.n	800ba94 <_dtoa_r+0x730>
 800b88c:	9905      	ldr	r1, [sp, #20]
 800b88e:	9803      	ldr	r0, [sp, #12]
 800b890:	f000 fca6 	bl	800c1e0 <_Bfree>
 800b894:	2300      	movs	r3, #0
 800b896:	7023      	strb	r3, [r4, #0]
 800b898:	9b04      	ldr	r3, [sp, #16]
 800b89a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b89c:	3301      	adds	r3, #1
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d100      	bne.n	800b8a8 <_dtoa_r+0x544>
 800b8a6:	e5a7      	b.n	800b3f8 <_dtoa_r+0x94>
 800b8a8:	601c      	str	r4, [r3, #0]
 800b8aa:	e5a5      	b.n	800b3f8 <_dtoa_r+0x94>
 800b8ac:	423d      	tst	r5, r7
 800b8ae:	d005      	beq.n	800b8bc <_dtoa_r+0x558>
 800b8b0:	6832      	ldr	r2, [r6, #0]
 800b8b2:	6873      	ldr	r3, [r6, #4]
 800b8b4:	f7f5 fe0c 	bl	80014d0 <__aeabi_dmul>
 800b8b8:	003b      	movs	r3, r7
 800b8ba:	3401      	adds	r4, #1
 800b8bc:	106d      	asrs	r5, r5, #1
 800b8be:	3608      	adds	r6, #8
 800b8c0:	e736      	b.n	800b730 <_dtoa_r+0x3cc>
 800b8c2:	9b04      	ldr	r3, [sp, #16]
 800b8c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c8:	e75a      	b.n	800b780 <_dtoa_r+0x41c>
 800b8ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b8cc:	4b69      	ldr	r3, [pc, #420]	@ (800ba74 <_dtoa_r+0x710>)
 800b8ce:	3a01      	subs	r2, #1
 800b8d0:	00d2      	lsls	r2, r2, #3
 800b8d2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b8d4:	189b      	adds	r3, r3, r2
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	2900      	cmp	r1, #0
 800b8dc:	d04c      	beq.n	800b978 <_dtoa_r+0x614>
 800b8de:	2000      	movs	r0, #0
 800b8e0:	496b      	ldr	r1, [pc, #428]	@ (800ba90 <_dtoa_r+0x72c>)
 800b8e2:	f7f5 f9b1 	bl	8000c48 <__aeabi_ddiv>
 800b8e6:	0032      	movs	r2, r6
 800b8e8:	003b      	movs	r3, r7
 800b8ea:	f7f6 f8b9 	bl	8001a60 <__aeabi_dsub>
 800b8ee:	9a08      	ldr	r2, [sp, #32]
 800b8f0:	0006      	movs	r6, r0
 800b8f2:	4694      	mov	ip, r2
 800b8f4:	000f      	movs	r7, r1
 800b8f6:	9b08      	ldr	r3, [sp, #32]
 800b8f8:	9316      	str	r3, [sp, #88]	@ 0x58
 800b8fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8fc:	4463      	add	r3, ip
 800b8fe:	9311      	str	r3, [sp, #68]	@ 0x44
 800b900:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b902:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b904:	f7f6 fc6a 	bl	80021dc <__aeabi_d2iz>
 800b908:	0005      	movs	r5, r0
 800b90a:	f7f6 fca3 	bl	8002254 <__aeabi_i2d>
 800b90e:	0002      	movs	r2, r0
 800b910:	000b      	movs	r3, r1
 800b912:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b914:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b916:	f7f6 f8a3 	bl	8001a60 <__aeabi_dsub>
 800b91a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b91c:	3530      	adds	r5, #48	@ 0x30
 800b91e:	1c5c      	adds	r4, r3, #1
 800b920:	701d      	strb	r5, [r3, #0]
 800b922:	0032      	movs	r2, r6
 800b924:	003b      	movs	r3, r7
 800b926:	900a      	str	r0, [sp, #40]	@ 0x28
 800b928:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b92a:	f7f4 fd93 	bl	8000454 <__aeabi_dcmplt>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d16a      	bne.n	800ba08 <_dtoa_r+0x6a4>
 800b932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b934:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b936:	2000      	movs	r0, #0
 800b938:	4950      	ldr	r1, [pc, #320]	@ (800ba7c <_dtoa_r+0x718>)
 800b93a:	f7f6 f891 	bl	8001a60 <__aeabi_dsub>
 800b93e:	0032      	movs	r2, r6
 800b940:	003b      	movs	r3, r7
 800b942:	f7f4 fd87 	bl	8000454 <__aeabi_dcmplt>
 800b946:	2800      	cmp	r0, #0
 800b948:	d000      	beq.n	800b94c <_dtoa_r+0x5e8>
 800b94a:	e0a5      	b.n	800ba98 <_dtoa_r+0x734>
 800b94c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b94e:	42a3      	cmp	r3, r4
 800b950:	d100      	bne.n	800b954 <_dtoa_r+0x5f0>
 800b952:	e742      	b.n	800b7da <_dtoa_r+0x476>
 800b954:	2200      	movs	r2, #0
 800b956:	0030      	movs	r0, r6
 800b958:	0039      	movs	r1, r7
 800b95a:	4b49      	ldr	r3, [pc, #292]	@ (800ba80 <_dtoa_r+0x71c>)
 800b95c:	f7f5 fdb8 	bl	80014d0 <__aeabi_dmul>
 800b960:	2200      	movs	r2, #0
 800b962:	0006      	movs	r6, r0
 800b964:	000f      	movs	r7, r1
 800b966:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b968:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b96a:	4b45      	ldr	r3, [pc, #276]	@ (800ba80 <_dtoa_r+0x71c>)
 800b96c:	f7f5 fdb0 	bl	80014d0 <__aeabi_dmul>
 800b970:	9416      	str	r4, [sp, #88]	@ 0x58
 800b972:	900a      	str	r0, [sp, #40]	@ 0x28
 800b974:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b976:	e7c3      	b.n	800b900 <_dtoa_r+0x59c>
 800b978:	0030      	movs	r0, r6
 800b97a:	0039      	movs	r1, r7
 800b97c:	f7f5 fda8 	bl	80014d0 <__aeabi_dmul>
 800b980:	9d08      	ldr	r5, [sp, #32]
 800b982:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b984:	002b      	movs	r3, r5
 800b986:	4694      	mov	ip, r2
 800b988:	9016      	str	r0, [sp, #88]	@ 0x58
 800b98a:	9117      	str	r1, [sp, #92]	@ 0x5c
 800b98c:	4463      	add	r3, ip
 800b98e:	9319      	str	r3, [sp, #100]	@ 0x64
 800b990:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b992:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b994:	f7f6 fc22 	bl	80021dc <__aeabi_d2iz>
 800b998:	0004      	movs	r4, r0
 800b99a:	f7f6 fc5b 	bl	8002254 <__aeabi_i2d>
 800b99e:	000b      	movs	r3, r1
 800b9a0:	0002      	movs	r2, r0
 800b9a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b9a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9a6:	f7f6 f85b 	bl	8001a60 <__aeabi_dsub>
 800b9aa:	3430      	adds	r4, #48	@ 0x30
 800b9ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9ae:	702c      	strb	r4, [r5, #0]
 800b9b0:	3501      	adds	r5, #1
 800b9b2:	0006      	movs	r6, r0
 800b9b4:	000f      	movs	r7, r1
 800b9b6:	42ab      	cmp	r3, r5
 800b9b8:	d129      	bne.n	800ba0e <_dtoa_r+0x6aa>
 800b9ba:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800b9bc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800b9be:	9b08      	ldr	r3, [sp, #32]
 800b9c0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800b9c2:	469c      	mov	ip, r3
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	4b32      	ldr	r3, [pc, #200]	@ (800ba90 <_dtoa_r+0x72c>)
 800b9c8:	4464      	add	r4, ip
 800b9ca:	f7f4 fdd9 	bl	8000580 <__aeabi_dadd>
 800b9ce:	0002      	movs	r2, r0
 800b9d0:	000b      	movs	r3, r1
 800b9d2:	0030      	movs	r0, r6
 800b9d4:	0039      	movs	r1, r7
 800b9d6:	f7f4 fd51 	bl	800047c <__aeabi_dcmpgt>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d15c      	bne.n	800ba98 <_dtoa_r+0x734>
 800b9de:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b9e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	492a      	ldr	r1, [pc, #168]	@ (800ba90 <_dtoa_r+0x72c>)
 800b9e6:	f7f6 f83b 	bl	8001a60 <__aeabi_dsub>
 800b9ea:	0002      	movs	r2, r0
 800b9ec:	000b      	movs	r3, r1
 800b9ee:	0030      	movs	r0, r6
 800b9f0:	0039      	movs	r1, r7
 800b9f2:	f7f4 fd2f 	bl	8000454 <__aeabi_dcmplt>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d100      	bne.n	800b9fc <_dtoa_r+0x698>
 800b9fa:	e6ee      	b.n	800b7da <_dtoa_r+0x476>
 800b9fc:	0023      	movs	r3, r4
 800b9fe:	3c01      	subs	r4, #1
 800ba00:	7822      	ldrb	r2, [r4, #0]
 800ba02:	2a30      	cmp	r2, #48	@ 0x30
 800ba04:	d0fa      	beq.n	800b9fc <_dtoa_r+0x698>
 800ba06:	001c      	movs	r4, r3
 800ba08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba0a:	9304      	str	r3, [sp, #16]
 800ba0c:	e73e      	b.n	800b88c <_dtoa_r+0x528>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	4b1b      	ldr	r3, [pc, #108]	@ (800ba80 <_dtoa_r+0x71c>)
 800ba12:	f7f5 fd5d 	bl	80014d0 <__aeabi_dmul>
 800ba16:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba18:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ba1a:	e7b9      	b.n	800b990 <_dtoa_r+0x62c>
 800ba1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10c      	bne.n	800ba3c <_dtoa_r+0x6d8>
 800ba22:	9806      	ldr	r0, [sp, #24]
 800ba24:	9907      	ldr	r1, [sp, #28]
 800ba26:	2200      	movs	r2, #0
 800ba28:	4b18      	ldr	r3, [pc, #96]	@ (800ba8c <_dtoa_r+0x728>)
 800ba2a:	f7f5 fd51 	bl	80014d0 <__aeabi_dmul>
 800ba2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba32:	f7f4 fd2d 	bl	8000490 <__aeabi_dcmpge>
 800ba36:	2800      	cmp	r0, #0
 800ba38:	d100      	bne.n	800ba3c <_dtoa_r+0x6d8>
 800ba3a:	e164      	b.n	800bd06 <_dtoa_r+0x9a2>
 800ba3c:	2600      	movs	r6, #0
 800ba3e:	0037      	movs	r7, r6
 800ba40:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba42:	9c08      	ldr	r4, [sp, #32]
 800ba44:	43db      	mvns	r3, r3
 800ba46:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba48:	2300      	movs	r3, #0
 800ba4a:	9304      	str	r3, [sp, #16]
 800ba4c:	0031      	movs	r1, r6
 800ba4e:	9803      	ldr	r0, [sp, #12]
 800ba50:	f000 fbc6 	bl	800c1e0 <_Bfree>
 800ba54:	2f00      	cmp	r7, #0
 800ba56:	d0d7      	beq.n	800ba08 <_dtoa_r+0x6a4>
 800ba58:	9b04      	ldr	r3, [sp, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d005      	beq.n	800ba6a <_dtoa_r+0x706>
 800ba5e:	42bb      	cmp	r3, r7
 800ba60:	d003      	beq.n	800ba6a <_dtoa_r+0x706>
 800ba62:	0019      	movs	r1, r3
 800ba64:	9803      	ldr	r0, [sp, #12]
 800ba66:	f000 fbbb 	bl	800c1e0 <_Bfree>
 800ba6a:	0039      	movs	r1, r7
 800ba6c:	9803      	ldr	r0, [sp, #12]
 800ba6e:	f000 fbb7 	bl	800c1e0 <_Bfree>
 800ba72:	e7c9      	b.n	800ba08 <_dtoa_r+0x6a4>
 800ba74:	0800ef48 	.word	0x0800ef48
 800ba78:	0800ef20 	.word	0x0800ef20
 800ba7c:	3ff00000 	.word	0x3ff00000
 800ba80:	40240000 	.word	0x40240000
 800ba84:	401c0000 	.word	0x401c0000
 800ba88:	fcc00000 	.word	0xfcc00000
 800ba8c:	40140000 	.word	0x40140000
 800ba90:	3fe00000 	.word	0x3fe00000
 800ba94:	9b04      	ldr	r3, [sp, #16]
 800ba96:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba98:	0023      	movs	r3, r4
 800ba9a:	001c      	movs	r4, r3
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	781a      	ldrb	r2, [r3, #0]
 800baa0:	2a39      	cmp	r2, #57	@ 0x39
 800baa2:	d108      	bne.n	800bab6 <_dtoa_r+0x752>
 800baa4:	9a08      	ldr	r2, [sp, #32]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d1f7      	bne.n	800ba9a <_dtoa_r+0x736>
 800baaa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800baac:	9908      	ldr	r1, [sp, #32]
 800baae:	3201      	adds	r2, #1
 800bab0:	920c      	str	r2, [sp, #48]	@ 0x30
 800bab2:	2230      	movs	r2, #48	@ 0x30
 800bab4:	700a      	strb	r2, [r1, #0]
 800bab6:	781a      	ldrb	r2, [r3, #0]
 800bab8:	3201      	adds	r2, #1
 800baba:	701a      	strb	r2, [r3, #0]
 800babc:	e7a4      	b.n	800ba08 <_dtoa_r+0x6a4>
 800babe:	2200      	movs	r2, #0
 800bac0:	4bc6      	ldr	r3, [pc, #792]	@ (800bddc <_dtoa_r+0xa78>)
 800bac2:	f7f5 fd05 	bl	80014d0 <__aeabi_dmul>
 800bac6:	2200      	movs	r2, #0
 800bac8:	2300      	movs	r3, #0
 800baca:	0006      	movs	r6, r0
 800bacc:	000f      	movs	r7, r1
 800bace:	f7f4 fcbb 	bl	8000448 <__aeabi_dcmpeq>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d100      	bne.n	800bad8 <_dtoa_r+0x774>
 800bad6:	e6a1      	b.n	800b81c <_dtoa_r+0x4b8>
 800bad8:	e6d8      	b.n	800b88c <_dtoa_r+0x528>
 800bada:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800badc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bade:	9c06      	ldr	r4, [sp, #24]
 800bae0:	2f00      	cmp	r7, #0
 800bae2:	d014      	beq.n	800bb0e <_dtoa_r+0x7aa>
 800bae4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bae6:	2a01      	cmp	r2, #1
 800bae8:	dd00      	ble.n	800baec <_dtoa_r+0x788>
 800baea:	e0c8      	b.n	800bc7e <_dtoa_r+0x91a>
 800baec:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800baee:	2a00      	cmp	r2, #0
 800baf0:	d100      	bne.n	800baf4 <_dtoa_r+0x790>
 800baf2:	e0be      	b.n	800bc72 <_dtoa_r+0x90e>
 800baf4:	4aba      	ldr	r2, [pc, #744]	@ (800bde0 <_dtoa_r+0xa7c>)
 800baf6:	189b      	adds	r3, r3, r2
 800baf8:	9a06      	ldr	r2, [sp, #24]
 800bafa:	2101      	movs	r1, #1
 800bafc:	18d2      	adds	r2, r2, r3
 800bafe:	9206      	str	r2, [sp, #24]
 800bb00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb02:	9803      	ldr	r0, [sp, #12]
 800bb04:	18d3      	adds	r3, r2, r3
 800bb06:	930d      	str	r3, [sp, #52]	@ 0x34
 800bb08:	f000 fc6e 	bl	800c3e8 <__i2b>
 800bb0c:	0007      	movs	r7, r0
 800bb0e:	2c00      	cmp	r4, #0
 800bb10:	d00e      	beq.n	800bb30 <_dtoa_r+0x7cc>
 800bb12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	dd0b      	ble.n	800bb30 <_dtoa_r+0x7cc>
 800bb18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb1a:	0023      	movs	r3, r4
 800bb1c:	4294      	cmp	r4, r2
 800bb1e:	dd00      	ble.n	800bb22 <_dtoa_r+0x7be>
 800bb20:	0013      	movs	r3, r2
 800bb22:	9a06      	ldr	r2, [sp, #24]
 800bb24:	1ae4      	subs	r4, r4, r3
 800bb26:	1ad2      	subs	r2, r2, r3
 800bb28:	9206      	str	r2, [sp, #24]
 800bb2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	930d      	str	r3, [sp, #52]	@ 0x34
 800bb30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d01f      	beq.n	800bb76 <_dtoa_r+0x812>
 800bb36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d100      	bne.n	800bb3e <_dtoa_r+0x7da>
 800bb3c:	e0b5      	b.n	800bcaa <_dtoa_r+0x946>
 800bb3e:	2d00      	cmp	r5, #0
 800bb40:	d010      	beq.n	800bb64 <_dtoa_r+0x800>
 800bb42:	0039      	movs	r1, r7
 800bb44:	002a      	movs	r2, r5
 800bb46:	9803      	ldr	r0, [sp, #12]
 800bb48:	f000 fd18 	bl	800c57c <__pow5mult>
 800bb4c:	9a05      	ldr	r2, [sp, #20]
 800bb4e:	0001      	movs	r1, r0
 800bb50:	0007      	movs	r7, r0
 800bb52:	9803      	ldr	r0, [sp, #12]
 800bb54:	f000 fc60 	bl	800c418 <__multiply>
 800bb58:	0006      	movs	r6, r0
 800bb5a:	9905      	ldr	r1, [sp, #20]
 800bb5c:	9803      	ldr	r0, [sp, #12]
 800bb5e:	f000 fb3f 	bl	800c1e0 <_Bfree>
 800bb62:	9605      	str	r6, [sp, #20]
 800bb64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb66:	1b5a      	subs	r2, r3, r5
 800bb68:	42ab      	cmp	r3, r5
 800bb6a:	d004      	beq.n	800bb76 <_dtoa_r+0x812>
 800bb6c:	9905      	ldr	r1, [sp, #20]
 800bb6e:	9803      	ldr	r0, [sp, #12]
 800bb70:	f000 fd04 	bl	800c57c <__pow5mult>
 800bb74:	9005      	str	r0, [sp, #20]
 800bb76:	2101      	movs	r1, #1
 800bb78:	9803      	ldr	r0, [sp, #12]
 800bb7a:	f000 fc35 	bl	800c3e8 <__i2b>
 800bb7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb80:	0006      	movs	r6, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d100      	bne.n	800bb88 <_dtoa_r+0x824>
 800bb86:	e1bc      	b.n	800bf02 <_dtoa_r+0xb9e>
 800bb88:	001a      	movs	r2, r3
 800bb8a:	0001      	movs	r1, r0
 800bb8c:	9803      	ldr	r0, [sp, #12]
 800bb8e:	f000 fcf5 	bl	800c57c <__pow5mult>
 800bb92:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bb94:	0006      	movs	r6, r0
 800bb96:	2500      	movs	r5, #0
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	dc16      	bgt.n	800bbca <_dtoa_r+0x866>
 800bb9c:	2500      	movs	r5, #0
 800bb9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bba0:	42ab      	cmp	r3, r5
 800bba2:	d10e      	bne.n	800bbc2 <_dtoa_r+0x85e>
 800bba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bba6:	031b      	lsls	r3, r3, #12
 800bba8:	42ab      	cmp	r3, r5
 800bbaa:	d10a      	bne.n	800bbc2 <_dtoa_r+0x85e>
 800bbac:	4b8d      	ldr	r3, [pc, #564]	@ (800bde4 <_dtoa_r+0xa80>)
 800bbae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bbb0:	4213      	tst	r3, r2
 800bbb2:	d006      	beq.n	800bbc2 <_dtoa_r+0x85e>
 800bbb4:	9b06      	ldr	r3, [sp, #24]
 800bbb6:	3501      	adds	r5, #1
 800bbb8:	3301      	adds	r3, #1
 800bbba:	9306      	str	r3, [sp, #24]
 800bbbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	930d      	str	r3, [sp, #52]	@ 0x34
 800bbc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bbc4:	2001      	movs	r0, #1
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d008      	beq.n	800bbdc <_dtoa_r+0x878>
 800bbca:	6933      	ldr	r3, [r6, #16]
 800bbcc:	3303      	adds	r3, #3
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	18f3      	adds	r3, r6, r3
 800bbd2:	6858      	ldr	r0, [r3, #4]
 800bbd4:	f000 fbb8 	bl	800c348 <__hi0bits>
 800bbd8:	2320      	movs	r3, #32
 800bbda:	1a18      	subs	r0, r3, r0
 800bbdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbde:	1818      	adds	r0, r3, r0
 800bbe0:	0002      	movs	r2, r0
 800bbe2:	231f      	movs	r3, #31
 800bbe4:	401a      	ands	r2, r3
 800bbe6:	4218      	tst	r0, r3
 800bbe8:	d065      	beq.n	800bcb6 <_dtoa_r+0x952>
 800bbea:	3301      	adds	r3, #1
 800bbec:	1a9b      	subs	r3, r3, r2
 800bbee:	2b04      	cmp	r3, #4
 800bbf0:	dd5d      	ble.n	800bcae <_dtoa_r+0x94a>
 800bbf2:	231c      	movs	r3, #28
 800bbf4:	1a9b      	subs	r3, r3, r2
 800bbf6:	9a06      	ldr	r2, [sp, #24]
 800bbf8:	18e4      	adds	r4, r4, r3
 800bbfa:	18d2      	adds	r2, r2, r3
 800bbfc:	9206      	str	r2, [sp, #24]
 800bbfe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc00:	18d3      	adds	r3, r2, r3
 800bc02:	930d      	str	r3, [sp, #52]	@ 0x34
 800bc04:	9b06      	ldr	r3, [sp, #24]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	dd05      	ble.n	800bc16 <_dtoa_r+0x8b2>
 800bc0a:	001a      	movs	r2, r3
 800bc0c:	9905      	ldr	r1, [sp, #20]
 800bc0e:	9803      	ldr	r0, [sp, #12]
 800bc10:	f000 fd10 	bl	800c634 <__lshift>
 800bc14:	9005      	str	r0, [sp, #20]
 800bc16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	dd05      	ble.n	800bc28 <_dtoa_r+0x8c4>
 800bc1c:	0031      	movs	r1, r6
 800bc1e:	001a      	movs	r2, r3
 800bc20:	9803      	ldr	r0, [sp, #12]
 800bc22:	f000 fd07 	bl	800c634 <__lshift>
 800bc26:	0006      	movs	r6, r0
 800bc28:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d045      	beq.n	800bcba <_dtoa_r+0x956>
 800bc2e:	0031      	movs	r1, r6
 800bc30:	9805      	ldr	r0, [sp, #20]
 800bc32:	f000 fd6b 	bl	800c70c <__mcmp>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	da3f      	bge.n	800bcba <_dtoa_r+0x956>
 800bc3a:	9b04      	ldr	r3, [sp, #16]
 800bc3c:	220a      	movs	r2, #10
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc42:	9905      	ldr	r1, [sp, #20]
 800bc44:	2300      	movs	r3, #0
 800bc46:	9803      	ldr	r0, [sp, #12]
 800bc48:	f000 faee 	bl	800c228 <__multadd>
 800bc4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc4e:	9005      	str	r0, [sp, #20]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d100      	bne.n	800bc56 <_dtoa_r+0x8f2>
 800bc54:	e15c      	b.n	800bf10 <_dtoa_r+0xbac>
 800bc56:	2300      	movs	r3, #0
 800bc58:	0039      	movs	r1, r7
 800bc5a:	220a      	movs	r2, #10
 800bc5c:	9803      	ldr	r0, [sp, #12]
 800bc5e:	f000 fae3 	bl	800c228 <__multadd>
 800bc62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc64:	0007      	movs	r7, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	dc55      	bgt.n	800bd16 <_dtoa_r+0x9b2>
 800bc6a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	dc2d      	bgt.n	800bccc <_dtoa_r+0x968>
 800bc70:	e051      	b.n	800bd16 <_dtoa_r+0x9b2>
 800bc72:	2336      	movs	r3, #54	@ 0x36
 800bc74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bc76:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bc78:	9c06      	ldr	r4, [sp, #24]
 800bc7a:	1a9b      	subs	r3, r3, r2
 800bc7c:	e73c      	b.n	800baf8 <_dtoa_r+0x794>
 800bc7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc80:	1e5d      	subs	r5, r3, #1
 800bc82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc84:	42ab      	cmp	r3, r5
 800bc86:	db08      	blt.n	800bc9a <_dtoa_r+0x936>
 800bc88:	1b5d      	subs	r5, r3, r5
 800bc8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc8c:	9c06      	ldr	r4, [sp, #24]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	db00      	blt.n	800bc94 <_dtoa_r+0x930>
 800bc92:	e731      	b.n	800baf8 <_dtoa_r+0x794>
 800bc94:	1ae4      	subs	r4, r4, r3
 800bc96:	2300      	movs	r3, #0
 800bc98:	e72e      	b.n	800baf8 <_dtoa_r+0x794>
 800bc9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bc9e:	1aeb      	subs	r3, r5, r3
 800bca0:	18d3      	adds	r3, r2, r3
 800bca2:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bca4:	9314      	str	r3, [sp, #80]	@ 0x50
 800bca6:	2500      	movs	r5, #0
 800bca8:	e7ef      	b.n	800bc8a <_dtoa_r+0x926>
 800bcaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bcac:	e75e      	b.n	800bb6c <_dtoa_r+0x808>
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d0a8      	beq.n	800bc04 <_dtoa_r+0x8a0>
 800bcb2:	331c      	adds	r3, #28
 800bcb4:	e79f      	b.n	800bbf6 <_dtoa_r+0x892>
 800bcb6:	0013      	movs	r3, r2
 800bcb8:	e7fb      	b.n	800bcb2 <_dtoa_r+0x94e>
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc0:	930e      	str	r3, [sp, #56]	@ 0x38
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	dc23      	bgt.n	800bd0e <_dtoa_r+0x9aa>
 800bcc6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	dd20      	ble.n	800bd0e <_dtoa_r+0x9aa>
 800bccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d000      	beq.n	800bcd4 <_dtoa_r+0x970>
 800bcd2:	e6b5      	b.n	800ba40 <_dtoa_r+0x6dc>
 800bcd4:	0031      	movs	r1, r6
 800bcd6:	2205      	movs	r2, #5
 800bcd8:	9803      	ldr	r0, [sp, #12]
 800bcda:	f000 faa5 	bl	800c228 <__multadd>
 800bcde:	0006      	movs	r6, r0
 800bce0:	0001      	movs	r1, r0
 800bce2:	9805      	ldr	r0, [sp, #20]
 800bce4:	f000 fd12 	bl	800c70c <__mcmp>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	dc00      	bgt.n	800bcee <_dtoa_r+0x98a>
 800bcec:	e6a8      	b.n	800ba40 <_dtoa_r+0x6dc>
 800bcee:	9b08      	ldr	r3, [sp, #32]
 800bcf0:	9a08      	ldr	r2, [sp, #32]
 800bcf2:	1c5c      	adds	r4, r3, #1
 800bcf4:	2331      	movs	r3, #49	@ 0x31
 800bcf6:	7013      	strb	r3, [r2, #0]
 800bcf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcfe:	e6a3      	b.n	800ba48 <_dtoa_r+0x6e4>
 800bd00:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bd02:	0037      	movs	r7, r6
 800bd04:	e7f3      	b.n	800bcee <_dtoa_r+0x98a>
 800bd06:	9b04      	ldr	r3, [sp, #16]
 800bd08:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800bd0a:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd0c:	e7f9      	b.n	800bd02 <_dtoa_r+0x99e>
 800bd0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d100      	bne.n	800bd16 <_dtoa_r+0x9b2>
 800bd14:	e100      	b.n	800bf18 <_dtoa_r+0xbb4>
 800bd16:	2c00      	cmp	r4, #0
 800bd18:	dd05      	ble.n	800bd26 <_dtoa_r+0x9c2>
 800bd1a:	0039      	movs	r1, r7
 800bd1c:	0022      	movs	r2, r4
 800bd1e:	9803      	ldr	r0, [sp, #12]
 800bd20:	f000 fc88 	bl	800c634 <__lshift>
 800bd24:	0007      	movs	r7, r0
 800bd26:	0038      	movs	r0, r7
 800bd28:	2d00      	cmp	r5, #0
 800bd2a:	d018      	beq.n	800bd5e <_dtoa_r+0x9fa>
 800bd2c:	6879      	ldr	r1, [r7, #4]
 800bd2e:	9803      	ldr	r0, [sp, #12]
 800bd30:	f000 fa12 	bl	800c158 <_Balloc>
 800bd34:	1e04      	subs	r4, r0, #0
 800bd36:	d105      	bne.n	800bd44 <_dtoa_r+0x9e0>
 800bd38:	0022      	movs	r2, r4
 800bd3a:	4b2b      	ldr	r3, [pc, #172]	@ (800bde8 <_dtoa_r+0xa84>)
 800bd3c:	482b      	ldr	r0, [pc, #172]	@ (800bdec <_dtoa_r+0xa88>)
 800bd3e:	492c      	ldr	r1, [pc, #176]	@ (800bdf0 <_dtoa_r+0xa8c>)
 800bd40:	f7ff fb25 	bl	800b38e <_dtoa_r+0x2a>
 800bd44:	0039      	movs	r1, r7
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	310c      	adds	r1, #12
 800bd4a:	3202      	adds	r2, #2
 800bd4c:	0092      	lsls	r2, r2, #2
 800bd4e:	300c      	adds	r0, #12
 800bd50:	f001 ffb2 	bl	800dcb8 <memcpy>
 800bd54:	2201      	movs	r2, #1
 800bd56:	0021      	movs	r1, r4
 800bd58:	9803      	ldr	r0, [sp, #12]
 800bd5a:	f000 fc6b 	bl	800c634 <__lshift>
 800bd5e:	9b08      	ldr	r3, [sp, #32]
 800bd60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd62:	9306      	str	r3, [sp, #24]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	189b      	adds	r3, r3, r2
 800bd68:	2201      	movs	r2, #1
 800bd6a:	9704      	str	r7, [sp, #16]
 800bd6c:	0007      	movs	r7, r0
 800bd6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd72:	4013      	ands	r3, r2
 800bd74:	930e      	str	r3, [sp, #56]	@ 0x38
 800bd76:	0031      	movs	r1, r6
 800bd78:	9805      	ldr	r0, [sp, #20]
 800bd7a:	f7ff fa65 	bl	800b248 <quorem>
 800bd7e:	9904      	ldr	r1, [sp, #16]
 800bd80:	0005      	movs	r5, r0
 800bd82:	900a      	str	r0, [sp, #40]	@ 0x28
 800bd84:	9805      	ldr	r0, [sp, #20]
 800bd86:	f000 fcc1 	bl	800c70c <__mcmp>
 800bd8a:	003a      	movs	r2, r7
 800bd8c:	900d      	str	r0, [sp, #52]	@ 0x34
 800bd8e:	0031      	movs	r1, r6
 800bd90:	9803      	ldr	r0, [sp, #12]
 800bd92:	f000 fcd7 	bl	800c744 <__mdiff>
 800bd96:	2201      	movs	r2, #1
 800bd98:	68c3      	ldr	r3, [r0, #12]
 800bd9a:	0004      	movs	r4, r0
 800bd9c:	3530      	adds	r5, #48	@ 0x30
 800bd9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d104      	bne.n	800bdae <_dtoa_r+0xa4a>
 800bda4:	0001      	movs	r1, r0
 800bda6:	9805      	ldr	r0, [sp, #20]
 800bda8:	f000 fcb0 	bl	800c70c <__mcmp>
 800bdac:	9009      	str	r0, [sp, #36]	@ 0x24
 800bdae:	0021      	movs	r1, r4
 800bdb0:	9803      	ldr	r0, [sp, #12]
 800bdb2:	f000 fa15 	bl	800c1e0 <_Bfree>
 800bdb6:	9b06      	ldr	r3, [sp, #24]
 800bdb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdba:	1c5c      	adds	r4, r3, #1
 800bdbc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	d116      	bne.n	800bdf4 <_dtoa_r+0xa90>
 800bdc6:	2d39      	cmp	r5, #57	@ 0x39
 800bdc8:	d02f      	beq.n	800be2a <_dtoa_r+0xac6>
 800bdca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	dd01      	ble.n	800bdd4 <_dtoa_r+0xa70>
 800bdd0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800bdd2:	3531      	adds	r5, #49	@ 0x31
 800bdd4:	9b06      	ldr	r3, [sp, #24]
 800bdd6:	701d      	strb	r5, [r3, #0]
 800bdd8:	e638      	b.n	800ba4c <_dtoa_r+0x6e8>
 800bdda:	46c0      	nop			@ (mov r8, r8)
 800bddc:	40240000 	.word	0x40240000
 800bde0:	00000433 	.word	0x00000433
 800bde4:	7ff00000 	.word	0x7ff00000
 800bde8:	0800eea9 	.word	0x0800eea9
 800bdec:	0800ee51 	.word	0x0800ee51
 800bdf0:	000002ef 	.word	0x000002ef
 800bdf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	db04      	blt.n	800be04 <_dtoa_r+0xaa0>
 800bdfa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be00:	4313      	orrs	r3, r2
 800be02:	d11e      	bne.n	800be42 <_dtoa_r+0xade>
 800be04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be06:	2b00      	cmp	r3, #0
 800be08:	dde4      	ble.n	800bdd4 <_dtoa_r+0xa70>
 800be0a:	9905      	ldr	r1, [sp, #20]
 800be0c:	2201      	movs	r2, #1
 800be0e:	9803      	ldr	r0, [sp, #12]
 800be10:	f000 fc10 	bl	800c634 <__lshift>
 800be14:	0031      	movs	r1, r6
 800be16:	9005      	str	r0, [sp, #20]
 800be18:	f000 fc78 	bl	800c70c <__mcmp>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	dc02      	bgt.n	800be26 <_dtoa_r+0xac2>
 800be20:	d1d8      	bne.n	800bdd4 <_dtoa_r+0xa70>
 800be22:	07eb      	lsls	r3, r5, #31
 800be24:	d5d6      	bpl.n	800bdd4 <_dtoa_r+0xa70>
 800be26:	2d39      	cmp	r5, #57	@ 0x39
 800be28:	d1d2      	bne.n	800bdd0 <_dtoa_r+0xa6c>
 800be2a:	2339      	movs	r3, #57	@ 0x39
 800be2c:	9a06      	ldr	r2, [sp, #24]
 800be2e:	7013      	strb	r3, [r2, #0]
 800be30:	0023      	movs	r3, r4
 800be32:	001c      	movs	r4, r3
 800be34:	3b01      	subs	r3, #1
 800be36:	781a      	ldrb	r2, [r3, #0]
 800be38:	2a39      	cmp	r2, #57	@ 0x39
 800be3a:	d04f      	beq.n	800bedc <_dtoa_r+0xb78>
 800be3c:	3201      	adds	r2, #1
 800be3e:	701a      	strb	r2, [r3, #0]
 800be40:	e604      	b.n	800ba4c <_dtoa_r+0x6e8>
 800be42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be44:	2b00      	cmp	r3, #0
 800be46:	dd03      	ble.n	800be50 <_dtoa_r+0xaec>
 800be48:	2d39      	cmp	r5, #57	@ 0x39
 800be4a:	d0ee      	beq.n	800be2a <_dtoa_r+0xac6>
 800be4c:	3501      	adds	r5, #1
 800be4e:	e7c1      	b.n	800bdd4 <_dtoa_r+0xa70>
 800be50:	9b06      	ldr	r3, [sp, #24]
 800be52:	9a06      	ldr	r2, [sp, #24]
 800be54:	701d      	strb	r5, [r3, #0]
 800be56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be58:	4293      	cmp	r3, r2
 800be5a:	d02a      	beq.n	800beb2 <_dtoa_r+0xb4e>
 800be5c:	2300      	movs	r3, #0
 800be5e:	220a      	movs	r2, #10
 800be60:	9905      	ldr	r1, [sp, #20]
 800be62:	9803      	ldr	r0, [sp, #12]
 800be64:	f000 f9e0 	bl	800c228 <__multadd>
 800be68:	9b04      	ldr	r3, [sp, #16]
 800be6a:	9005      	str	r0, [sp, #20]
 800be6c:	42bb      	cmp	r3, r7
 800be6e:	d109      	bne.n	800be84 <_dtoa_r+0xb20>
 800be70:	2300      	movs	r3, #0
 800be72:	220a      	movs	r2, #10
 800be74:	9904      	ldr	r1, [sp, #16]
 800be76:	9803      	ldr	r0, [sp, #12]
 800be78:	f000 f9d6 	bl	800c228 <__multadd>
 800be7c:	9004      	str	r0, [sp, #16]
 800be7e:	0007      	movs	r7, r0
 800be80:	9406      	str	r4, [sp, #24]
 800be82:	e778      	b.n	800bd76 <_dtoa_r+0xa12>
 800be84:	9904      	ldr	r1, [sp, #16]
 800be86:	2300      	movs	r3, #0
 800be88:	220a      	movs	r2, #10
 800be8a:	9803      	ldr	r0, [sp, #12]
 800be8c:	f000 f9cc 	bl	800c228 <__multadd>
 800be90:	2300      	movs	r3, #0
 800be92:	9004      	str	r0, [sp, #16]
 800be94:	220a      	movs	r2, #10
 800be96:	0039      	movs	r1, r7
 800be98:	9803      	ldr	r0, [sp, #12]
 800be9a:	f000 f9c5 	bl	800c228 <__multadd>
 800be9e:	e7ee      	b.n	800be7e <_dtoa_r+0xb1a>
 800bea0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bea2:	2401      	movs	r4, #1
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	dd00      	ble.n	800beaa <_dtoa_r+0xb46>
 800bea8:	001c      	movs	r4, r3
 800beaa:	9b08      	ldr	r3, [sp, #32]
 800beac:	191c      	adds	r4, r3, r4
 800beae:	2300      	movs	r3, #0
 800beb0:	9304      	str	r3, [sp, #16]
 800beb2:	9905      	ldr	r1, [sp, #20]
 800beb4:	2201      	movs	r2, #1
 800beb6:	9803      	ldr	r0, [sp, #12]
 800beb8:	f000 fbbc 	bl	800c634 <__lshift>
 800bebc:	0031      	movs	r1, r6
 800bebe:	9005      	str	r0, [sp, #20]
 800bec0:	f000 fc24 	bl	800c70c <__mcmp>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	dcb3      	bgt.n	800be30 <_dtoa_r+0xacc>
 800bec8:	d101      	bne.n	800bece <_dtoa_r+0xb6a>
 800beca:	07ed      	lsls	r5, r5, #31
 800becc:	d4b0      	bmi.n	800be30 <_dtoa_r+0xacc>
 800bece:	0023      	movs	r3, r4
 800bed0:	001c      	movs	r4, r3
 800bed2:	3b01      	subs	r3, #1
 800bed4:	781a      	ldrb	r2, [r3, #0]
 800bed6:	2a30      	cmp	r2, #48	@ 0x30
 800bed8:	d0fa      	beq.n	800bed0 <_dtoa_r+0xb6c>
 800beda:	e5b7      	b.n	800ba4c <_dtoa_r+0x6e8>
 800bedc:	9a08      	ldr	r2, [sp, #32]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d1a7      	bne.n	800be32 <_dtoa_r+0xace>
 800bee2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bee4:	3301      	adds	r3, #1
 800bee6:	930c      	str	r3, [sp, #48]	@ 0x30
 800bee8:	2331      	movs	r3, #49	@ 0x31
 800beea:	7013      	strb	r3, [r2, #0]
 800beec:	e5ae      	b.n	800ba4c <_dtoa_r+0x6e8>
 800beee:	4b15      	ldr	r3, [pc, #84]	@ (800bf44 <_dtoa_r+0xbe0>)
 800bef0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bef2:	9308      	str	r3, [sp, #32]
 800bef4:	4b14      	ldr	r3, [pc, #80]	@ (800bf48 <_dtoa_r+0xbe4>)
 800bef6:	2a00      	cmp	r2, #0
 800bef8:	d001      	beq.n	800befe <_dtoa_r+0xb9a>
 800befa:	f7ff fa7b 	bl	800b3f4 <_dtoa_r+0x90>
 800befe:	f7ff fa7b 	bl	800b3f8 <_dtoa_r+0x94>
 800bf02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	dc00      	bgt.n	800bf0a <_dtoa_r+0xba6>
 800bf08:	e648      	b.n	800bb9c <_dtoa_r+0x838>
 800bf0a:	2001      	movs	r0, #1
 800bf0c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800bf0e:	e665      	b.n	800bbdc <_dtoa_r+0x878>
 800bf10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dc00      	bgt.n	800bf18 <_dtoa_r+0xbb4>
 800bf16:	e6d6      	b.n	800bcc6 <_dtoa_r+0x962>
 800bf18:	2400      	movs	r4, #0
 800bf1a:	0031      	movs	r1, r6
 800bf1c:	9805      	ldr	r0, [sp, #20]
 800bf1e:	f7ff f993 	bl	800b248 <quorem>
 800bf22:	9b08      	ldr	r3, [sp, #32]
 800bf24:	3030      	adds	r0, #48	@ 0x30
 800bf26:	5518      	strb	r0, [r3, r4]
 800bf28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf2a:	3401      	adds	r4, #1
 800bf2c:	0005      	movs	r5, r0
 800bf2e:	429c      	cmp	r4, r3
 800bf30:	dab6      	bge.n	800bea0 <_dtoa_r+0xb3c>
 800bf32:	2300      	movs	r3, #0
 800bf34:	220a      	movs	r2, #10
 800bf36:	9905      	ldr	r1, [sp, #20]
 800bf38:	9803      	ldr	r0, [sp, #12]
 800bf3a:	f000 f975 	bl	800c228 <__multadd>
 800bf3e:	9005      	str	r0, [sp, #20]
 800bf40:	e7eb      	b.n	800bf1a <_dtoa_r+0xbb6>
 800bf42:	46c0      	nop			@ (mov r8, r8)
 800bf44:	0800ee2d 	.word	0x0800ee2d
 800bf48:	0800ee35 	.word	0x0800ee35

0800bf4c <_free_r>:
 800bf4c:	b570      	push	{r4, r5, r6, lr}
 800bf4e:	0005      	movs	r5, r0
 800bf50:	1e0c      	subs	r4, r1, #0
 800bf52:	d010      	beq.n	800bf76 <_free_r+0x2a>
 800bf54:	3c04      	subs	r4, #4
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	da00      	bge.n	800bf5e <_free_r+0x12>
 800bf5c:	18e4      	adds	r4, r4, r3
 800bf5e:	0028      	movs	r0, r5
 800bf60:	f000 f8ea 	bl	800c138 <__malloc_lock>
 800bf64:	4a1d      	ldr	r2, [pc, #116]	@ (800bfdc <_free_r+0x90>)
 800bf66:	6813      	ldr	r3, [r2, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d105      	bne.n	800bf78 <_free_r+0x2c>
 800bf6c:	6063      	str	r3, [r4, #4]
 800bf6e:	6014      	str	r4, [r2, #0]
 800bf70:	0028      	movs	r0, r5
 800bf72:	f000 f8e9 	bl	800c148 <__malloc_unlock>
 800bf76:	bd70      	pop	{r4, r5, r6, pc}
 800bf78:	42a3      	cmp	r3, r4
 800bf7a:	d908      	bls.n	800bf8e <_free_r+0x42>
 800bf7c:	6820      	ldr	r0, [r4, #0]
 800bf7e:	1821      	adds	r1, r4, r0
 800bf80:	428b      	cmp	r3, r1
 800bf82:	d1f3      	bne.n	800bf6c <_free_r+0x20>
 800bf84:	6819      	ldr	r1, [r3, #0]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	1809      	adds	r1, r1, r0
 800bf8a:	6021      	str	r1, [r4, #0]
 800bf8c:	e7ee      	b.n	800bf6c <_free_r+0x20>
 800bf8e:	001a      	movs	r2, r3
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <_free_r+0x4e>
 800bf96:	42a3      	cmp	r3, r4
 800bf98:	d9f9      	bls.n	800bf8e <_free_r+0x42>
 800bf9a:	6811      	ldr	r1, [r2, #0]
 800bf9c:	1850      	adds	r0, r2, r1
 800bf9e:	42a0      	cmp	r0, r4
 800bfa0:	d10b      	bne.n	800bfba <_free_r+0x6e>
 800bfa2:	6820      	ldr	r0, [r4, #0]
 800bfa4:	1809      	adds	r1, r1, r0
 800bfa6:	1850      	adds	r0, r2, r1
 800bfa8:	6011      	str	r1, [r2, #0]
 800bfaa:	4283      	cmp	r3, r0
 800bfac:	d1e0      	bne.n	800bf70 <_free_r+0x24>
 800bfae:	6818      	ldr	r0, [r3, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	1841      	adds	r1, r0, r1
 800bfb4:	6011      	str	r1, [r2, #0]
 800bfb6:	6053      	str	r3, [r2, #4]
 800bfb8:	e7da      	b.n	800bf70 <_free_r+0x24>
 800bfba:	42a0      	cmp	r0, r4
 800bfbc:	d902      	bls.n	800bfc4 <_free_r+0x78>
 800bfbe:	230c      	movs	r3, #12
 800bfc0:	602b      	str	r3, [r5, #0]
 800bfc2:	e7d5      	b.n	800bf70 <_free_r+0x24>
 800bfc4:	6820      	ldr	r0, [r4, #0]
 800bfc6:	1821      	adds	r1, r4, r0
 800bfc8:	428b      	cmp	r3, r1
 800bfca:	d103      	bne.n	800bfd4 <_free_r+0x88>
 800bfcc:	6819      	ldr	r1, [r3, #0]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	1809      	adds	r1, r1, r0
 800bfd2:	6021      	str	r1, [r4, #0]
 800bfd4:	6063      	str	r3, [r4, #4]
 800bfd6:	6054      	str	r4, [r2, #4]
 800bfd8:	e7ca      	b.n	800bf70 <_free_r+0x24>
 800bfda:	46c0      	nop			@ (mov r8, r8)
 800bfdc:	20000704 	.word	0x20000704

0800bfe0 <malloc>:
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	4b03      	ldr	r3, [pc, #12]	@ (800bff0 <malloc+0x10>)
 800bfe4:	0001      	movs	r1, r0
 800bfe6:	6818      	ldr	r0, [r3, #0]
 800bfe8:	f000 f826 	bl	800c038 <_malloc_r>
 800bfec:	bd10      	pop	{r4, pc}
 800bfee:	46c0      	nop			@ (mov r8, r8)
 800bff0:	20000060 	.word	0x20000060

0800bff4 <sbrk_aligned>:
 800bff4:	b570      	push	{r4, r5, r6, lr}
 800bff6:	4e0f      	ldr	r6, [pc, #60]	@ (800c034 <sbrk_aligned+0x40>)
 800bff8:	000d      	movs	r5, r1
 800bffa:	6831      	ldr	r1, [r6, #0]
 800bffc:	0004      	movs	r4, r0
 800bffe:	2900      	cmp	r1, #0
 800c000:	d102      	bne.n	800c008 <sbrk_aligned+0x14>
 800c002:	f001 fe47 	bl	800dc94 <_sbrk_r>
 800c006:	6030      	str	r0, [r6, #0]
 800c008:	0029      	movs	r1, r5
 800c00a:	0020      	movs	r0, r4
 800c00c:	f001 fe42 	bl	800dc94 <_sbrk_r>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d103      	bne.n	800c01c <sbrk_aligned+0x28>
 800c014:	2501      	movs	r5, #1
 800c016:	426d      	negs	r5, r5
 800c018:	0028      	movs	r0, r5
 800c01a:	bd70      	pop	{r4, r5, r6, pc}
 800c01c:	2303      	movs	r3, #3
 800c01e:	1cc5      	adds	r5, r0, #3
 800c020:	439d      	bics	r5, r3
 800c022:	42a8      	cmp	r0, r5
 800c024:	d0f8      	beq.n	800c018 <sbrk_aligned+0x24>
 800c026:	1a29      	subs	r1, r5, r0
 800c028:	0020      	movs	r0, r4
 800c02a:	f001 fe33 	bl	800dc94 <_sbrk_r>
 800c02e:	3001      	adds	r0, #1
 800c030:	d1f2      	bne.n	800c018 <sbrk_aligned+0x24>
 800c032:	e7ef      	b.n	800c014 <sbrk_aligned+0x20>
 800c034:	20000700 	.word	0x20000700

0800c038 <_malloc_r>:
 800c038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c03a:	2203      	movs	r2, #3
 800c03c:	1ccb      	adds	r3, r1, #3
 800c03e:	4393      	bics	r3, r2
 800c040:	3308      	adds	r3, #8
 800c042:	0005      	movs	r5, r0
 800c044:	001f      	movs	r7, r3
 800c046:	2b0c      	cmp	r3, #12
 800c048:	d234      	bcs.n	800c0b4 <_malloc_r+0x7c>
 800c04a:	270c      	movs	r7, #12
 800c04c:	42b9      	cmp	r1, r7
 800c04e:	d833      	bhi.n	800c0b8 <_malloc_r+0x80>
 800c050:	0028      	movs	r0, r5
 800c052:	f000 f871 	bl	800c138 <__malloc_lock>
 800c056:	4e37      	ldr	r6, [pc, #220]	@ (800c134 <_malloc_r+0xfc>)
 800c058:	6833      	ldr	r3, [r6, #0]
 800c05a:	001c      	movs	r4, r3
 800c05c:	2c00      	cmp	r4, #0
 800c05e:	d12f      	bne.n	800c0c0 <_malloc_r+0x88>
 800c060:	0039      	movs	r1, r7
 800c062:	0028      	movs	r0, r5
 800c064:	f7ff ffc6 	bl	800bff4 <sbrk_aligned>
 800c068:	0004      	movs	r4, r0
 800c06a:	1c43      	adds	r3, r0, #1
 800c06c:	d15f      	bne.n	800c12e <_malloc_r+0xf6>
 800c06e:	6834      	ldr	r4, [r6, #0]
 800c070:	9400      	str	r4, [sp, #0]
 800c072:	9b00      	ldr	r3, [sp, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d14a      	bne.n	800c10e <_malloc_r+0xd6>
 800c078:	2c00      	cmp	r4, #0
 800c07a:	d052      	beq.n	800c122 <_malloc_r+0xea>
 800c07c:	6823      	ldr	r3, [r4, #0]
 800c07e:	0028      	movs	r0, r5
 800c080:	18e3      	adds	r3, r4, r3
 800c082:	9900      	ldr	r1, [sp, #0]
 800c084:	9301      	str	r3, [sp, #4]
 800c086:	f001 fe05 	bl	800dc94 <_sbrk_r>
 800c08a:	9b01      	ldr	r3, [sp, #4]
 800c08c:	4283      	cmp	r3, r0
 800c08e:	d148      	bne.n	800c122 <_malloc_r+0xea>
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	0028      	movs	r0, r5
 800c094:	1aff      	subs	r7, r7, r3
 800c096:	0039      	movs	r1, r7
 800c098:	f7ff ffac 	bl	800bff4 <sbrk_aligned>
 800c09c:	3001      	adds	r0, #1
 800c09e:	d040      	beq.n	800c122 <_malloc_r+0xea>
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	19db      	adds	r3, r3, r7
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	6833      	ldr	r3, [r6, #0]
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	2a00      	cmp	r2, #0
 800c0ac:	d133      	bne.n	800c116 <_malloc_r+0xde>
 800c0ae:	9b00      	ldr	r3, [sp, #0]
 800c0b0:	6033      	str	r3, [r6, #0]
 800c0b2:	e019      	b.n	800c0e8 <_malloc_r+0xb0>
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dac9      	bge.n	800c04c <_malloc_r+0x14>
 800c0b8:	230c      	movs	r3, #12
 800c0ba:	602b      	str	r3, [r5, #0]
 800c0bc:	2000      	movs	r0, #0
 800c0be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c0c0:	6821      	ldr	r1, [r4, #0]
 800c0c2:	1bc9      	subs	r1, r1, r7
 800c0c4:	d420      	bmi.n	800c108 <_malloc_r+0xd0>
 800c0c6:	290b      	cmp	r1, #11
 800c0c8:	d90a      	bls.n	800c0e0 <_malloc_r+0xa8>
 800c0ca:	19e2      	adds	r2, r4, r7
 800c0cc:	6027      	str	r7, [r4, #0]
 800c0ce:	42a3      	cmp	r3, r4
 800c0d0:	d104      	bne.n	800c0dc <_malloc_r+0xa4>
 800c0d2:	6032      	str	r2, [r6, #0]
 800c0d4:	6863      	ldr	r3, [r4, #4]
 800c0d6:	6011      	str	r1, [r2, #0]
 800c0d8:	6053      	str	r3, [r2, #4]
 800c0da:	e005      	b.n	800c0e8 <_malloc_r+0xb0>
 800c0dc:	605a      	str	r2, [r3, #4]
 800c0de:	e7f9      	b.n	800c0d4 <_malloc_r+0x9c>
 800c0e0:	6862      	ldr	r2, [r4, #4]
 800c0e2:	42a3      	cmp	r3, r4
 800c0e4:	d10e      	bne.n	800c104 <_malloc_r+0xcc>
 800c0e6:	6032      	str	r2, [r6, #0]
 800c0e8:	0028      	movs	r0, r5
 800c0ea:	f000 f82d 	bl	800c148 <__malloc_unlock>
 800c0ee:	0020      	movs	r0, r4
 800c0f0:	2207      	movs	r2, #7
 800c0f2:	300b      	adds	r0, #11
 800c0f4:	1d23      	adds	r3, r4, #4
 800c0f6:	4390      	bics	r0, r2
 800c0f8:	1ac2      	subs	r2, r0, r3
 800c0fa:	4298      	cmp	r0, r3
 800c0fc:	d0df      	beq.n	800c0be <_malloc_r+0x86>
 800c0fe:	1a1b      	subs	r3, r3, r0
 800c100:	50a3      	str	r3, [r4, r2]
 800c102:	e7dc      	b.n	800c0be <_malloc_r+0x86>
 800c104:	605a      	str	r2, [r3, #4]
 800c106:	e7ef      	b.n	800c0e8 <_malloc_r+0xb0>
 800c108:	0023      	movs	r3, r4
 800c10a:	6864      	ldr	r4, [r4, #4]
 800c10c:	e7a6      	b.n	800c05c <_malloc_r+0x24>
 800c10e:	9c00      	ldr	r4, [sp, #0]
 800c110:	6863      	ldr	r3, [r4, #4]
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	e7ad      	b.n	800c072 <_malloc_r+0x3a>
 800c116:	001a      	movs	r2, r3
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	42a3      	cmp	r3, r4
 800c11c:	d1fb      	bne.n	800c116 <_malloc_r+0xde>
 800c11e:	2300      	movs	r3, #0
 800c120:	e7da      	b.n	800c0d8 <_malloc_r+0xa0>
 800c122:	230c      	movs	r3, #12
 800c124:	0028      	movs	r0, r5
 800c126:	602b      	str	r3, [r5, #0]
 800c128:	f000 f80e 	bl	800c148 <__malloc_unlock>
 800c12c:	e7c6      	b.n	800c0bc <_malloc_r+0x84>
 800c12e:	6007      	str	r7, [r0, #0]
 800c130:	e7da      	b.n	800c0e8 <_malloc_r+0xb0>
 800c132:	46c0      	nop			@ (mov r8, r8)
 800c134:	20000704 	.word	0x20000704

0800c138 <__malloc_lock>:
 800c138:	b510      	push	{r4, lr}
 800c13a:	4802      	ldr	r0, [pc, #8]	@ (800c144 <__malloc_lock+0xc>)
 800c13c:	f7ff f873 	bl	800b226 <__retarget_lock_acquire_recursive>
 800c140:	bd10      	pop	{r4, pc}
 800c142:	46c0      	nop			@ (mov r8, r8)
 800c144:	200006fc 	.word	0x200006fc

0800c148 <__malloc_unlock>:
 800c148:	b510      	push	{r4, lr}
 800c14a:	4802      	ldr	r0, [pc, #8]	@ (800c154 <__malloc_unlock+0xc>)
 800c14c:	f7ff f86c 	bl	800b228 <__retarget_lock_release_recursive>
 800c150:	bd10      	pop	{r4, pc}
 800c152:	46c0      	nop			@ (mov r8, r8)
 800c154:	200006fc 	.word	0x200006fc

0800c158 <_Balloc>:
 800c158:	b570      	push	{r4, r5, r6, lr}
 800c15a:	69c5      	ldr	r5, [r0, #28]
 800c15c:	0006      	movs	r6, r0
 800c15e:	000c      	movs	r4, r1
 800c160:	2d00      	cmp	r5, #0
 800c162:	d10e      	bne.n	800c182 <_Balloc+0x2a>
 800c164:	2010      	movs	r0, #16
 800c166:	f7ff ff3b 	bl	800bfe0 <malloc>
 800c16a:	1e02      	subs	r2, r0, #0
 800c16c:	61f0      	str	r0, [r6, #28]
 800c16e:	d104      	bne.n	800c17a <_Balloc+0x22>
 800c170:	216b      	movs	r1, #107	@ 0x6b
 800c172:	4b19      	ldr	r3, [pc, #100]	@ (800c1d8 <_Balloc+0x80>)
 800c174:	4819      	ldr	r0, [pc, #100]	@ (800c1dc <_Balloc+0x84>)
 800c176:	f001 fdaf 	bl	800dcd8 <__assert_func>
 800c17a:	6045      	str	r5, [r0, #4]
 800c17c:	6085      	str	r5, [r0, #8]
 800c17e:	6005      	str	r5, [r0, #0]
 800c180:	60c5      	str	r5, [r0, #12]
 800c182:	69f5      	ldr	r5, [r6, #28]
 800c184:	68eb      	ldr	r3, [r5, #12]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d013      	beq.n	800c1b2 <_Balloc+0x5a>
 800c18a:	69f3      	ldr	r3, [r6, #28]
 800c18c:	00a2      	lsls	r2, r4, #2
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	189b      	adds	r3, r3, r2
 800c192:	6818      	ldr	r0, [r3, #0]
 800c194:	2800      	cmp	r0, #0
 800c196:	d118      	bne.n	800c1ca <_Balloc+0x72>
 800c198:	2101      	movs	r1, #1
 800c19a:	000d      	movs	r5, r1
 800c19c:	40a5      	lsls	r5, r4
 800c19e:	1d6a      	adds	r2, r5, #5
 800c1a0:	0030      	movs	r0, r6
 800c1a2:	0092      	lsls	r2, r2, #2
 800c1a4:	f001 fdb6 	bl	800dd14 <_calloc_r>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d00c      	beq.n	800c1c6 <_Balloc+0x6e>
 800c1ac:	6044      	str	r4, [r0, #4]
 800c1ae:	6085      	str	r5, [r0, #8]
 800c1b0:	e00d      	b.n	800c1ce <_Balloc+0x76>
 800c1b2:	2221      	movs	r2, #33	@ 0x21
 800c1b4:	2104      	movs	r1, #4
 800c1b6:	0030      	movs	r0, r6
 800c1b8:	f001 fdac 	bl	800dd14 <_calloc_r>
 800c1bc:	69f3      	ldr	r3, [r6, #28]
 800c1be:	60e8      	str	r0, [r5, #12]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d1e1      	bne.n	800c18a <_Balloc+0x32>
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ca:	6802      	ldr	r2, [r0, #0]
 800c1cc:	601a      	str	r2, [r3, #0]
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	6103      	str	r3, [r0, #16]
 800c1d2:	60c3      	str	r3, [r0, #12]
 800c1d4:	e7f8      	b.n	800c1c8 <_Balloc+0x70>
 800c1d6:	46c0      	nop			@ (mov r8, r8)
 800c1d8:	0800ee3a 	.word	0x0800ee3a
 800c1dc:	0800eeba 	.word	0x0800eeba

0800c1e0 <_Bfree>:
 800c1e0:	b570      	push	{r4, r5, r6, lr}
 800c1e2:	69c6      	ldr	r6, [r0, #28]
 800c1e4:	0005      	movs	r5, r0
 800c1e6:	000c      	movs	r4, r1
 800c1e8:	2e00      	cmp	r6, #0
 800c1ea:	d10e      	bne.n	800c20a <_Bfree+0x2a>
 800c1ec:	2010      	movs	r0, #16
 800c1ee:	f7ff fef7 	bl	800bfe0 <malloc>
 800c1f2:	1e02      	subs	r2, r0, #0
 800c1f4:	61e8      	str	r0, [r5, #28]
 800c1f6:	d104      	bne.n	800c202 <_Bfree+0x22>
 800c1f8:	218f      	movs	r1, #143	@ 0x8f
 800c1fa:	4b09      	ldr	r3, [pc, #36]	@ (800c220 <_Bfree+0x40>)
 800c1fc:	4809      	ldr	r0, [pc, #36]	@ (800c224 <_Bfree+0x44>)
 800c1fe:	f001 fd6b 	bl	800dcd8 <__assert_func>
 800c202:	6046      	str	r6, [r0, #4]
 800c204:	6086      	str	r6, [r0, #8]
 800c206:	6006      	str	r6, [r0, #0]
 800c208:	60c6      	str	r6, [r0, #12]
 800c20a:	2c00      	cmp	r4, #0
 800c20c:	d007      	beq.n	800c21e <_Bfree+0x3e>
 800c20e:	69eb      	ldr	r3, [r5, #28]
 800c210:	6862      	ldr	r2, [r4, #4]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	0092      	lsls	r2, r2, #2
 800c216:	189b      	adds	r3, r3, r2
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	6022      	str	r2, [r4, #0]
 800c21c:	601c      	str	r4, [r3, #0]
 800c21e:	bd70      	pop	{r4, r5, r6, pc}
 800c220:	0800ee3a 	.word	0x0800ee3a
 800c224:	0800eeba 	.word	0x0800eeba

0800c228 <__multadd>:
 800c228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c22a:	000f      	movs	r7, r1
 800c22c:	9001      	str	r0, [sp, #4]
 800c22e:	000c      	movs	r4, r1
 800c230:	001e      	movs	r6, r3
 800c232:	2000      	movs	r0, #0
 800c234:	690d      	ldr	r5, [r1, #16]
 800c236:	3714      	adds	r7, #20
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	3001      	adds	r0, #1
 800c23c:	b299      	uxth	r1, r3
 800c23e:	4351      	muls	r1, r2
 800c240:	0c1b      	lsrs	r3, r3, #16
 800c242:	4353      	muls	r3, r2
 800c244:	1989      	adds	r1, r1, r6
 800c246:	0c0e      	lsrs	r6, r1, #16
 800c248:	199b      	adds	r3, r3, r6
 800c24a:	0c1e      	lsrs	r6, r3, #16
 800c24c:	b289      	uxth	r1, r1
 800c24e:	041b      	lsls	r3, r3, #16
 800c250:	185b      	adds	r3, r3, r1
 800c252:	c708      	stmia	r7!, {r3}
 800c254:	4285      	cmp	r5, r0
 800c256:	dcef      	bgt.n	800c238 <__multadd+0x10>
 800c258:	2e00      	cmp	r6, #0
 800c25a:	d022      	beq.n	800c2a2 <__multadd+0x7a>
 800c25c:	68a3      	ldr	r3, [r4, #8]
 800c25e:	42ab      	cmp	r3, r5
 800c260:	dc19      	bgt.n	800c296 <__multadd+0x6e>
 800c262:	6861      	ldr	r1, [r4, #4]
 800c264:	9801      	ldr	r0, [sp, #4]
 800c266:	3101      	adds	r1, #1
 800c268:	f7ff ff76 	bl	800c158 <_Balloc>
 800c26c:	1e07      	subs	r7, r0, #0
 800c26e:	d105      	bne.n	800c27c <__multadd+0x54>
 800c270:	003a      	movs	r2, r7
 800c272:	21ba      	movs	r1, #186	@ 0xba
 800c274:	4b0c      	ldr	r3, [pc, #48]	@ (800c2a8 <__multadd+0x80>)
 800c276:	480d      	ldr	r0, [pc, #52]	@ (800c2ac <__multadd+0x84>)
 800c278:	f001 fd2e 	bl	800dcd8 <__assert_func>
 800c27c:	0021      	movs	r1, r4
 800c27e:	6922      	ldr	r2, [r4, #16]
 800c280:	310c      	adds	r1, #12
 800c282:	3202      	adds	r2, #2
 800c284:	0092      	lsls	r2, r2, #2
 800c286:	300c      	adds	r0, #12
 800c288:	f001 fd16 	bl	800dcb8 <memcpy>
 800c28c:	0021      	movs	r1, r4
 800c28e:	9801      	ldr	r0, [sp, #4]
 800c290:	f7ff ffa6 	bl	800c1e0 <_Bfree>
 800c294:	003c      	movs	r4, r7
 800c296:	1d2b      	adds	r3, r5, #4
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	18e3      	adds	r3, r4, r3
 800c29c:	3501      	adds	r5, #1
 800c29e:	605e      	str	r6, [r3, #4]
 800c2a0:	6125      	str	r5, [r4, #16]
 800c2a2:	0020      	movs	r0, r4
 800c2a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c2a6:	46c0      	nop			@ (mov r8, r8)
 800c2a8:	0800eea9 	.word	0x0800eea9
 800c2ac:	0800eeba 	.word	0x0800eeba

0800c2b0 <__s2b>:
 800c2b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2b2:	0007      	movs	r7, r0
 800c2b4:	0018      	movs	r0, r3
 800c2b6:	000c      	movs	r4, r1
 800c2b8:	3008      	adds	r0, #8
 800c2ba:	2109      	movs	r1, #9
 800c2bc:	9301      	str	r3, [sp, #4]
 800c2be:	0015      	movs	r5, r2
 800c2c0:	f7f3 ffc6 	bl	8000250 <__divsi3>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	4283      	cmp	r3, r0
 800c2ca:	db0a      	blt.n	800c2e2 <__s2b+0x32>
 800c2cc:	0038      	movs	r0, r7
 800c2ce:	f7ff ff43 	bl	800c158 <_Balloc>
 800c2d2:	1e01      	subs	r1, r0, #0
 800c2d4:	d108      	bne.n	800c2e8 <__s2b+0x38>
 800c2d6:	000a      	movs	r2, r1
 800c2d8:	4b19      	ldr	r3, [pc, #100]	@ (800c340 <__s2b+0x90>)
 800c2da:	481a      	ldr	r0, [pc, #104]	@ (800c344 <__s2b+0x94>)
 800c2dc:	31d3      	adds	r1, #211	@ 0xd3
 800c2de:	f001 fcfb 	bl	800dcd8 <__assert_func>
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	3101      	adds	r1, #1
 800c2e6:	e7ef      	b.n	800c2c8 <__s2b+0x18>
 800c2e8:	9b08      	ldr	r3, [sp, #32]
 800c2ea:	6143      	str	r3, [r0, #20]
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	6103      	str	r3, [r0, #16]
 800c2f0:	2d09      	cmp	r5, #9
 800c2f2:	dd18      	ble.n	800c326 <__s2b+0x76>
 800c2f4:	0023      	movs	r3, r4
 800c2f6:	3309      	adds	r3, #9
 800c2f8:	001e      	movs	r6, r3
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	1964      	adds	r4, r4, r5
 800c2fe:	7833      	ldrb	r3, [r6, #0]
 800c300:	220a      	movs	r2, #10
 800c302:	0038      	movs	r0, r7
 800c304:	3b30      	subs	r3, #48	@ 0x30
 800c306:	f7ff ff8f 	bl	800c228 <__multadd>
 800c30a:	3601      	adds	r6, #1
 800c30c:	0001      	movs	r1, r0
 800c30e:	42a6      	cmp	r6, r4
 800c310:	d1f5      	bne.n	800c2fe <__s2b+0x4e>
 800c312:	002c      	movs	r4, r5
 800c314:	9b00      	ldr	r3, [sp, #0]
 800c316:	3c08      	subs	r4, #8
 800c318:	191c      	adds	r4, r3, r4
 800c31a:	002e      	movs	r6, r5
 800c31c:	9b01      	ldr	r3, [sp, #4]
 800c31e:	429e      	cmp	r6, r3
 800c320:	db04      	blt.n	800c32c <__s2b+0x7c>
 800c322:	0008      	movs	r0, r1
 800c324:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c326:	2509      	movs	r5, #9
 800c328:	340a      	adds	r4, #10
 800c32a:	e7f6      	b.n	800c31a <__s2b+0x6a>
 800c32c:	1b63      	subs	r3, r4, r5
 800c32e:	5d9b      	ldrb	r3, [r3, r6]
 800c330:	220a      	movs	r2, #10
 800c332:	0038      	movs	r0, r7
 800c334:	3b30      	subs	r3, #48	@ 0x30
 800c336:	f7ff ff77 	bl	800c228 <__multadd>
 800c33a:	3601      	adds	r6, #1
 800c33c:	0001      	movs	r1, r0
 800c33e:	e7ed      	b.n	800c31c <__s2b+0x6c>
 800c340:	0800eea9 	.word	0x0800eea9
 800c344:	0800eeba 	.word	0x0800eeba

0800c348 <__hi0bits>:
 800c348:	2280      	movs	r2, #128	@ 0x80
 800c34a:	0003      	movs	r3, r0
 800c34c:	0252      	lsls	r2, r2, #9
 800c34e:	2000      	movs	r0, #0
 800c350:	4293      	cmp	r3, r2
 800c352:	d201      	bcs.n	800c358 <__hi0bits+0x10>
 800c354:	041b      	lsls	r3, r3, #16
 800c356:	3010      	adds	r0, #16
 800c358:	2280      	movs	r2, #128	@ 0x80
 800c35a:	0452      	lsls	r2, r2, #17
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d201      	bcs.n	800c364 <__hi0bits+0x1c>
 800c360:	3008      	adds	r0, #8
 800c362:	021b      	lsls	r3, r3, #8
 800c364:	2280      	movs	r2, #128	@ 0x80
 800c366:	0552      	lsls	r2, r2, #21
 800c368:	4293      	cmp	r3, r2
 800c36a:	d201      	bcs.n	800c370 <__hi0bits+0x28>
 800c36c:	3004      	adds	r0, #4
 800c36e:	011b      	lsls	r3, r3, #4
 800c370:	2280      	movs	r2, #128	@ 0x80
 800c372:	05d2      	lsls	r2, r2, #23
 800c374:	4293      	cmp	r3, r2
 800c376:	d201      	bcs.n	800c37c <__hi0bits+0x34>
 800c378:	3002      	adds	r0, #2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	db03      	blt.n	800c388 <__hi0bits+0x40>
 800c380:	3001      	adds	r0, #1
 800c382:	4213      	tst	r3, r2
 800c384:	d100      	bne.n	800c388 <__hi0bits+0x40>
 800c386:	2020      	movs	r0, #32
 800c388:	4770      	bx	lr

0800c38a <__lo0bits>:
 800c38a:	6803      	ldr	r3, [r0, #0]
 800c38c:	0001      	movs	r1, r0
 800c38e:	2207      	movs	r2, #7
 800c390:	0018      	movs	r0, r3
 800c392:	4010      	ands	r0, r2
 800c394:	4213      	tst	r3, r2
 800c396:	d00d      	beq.n	800c3b4 <__lo0bits+0x2a>
 800c398:	3a06      	subs	r2, #6
 800c39a:	2000      	movs	r0, #0
 800c39c:	4213      	tst	r3, r2
 800c39e:	d105      	bne.n	800c3ac <__lo0bits+0x22>
 800c3a0:	3002      	adds	r0, #2
 800c3a2:	4203      	tst	r3, r0
 800c3a4:	d003      	beq.n	800c3ae <__lo0bits+0x24>
 800c3a6:	40d3      	lsrs	r3, r2
 800c3a8:	0010      	movs	r0, r2
 800c3aa:	600b      	str	r3, [r1, #0]
 800c3ac:	4770      	bx	lr
 800c3ae:	089b      	lsrs	r3, r3, #2
 800c3b0:	600b      	str	r3, [r1, #0]
 800c3b2:	e7fb      	b.n	800c3ac <__lo0bits+0x22>
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	2a00      	cmp	r2, #0
 800c3b8:	d101      	bne.n	800c3be <__lo0bits+0x34>
 800c3ba:	2010      	movs	r0, #16
 800c3bc:	0c1b      	lsrs	r3, r3, #16
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	2a00      	cmp	r2, #0
 800c3c2:	d101      	bne.n	800c3c8 <__lo0bits+0x3e>
 800c3c4:	3008      	adds	r0, #8
 800c3c6:	0a1b      	lsrs	r3, r3, #8
 800c3c8:	071a      	lsls	r2, r3, #28
 800c3ca:	d101      	bne.n	800c3d0 <__lo0bits+0x46>
 800c3cc:	3004      	adds	r0, #4
 800c3ce:	091b      	lsrs	r3, r3, #4
 800c3d0:	079a      	lsls	r2, r3, #30
 800c3d2:	d101      	bne.n	800c3d8 <__lo0bits+0x4e>
 800c3d4:	3002      	adds	r0, #2
 800c3d6:	089b      	lsrs	r3, r3, #2
 800c3d8:	07da      	lsls	r2, r3, #31
 800c3da:	d4e9      	bmi.n	800c3b0 <__lo0bits+0x26>
 800c3dc:	3001      	adds	r0, #1
 800c3de:	085b      	lsrs	r3, r3, #1
 800c3e0:	d1e6      	bne.n	800c3b0 <__lo0bits+0x26>
 800c3e2:	2020      	movs	r0, #32
 800c3e4:	e7e2      	b.n	800c3ac <__lo0bits+0x22>
	...

0800c3e8 <__i2b>:
 800c3e8:	b510      	push	{r4, lr}
 800c3ea:	000c      	movs	r4, r1
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	f7ff feb3 	bl	800c158 <_Balloc>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d107      	bne.n	800c406 <__i2b+0x1e>
 800c3f6:	2146      	movs	r1, #70	@ 0x46
 800c3f8:	4c05      	ldr	r4, [pc, #20]	@ (800c410 <__i2b+0x28>)
 800c3fa:	0002      	movs	r2, r0
 800c3fc:	4b05      	ldr	r3, [pc, #20]	@ (800c414 <__i2b+0x2c>)
 800c3fe:	0020      	movs	r0, r4
 800c400:	31ff      	adds	r1, #255	@ 0xff
 800c402:	f001 fc69 	bl	800dcd8 <__assert_func>
 800c406:	2301      	movs	r3, #1
 800c408:	6144      	str	r4, [r0, #20]
 800c40a:	6103      	str	r3, [r0, #16]
 800c40c:	bd10      	pop	{r4, pc}
 800c40e:	46c0      	nop			@ (mov r8, r8)
 800c410:	0800eeba 	.word	0x0800eeba
 800c414:	0800eea9 	.word	0x0800eea9

0800c418 <__multiply>:
 800c418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c41a:	0014      	movs	r4, r2
 800c41c:	690a      	ldr	r2, [r1, #16]
 800c41e:	6923      	ldr	r3, [r4, #16]
 800c420:	000d      	movs	r5, r1
 800c422:	b08b      	sub	sp, #44	@ 0x2c
 800c424:	429a      	cmp	r2, r3
 800c426:	db02      	blt.n	800c42e <__multiply+0x16>
 800c428:	0023      	movs	r3, r4
 800c42a:	000c      	movs	r4, r1
 800c42c:	001d      	movs	r5, r3
 800c42e:	6927      	ldr	r7, [r4, #16]
 800c430:	692e      	ldr	r6, [r5, #16]
 800c432:	6861      	ldr	r1, [r4, #4]
 800c434:	19bb      	adds	r3, r7, r6
 800c436:	9303      	str	r3, [sp, #12]
 800c438:	68a3      	ldr	r3, [r4, #8]
 800c43a:	19ba      	adds	r2, r7, r6
 800c43c:	4293      	cmp	r3, r2
 800c43e:	da00      	bge.n	800c442 <__multiply+0x2a>
 800c440:	3101      	adds	r1, #1
 800c442:	f7ff fe89 	bl	800c158 <_Balloc>
 800c446:	9002      	str	r0, [sp, #8]
 800c448:	2800      	cmp	r0, #0
 800c44a:	d106      	bne.n	800c45a <__multiply+0x42>
 800c44c:	21b1      	movs	r1, #177	@ 0xb1
 800c44e:	4b49      	ldr	r3, [pc, #292]	@ (800c574 <__multiply+0x15c>)
 800c450:	4849      	ldr	r0, [pc, #292]	@ (800c578 <__multiply+0x160>)
 800c452:	9a02      	ldr	r2, [sp, #8]
 800c454:	0049      	lsls	r1, r1, #1
 800c456:	f001 fc3f 	bl	800dcd8 <__assert_func>
 800c45a:	9b02      	ldr	r3, [sp, #8]
 800c45c:	2200      	movs	r2, #0
 800c45e:	3314      	adds	r3, #20
 800c460:	469c      	mov	ip, r3
 800c462:	19bb      	adds	r3, r7, r6
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4463      	add	r3, ip
 800c468:	9304      	str	r3, [sp, #16]
 800c46a:	4663      	mov	r3, ip
 800c46c:	9904      	ldr	r1, [sp, #16]
 800c46e:	428b      	cmp	r3, r1
 800c470:	d32a      	bcc.n	800c4c8 <__multiply+0xb0>
 800c472:	0023      	movs	r3, r4
 800c474:	00bf      	lsls	r7, r7, #2
 800c476:	3314      	adds	r3, #20
 800c478:	3514      	adds	r5, #20
 800c47a:	9308      	str	r3, [sp, #32]
 800c47c:	00b6      	lsls	r6, r6, #2
 800c47e:	19db      	adds	r3, r3, r7
 800c480:	9305      	str	r3, [sp, #20]
 800c482:	19ab      	adds	r3, r5, r6
 800c484:	9309      	str	r3, [sp, #36]	@ 0x24
 800c486:	2304      	movs	r3, #4
 800c488:	9306      	str	r3, [sp, #24]
 800c48a:	0023      	movs	r3, r4
 800c48c:	9a05      	ldr	r2, [sp, #20]
 800c48e:	3315      	adds	r3, #21
 800c490:	9501      	str	r5, [sp, #4]
 800c492:	429a      	cmp	r2, r3
 800c494:	d305      	bcc.n	800c4a2 <__multiply+0x8a>
 800c496:	1b13      	subs	r3, r2, r4
 800c498:	3b15      	subs	r3, #21
 800c49a:	089b      	lsrs	r3, r3, #2
 800c49c:	3301      	adds	r3, #1
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	9306      	str	r3, [sp, #24]
 800c4a2:	9b01      	ldr	r3, [sp, #4]
 800c4a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d310      	bcc.n	800c4cc <__multiply+0xb4>
 800c4aa:	9b03      	ldr	r3, [sp, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	dd05      	ble.n	800c4bc <__multiply+0xa4>
 800c4b0:	9b04      	ldr	r3, [sp, #16]
 800c4b2:	3b04      	subs	r3, #4
 800c4b4:	9304      	str	r3, [sp, #16]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d056      	beq.n	800c56a <__multiply+0x152>
 800c4bc:	9b02      	ldr	r3, [sp, #8]
 800c4be:	9a03      	ldr	r2, [sp, #12]
 800c4c0:	0018      	movs	r0, r3
 800c4c2:	611a      	str	r2, [r3, #16]
 800c4c4:	b00b      	add	sp, #44	@ 0x2c
 800c4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c8:	c304      	stmia	r3!, {r2}
 800c4ca:	e7cf      	b.n	800c46c <__multiply+0x54>
 800c4cc:	9b01      	ldr	r3, [sp, #4]
 800c4ce:	6818      	ldr	r0, [r3, #0]
 800c4d0:	b280      	uxth	r0, r0
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d01e      	beq.n	800c514 <__multiply+0xfc>
 800c4d6:	4667      	mov	r7, ip
 800c4d8:	2500      	movs	r5, #0
 800c4da:	9e08      	ldr	r6, [sp, #32]
 800c4dc:	ce02      	ldmia	r6!, {r1}
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	9307      	str	r3, [sp, #28]
 800c4e2:	b28b      	uxth	r3, r1
 800c4e4:	4343      	muls	r3, r0
 800c4e6:	001a      	movs	r2, r3
 800c4e8:	466b      	mov	r3, sp
 800c4ea:	0c09      	lsrs	r1, r1, #16
 800c4ec:	8b9b      	ldrh	r3, [r3, #28]
 800c4ee:	4341      	muls	r1, r0
 800c4f0:	18d3      	adds	r3, r2, r3
 800c4f2:	9a07      	ldr	r2, [sp, #28]
 800c4f4:	195b      	adds	r3, r3, r5
 800c4f6:	0c12      	lsrs	r2, r2, #16
 800c4f8:	1889      	adds	r1, r1, r2
 800c4fa:	0c1a      	lsrs	r2, r3, #16
 800c4fc:	188a      	adds	r2, r1, r2
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	0c15      	lsrs	r5, r2, #16
 800c502:	0412      	lsls	r2, r2, #16
 800c504:	431a      	orrs	r2, r3
 800c506:	9b05      	ldr	r3, [sp, #20]
 800c508:	c704      	stmia	r7!, {r2}
 800c50a:	42b3      	cmp	r3, r6
 800c50c:	d8e6      	bhi.n	800c4dc <__multiply+0xc4>
 800c50e:	4663      	mov	r3, ip
 800c510:	9a06      	ldr	r2, [sp, #24]
 800c512:	509d      	str	r5, [r3, r2]
 800c514:	9b01      	ldr	r3, [sp, #4]
 800c516:	6818      	ldr	r0, [r3, #0]
 800c518:	0c00      	lsrs	r0, r0, #16
 800c51a:	d020      	beq.n	800c55e <__multiply+0x146>
 800c51c:	4663      	mov	r3, ip
 800c51e:	0025      	movs	r5, r4
 800c520:	4661      	mov	r1, ip
 800c522:	2700      	movs	r7, #0
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3514      	adds	r5, #20
 800c528:	682a      	ldr	r2, [r5, #0]
 800c52a:	680e      	ldr	r6, [r1, #0]
 800c52c:	b292      	uxth	r2, r2
 800c52e:	4342      	muls	r2, r0
 800c530:	0c36      	lsrs	r6, r6, #16
 800c532:	1992      	adds	r2, r2, r6
 800c534:	19d2      	adds	r2, r2, r7
 800c536:	0416      	lsls	r6, r2, #16
 800c538:	b29b      	uxth	r3, r3
 800c53a:	431e      	orrs	r6, r3
 800c53c:	600e      	str	r6, [r1, #0]
 800c53e:	cd40      	ldmia	r5!, {r6}
 800c540:	684b      	ldr	r3, [r1, #4]
 800c542:	0c36      	lsrs	r6, r6, #16
 800c544:	4346      	muls	r6, r0
 800c546:	b29b      	uxth	r3, r3
 800c548:	0c12      	lsrs	r2, r2, #16
 800c54a:	18f3      	adds	r3, r6, r3
 800c54c:	189b      	adds	r3, r3, r2
 800c54e:	9a05      	ldr	r2, [sp, #20]
 800c550:	0c1f      	lsrs	r7, r3, #16
 800c552:	3104      	adds	r1, #4
 800c554:	42aa      	cmp	r2, r5
 800c556:	d8e7      	bhi.n	800c528 <__multiply+0x110>
 800c558:	4662      	mov	r2, ip
 800c55a:	9906      	ldr	r1, [sp, #24]
 800c55c:	5053      	str	r3, [r2, r1]
 800c55e:	9b01      	ldr	r3, [sp, #4]
 800c560:	3304      	adds	r3, #4
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	2304      	movs	r3, #4
 800c566:	449c      	add	ip, r3
 800c568:	e79b      	b.n	800c4a2 <__multiply+0x8a>
 800c56a:	9b03      	ldr	r3, [sp, #12]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	9303      	str	r3, [sp, #12]
 800c570:	e79b      	b.n	800c4aa <__multiply+0x92>
 800c572:	46c0      	nop			@ (mov r8, r8)
 800c574:	0800eea9 	.word	0x0800eea9
 800c578:	0800eeba 	.word	0x0800eeba

0800c57c <__pow5mult>:
 800c57c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c57e:	2303      	movs	r3, #3
 800c580:	0015      	movs	r5, r2
 800c582:	0007      	movs	r7, r0
 800c584:	000e      	movs	r6, r1
 800c586:	401a      	ands	r2, r3
 800c588:	421d      	tst	r5, r3
 800c58a:	d008      	beq.n	800c59e <__pow5mult+0x22>
 800c58c:	4925      	ldr	r1, [pc, #148]	@ (800c624 <__pow5mult+0xa8>)
 800c58e:	3a01      	subs	r2, #1
 800c590:	0092      	lsls	r2, r2, #2
 800c592:	5852      	ldr	r2, [r2, r1]
 800c594:	2300      	movs	r3, #0
 800c596:	0031      	movs	r1, r6
 800c598:	f7ff fe46 	bl	800c228 <__multadd>
 800c59c:	0006      	movs	r6, r0
 800c59e:	10ad      	asrs	r5, r5, #2
 800c5a0:	d03d      	beq.n	800c61e <__pow5mult+0xa2>
 800c5a2:	69fc      	ldr	r4, [r7, #28]
 800c5a4:	2c00      	cmp	r4, #0
 800c5a6:	d10f      	bne.n	800c5c8 <__pow5mult+0x4c>
 800c5a8:	2010      	movs	r0, #16
 800c5aa:	f7ff fd19 	bl	800bfe0 <malloc>
 800c5ae:	1e02      	subs	r2, r0, #0
 800c5b0:	61f8      	str	r0, [r7, #28]
 800c5b2:	d105      	bne.n	800c5c0 <__pow5mult+0x44>
 800c5b4:	21b4      	movs	r1, #180	@ 0xb4
 800c5b6:	4b1c      	ldr	r3, [pc, #112]	@ (800c628 <__pow5mult+0xac>)
 800c5b8:	481c      	ldr	r0, [pc, #112]	@ (800c62c <__pow5mult+0xb0>)
 800c5ba:	31ff      	adds	r1, #255	@ 0xff
 800c5bc:	f001 fb8c 	bl	800dcd8 <__assert_func>
 800c5c0:	6044      	str	r4, [r0, #4]
 800c5c2:	6084      	str	r4, [r0, #8]
 800c5c4:	6004      	str	r4, [r0, #0]
 800c5c6:	60c4      	str	r4, [r0, #12]
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	689c      	ldr	r4, [r3, #8]
 800c5cc:	9301      	str	r3, [sp, #4]
 800c5ce:	2c00      	cmp	r4, #0
 800c5d0:	d108      	bne.n	800c5e4 <__pow5mult+0x68>
 800c5d2:	0038      	movs	r0, r7
 800c5d4:	4916      	ldr	r1, [pc, #88]	@ (800c630 <__pow5mult+0xb4>)
 800c5d6:	f7ff ff07 	bl	800c3e8 <__i2b>
 800c5da:	9b01      	ldr	r3, [sp, #4]
 800c5dc:	0004      	movs	r4, r0
 800c5de:	6098      	str	r0, [r3, #8]
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	6003      	str	r3, [r0, #0]
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	421d      	tst	r5, r3
 800c5e8:	d00a      	beq.n	800c600 <__pow5mult+0x84>
 800c5ea:	0031      	movs	r1, r6
 800c5ec:	0022      	movs	r2, r4
 800c5ee:	0038      	movs	r0, r7
 800c5f0:	f7ff ff12 	bl	800c418 <__multiply>
 800c5f4:	0031      	movs	r1, r6
 800c5f6:	9001      	str	r0, [sp, #4]
 800c5f8:	0038      	movs	r0, r7
 800c5fa:	f7ff fdf1 	bl	800c1e0 <_Bfree>
 800c5fe:	9e01      	ldr	r6, [sp, #4]
 800c600:	106d      	asrs	r5, r5, #1
 800c602:	d00c      	beq.n	800c61e <__pow5mult+0xa2>
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	2800      	cmp	r0, #0
 800c608:	d107      	bne.n	800c61a <__pow5mult+0x9e>
 800c60a:	0022      	movs	r2, r4
 800c60c:	0021      	movs	r1, r4
 800c60e:	0038      	movs	r0, r7
 800c610:	f7ff ff02 	bl	800c418 <__multiply>
 800c614:	2300      	movs	r3, #0
 800c616:	6020      	str	r0, [r4, #0]
 800c618:	6003      	str	r3, [r0, #0]
 800c61a:	0004      	movs	r4, r0
 800c61c:	e7e2      	b.n	800c5e4 <__pow5mult+0x68>
 800c61e:	0030      	movs	r0, r6
 800c620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c622:	46c0      	nop			@ (mov r8, r8)
 800c624:	0800ef14 	.word	0x0800ef14
 800c628:	0800ee3a 	.word	0x0800ee3a
 800c62c:	0800eeba 	.word	0x0800eeba
 800c630:	00000271 	.word	0x00000271

0800c634 <__lshift>:
 800c634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c636:	000c      	movs	r4, r1
 800c638:	0016      	movs	r6, r2
 800c63a:	6923      	ldr	r3, [r4, #16]
 800c63c:	1157      	asrs	r7, r2, #5
 800c63e:	b085      	sub	sp, #20
 800c640:	18fb      	adds	r3, r7, r3
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	3301      	adds	r3, #1
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	6849      	ldr	r1, [r1, #4]
 800c64a:	68a3      	ldr	r3, [r4, #8]
 800c64c:	9002      	str	r0, [sp, #8]
 800c64e:	9a00      	ldr	r2, [sp, #0]
 800c650:	4293      	cmp	r3, r2
 800c652:	db10      	blt.n	800c676 <__lshift+0x42>
 800c654:	9802      	ldr	r0, [sp, #8]
 800c656:	f7ff fd7f 	bl	800c158 <_Balloc>
 800c65a:	2300      	movs	r3, #0
 800c65c:	0001      	movs	r1, r0
 800c65e:	0005      	movs	r5, r0
 800c660:	001a      	movs	r2, r3
 800c662:	3114      	adds	r1, #20
 800c664:	4298      	cmp	r0, r3
 800c666:	d10c      	bne.n	800c682 <__lshift+0x4e>
 800c668:	21ef      	movs	r1, #239	@ 0xef
 800c66a:	002a      	movs	r2, r5
 800c66c:	4b25      	ldr	r3, [pc, #148]	@ (800c704 <__lshift+0xd0>)
 800c66e:	4826      	ldr	r0, [pc, #152]	@ (800c708 <__lshift+0xd4>)
 800c670:	0049      	lsls	r1, r1, #1
 800c672:	f001 fb31 	bl	800dcd8 <__assert_func>
 800c676:	3101      	adds	r1, #1
 800c678:	005b      	lsls	r3, r3, #1
 800c67a:	e7e8      	b.n	800c64e <__lshift+0x1a>
 800c67c:	0098      	lsls	r0, r3, #2
 800c67e:	500a      	str	r2, [r1, r0]
 800c680:	3301      	adds	r3, #1
 800c682:	42bb      	cmp	r3, r7
 800c684:	dbfa      	blt.n	800c67c <__lshift+0x48>
 800c686:	43fb      	mvns	r3, r7
 800c688:	17db      	asrs	r3, r3, #31
 800c68a:	401f      	ands	r7, r3
 800c68c:	00bf      	lsls	r7, r7, #2
 800c68e:	0023      	movs	r3, r4
 800c690:	201f      	movs	r0, #31
 800c692:	19c9      	adds	r1, r1, r7
 800c694:	0037      	movs	r7, r6
 800c696:	6922      	ldr	r2, [r4, #16]
 800c698:	3314      	adds	r3, #20
 800c69a:	0092      	lsls	r2, r2, #2
 800c69c:	189a      	adds	r2, r3, r2
 800c69e:	4007      	ands	r7, r0
 800c6a0:	4206      	tst	r6, r0
 800c6a2:	d029      	beq.n	800c6f8 <__lshift+0xc4>
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	1bc0      	subs	r0, r0, r7
 800c6a8:	9003      	str	r0, [sp, #12]
 800c6aa:	468c      	mov	ip, r1
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	681e      	ldr	r6, [r3, #0]
 800c6b0:	40be      	lsls	r6, r7
 800c6b2:	4306      	orrs	r6, r0
 800c6b4:	4660      	mov	r0, ip
 800c6b6:	c040      	stmia	r0!, {r6}
 800c6b8:	4684      	mov	ip, r0
 800c6ba:	9e03      	ldr	r6, [sp, #12]
 800c6bc:	cb01      	ldmia	r3!, {r0}
 800c6be:	40f0      	lsrs	r0, r6
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d8f4      	bhi.n	800c6ae <__lshift+0x7a>
 800c6c4:	0026      	movs	r6, r4
 800c6c6:	3615      	adds	r6, #21
 800c6c8:	2304      	movs	r3, #4
 800c6ca:	42b2      	cmp	r2, r6
 800c6cc:	d304      	bcc.n	800c6d8 <__lshift+0xa4>
 800c6ce:	1b13      	subs	r3, r2, r4
 800c6d0:	3b15      	subs	r3, #21
 800c6d2:	089b      	lsrs	r3, r3, #2
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	50c8      	str	r0, [r1, r3]
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d002      	beq.n	800c6e4 <__lshift+0xb0>
 800c6de:	9b01      	ldr	r3, [sp, #4]
 800c6e0:	3302      	adds	r3, #2
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	9b00      	ldr	r3, [sp, #0]
 800c6e6:	9802      	ldr	r0, [sp, #8]
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	0021      	movs	r1, r4
 800c6ec:	612b      	str	r3, [r5, #16]
 800c6ee:	f7ff fd77 	bl	800c1e0 <_Bfree>
 800c6f2:	0028      	movs	r0, r5
 800c6f4:	b005      	add	sp, #20
 800c6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6f8:	cb01      	ldmia	r3!, {r0}
 800c6fa:	c101      	stmia	r1!, {r0}
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d8fb      	bhi.n	800c6f8 <__lshift+0xc4>
 800c700:	e7f0      	b.n	800c6e4 <__lshift+0xb0>
 800c702:	46c0      	nop			@ (mov r8, r8)
 800c704:	0800eea9 	.word	0x0800eea9
 800c708:	0800eeba 	.word	0x0800eeba

0800c70c <__mcmp>:
 800c70c:	b530      	push	{r4, r5, lr}
 800c70e:	690b      	ldr	r3, [r1, #16]
 800c710:	6904      	ldr	r4, [r0, #16]
 800c712:	0002      	movs	r2, r0
 800c714:	1ae0      	subs	r0, r4, r3
 800c716:	429c      	cmp	r4, r3
 800c718:	d10f      	bne.n	800c73a <__mcmp+0x2e>
 800c71a:	3214      	adds	r2, #20
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	3114      	adds	r1, #20
 800c720:	0014      	movs	r4, r2
 800c722:	18c9      	adds	r1, r1, r3
 800c724:	18d2      	adds	r2, r2, r3
 800c726:	3a04      	subs	r2, #4
 800c728:	3904      	subs	r1, #4
 800c72a:	6815      	ldr	r5, [r2, #0]
 800c72c:	680b      	ldr	r3, [r1, #0]
 800c72e:	429d      	cmp	r5, r3
 800c730:	d004      	beq.n	800c73c <__mcmp+0x30>
 800c732:	2001      	movs	r0, #1
 800c734:	429d      	cmp	r5, r3
 800c736:	d200      	bcs.n	800c73a <__mcmp+0x2e>
 800c738:	3802      	subs	r0, #2
 800c73a:	bd30      	pop	{r4, r5, pc}
 800c73c:	4294      	cmp	r4, r2
 800c73e:	d3f2      	bcc.n	800c726 <__mcmp+0x1a>
 800c740:	e7fb      	b.n	800c73a <__mcmp+0x2e>
	...

0800c744 <__mdiff>:
 800c744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c746:	000c      	movs	r4, r1
 800c748:	b087      	sub	sp, #28
 800c74a:	9000      	str	r0, [sp, #0]
 800c74c:	0011      	movs	r1, r2
 800c74e:	0020      	movs	r0, r4
 800c750:	0017      	movs	r7, r2
 800c752:	f7ff ffdb 	bl	800c70c <__mcmp>
 800c756:	1e05      	subs	r5, r0, #0
 800c758:	d110      	bne.n	800c77c <__mdiff+0x38>
 800c75a:	0001      	movs	r1, r0
 800c75c:	9800      	ldr	r0, [sp, #0]
 800c75e:	f7ff fcfb 	bl	800c158 <_Balloc>
 800c762:	1e02      	subs	r2, r0, #0
 800c764:	d104      	bne.n	800c770 <__mdiff+0x2c>
 800c766:	4b40      	ldr	r3, [pc, #256]	@ (800c868 <__mdiff+0x124>)
 800c768:	4840      	ldr	r0, [pc, #256]	@ (800c86c <__mdiff+0x128>)
 800c76a:	4941      	ldr	r1, [pc, #260]	@ (800c870 <__mdiff+0x12c>)
 800c76c:	f001 fab4 	bl	800dcd8 <__assert_func>
 800c770:	2301      	movs	r3, #1
 800c772:	6145      	str	r5, [r0, #20]
 800c774:	6103      	str	r3, [r0, #16]
 800c776:	0010      	movs	r0, r2
 800c778:	b007      	add	sp, #28
 800c77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c77c:	2600      	movs	r6, #0
 800c77e:	42b0      	cmp	r0, r6
 800c780:	da03      	bge.n	800c78a <__mdiff+0x46>
 800c782:	0023      	movs	r3, r4
 800c784:	003c      	movs	r4, r7
 800c786:	001f      	movs	r7, r3
 800c788:	3601      	adds	r6, #1
 800c78a:	6861      	ldr	r1, [r4, #4]
 800c78c:	9800      	ldr	r0, [sp, #0]
 800c78e:	f7ff fce3 	bl	800c158 <_Balloc>
 800c792:	1e02      	subs	r2, r0, #0
 800c794:	d103      	bne.n	800c79e <__mdiff+0x5a>
 800c796:	4b34      	ldr	r3, [pc, #208]	@ (800c868 <__mdiff+0x124>)
 800c798:	4834      	ldr	r0, [pc, #208]	@ (800c86c <__mdiff+0x128>)
 800c79a:	4936      	ldr	r1, [pc, #216]	@ (800c874 <__mdiff+0x130>)
 800c79c:	e7e6      	b.n	800c76c <__mdiff+0x28>
 800c79e:	6923      	ldr	r3, [r4, #16]
 800c7a0:	3414      	adds	r4, #20
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	18e3      	adds	r3, r4, r3
 800c7a8:	0021      	movs	r1, r4
 800c7aa:	9401      	str	r4, [sp, #4]
 800c7ac:	003c      	movs	r4, r7
 800c7ae:	9302      	str	r3, [sp, #8]
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	3414      	adds	r4, #20
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	18e3      	adds	r3, r4, r3
 800c7b8:	9303      	str	r3, [sp, #12]
 800c7ba:	0003      	movs	r3, r0
 800c7bc:	60c6      	str	r6, [r0, #12]
 800c7be:	468c      	mov	ip, r1
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	3314      	adds	r3, #20
 800c7c4:	9304      	str	r3, [sp, #16]
 800c7c6:	9305      	str	r3, [sp, #20]
 800c7c8:	4663      	mov	r3, ip
 800c7ca:	cb20      	ldmia	r3!, {r5}
 800c7cc:	b2a9      	uxth	r1, r5
 800c7ce:	000e      	movs	r6, r1
 800c7d0:	469c      	mov	ip, r3
 800c7d2:	cc08      	ldmia	r4!, {r3}
 800c7d4:	0c2d      	lsrs	r5, r5, #16
 800c7d6:	b299      	uxth	r1, r3
 800c7d8:	1a71      	subs	r1, r6, r1
 800c7da:	1809      	adds	r1, r1, r0
 800c7dc:	0c1b      	lsrs	r3, r3, #16
 800c7de:	1408      	asrs	r0, r1, #16
 800c7e0:	1aeb      	subs	r3, r5, r3
 800c7e2:	181b      	adds	r3, r3, r0
 800c7e4:	1418      	asrs	r0, r3, #16
 800c7e6:	b289      	uxth	r1, r1
 800c7e8:	041b      	lsls	r3, r3, #16
 800c7ea:	4319      	orrs	r1, r3
 800c7ec:	9b05      	ldr	r3, [sp, #20]
 800c7ee:	c302      	stmia	r3!, {r1}
 800c7f0:	9305      	str	r3, [sp, #20]
 800c7f2:	9b03      	ldr	r3, [sp, #12]
 800c7f4:	42a3      	cmp	r3, r4
 800c7f6:	d8e7      	bhi.n	800c7c8 <__mdiff+0x84>
 800c7f8:	0039      	movs	r1, r7
 800c7fa:	9c03      	ldr	r4, [sp, #12]
 800c7fc:	3115      	adds	r1, #21
 800c7fe:	2304      	movs	r3, #4
 800c800:	428c      	cmp	r4, r1
 800c802:	d304      	bcc.n	800c80e <__mdiff+0xca>
 800c804:	1be3      	subs	r3, r4, r7
 800c806:	3b15      	subs	r3, #21
 800c808:	089b      	lsrs	r3, r3, #2
 800c80a:	3301      	adds	r3, #1
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	9901      	ldr	r1, [sp, #4]
 800c810:	18cd      	adds	r5, r1, r3
 800c812:	9904      	ldr	r1, [sp, #16]
 800c814:	002e      	movs	r6, r5
 800c816:	18cb      	adds	r3, r1, r3
 800c818:	001f      	movs	r7, r3
 800c81a:	9902      	ldr	r1, [sp, #8]
 800c81c:	428e      	cmp	r6, r1
 800c81e:	d311      	bcc.n	800c844 <__mdiff+0x100>
 800c820:	9c02      	ldr	r4, [sp, #8]
 800c822:	1ee9      	subs	r1, r5, #3
 800c824:	2000      	movs	r0, #0
 800c826:	428c      	cmp	r4, r1
 800c828:	d304      	bcc.n	800c834 <__mdiff+0xf0>
 800c82a:	0021      	movs	r1, r4
 800c82c:	3103      	adds	r1, #3
 800c82e:	1b49      	subs	r1, r1, r5
 800c830:	0889      	lsrs	r1, r1, #2
 800c832:	0088      	lsls	r0, r1, #2
 800c834:	181b      	adds	r3, r3, r0
 800c836:	3b04      	subs	r3, #4
 800c838:	6819      	ldr	r1, [r3, #0]
 800c83a:	2900      	cmp	r1, #0
 800c83c:	d010      	beq.n	800c860 <__mdiff+0x11c>
 800c83e:	9b00      	ldr	r3, [sp, #0]
 800c840:	6113      	str	r3, [r2, #16]
 800c842:	e798      	b.n	800c776 <__mdiff+0x32>
 800c844:	4684      	mov	ip, r0
 800c846:	ce02      	ldmia	r6!, {r1}
 800c848:	b288      	uxth	r0, r1
 800c84a:	4460      	add	r0, ip
 800c84c:	1400      	asrs	r0, r0, #16
 800c84e:	0c0c      	lsrs	r4, r1, #16
 800c850:	1904      	adds	r4, r0, r4
 800c852:	4461      	add	r1, ip
 800c854:	1420      	asrs	r0, r4, #16
 800c856:	b289      	uxth	r1, r1
 800c858:	0424      	lsls	r4, r4, #16
 800c85a:	4321      	orrs	r1, r4
 800c85c:	c702      	stmia	r7!, {r1}
 800c85e:	e7dc      	b.n	800c81a <__mdiff+0xd6>
 800c860:	9900      	ldr	r1, [sp, #0]
 800c862:	3901      	subs	r1, #1
 800c864:	9100      	str	r1, [sp, #0]
 800c866:	e7e6      	b.n	800c836 <__mdiff+0xf2>
 800c868:	0800eea9 	.word	0x0800eea9
 800c86c:	0800eeba 	.word	0x0800eeba
 800c870:	00000237 	.word	0x00000237
 800c874:	00000245 	.word	0x00000245

0800c878 <__ulp>:
 800c878:	b510      	push	{r4, lr}
 800c87a:	2400      	movs	r4, #0
 800c87c:	4b0c      	ldr	r3, [pc, #48]	@ (800c8b0 <__ulp+0x38>)
 800c87e:	4a0d      	ldr	r2, [pc, #52]	@ (800c8b4 <__ulp+0x3c>)
 800c880:	400b      	ands	r3, r1
 800c882:	189b      	adds	r3, r3, r2
 800c884:	42a3      	cmp	r3, r4
 800c886:	dc06      	bgt.n	800c896 <__ulp+0x1e>
 800c888:	425b      	negs	r3, r3
 800c88a:	151a      	asrs	r2, r3, #20
 800c88c:	2a13      	cmp	r2, #19
 800c88e:	dc05      	bgt.n	800c89c <__ulp+0x24>
 800c890:	2380      	movs	r3, #128	@ 0x80
 800c892:	031b      	lsls	r3, r3, #12
 800c894:	4113      	asrs	r3, r2
 800c896:	0019      	movs	r1, r3
 800c898:	0020      	movs	r0, r4
 800c89a:	bd10      	pop	{r4, pc}
 800c89c:	3a14      	subs	r2, #20
 800c89e:	2401      	movs	r4, #1
 800c8a0:	2a1e      	cmp	r2, #30
 800c8a2:	dc02      	bgt.n	800c8aa <__ulp+0x32>
 800c8a4:	2480      	movs	r4, #128	@ 0x80
 800c8a6:	0624      	lsls	r4, r4, #24
 800c8a8:	40d4      	lsrs	r4, r2
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e7f3      	b.n	800c896 <__ulp+0x1e>
 800c8ae:	46c0      	nop			@ (mov r8, r8)
 800c8b0:	7ff00000 	.word	0x7ff00000
 800c8b4:	fcc00000 	.word	0xfcc00000

0800c8b8 <__b2d>:
 800c8b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8ba:	0006      	movs	r6, r0
 800c8bc:	6903      	ldr	r3, [r0, #16]
 800c8be:	3614      	adds	r6, #20
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	18f3      	adds	r3, r6, r3
 800c8c4:	1f1d      	subs	r5, r3, #4
 800c8c6:	682c      	ldr	r4, [r5, #0]
 800c8c8:	000f      	movs	r7, r1
 800c8ca:	0020      	movs	r0, r4
 800c8cc:	9301      	str	r3, [sp, #4]
 800c8ce:	f7ff fd3b 	bl	800c348 <__hi0bits>
 800c8d2:	2220      	movs	r2, #32
 800c8d4:	1a12      	subs	r2, r2, r0
 800c8d6:	603a      	str	r2, [r7, #0]
 800c8d8:	0003      	movs	r3, r0
 800c8da:	4a1c      	ldr	r2, [pc, #112]	@ (800c94c <__b2d+0x94>)
 800c8dc:	280a      	cmp	r0, #10
 800c8de:	dc15      	bgt.n	800c90c <__b2d+0x54>
 800c8e0:	210b      	movs	r1, #11
 800c8e2:	0027      	movs	r7, r4
 800c8e4:	1a09      	subs	r1, r1, r0
 800c8e6:	40cf      	lsrs	r7, r1
 800c8e8:	433a      	orrs	r2, r7
 800c8ea:	468c      	mov	ip, r1
 800c8ec:	0011      	movs	r1, r2
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	42ae      	cmp	r6, r5
 800c8f2:	d202      	bcs.n	800c8fa <__b2d+0x42>
 800c8f4:	9a01      	ldr	r2, [sp, #4]
 800c8f6:	3a08      	subs	r2, #8
 800c8f8:	6812      	ldr	r2, [r2, #0]
 800c8fa:	3315      	adds	r3, #21
 800c8fc:	409c      	lsls	r4, r3
 800c8fe:	4663      	mov	r3, ip
 800c900:	0027      	movs	r7, r4
 800c902:	40da      	lsrs	r2, r3
 800c904:	4317      	orrs	r7, r2
 800c906:	0038      	movs	r0, r7
 800c908:	b003      	add	sp, #12
 800c90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c90c:	2700      	movs	r7, #0
 800c90e:	42ae      	cmp	r6, r5
 800c910:	d202      	bcs.n	800c918 <__b2d+0x60>
 800c912:	9d01      	ldr	r5, [sp, #4]
 800c914:	3d08      	subs	r5, #8
 800c916:	682f      	ldr	r7, [r5, #0]
 800c918:	210b      	movs	r1, #11
 800c91a:	4249      	negs	r1, r1
 800c91c:	468c      	mov	ip, r1
 800c91e:	449c      	add	ip, r3
 800c920:	2b0b      	cmp	r3, #11
 800c922:	d010      	beq.n	800c946 <__b2d+0x8e>
 800c924:	4661      	mov	r1, ip
 800c926:	2320      	movs	r3, #32
 800c928:	408c      	lsls	r4, r1
 800c92a:	1a5b      	subs	r3, r3, r1
 800c92c:	0039      	movs	r1, r7
 800c92e:	40d9      	lsrs	r1, r3
 800c930:	430c      	orrs	r4, r1
 800c932:	4322      	orrs	r2, r4
 800c934:	0011      	movs	r1, r2
 800c936:	2200      	movs	r2, #0
 800c938:	42b5      	cmp	r5, r6
 800c93a:	d901      	bls.n	800c940 <__b2d+0x88>
 800c93c:	3d04      	subs	r5, #4
 800c93e:	682a      	ldr	r2, [r5, #0]
 800c940:	4664      	mov	r4, ip
 800c942:	40a7      	lsls	r7, r4
 800c944:	e7dd      	b.n	800c902 <__b2d+0x4a>
 800c946:	4322      	orrs	r2, r4
 800c948:	0011      	movs	r1, r2
 800c94a:	e7dc      	b.n	800c906 <__b2d+0x4e>
 800c94c:	3ff00000 	.word	0x3ff00000

0800c950 <__d2b>:
 800c950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c952:	2101      	movs	r1, #1
 800c954:	0016      	movs	r6, r2
 800c956:	001f      	movs	r7, r3
 800c958:	f7ff fbfe 	bl	800c158 <_Balloc>
 800c95c:	1e04      	subs	r4, r0, #0
 800c95e:	d105      	bne.n	800c96c <__d2b+0x1c>
 800c960:	0022      	movs	r2, r4
 800c962:	4b25      	ldr	r3, [pc, #148]	@ (800c9f8 <__d2b+0xa8>)
 800c964:	4825      	ldr	r0, [pc, #148]	@ (800c9fc <__d2b+0xac>)
 800c966:	4926      	ldr	r1, [pc, #152]	@ (800ca00 <__d2b+0xb0>)
 800c968:	f001 f9b6 	bl	800dcd8 <__assert_func>
 800c96c:	033b      	lsls	r3, r7, #12
 800c96e:	007d      	lsls	r5, r7, #1
 800c970:	0b1b      	lsrs	r3, r3, #12
 800c972:	0d6d      	lsrs	r5, r5, #21
 800c974:	d002      	beq.n	800c97c <__d2b+0x2c>
 800c976:	2280      	movs	r2, #128	@ 0x80
 800c978:	0352      	lsls	r2, r2, #13
 800c97a:	4313      	orrs	r3, r2
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	2e00      	cmp	r6, #0
 800c980:	d025      	beq.n	800c9ce <__d2b+0x7e>
 800c982:	4668      	mov	r0, sp
 800c984:	9600      	str	r6, [sp, #0]
 800c986:	f7ff fd00 	bl	800c38a <__lo0bits>
 800c98a:	9b01      	ldr	r3, [sp, #4]
 800c98c:	9900      	ldr	r1, [sp, #0]
 800c98e:	2800      	cmp	r0, #0
 800c990:	d01b      	beq.n	800c9ca <__d2b+0x7a>
 800c992:	2220      	movs	r2, #32
 800c994:	001e      	movs	r6, r3
 800c996:	1a12      	subs	r2, r2, r0
 800c998:	4096      	lsls	r6, r2
 800c99a:	0032      	movs	r2, r6
 800c99c:	40c3      	lsrs	r3, r0
 800c99e:	430a      	orrs	r2, r1
 800c9a0:	6162      	str	r2, [r4, #20]
 800c9a2:	9301      	str	r3, [sp, #4]
 800c9a4:	9e01      	ldr	r6, [sp, #4]
 800c9a6:	61a6      	str	r6, [r4, #24]
 800c9a8:	1e73      	subs	r3, r6, #1
 800c9aa:	419e      	sbcs	r6, r3
 800c9ac:	3601      	adds	r6, #1
 800c9ae:	6126      	str	r6, [r4, #16]
 800c9b0:	2d00      	cmp	r5, #0
 800c9b2:	d014      	beq.n	800c9de <__d2b+0x8e>
 800c9b4:	2635      	movs	r6, #53	@ 0x35
 800c9b6:	4b13      	ldr	r3, [pc, #76]	@ (800ca04 <__d2b+0xb4>)
 800c9b8:	18ed      	adds	r5, r5, r3
 800c9ba:	9b08      	ldr	r3, [sp, #32]
 800c9bc:	182d      	adds	r5, r5, r0
 800c9be:	601d      	str	r5, [r3, #0]
 800c9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c2:	1a36      	subs	r6, r6, r0
 800c9c4:	601e      	str	r6, [r3, #0]
 800c9c6:	0020      	movs	r0, r4
 800c9c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9ca:	6161      	str	r1, [r4, #20]
 800c9cc:	e7ea      	b.n	800c9a4 <__d2b+0x54>
 800c9ce:	a801      	add	r0, sp, #4
 800c9d0:	f7ff fcdb 	bl	800c38a <__lo0bits>
 800c9d4:	9b01      	ldr	r3, [sp, #4]
 800c9d6:	2601      	movs	r6, #1
 800c9d8:	6163      	str	r3, [r4, #20]
 800c9da:	3020      	adds	r0, #32
 800c9dc:	e7e7      	b.n	800c9ae <__d2b+0x5e>
 800c9de:	4b0a      	ldr	r3, [pc, #40]	@ (800ca08 <__d2b+0xb8>)
 800c9e0:	18c0      	adds	r0, r0, r3
 800c9e2:	9b08      	ldr	r3, [sp, #32]
 800c9e4:	6018      	str	r0, [r3, #0]
 800c9e6:	4b09      	ldr	r3, [pc, #36]	@ (800ca0c <__d2b+0xbc>)
 800c9e8:	18f3      	adds	r3, r6, r3
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	18e3      	adds	r3, r4, r3
 800c9ee:	6958      	ldr	r0, [r3, #20]
 800c9f0:	f7ff fcaa 	bl	800c348 <__hi0bits>
 800c9f4:	0176      	lsls	r6, r6, #5
 800c9f6:	e7e3      	b.n	800c9c0 <__d2b+0x70>
 800c9f8:	0800eea9 	.word	0x0800eea9
 800c9fc:	0800eeba 	.word	0x0800eeba
 800ca00:	0000030f 	.word	0x0000030f
 800ca04:	fffffbcd 	.word	0xfffffbcd
 800ca08:	fffffbce 	.word	0xfffffbce
 800ca0c:	3fffffff 	.word	0x3fffffff

0800ca10 <__ratio>:
 800ca10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca12:	b087      	sub	sp, #28
 800ca14:	000f      	movs	r7, r1
 800ca16:	a904      	add	r1, sp, #16
 800ca18:	0006      	movs	r6, r0
 800ca1a:	f7ff ff4d 	bl	800c8b8 <__b2d>
 800ca1e:	9000      	str	r0, [sp, #0]
 800ca20:	9101      	str	r1, [sp, #4]
 800ca22:	9b00      	ldr	r3, [sp, #0]
 800ca24:	9c01      	ldr	r4, [sp, #4]
 800ca26:	0038      	movs	r0, r7
 800ca28:	a905      	add	r1, sp, #20
 800ca2a:	9302      	str	r3, [sp, #8]
 800ca2c:	9403      	str	r4, [sp, #12]
 800ca2e:	f7ff ff43 	bl	800c8b8 <__b2d>
 800ca32:	000d      	movs	r5, r1
 800ca34:	0002      	movs	r2, r0
 800ca36:	000b      	movs	r3, r1
 800ca38:	6930      	ldr	r0, [r6, #16]
 800ca3a:	6939      	ldr	r1, [r7, #16]
 800ca3c:	9e04      	ldr	r6, [sp, #16]
 800ca3e:	1a40      	subs	r0, r0, r1
 800ca40:	9905      	ldr	r1, [sp, #20]
 800ca42:	0140      	lsls	r0, r0, #5
 800ca44:	1a71      	subs	r1, r6, r1
 800ca46:	1841      	adds	r1, r0, r1
 800ca48:	0508      	lsls	r0, r1, #20
 800ca4a:	2900      	cmp	r1, #0
 800ca4c:	dd08      	ble.n	800ca60 <__ratio+0x50>
 800ca4e:	9901      	ldr	r1, [sp, #4]
 800ca50:	1841      	adds	r1, r0, r1
 800ca52:	9103      	str	r1, [sp, #12]
 800ca54:	9802      	ldr	r0, [sp, #8]
 800ca56:	9903      	ldr	r1, [sp, #12]
 800ca58:	f7f4 f8f6 	bl	8000c48 <__aeabi_ddiv>
 800ca5c:	b007      	add	sp, #28
 800ca5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca60:	1a2b      	subs	r3, r5, r0
 800ca62:	e7f7      	b.n	800ca54 <__ratio+0x44>

0800ca64 <__copybits>:
 800ca64:	b570      	push	{r4, r5, r6, lr}
 800ca66:	0014      	movs	r4, r2
 800ca68:	0005      	movs	r5, r0
 800ca6a:	3901      	subs	r1, #1
 800ca6c:	6913      	ldr	r3, [r2, #16]
 800ca6e:	1149      	asrs	r1, r1, #5
 800ca70:	3101      	adds	r1, #1
 800ca72:	0089      	lsls	r1, r1, #2
 800ca74:	3414      	adds	r4, #20
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	1841      	adds	r1, r0, r1
 800ca7a:	18e3      	adds	r3, r4, r3
 800ca7c:	42a3      	cmp	r3, r4
 800ca7e:	d80d      	bhi.n	800ca9c <__copybits+0x38>
 800ca80:	0014      	movs	r4, r2
 800ca82:	3411      	adds	r4, #17
 800ca84:	2500      	movs	r5, #0
 800ca86:	429c      	cmp	r4, r3
 800ca88:	d803      	bhi.n	800ca92 <__copybits+0x2e>
 800ca8a:	1a9b      	subs	r3, r3, r2
 800ca8c:	3b11      	subs	r3, #17
 800ca8e:	089b      	lsrs	r3, r3, #2
 800ca90:	009d      	lsls	r5, r3, #2
 800ca92:	2300      	movs	r3, #0
 800ca94:	1940      	adds	r0, r0, r5
 800ca96:	4281      	cmp	r1, r0
 800ca98:	d803      	bhi.n	800caa2 <__copybits+0x3e>
 800ca9a:	bd70      	pop	{r4, r5, r6, pc}
 800ca9c:	cc40      	ldmia	r4!, {r6}
 800ca9e:	c540      	stmia	r5!, {r6}
 800caa0:	e7ec      	b.n	800ca7c <__copybits+0x18>
 800caa2:	c008      	stmia	r0!, {r3}
 800caa4:	e7f7      	b.n	800ca96 <__copybits+0x32>

0800caa6 <__any_on>:
 800caa6:	0002      	movs	r2, r0
 800caa8:	6900      	ldr	r0, [r0, #16]
 800caaa:	b510      	push	{r4, lr}
 800caac:	3214      	adds	r2, #20
 800caae:	114b      	asrs	r3, r1, #5
 800cab0:	4298      	cmp	r0, r3
 800cab2:	db13      	blt.n	800cadc <__any_on+0x36>
 800cab4:	dd0c      	ble.n	800cad0 <__any_on+0x2a>
 800cab6:	241f      	movs	r4, #31
 800cab8:	0008      	movs	r0, r1
 800caba:	4020      	ands	r0, r4
 800cabc:	4221      	tst	r1, r4
 800cabe:	d007      	beq.n	800cad0 <__any_on+0x2a>
 800cac0:	0099      	lsls	r1, r3, #2
 800cac2:	588c      	ldr	r4, [r1, r2]
 800cac4:	0021      	movs	r1, r4
 800cac6:	40c1      	lsrs	r1, r0
 800cac8:	4081      	lsls	r1, r0
 800caca:	2001      	movs	r0, #1
 800cacc:	428c      	cmp	r4, r1
 800cace:	d104      	bne.n	800cada <__any_on+0x34>
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	18d3      	adds	r3, r2, r3
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d803      	bhi.n	800cae0 <__any_on+0x3a>
 800cad8:	2000      	movs	r0, #0
 800cada:	bd10      	pop	{r4, pc}
 800cadc:	0003      	movs	r3, r0
 800cade:	e7f7      	b.n	800cad0 <__any_on+0x2a>
 800cae0:	3b04      	subs	r3, #4
 800cae2:	6819      	ldr	r1, [r3, #0]
 800cae4:	2900      	cmp	r1, #0
 800cae6:	d0f5      	beq.n	800cad4 <__any_on+0x2e>
 800cae8:	2001      	movs	r0, #1
 800caea:	e7f6      	b.n	800cada <__any_on+0x34>

0800caec <sulp>:
 800caec:	b570      	push	{r4, r5, r6, lr}
 800caee:	0016      	movs	r6, r2
 800caf0:	000d      	movs	r5, r1
 800caf2:	f7ff fec1 	bl	800c878 <__ulp>
 800caf6:	2e00      	cmp	r6, #0
 800caf8:	d00d      	beq.n	800cb16 <sulp+0x2a>
 800cafa:	236b      	movs	r3, #107	@ 0x6b
 800cafc:	006a      	lsls	r2, r5, #1
 800cafe:	0d52      	lsrs	r2, r2, #21
 800cb00:	1a9b      	subs	r3, r3, r2
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dd07      	ble.n	800cb16 <sulp+0x2a>
 800cb06:	2400      	movs	r4, #0
 800cb08:	4a03      	ldr	r2, [pc, #12]	@ (800cb18 <sulp+0x2c>)
 800cb0a:	051b      	lsls	r3, r3, #20
 800cb0c:	189d      	adds	r5, r3, r2
 800cb0e:	002b      	movs	r3, r5
 800cb10:	0022      	movs	r2, r4
 800cb12:	f7f4 fcdd 	bl	80014d0 <__aeabi_dmul>
 800cb16:	bd70      	pop	{r4, r5, r6, pc}
 800cb18:	3ff00000 	.word	0x3ff00000

0800cb1c <_strtod_l>:
 800cb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb1e:	b0a3      	sub	sp, #140	@ 0x8c
 800cb20:	921b      	str	r2, [sp, #108]	@ 0x6c
 800cb22:	2200      	movs	r2, #0
 800cb24:	2600      	movs	r6, #0
 800cb26:	2700      	movs	r7, #0
 800cb28:	9005      	str	r0, [sp, #20]
 800cb2a:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb2c:	921e      	str	r2, [sp, #120]	@ 0x78
 800cb2e:	911d      	str	r1, [sp, #116]	@ 0x74
 800cb30:	780a      	ldrb	r2, [r1, #0]
 800cb32:	2a2b      	cmp	r2, #43	@ 0x2b
 800cb34:	d053      	beq.n	800cbde <_strtod_l+0xc2>
 800cb36:	d83f      	bhi.n	800cbb8 <_strtod_l+0x9c>
 800cb38:	2a0d      	cmp	r2, #13
 800cb3a:	d839      	bhi.n	800cbb0 <_strtod_l+0x94>
 800cb3c:	2a08      	cmp	r2, #8
 800cb3e:	d839      	bhi.n	800cbb4 <_strtod_l+0x98>
 800cb40:	2a00      	cmp	r2, #0
 800cb42:	d042      	beq.n	800cbca <_strtod_l+0xae>
 800cb44:	2200      	movs	r2, #0
 800cb46:	9212      	str	r2, [sp, #72]	@ 0x48
 800cb48:	2100      	movs	r1, #0
 800cb4a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800cb4c:	910c      	str	r1, [sp, #48]	@ 0x30
 800cb4e:	782a      	ldrb	r2, [r5, #0]
 800cb50:	2a30      	cmp	r2, #48	@ 0x30
 800cb52:	d000      	beq.n	800cb56 <_strtod_l+0x3a>
 800cb54:	e083      	b.n	800cc5e <_strtod_l+0x142>
 800cb56:	786a      	ldrb	r2, [r5, #1]
 800cb58:	3120      	adds	r1, #32
 800cb5a:	438a      	bics	r2, r1
 800cb5c:	2a58      	cmp	r2, #88	@ 0x58
 800cb5e:	d000      	beq.n	800cb62 <_strtod_l+0x46>
 800cb60:	e073      	b.n	800cc4a <_strtod_l+0x12e>
 800cb62:	9302      	str	r3, [sp, #8]
 800cb64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cb66:	4a95      	ldr	r2, [pc, #596]	@ (800cdbc <_strtod_l+0x2a0>)
 800cb68:	9301      	str	r3, [sp, #4]
 800cb6a:	ab1e      	add	r3, sp, #120	@ 0x78
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	9805      	ldr	r0, [sp, #20]
 800cb70:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cb72:	a91d      	add	r1, sp, #116	@ 0x74
 800cb74:	f001 f964 	bl	800de40 <__gethex>
 800cb78:	230f      	movs	r3, #15
 800cb7a:	0002      	movs	r2, r0
 800cb7c:	401a      	ands	r2, r3
 800cb7e:	0004      	movs	r4, r0
 800cb80:	9206      	str	r2, [sp, #24]
 800cb82:	4218      	tst	r0, r3
 800cb84:	d005      	beq.n	800cb92 <_strtod_l+0x76>
 800cb86:	2a06      	cmp	r2, #6
 800cb88:	d12b      	bne.n	800cbe2 <_strtod_l+0xc6>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	3501      	adds	r5, #1
 800cb8e:	951d      	str	r5, [sp, #116]	@ 0x74
 800cb90:	9312      	str	r3, [sp, #72]	@ 0x48
 800cb92:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d002      	beq.n	800cb9e <_strtod_l+0x82>
 800cb98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cb9c:	6013      	str	r3, [r2, #0]
 800cb9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d019      	beq.n	800cbd8 <_strtod_l+0xbc>
 800cba4:	2380      	movs	r3, #128	@ 0x80
 800cba6:	0030      	movs	r0, r6
 800cba8:	061b      	lsls	r3, r3, #24
 800cbaa:	18f9      	adds	r1, r7, r3
 800cbac:	b023      	add	sp, #140	@ 0x8c
 800cbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb0:	2a20      	cmp	r2, #32
 800cbb2:	d1c7      	bne.n	800cb44 <_strtod_l+0x28>
 800cbb4:	3101      	adds	r1, #1
 800cbb6:	e7ba      	b.n	800cb2e <_strtod_l+0x12>
 800cbb8:	2a2d      	cmp	r2, #45	@ 0x2d
 800cbba:	d1c3      	bne.n	800cb44 <_strtod_l+0x28>
 800cbbc:	3a2c      	subs	r2, #44	@ 0x2c
 800cbbe:	9212      	str	r2, [sp, #72]	@ 0x48
 800cbc0:	1c4a      	adds	r2, r1, #1
 800cbc2:	921d      	str	r2, [sp, #116]	@ 0x74
 800cbc4:	784a      	ldrb	r2, [r1, #1]
 800cbc6:	2a00      	cmp	r2, #0
 800cbc8:	d1be      	bne.n	800cb48 <_strtod_l+0x2c>
 800cbca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbcc:	931d      	str	r3, [sp, #116]	@ 0x74
 800cbce:	2300      	movs	r3, #0
 800cbd0:	9312      	str	r3, [sp, #72]	@ 0x48
 800cbd2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1df      	bne.n	800cb98 <_strtod_l+0x7c>
 800cbd8:	0030      	movs	r0, r6
 800cbda:	0039      	movs	r1, r7
 800cbdc:	e7e6      	b.n	800cbac <_strtod_l+0x90>
 800cbde:	2200      	movs	r2, #0
 800cbe0:	e7ed      	b.n	800cbbe <_strtod_l+0xa2>
 800cbe2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800cbe4:	2a00      	cmp	r2, #0
 800cbe6:	d007      	beq.n	800cbf8 <_strtod_l+0xdc>
 800cbe8:	2135      	movs	r1, #53	@ 0x35
 800cbea:	a820      	add	r0, sp, #128	@ 0x80
 800cbec:	f7ff ff3a 	bl	800ca64 <__copybits>
 800cbf0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800cbf2:	9805      	ldr	r0, [sp, #20]
 800cbf4:	f7ff faf4 	bl	800c1e0 <_Bfree>
 800cbf8:	9806      	ldr	r0, [sp, #24]
 800cbfa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800cbfc:	3801      	subs	r0, #1
 800cbfe:	2804      	cmp	r0, #4
 800cc00:	d806      	bhi.n	800cc10 <_strtod_l+0xf4>
 800cc02:	f7f3 fa87 	bl	8000114 <__gnu_thumb1_case_uqi>
 800cc06:	0312      	.short	0x0312
 800cc08:	1e1c      	.short	0x1e1c
 800cc0a:	12          	.byte	0x12
 800cc0b:	00          	.byte	0x00
 800cc0c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cc0e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800cc10:	05e4      	lsls	r4, r4, #23
 800cc12:	d502      	bpl.n	800cc1a <_strtod_l+0xfe>
 800cc14:	2380      	movs	r3, #128	@ 0x80
 800cc16:	061b      	lsls	r3, r3, #24
 800cc18:	431f      	orrs	r7, r3
 800cc1a:	4b69      	ldr	r3, [pc, #420]	@ (800cdc0 <_strtod_l+0x2a4>)
 800cc1c:	423b      	tst	r3, r7
 800cc1e:	d1b8      	bne.n	800cb92 <_strtod_l+0x76>
 800cc20:	f7fe fad6 	bl	800b1d0 <__errno>
 800cc24:	2322      	movs	r3, #34	@ 0x22
 800cc26:	6003      	str	r3, [r0, #0]
 800cc28:	e7b3      	b.n	800cb92 <_strtod_l+0x76>
 800cc2a:	4966      	ldr	r1, [pc, #408]	@ (800cdc4 <_strtod_l+0x2a8>)
 800cc2c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cc2e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cc30:	400a      	ands	r2, r1
 800cc32:	4965      	ldr	r1, [pc, #404]	@ (800cdc8 <_strtod_l+0x2ac>)
 800cc34:	185b      	adds	r3, r3, r1
 800cc36:	051b      	lsls	r3, r3, #20
 800cc38:	431a      	orrs	r2, r3
 800cc3a:	0017      	movs	r7, r2
 800cc3c:	e7e8      	b.n	800cc10 <_strtod_l+0xf4>
 800cc3e:	4f60      	ldr	r7, [pc, #384]	@ (800cdc0 <_strtod_l+0x2a4>)
 800cc40:	e7e6      	b.n	800cc10 <_strtod_l+0xf4>
 800cc42:	2601      	movs	r6, #1
 800cc44:	4f61      	ldr	r7, [pc, #388]	@ (800cdcc <_strtod_l+0x2b0>)
 800cc46:	4276      	negs	r6, r6
 800cc48:	e7e2      	b.n	800cc10 <_strtod_l+0xf4>
 800cc4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc4c:	1c5a      	adds	r2, r3, #1
 800cc4e:	921d      	str	r2, [sp, #116]	@ 0x74
 800cc50:	785b      	ldrb	r3, [r3, #1]
 800cc52:	2b30      	cmp	r3, #48	@ 0x30
 800cc54:	d0f9      	beq.n	800cc4a <_strtod_l+0x12e>
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d09b      	beq.n	800cb92 <_strtod_l+0x76>
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc5e:	2500      	movs	r5, #0
 800cc60:	220a      	movs	r2, #10
 800cc62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc64:	950d      	str	r5, [sp, #52]	@ 0x34
 800cc66:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc68:	9508      	str	r5, [sp, #32]
 800cc6a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800cc6c:	7804      	ldrb	r4, [r0, #0]
 800cc6e:	0023      	movs	r3, r4
 800cc70:	3b30      	subs	r3, #48	@ 0x30
 800cc72:	b2d9      	uxtb	r1, r3
 800cc74:	2909      	cmp	r1, #9
 800cc76:	d927      	bls.n	800ccc8 <_strtod_l+0x1ac>
 800cc78:	2201      	movs	r2, #1
 800cc7a:	4955      	ldr	r1, [pc, #340]	@ (800cdd0 <_strtod_l+0x2b4>)
 800cc7c:	f000 fff8 	bl	800dc70 <strncmp>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d031      	beq.n	800cce8 <_strtod_l+0x1cc>
 800cc84:	2000      	movs	r0, #0
 800cc86:	0023      	movs	r3, r4
 800cc88:	4684      	mov	ip, r0
 800cc8a:	9a08      	ldr	r2, [sp, #32]
 800cc8c:	900e      	str	r0, [sp, #56]	@ 0x38
 800cc8e:	9206      	str	r2, [sp, #24]
 800cc90:	2220      	movs	r2, #32
 800cc92:	0019      	movs	r1, r3
 800cc94:	4391      	bics	r1, r2
 800cc96:	000a      	movs	r2, r1
 800cc98:	2100      	movs	r1, #0
 800cc9a:	9107      	str	r1, [sp, #28]
 800cc9c:	2a45      	cmp	r2, #69	@ 0x45
 800cc9e:	d000      	beq.n	800cca2 <_strtod_l+0x186>
 800cca0:	e0c0      	b.n	800ce24 <_strtod_l+0x308>
 800cca2:	9b06      	ldr	r3, [sp, #24]
 800cca4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cca6:	4303      	orrs	r3, r0
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	428b      	cmp	r3, r1
 800ccac:	d08d      	beq.n	800cbca <_strtod_l+0xae>
 800ccae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ccb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	931d      	str	r3, [sp, #116]	@ 0x74
 800ccb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccb8:	785b      	ldrb	r3, [r3, #1]
 800ccba:	2b2b      	cmp	r3, #43	@ 0x2b
 800ccbc:	d070      	beq.n	800cda0 <_strtod_l+0x284>
 800ccbe:	000c      	movs	r4, r1
 800ccc0:	2b2d      	cmp	r3, #45	@ 0x2d
 800ccc2:	d173      	bne.n	800cdac <_strtod_l+0x290>
 800ccc4:	2401      	movs	r4, #1
 800ccc6:	e06c      	b.n	800cda2 <_strtod_l+0x286>
 800ccc8:	9908      	ldr	r1, [sp, #32]
 800ccca:	2908      	cmp	r1, #8
 800cccc:	dc09      	bgt.n	800cce2 <_strtod_l+0x1c6>
 800ccce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ccd0:	4351      	muls	r1, r2
 800ccd2:	185b      	adds	r3, r3, r1
 800ccd4:	930d      	str	r3, [sp, #52]	@ 0x34
 800ccd6:	9b08      	ldr	r3, [sp, #32]
 800ccd8:	3001      	adds	r0, #1
 800ccda:	3301      	adds	r3, #1
 800ccdc:	9308      	str	r3, [sp, #32]
 800ccde:	901d      	str	r0, [sp, #116]	@ 0x74
 800cce0:	e7c3      	b.n	800cc6a <_strtod_l+0x14e>
 800cce2:	4355      	muls	r5, r2
 800cce4:	195d      	adds	r5, r3, r5
 800cce6:	e7f6      	b.n	800ccd6 <_strtod_l+0x1ba>
 800cce8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ccea:	1c5a      	adds	r2, r3, #1
 800ccec:	921d      	str	r2, [sp, #116]	@ 0x74
 800ccee:	9a08      	ldr	r2, [sp, #32]
 800ccf0:	785b      	ldrb	r3, [r3, #1]
 800ccf2:	2a00      	cmp	r2, #0
 800ccf4:	d03a      	beq.n	800cd6c <_strtod_l+0x250>
 800ccf6:	900e      	str	r0, [sp, #56]	@ 0x38
 800ccf8:	9206      	str	r2, [sp, #24]
 800ccfa:	001a      	movs	r2, r3
 800ccfc:	3a30      	subs	r2, #48	@ 0x30
 800ccfe:	2a09      	cmp	r2, #9
 800cd00:	d912      	bls.n	800cd28 <_strtod_l+0x20c>
 800cd02:	2201      	movs	r2, #1
 800cd04:	4694      	mov	ip, r2
 800cd06:	e7c3      	b.n	800cc90 <_strtod_l+0x174>
 800cd08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	1c5a      	adds	r2, r3, #1
 800cd0e:	921d      	str	r2, [sp, #116]	@ 0x74
 800cd10:	785b      	ldrb	r3, [r3, #1]
 800cd12:	2b30      	cmp	r3, #48	@ 0x30
 800cd14:	d0f8      	beq.n	800cd08 <_strtod_l+0x1ec>
 800cd16:	001a      	movs	r2, r3
 800cd18:	3a31      	subs	r2, #49	@ 0x31
 800cd1a:	2a08      	cmp	r2, #8
 800cd1c:	d83b      	bhi.n	800cd96 <_strtod_l+0x27a>
 800cd1e:	900e      	str	r0, [sp, #56]	@ 0x38
 800cd20:	2000      	movs	r0, #0
 800cd22:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cd24:	9006      	str	r0, [sp, #24]
 800cd26:	9213      	str	r2, [sp, #76]	@ 0x4c
 800cd28:	001a      	movs	r2, r3
 800cd2a:	1c41      	adds	r1, r0, #1
 800cd2c:	3a30      	subs	r2, #48	@ 0x30
 800cd2e:	2b30      	cmp	r3, #48	@ 0x30
 800cd30:	d016      	beq.n	800cd60 <_strtod_l+0x244>
 800cd32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd34:	185b      	adds	r3, r3, r1
 800cd36:	930e      	str	r3, [sp, #56]	@ 0x38
 800cd38:	9b06      	ldr	r3, [sp, #24]
 800cd3a:	210a      	movs	r1, #10
 800cd3c:	469c      	mov	ip, r3
 800cd3e:	4484      	add	ip, r0
 800cd40:	459c      	cmp	ip, r3
 800cd42:	d115      	bne.n	800cd70 <_strtod_l+0x254>
 800cd44:	9906      	ldr	r1, [sp, #24]
 800cd46:	9b06      	ldr	r3, [sp, #24]
 800cd48:	3101      	adds	r1, #1
 800cd4a:	1809      	adds	r1, r1, r0
 800cd4c:	181b      	adds	r3, r3, r0
 800cd4e:	9106      	str	r1, [sp, #24]
 800cd50:	2b08      	cmp	r3, #8
 800cd52:	dc19      	bgt.n	800cd88 <_strtod_l+0x26c>
 800cd54:	230a      	movs	r3, #10
 800cd56:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cd58:	434b      	muls	r3, r1
 800cd5a:	2100      	movs	r1, #0
 800cd5c:	18d3      	adds	r3, r2, r3
 800cd5e:	930d      	str	r3, [sp, #52]	@ 0x34
 800cd60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd62:	0008      	movs	r0, r1
 800cd64:	1c5a      	adds	r2, r3, #1
 800cd66:	921d      	str	r2, [sp, #116]	@ 0x74
 800cd68:	785b      	ldrb	r3, [r3, #1]
 800cd6a:	e7c6      	b.n	800ccfa <_strtod_l+0x1de>
 800cd6c:	9808      	ldr	r0, [sp, #32]
 800cd6e:	e7d0      	b.n	800cd12 <_strtod_l+0x1f6>
 800cd70:	1c5c      	adds	r4, r3, #1
 800cd72:	2b08      	cmp	r3, #8
 800cd74:	dc04      	bgt.n	800cd80 <_strtod_l+0x264>
 800cd76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd78:	434b      	muls	r3, r1
 800cd7a:	930d      	str	r3, [sp, #52]	@ 0x34
 800cd7c:	0023      	movs	r3, r4
 800cd7e:	e7df      	b.n	800cd40 <_strtod_l+0x224>
 800cd80:	2c10      	cmp	r4, #16
 800cd82:	dcfb      	bgt.n	800cd7c <_strtod_l+0x260>
 800cd84:	434d      	muls	r5, r1
 800cd86:	e7f9      	b.n	800cd7c <_strtod_l+0x260>
 800cd88:	2100      	movs	r1, #0
 800cd8a:	2b0f      	cmp	r3, #15
 800cd8c:	dce8      	bgt.n	800cd60 <_strtod_l+0x244>
 800cd8e:	230a      	movs	r3, #10
 800cd90:	435d      	muls	r5, r3
 800cd92:	1955      	adds	r5, r2, r5
 800cd94:	e7e4      	b.n	800cd60 <_strtod_l+0x244>
 800cd96:	2200      	movs	r2, #0
 800cd98:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd9a:	9206      	str	r2, [sp, #24]
 800cd9c:	3201      	adds	r2, #1
 800cd9e:	e7b1      	b.n	800cd04 <_strtod_l+0x1e8>
 800cda0:	2400      	movs	r4, #0
 800cda2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cda4:	3302      	adds	r3, #2
 800cda6:	931d      	str	r3, [sp, #116]	@ 0x74
 800cda8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdaa:	789b      	ldrb	r3, [r3, #2]
 800cdac:	001a      	movs	r2, r3
 800cdae:	3a30      	subs	r2, #48	@ 0x30
 800cdb0:	2a09      	cmp	r2, #9
 800cdb2:	d913      	bls.n	800cddc <_strtod_l+0x2c0>
 800cdb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdb6:	921d      	str	r2, [sp, #116]	@ 0x74
 800cdb8:	2200      	movs	r2, #0
 800cdba:	e032      	b.n	800ce22 <_strtod_l+0x306>
 800cdbc:	0800f028 	.word	0x0800f028
 800cdc0:	7ff00000 	.word	0x7ff00000
 800cdc4:	ffefffff 	.word	0xffefffff
 800cdc8:	00000433 	.word	0x00000433
 800cdcc:	7fffffff 	.word	0x7fffffff
 800cdd0:	0800f010 	.word	0x0800f010
 800cdd4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cdd6:	1c5a      	adds	r2, r3, #1
 800cdd8:	921d      	str	r2, [sp, #116]	@ 0x74
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	2b30      	cmp	r3, #48	@ 0x30
 800cdde:	d0f9      	beq.n	800cdd4 <_strtod_l+0x2b8>
 800cde0:	2200      	movs	r2, #0
 800cde2:	9207      	str	r2, [sp, #28]
 800cde4:	001a      	movs	r2, r3
 800cde6:	3a31      	subs	r2, #49	@ 0x31
 800cde8:	2a08      	cmp	r2, #8
 800cdea:	d81b      	bhi.n	800ce24 <_strtod_l+0x308>
 800cdec:	3b30      	subs	r3, #48	@ 0x30
 800cdee:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cdf2:	9307      	str	r3, [sp, #28]
 800cdf4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cdf6:	1c59      	adds	r1, r3, #1
 800cdf8:	911d      	str	r1, [sp, #116]	@ 0x74
 800cdfa:	785b      	ldrb	r3, [r3, #1]
 800cdfc:	001a      	movs	r2, r3
 800cdfe:	3a30      	subs	r2, #48	@ 0x30
 800ce00:	2a09      	cmp	r2, #9
 800ce02:	d93a      	bls.n	800ce7a <_strtod_l+0x35e>
 800ce04:	9a07      	ldr	r2, [sp, #28]
 800ce06:	1a8a      	subs	r2, r1, r2
 800ce08:	49b4      	ldr	r1, [pc, #720]	@ (800d0dc <_strtod_l+0x5c0>)
 800ce0a:	9107      	str	r1, [sp, #28]
 800ce0c:	2a08      	cmp	r2, #8
 800ce0e:	dc04      	bgt.n	800ce1a <_strtod_l+0x2fe>
 800ce10:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ce12:	9207      	str	r2, [sp, #28]
 800ce14:	428a      	cmp	r2, r1
 800ce16:	dd00      	ble.n	800ce1a <_strtod_l+0x2fe>
 800ce18:	9107      	str	r1, [sp, #28]
 800ce1a:	2c00      	cmp	r4, #0
 800ce1c:	d002      	beq.n	800ce24 <_strtod_l+0x308>
 800ce1e:	9a07      	ldr	r2, [sp, #28]
 800ce20:	4252      	negs	r2, r2
 800ce22:	9207      	str	r2, [sp, #28]
 800ce24:	9a06      	ldr	r2, [sp, #24]
 800ce26:	2a00      	cmp	r2, #0
 800ce28:	d14d      	bne.n	800cec6 <_strtod_l+0x3aa>
 800ce2a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ce2c:	4310      	orrs	r0, r2
 800ce2e:	d000      	beq.n	800ce32 <_strtod_l+0x316>
 800ce30:	e6af      	b.n	800cb92 <_strtod_l+0x76>
 800ce32:	4662      	mov	r2, ip
 800ce34:	2a00      	cmp	r2, #0
 800ce36:	d000      	beq.n	800ce3a <_strtod_l+0x31e>
 800ce38:	e6c7      	b.n	800cbca <_strtod_l+0xae>
 800ce3a:	2b69      	cmp	r3, #105	@ 0x69
 800ce3c:	d027      	beq.n	800ce8e <_strtod_l+0x372>
 800ce3e:	dc23      	bgt.n	800ce88 <_strtod_l+0x36c>
 800ce40:	2b49      	cmp	r3, #73	@ 0x49
 800ce42:	d024      	beq.n	800ce8e <_strtod_l+0x372>
 800ce44:	2b4e      	cmp	r3, #78	@ 0x4e
 800ce46:	d000      	beq.n	800ce4a <_strtod_l+0x32e>
 800ce48:	e6bf      	b.n	800cbca <_strtod_l+0xae>
 800ce4a:	49a5      	ldr	r1, [pc, #660]	@ (800d0e0 <_strtod_l+0x5c4>)
 800ce4c:	a81d      	add	r0, sp, #116	@ 0x74
 800ce4e:	f001 fa2d 	bl	800e2ac <__match>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d100      	bne.n	800ce58 <_strtod_l+0x33c>
 800ce56:	e6b8      	b.n	800cbca <_strtod_l+0xae>
 800ce58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	2b28      	cmp	r3, #40	@ 0x28
 800ce5e:	d12c      	bne.n	800ceba <_strtod_l+0x39e>
 800ce60:	49a0      	ldr	r1, [pc, #640]	@ (800d0e4 <_strtod_l+0x5c8>)
 800ce62:	aa20      	add	r2, sp, #128	@ 0x80
 800ce64:	a81d      	add	r0, sp, #116	@ 0x74
 800ce66:	f001 fa35 	bl	800e2d4 <__hexnan>
 800ce6a:	2805      	cmp	r0, #5
 800ce6c:	d125      	bne.n	800ceba <_strtod_l+0x39e>
 800ce6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ce70:	4a9d      	ldr	r2, [pc, #628]	@ (800d0e8 <_strtod_l+0x5cc>)
 800ce72:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ce74:	431a      	orrs	r2, r3
 800ce76:	0017      	movs	r7, r2
 800ce78:	e68b      	b.n	800cb92 <_strtod_l+0x76>
 800ce7a:	220a      	movs	r2, #10
 800ce7c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ce7e:	434a      	muls	r2, r1
 800ce80:	18d2      	adds	r2, r2, r3
 800ce82:	3a30      	subs	r2, #48	@ 0x30
 800ce84:	9210      	str	r2, [sp, #64]	@ 0x40
 800ce86:	e7b5      	b.n	800cdf4 <_strtod_l+0x2d8>
 800ce88:	2b6e      	cmp	r3, #110	@ 0x6e
 800ce8a:	d0de      	beq.n	800ce4a <_strtod_l+0x32e>
 800ce8c:	e69d      	b.n	800cbca <_strtod_l+0xae>
 800ce8e:	4997      	ldr	r1, [pc, #604]	@ (800d0ec <_strtod_l+0x5d0>)
 800ce90:	a81d      	add	r0, sp, #116	@ 0x74
 800ce92:	f001 fa0b 	bl	800e2ac <__match>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d100      	bne.n	800ce9c <_strtod_l+0x380>
 800ce9a:	e696      	b.n	800cbca <_strtod_l+0xae>
 800ce9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ce9e:	4994      	ldr	r1, [pc, #592]	@ (800d0f0 <_strtod_l+0x5d4>)
 800cea0:	3b01      	subs	r3, #1
 800cea2:	a81d      	add	r0, sp, #116	@ 0x74
 800cea4:	931d      	str	r3, [sp, #116]	@ 0x74
 800cea6:	f001 fa01 	bl	800e2ac <__match>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d102      	bne.n	800ceb4 <_strtod_l+0x398>
 800ceae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	931d      	str	r3, [sp, #116]	@ 0x74
 800ceb4:	2600      	movs	r6, #0
 800ceb6:	4f8c      	ldr	r7, [pc, #560]	@ (800d0e8 <_strtod_l+0x5cc>)
 800ceb8:	e66b      	b.n	800cb92 <_strtod_l+0x76>
 800ceba:	488e      	ldr	r0, [pc, #568]	@ (800d0f4 <_strtod_l+0x5d8>)
 800cebc:	f000 ff06 	bl	800dccc <nan>
 800cec0:	0006      	movs	r6, r0
 800cec2:	000f      	movs	r7, r1
 800cec4:	e665      	b.n	800cb92 <_strtod_l+0x76>
 800cec6:	9b07      	ldr	r3, [sp, #28]
 800cec8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ceca:	1a9b      	subs	r3, r3, r2
 800cecc:	930c      	str	r3, [sp, #48]	@ 0x30
 800cece:	9b08      	ldr	r3, [sp, #32]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <_strtod_l+0x3bc>
 800ced4:	9b06      	ldr	r3, [sp, #24]
 800ced6:	9308      	str	r3, [sp, #32]
 800ced8:	9c06      	ldr	r4, [sp, #24]
 800ceda:	2c10      	cmp	r4, #16
 800cedc:	dd00      	ble.n	800cee0 <_strtod_l+0x3c4>
 800cede:	2410      	movs	r4, #16
 800cee0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800cee2:	f7f5 f9e5 	bl	80022b0 <__aeabi_ui2d>
 800cee6:	9b06      	ldr	r3, [sp, #24]
 800cee8:	0006      	movs	r6, r0
 800ceea:	000f      	movs	r7, r1
 800ceec:	2b09      	cmp	r3, #9
 800ceee:	dc13      	bgt.n	800cf18 <_strtod_l+0x3fc>
 800cef0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d100      	bne.n	800cef8 <_strtod_l+0x3dc>
 800cef6:	e64c      	b.n	800cb92 <_strtod_l+0x76>
 800cef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	dc00      	bgt.n	800cf00 <_strtod_l+0x3e4>
 800cefe:	e07e      	b.n	800cffe <_strtod_l+0x4e2>
 800cf00:	2b16      	cmp	r3, #22
 800cf02:	dc63      	bgt.n	800cfcc <_strtod_l+0x4b0>
 800cf04:	497c      	ldr	r1, [pc, #496]	@ (800d0f8 <_strtod_l+0x5dc>)
 800cf06:	00db      	lsls	r3, r3, #3
 800cf08:	18c9      	adds	r1, r1, r3
 800cf0a:	0032      	movs	r2, r6
 800cf0c:	6808      	ldr	r0, [r1, #0]
 800cf0e:	6849      	ldr	r1, [r1, #4]
 800cf10:	003b      	movs	r3, r7
 800cf12:	f7f4 fadd 	bl	80014d0 <__aeabi_dmul>
 800cf16:	e7d3      	b.n	800cec0 <_strtod_l+0x3a4>
 800cf18:	0022      	movs	r2, r4
 800cf1a:	4b77      	ldr	r3, [pc, #476]	@ (800d0f8 <_strtod_l+0x5dc>)
 800cf1c:	3a09      	subs	r2, #9
 800cf1e:	00d2      	lsls	r2, r2, #3
 800cf20:	189b      	adds	r3, r3, r2
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	f7f4 fad3 	bl	80014d0 <__aeabi_dmul>
 800cf2a:	0006      	movs	r6, r0
 800cf2c:	0028      	movs	r0, r5
 800cf2e:	000f      	movs	r7, r1
 800cf30:	f7f5 f9be 	bl	80022b0 <__aeabi_ui2d>
 800cf34:	000b      	movs	r3, r1
 800cf36:	0002      	movs	r2, r0
 800cf38:	0039      	movs	r1, r7
 800cf3a:	0030      	movs	r0, r6
 800cf3c:	f7f3 fb20 	bl	8000580 <__aeabi_dadd>
 800cf40:	9b06      	ldr	r3, [sp, #24]
 800cf42:	0006      	movs	r6, r0
 800cf44:	000f      	movs	r7, r1
 800cf46:	2b0f      	cmp	r3, #15
 800cf48:	ddd2      	ble.n	800cef0 <_strtod_l+0x3d4>
 800cf4a:	9b06      	ldr	r3, [sp, #24]
 800cf4c:	1b1c      	subs	r4, r3, r4
 800cf4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf50:	18e4      	adds	r4, r4, r3
 800cf52:	2c00      	cmp	r4, #0
 800cf54:	dc00      	bgt.n	800cf58 <_strtod_l+0x43c>
 800cf56:	e09b      	b.n	800d090 <_strtod_l+0x574>
 800cf58:	220f      	movs	r2, #15
 800cf5a:	0023      	movs	r3, r4
 800cf5c:	4013      	ands	r3, r2
 800cf5e:	4214      	tst	r4, r2
 800cf60:	d00a      	beq.n	800cf78 <_strtod_l+0x45c>
 800cf62:	4965      	ldr	r1, [pc, #404]	@ (800d0f8 <_strtod_l+0x5dc>)
 800cf64:	00db      	lsls	r3, r3, #3
 800cf66:	18c9      	adds	r1, r1, r3
 800cf68:	0032      	movs	r2, r6
 800cf6a:	6808      	ldr	r0, [r1, #0]
 800cf6c:	6849      	ldr	r1, [r1, #4]
 800cf6e:	003b      	movs	r3, r7
 800cf70:	f7f4 faae 	bl	80014d0 <__aeabi_dmul>
 800cf74:	0006      	movs	r6, r0
 800cf76:	000f      	movs	r7, r1
 800cf78:	230f      	movs	r3, #15
 800cf7a:	439c      	bics	r4, r3
 800cf7c:	d073      	beq.n	800d066 <_strtod_l+0x54a>
 800cf7e:	3326      	adds	r3, #38	@ 0x26
 800cf80:	33ff      	adds	r3, #255	@ 0xff
 800cf82:	429c      	cmp	r4, r3
 800cf84:	dd4b      	ble.n	800d01e <_strtod_l+0x502>
 800cf86:	2300      	movs	r3, #0
 800cf88:	9306      	str	r3, [sp, #24]
 800cf8a:	9307      	str	r3, [sp, #28]
 800cf8c:	930d      	str	r3, [sp, #52]	@ 0x34
 800cf8e:	9308      	str	r3, [sp, #32]
 800cf90:	2322      	movs	r3, #34	@ 0x22
 800cf92:	2600      	movs	r6, #0
 800cf94:	9a05      	ldr	r2, [sp, #20]
 800cf96:	4f54      	ldr	r7, [pc, #336]	@ (800d0e8 <_strtod_l+0x5cc>)
 800cf98:	6013      	str	r3, [r2, #0]
 800cf9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf9c:	42b3      	cmp	r3, r6
 800cf9e:	d100      	bne.n	800cfa2 <_strtod_l+0x486>
 800cfa0:	e5f7      	b.n	800cb92 <_strtod_l+0x76>
 800cfa2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800cfa4:	9805      	ldr	r0, [sp, #20]
 800cfa6:	f7ff f91b 	bl	800c1e0 <_Bfree>
 800cfaa:	9908      	ldr	r1, [sp, #32]
 800cfac:	9805      	ldr	r0, [sp, #20]
 800cfae:	f7ff f917 	bl	800c1e0 <_Bfree>
 800cfb2:	9907      	ldr	r1, [sp, #28]
 800cfb4:	9805      	ldr	r0, [sp, #20]
 800cfb6:	f7ff f913 	bl	800c1e0 <_Bfree>
 800cfba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cfbc:	9805      	ldr	r0, [sp, #20]
 800cfbe:	f7ff f90f 	bl	800c1e0 <_Bfree>
 800cfc2:	9906      	ldr	r1, [sp, #24]
 800cfc4:	9805      	ldr	r0, [sp, #20]
 800cfc6:	f7ff f90b 	bl	800c1e0 <_Bfree>
 800cfca:	e5e2      	b.n	800cb92 <_strtod_l+0x76>
 800cfcc:	2325      	movs	r3, #37	@ 0x25
 800cfce:	9a06      	ldr	r2, [sp, #24]
 800cfd0:	1a9b      	subs	r3, r3, r2
 800cfd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	dbb8      	blt.n	800cf4a <_strtod_l+0x42e>
 800cfd8:	240f      	movs	r4, #15
 800cfda:	9b06      	ldr	r3, [sp, #24]
 800cfdc:	4d46      	ldr	r5, [pc, #280]	@ (800d0f8 <_strtod_l+0x5dc>)
 800cfde:	1ae4      	subs	r4, r4, r3
 800cfe0:	00e1      	lsls	r1, r4, #3
 800cfe2:	1869      	adds	r1, r5, r1
 800cfe4:	0032      	movs	r2, r6
 800cfe6:	6808      	ldr	r0, [r1, #0]
 800cfe8:	6849      	ldr	r1, [r1, #4]
 800cfea:	003b      	movs	r3, r7
 800cfec:	f7f4 fa70 	bl	80014d0 <__aeabi_dmul>
 800cff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cff2:	1b1c      	subs	r4, r3, r4
 800cff4:	00e4      	lsls	r4, r4, #3
 800cff6:	192d      	adds	r5, r5, r4
 800cff8:	682a      	ldr	r2, [r5, #0]
 800cffa:	686b      	ldr	r3, [r5, #4]
 800cffc:	e789      	b.n	800cf12 <_strtod_l+0x3f6>
 800cffe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d000:	3316      	adds	r3, #22
 800d002:	dba2      	blt.n	800cf4a <_strtod_l+0x42e>
 800d004:	9907      	ldr	r1, [sp, #28]
 800d006:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d008:	4b3b      	ldr	r3, [pc, #236]	@ (800d0f8 <_strtod_l+0x5dc>)
 800d00a:	1a52      	subs	r2, r2, r1
 800d00c:	00d2      	lsls	r2, r2, #3
 800d00e:	189b      	adds	r3, r3, r2
 800d010:	0030      	movs	r0, r6
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	0039      	movs	r1, r7
 800d018:	f7f3 fe16 	bl	8000c48 <__aeabi_ddiv>
 800d01c:	e750      	b.n	800cec0 <_strtod_l+0x3a4>
 800d01e:	2300      	movs	r3, #0
 800d020:	0030      	movs	r0, r6
 800d022:	0039      	movs	r1, r7
 800d024:	4d35      	ldr	r5, [pc, #212]	@ (800d0fc <_strtod_l+0x5e0>)
 800d026:	1124      	asrs	r4, r4, #4
 800d028:	9309      	str	r3, [sp, #36]	@ 0x24
 800d02a:	2c01      	cmp	r4, #1
 800d02c:	dc1e      	bgt.n	800d06c <_strtod_l+0x550>
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <_strtod_l+0x51a>
 800d032:	0006      	movs	r6, r0
 800d034:	000f      	movs	r7, r1
 800d036:	4b32      	ldr	r3, [pc, #200]	@ (800d100 <_strtod_l+0x5e4>)
 800d038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d03a:	18ff      	adds	r7, r7, r3
 800d03c:	4b2f      	ldr	r3, [pc, #188]	@ (800d0fc <_strtod_l+0x5e0>)
 800d03e:	00d5      	lsls	r5, r2, #3
 800d040:	195d      	adds	r5, r3, r5
 800d042:	0032      	movs	r2, r6
 800d044:	6828      	ldr	r0, [r5, #0]
 800d046:	6869      	ldr	r1, [r5, #4]
 800d048:	003b      	movs	r3, r7
 800d04a:	f7f4 fa41 	bl	80014d0 <__aeabi_dmul>
 800d04e:	4b26      	ldr	r3, [pc, #152]	@ (800d0e8 <_strtod_l+0x5cc>)
 800d050:	4a2c      	ldr	r2, [pc, #176]	@ (800d104 <_strtod_l+0x5e8>)
 800d052:	0006      	movs	r6, r0
 800d054:	400b      	ands	r3, r1
 800d056:	4293      	cmp	r3, r2
 800d058:	d895      	bhi.n	800cf86 <_strtod_l+0x46a>
 800d05a:	4a2b      	ldr	r2, [pc, #172]	@ (800d108 <_strtod_l+0x5ec>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d913      	bls.n	800d088 <_strtod_l+0x56c>
 800d060:	2601      	movs	r6, #1
 800d062:	4f2a      	ldr	r7, [pc, #168]	@ (800d10c <_strtod_l+0x5f0>)
 800d064:	4276      	negs	r6, r6
 800d066:	2300      	movs	r3, #0
 800d068:	9309      	str	r3, [sp, #36]	@ 0x24
 800d06a:	e086      	b.n	800d17a <_strtod_l+0x65e>
 800d06c:	2201      	movs	r2, #1
 800d06e:	4214      	tst	r4, r2
 800d070:	d004      	beq.n	800d07c <_strtod_l+0x560>
 800d072:	682a      	ldr	r2, [r5, #0]
 800d074:	686b      	ldr	r3, [r5, #4]
 800d076:	f7f4 fa2b 	bl	80014d0 <__aeabi_dmul>
 800d07a:	2301      	movs	r3, #1
 800d07c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d07e:	1064      	asrs	r4, r4, #1
 800d080:	3201      	adds	r2, #1
 800d082:	9209      	str	r2, [sp, #36]	@ 0x24
 800d084:	3508      	adds	r5, #8
 800d086:	e7d0      	b.n	800d02a <_strtod_l+0x50e>
 800d088:	23d4      	movs	r3, #212	@ 0xd4
 800d08a:	049b      	lsls	r3, r3, #18
 800d08c:	18cf      	adds	r7, r1, r3
 800d08e:	e7ea      	b.n	800d066 <_strtod_l+0x54a>
 800d090:	2c00      	cmp	r4, #0
 800d092:	d0e8      	beq.n	800d066 <_strtod_l+0x54a>
 800d094:	4264      	negs	r4, r4
 800d096:	230f      	movs	r3, #15
 800d098:	0022      	movs	r2, r4
 800d09a:	401a      	ands	r2, r3
 800d09c:	421c      	tst	r4, r3
 800d09e:	d00a      	beq.n	800d0b6 <_strtod_l+0x59a>
 800d0a0:	4b15      	ldr	r3, [pc, #84]	@ (800d0f8 <_strtod_l+0x5dc>)
 800d0a2:	00d2      	lsls	r2, r2, #3
 800d0a4:	189b      	adds	r3, r3, r2
 800d0a6:	0030      	movs	r0, r6
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	0039      	movs	r1, r7
 800d0ae:	f7f3 fdcb 	bl	8000c48 <__aeabi_ddiv>
 800d0b2:	0006      	movs	r6, r0
 800d0b4:	000f      	movs	r7, r1
 800d0b6:	1124      	asrs	r4, r4, #4
 800d0b8:	d0d5      	beq.n	800d066 <_strtod_l+0x54a>
 800d0ba:	2c1f      	cmp	r4, #31
 800d0bc:	dd28      	ble.n	800d110 <_strtod_l+0x5f4>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	9306      	str	r3, [sp, #24]
 800d0c2:	9307      	str	r3, [sp, #28]
 800d0c4:	930d      	str	r3, [sp, #52]	@ 0x34
 800d0c6:	9308      	str	r3, [sp, #32]
 800d0c8:	2322      	movs	r3, #34	@ 0x22
 800d0ca:	9a05      	ldr	r2, [sp, #20]
 800d0cc:	2600      	movs	r6, #0
 800d0ce:	6013      	str	r3, [r2, #0]
 800d0d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d0d2:	2700      	movs	r7, #0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d000      	beq.n	800d0da <_strtod_l+0x5be>
 800d0d8:	e763      	b.n	800cfa2 <_strtod_l+0x486>
 800d0da:	e55a      	b.n	800cb92 <_strtod_l+0x76>
 800d0dc:	00004e1f 	.word	0x00004e1f
 800d0e0:	0800ee01 	.word	0x0800ee01
 800d0e4:	0800f014 	.word	0x0800f014
 800d0e8:	7ff00000 	.word	0x7ff00000
 800d0ec:	0800edf9 	.word	0x0800edf9
 800d0f0:	0800ee30 	.word	0x0800ee30
 800d0f4:	0800f1bd 	.word	0x0800f1bd
 800d0f8:	0800ef48 	.word	0x0800ef48
 800d0fc:	0800ef20 	.word	0x0800ef20
 800d100:	fcb00000 	.word	0xfcb00000
 800d104:	7ca00000 	.word	0x7ca00000
 800d108:	7c900000 	.word	0x7c900000
 800d10c:	7fefffff 	.word	0x7fefffff
 800d110:	2310      	movs	r3, #16
 800d112:	0022      	movs	r2, r4
 800d114:	401a      	ands	r2, r3
 800d116:	9209      	str	r2, [sp, #36]	@ 0x24
 800d118:	421c      	tst	r4, r3
 800d11a:	d001      	beq.n	800d120 <_strtod_l+0x604>
 800d11c:	335a      	adds	r3, #90	@ 0x5a
 800d11e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d120:	0030      	movs	r0, r6
 800d122:	0039      	movs	r1, r7
 800d124:	2300      	movs	r3, #0
 800d126:	4dbf      	ldr	r5, [pc, #764]	@ (800d424 <_strtod_l+0x908>)
 800d128:	2201      	movs	r2, #1
 800d12a:	4214      	tst	r4, r2
 800d12c:	d004      	beq.n	800d138 <_strtod_l+0x61c>
 800d12e:	682a      	ldr	r2, [r5, #0]
 800d130:	686b      	ldr	r3, [r5, #4]
 800d132:	f7f4 f9cd 	bl	80014d0 <__aeabi_dmul>
 800d136:	2301      	movs	r3, #1
 800d138:	1064      	asrs	r4, r4, #1
 800d13a:	3508      	adds	r5, #8
 800d13c:	2c00      	cmp	r4, #0
 800d13e:	d1f3      	bne.n	800d128 <_strtod_l+0x60c>
 800d140:	2b00      	cmp	r3, #0
 800d142:	d001      	beq.n	800d148 <_strtod_l+0x62c>
 800d144:	0006      	movs	r6, r0
 800d146:	000f      	movs	r7, r1
 800d148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00d      	beq.n	800d16a <_strtod_l+0x64e>
 800d14e:	236b      	movs	r3, #107	@ 0x6b
 800d150:	007a      	lsls	r2, r7, #1
 800d152:	0d52      	lsrs	r2, r2, #21
 800d154:	0039      	movs	r1, r7
 800d156:	1a9b      	subs	r3, r3, r2
 800d158:	2b00      	cmp	r3, #0
 800d15a:	dd06      	ble.n	800d16a <_strtod_l+0x64e>
 800d15c:	2b1f      	cmp	r3, #31
 800d15e:	dd5a      	ble.n	800d216 <_strtod_l+0x6fa>
 800d160:	2600      	movs	r6, #0
 800d162:	2b34      	cmp	r3, #52	@ 0x34
 800d164:	dd50      	ble.n	800d208 <_strtod_l+0x6ec>
 800d166:	27dc      	movs	r7, #220	@ 0xdc
 800d168:	04bf      	lsls	r7, r7, #18
 800d16a:	2200      	movs	r2, #0
 800d16c:	2300      	movs	r3, #0
 800d16e:	0030      	movs	r0, r6
 800d170:	0039      	movs	r1, r7
 800d172:	f7f3 f969 	bl	8000448 <__aeabi_dcmpeq>
 800d176:	2800      	cmp	r0, #0
 800d178:	d1a1      	bne.n	800d0be <_strtod_l+0x5a2>
 800d17a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d17c:	9a08      	ldr	r2, [sp, #32]
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d182:	9b06      	ldr	r3, [sp, #24]
 800d184:	9805      	ldr	r0, [sp, #20]
 800d186:	f7ff f893 	bl	800c2b0 <__s2b>
 800d18a:	900d      	str	r0, [sp, #52]	@ 0x34
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d100      	bne.n	800d192 <_strtod_l+0x676>
 800d190:	e6f9      	b.n	800cf86 <_strtod_l+0x46a>
 800d192:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d194:	9907      	ldr	r1, [sp, #28]
 800d196:	17da      	asrs	r2, r3, #31
 800d198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d19a:	1a5b      	subs	r3, r3, r1
 800d19c:	401a      	ands	r2, r3
 800d19e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d1a2:	43db      	mvns	r3, r3
 800d1a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d1a6:	17db      	asrs	r3, r3, #31
 800d1a8:	401a      	ands	r2, r3
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	921a      	str	r2, [sp, #104]	@ 0x68
 800d1ae:	9306      	str	r3, [sp, #24]
 800d1b0:	9307      	str	r3, [sp, #28]
 800d1b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1b4:	9805      	ldr	r0, [sp, #20]
 800d1b6:	6859      	ldr	r1, [r3, #4]
 800d1b8:	f7fe ffce 	bl	800c158 <_Balloc>
 800d1bc:	9008      	str	r0, [sp, #32]
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	d100      	bne.n	800d1c4 <_strtod_l+0x6a8>
 800d1c2:	e6e5      	b.n	800cf90 <_strtod_l+0x474>
 800d1c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1c6:	300c      	adds	r0, #12
 800d1c8:	0019      	movs	r1, r3
 800d1ca:	691a      	ldr	r2, [r3, #16]
 800d1cc:	310c      	adds	r1, #12
 800d1ce:	3202      	adds	r2, #2
 800d1d0:	0092      	lsls	r2, r2, #2
 800d1d2:	f000 fd71 	bl	800dcb8 <memcpy>
 800d1d6:	ab20      	add	r3, sp, #128	@ 0x80
 800d1d8:	9301      	str	r3, [sp, #4]
 800d1da:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	0032      	movs	r2, r6
 800d1e0:	003b      	movs	r3, r7
 800d1e2:	9805      	ldr	r0, [sp, #20]
 800d1e4:	9610      	str	r6, [sp, #64]	@ 0x40
 800d1e6:	9711      	str	r7, [sp, #68]	@ 0x44
 800d1e8:	f7ff fbb2 	bl	800c950 <__d2b>
 800d1ec:	901e      	str	r0, [sp, #120]	@ 0x78
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	d100      	bne.n	800d1f4 <_strtod_l+0x6d8>
 800d1f2:	e6cd      	b.n	800cf90 <_strtod_l+0x474>
 800d1f4:	2101      	movs	r1, #1
 800d1f6:	9805      	ldr	r0, [sp, #20]
 800d1f8:	f7ff f8f6 	bl	800c3e8 <__i2b>
 800d1fc:	9007      	str	r0, [sp, #28]
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d10e      	bne.n	800d220 <_strtod_l+0x704>
 800d202:	2300      	movs	r3, #0
 800d204:	9307      	str	r3, [sp, #28]
 800d206:	e6c3      	b.n	800cf90 <_strtod_l+0x474>
 800d208:	234b      	movs	r3, #75	@ 0x4b
 800d20a:	1a9a      	subs	r2, r3, r2
 800d20c:	3b4c      	subs	r3, #76	@ 0x4c
 800d20e:	4093      	lsls	r3, r2
 800d210:	4019      	ands	r1, r3
 800d212:	000f      	movs	r7, r1
 800d214:	e7a9      	b.n	800d16a <_strtod_l+0x64e>
 800d216:	2201      	movs	r2, #1
 800d218:	4252      	negs	r2, r2
 800d21a:	409a      	lsls	r2, r3
 800d21c:	4016      	ands	r6, r2
 800d21e:	e7a4      	b.n	800d16a <_strtod_l+0x64e>
 800d220:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800d222:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d224:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800d226:	1ad4      	subs	r4, r2, r3
 800d228:	2b00      	cmp	r3, #0
 800d22a:	db01      	blt.n	800d230 <_strtod_l+0x714>
 800d22c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800d22e:	195d      	adds	r5, r3, r5
 800d230:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d232:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d234:	1a5b      	subs	r3, r3, r1
 800d236:	2136      	movs	r1, #54	@ 0x36
 800d238:	189b      	adds	r3, r3, r2
 800d23a:	1a8a      	subs	r2, r1, r2
 800d23c:	497a      	ldr	r1, [pc, #488]	@ (800d428 <_strtod_l+0x90c>)
 800d23e:	2001      	movs	r0, #1
 800d240:	468c      	mov	ip, r1
 800d242:	2100      	movs	r1, #0
 800d244:	3b01      	subs	r3, #1
 800d246:	9116      	str	r1, [sp, #88]	@ 0x58
 800d248:	9014      	str	r0, [sp, #80]	@ 0x50
 800d24a:	4563      	cmp	r3, ip
 800d24c:	da06      	bge.n	800d25c <_strtod_l+0x740>
 800d24e:	4661      	mov	r1, ip
 800d250:	1ac9      	subs	r1, r1, r3
 800d252:	1a52      	subs	r2, r2, r1
 800d254:	291f      	cmp	r1, #31
 800d256:	dc3f      	bgt.n	800d2d8 <_strtod_l+0x7bc>
 800d258:	4088      	lsls	r0, r1
 800d25a:	9014      	str	r0, [sp, #80]	@ 0x50
 800d25c:	18ab      	adds	r3, r5, r2
 800d25e:	930e      	str	r3, [sp, #56]	@ 0x38
 800d260:	18a4      	adds	r4, r4, r2
 800d262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d264:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d266:	191c      	adds	r4, r3, r4
 800d268:	002b      	movs	r3, r5
 800d26a:	4295      	cmp	r5, r2
 800d26c:	dd00      	ble.n	800d270 <_strtod_l+0x754>
 800d26e:	0013      	movs	r3, r2
 800d270:	42a3      	cmp	r3, r4
 800d272:	dd00      	ble.n	800d276 <_strtod_l+0x75a>
 800d274:	0023      	movs	r3, r4
 800d276:	2b00      	cmp	r3, #0
 800d278:	dd04      	ble.n	800d284 <_strtod_l+0x768>
 800d27a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d27c:	1ae4      	subs	r4, r4, r3
 800d27e:	1ad2      	subs	r2, r2, r3
 800d280:	920e      	str	r2, [sp, #56]	@ 0x38
 800d282:	1aed      	subs	r5, r5, r3
 800d284:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d286:	2b00      	cmp	r3, #0
 800d288:	dd16      	ble.n	800d2b8 <_strtod_l+0x79c>
 800d28a:	001a      	movs	r2, r3
 800d28c:	9907      	ldr	r1, [sp, #28]
 800d28e:	9805      	ldr	r0, [sp, #20]
 800d290:	f7ff f974 	bl	800c57c <__pow5mult>
 800d294:	9007      	str	r0, [sp, #28]
 800d296:	2800      	cmp	r0, #0
 800d298:	d0b3      	beq.n	800d202 <_strtod_l+0x6e6>
 800d29a:	0001      	movs	r1, r0
 800d29c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800d29e:	9805      	ldr	r0, [sp, #20]
 800d2a0:	f7ff f8ba 	bl	800c418 <__multiply>
 800d2a4:	9013      	str	r0, [sp, #76]	@ 0x4c
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d100      	bne.n	800d2ac <_strtod_l+0x790>
 800d2aa:	e671      	b.n	800cf90 <_strtod_l+0x474>
 800d2ac:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800d2ae:	9805      	ldr	r0, [sp, #20]
 800d2b0:	f7fe ff96 	bl	800c1e0 <_Bfree>
 800d2b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d2b6:	931e      	str	r3, [sp, #120]	@ 0x78
 800d2b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	dc12      	bgt.n	800d2e4 <_strtod_l+0x7c8>
 800d2be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	dd18      	ble.n	800d2f6 <_strtod_l+0x7da>
 800d2c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d2c6:	9908      	ldr	r1, [sp, #32]
 800d2c8:	9805      	ldr	r0, [sp, #20]
 800d2ca:	f7ff f957 	bl	800c57c <__pow5mult>
 800d2ce:	9008      	str	r0, [sp, #32]
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d110      	bne.n	800d2f6 <_strtod_l+0x7da>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	e65a      	b.n	800cf8e <_strtod_l+0x472>
 800d2d8:	4954      	ldr	r1, [pc, #336]	@ (800d42c <_strtod_l+0x910>)
 800d2da:	1acb      	subs	r3, r1, r3
 800d2dc:	0001      	movs	r1, r0
 800d2de:	4099      	lsls	r1, r3
 800d2e0:	9116      	str	r1, [sp, #88]	@ 0x58
 800d2e2:	e7ba      	b.n	800d25a <_strtod_l+0x73e>
 800d2e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2e6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800d2e8:	9805      	ldr	r0, [sp, #20]
 800d2ea:	f7ff f9a3 	bl	800c634 <__lshift>
 800d2ee:	901e      	str	r0, [sp, #120]	@ 0x78
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d1e4      	bne.n	800d2be <_strtod_l+0x7a2>
 800d2f4:	e64c      	b.n	800cf90 <_strtod_l+0x474>
 800d2f6:	2c00      	cmp	r4, #0
 800d2f8:	dd07      	ble.n	800d30a <_strtod_l+0x7ee>
 800d2fa:	0022      	movs	r2, r4
 800d2fc:	9908      	ldr	r1, [sp, #32]
 800d2fe:	9805      	ldr	r0, [sp, #20]
 800d300:	f7ff f998 	bl	800c634 <__lshift>
 800d304:	9008      	str	r0, [sp, #32]
 800d306:	2800      	cmp	r0, #0
 800d308:	d0e4      	beq.n	800d2d4 <_strtod_l+0x7b8>
 800d30a:	2d00      	cmp	r5, #0
 800d30c:	dd08      	ble.n	800d320 <_strtod_l+0x804>
 800d30e:	002a      	movs	r2, r5
 800d310:	9907      	ldr	r1, [sp, #28]
 800d312:	9805      	ldr	r0, [sp, #20]
 800d314:	f7ff f98e 	bl	800c634 <__lshift>
 800d318:	9007      	str	r0, [sp, #28]
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d100      	bne.n	800d320 <_strtod_l+0x804>
 800d31e:	e637      	b.n	800cf90 <_strtod_l+0x474>
 800d320:	9a08      	ldr	r2, [sp, #32]
 800d322:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800d324:	9805      	ldr	r0, [sp, #20]
 800d326:	f7ff fa0d 	bl	800c744 <__mdiff>
 800d32a:	9006      	str	r0, [sp, #24]
 800d32c:	2800      	cmp	r0, #0
 800d32e:	d100      	bne.n	800d332 <_strtod_l+0x816>
 800d330:	e62e      	b.n	800cf90 <_strtod_l+0x474>
 800d332:	68c3      	ldr	r3, [r0, #12]
 800d334:	9907      	ldr	r1, [sp, #28]
 800d336:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d338:	2300      	movs	r3, #0
 800d33a:	60c3      	str	r3, [r0, #12]
 800d33c:	f7ff f9e6 	bl	800c70c <__mcmp>
 800d340:	2800      	cmp	r0, #0
 800d342:	da3b      	bge.n	800d3bc <_strtod_l+0x8a0>
 800d344:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d346:	4333      	orrs	r3, r6
 800d348:	d167      	bne.n	800d41a <_strtod_l+0x8fe>
 800d34a:	033b      	lsls	r3, r7, #12
 800d34c:	d165      	bne.n	800d41a <_strtod_l+0x8fe>
 800d34e:	22d6      	movs	r2, #214	@ 0xd6
 800d350:	4b37      	ldr	r3, [pc, #220]	@ (800d430 <_strtod_l+0x914>)
 800d352:	04d2      	lsls	r2, r2, #19
 800d354:	403b      	ands	r3, r7
 800d356:	4293      	cmp	r3, r2
 800d358:	d95f      	bls.n	800d41a <_strtod_l+0x8fe>
 800d35a:	9b06      	ldr	r3, [sp, #24]
 800d35c:	695b      	ldr	r3, [r3, #20]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d103      	bne.n	800d36a <_strtod_l+0x84e>
 800d362:	9b06      	ldr	r3, [sp, #24]
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	2b01      	cmp	r3, #1
 800d368:	dd57      	ble.n	800d41a <_strtod_l+0x8fe>
 800d36a:	9906      	ldr	r1, [sp, #24]
 800d36c:	2201      	movs	r2, #1
 800d36e:	9805      	ldr	r0, [sp, #20]
 800d370:	f7ff f960 	bl	800c634 <__lshift>
 800d374:	9907      	ldr	r1, [sp, #28]
 800d376:	9006      	str	r0, [sp, #24]
 800d378:	f7ff f9c8 	bl	800c70c <__mcmp>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	dd4c      	ble.n	800d41a <_strtod_l+0x8fe>
 800d380:	4b2b      	ldr	r3, [pc, #172]	@ (800d430 <_strtod_l+0x914>)
 800d382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d384:	403b      	ands	r3, r7
 800d386:	2a00      	cmp	r2, #0
 800d388:	d074      	beq.n	800d474 <_strtod_l+0x958>
 800d38a:	22d6      	movs	r2, #214	@ 0xd6
 800d38c:	04d2      	lsls	r2, r2, #19
 800d38e:	4293      	cmp	r3, r2
 800d390:	d870      	bhi.n	800d474 <_strtod_l+0x958>
 800d392:	22dc      	movs	r2, #220	@ 0xdc
 800d394:	0492      	lsls	r2, r2, #18
 800d396:	4293      	cmp	r3, r2
 800d398:	d800      	bhi.n	800d39c <_strtod_l+0x880>
 800d39a:	e695      	b.n	800d0c8 <_strtod_l+0x5ac>
 800d39c:	0030      	movs	r0, r6
 800d39e:	0039      	movs	r1, r7
 800d3a0:	4b24      	ldr	r3, [pc, #144]	@ (800d434 <_strtod_l+0x918>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f7f4 f894 	bl	80014d0 <__aeabi_dmul>
 800d3a8:	4b21      	ldr	r3, [pc, #132]	@ (800d430 <_strtod_l+0x914>)
 800d3aa:	0006      	movs	r6, r0
 800d3ac:	000f      	movs	r7, r1
 800d3ae:	420b      	tst	r3, r1
 800d3b0:	d000      	beq.n	800d3b4 <_strtod_l+0x898>
 800d3b2:	e5f6      	b.n	800cfa2 <_strtod_l+0x486>
 800d3b4:	2322      	movs	r3, #34	@ 0x22
 800d3b6:	9a05      	ldr	r2, [sp, #20]
 800d3b8:	6013      	str	r3, [r2, #0]
 800d3ba:	e5f2      	b.n	800cfa2 <_strtod_l+0x486>
 800d3bc:	970e      	str	r7, [sp, #56]	@ 0x38
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d175      	bne.n	800d4ae <_strtod_l+0x992>
 800d3c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d3c4:	033b      	lsls	r3, r7, #12
 800d3c6:	0b1b      	lsrs	r3, r3, #12
 800d3c8:	2a00      	cmp	r2, #0
 800d3ca:	d039      	beq.n	800d440 <_strtod_l+0x924>
 800d3cc:	4a1a      	ldr	r2, [pc, #104]	@ (800d438 <_strtod_l+0x91c>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d138      	bne.n	800d444 <_strtod_l+0x928>
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d6:	4249      	negs	r1, r1
 800d3d8:	0032      	movs	r2, r6
 800d3da:	0008      	movs	r0, r1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00b      	beq.n	800d3f8 <_strtod_l+0x8dc>
 800d3e0:	24d4      	movs	r4, #212	@ 0xd4
 800d3e2:	4b13      	ldr	r3, [pc, #76]	@ (800d430 <_strtod_l+0x914>)
 800d3e4:	0008      	movs	r0, r1
 800d3e6:	403b      	ands	r3, r7
 800d3e8:	04e4      	lsls	r4, r4, #19
 800d3ea:	42a3      	cmp	r3, r4
 800d3ec:	d804      	bhi.n	800d3f8 <_strtod_l+0x8dc>
 800d3ee:	306c      	adds	r0, #108	@ 0x6c
 800d3f0:	0d1b      	lsrs	r3, r3, #20
 800d3f2:	1ac3      	subs	r3, r0, r3
 800d3f4:	4099      	lsls	r1, r3
 800d3f6:	0008      	movs	r0, r1
 800d3f8:	4282      	cmp	r2, r0
 800d3fa:	d123      	bne.n	800d444 <_strtod_l+0x928>
 800d3fc:	4b0f      	ldr	r3, [pc, #60]	@ (800d43c <_strtod_l+0x920>)
 800d3fe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d400:	4299      	cmp	r1, r3
 800d402:	d102      	bne.n	800d40a <_strtod_l+0x8ee>
 800d404:	3201      	adds	r2, #1
 800d406:	d100      	bne.n	800d40a <_strtod_l+0x8ee>
 800d408:	e5c2      	b.n	800cf90 <_strtod_l+0x474>
 800d40a:	4b09      	ldr	r3, [pc, #36]	@ (800d430 <_strtod_l+0x914>)
 800d40c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d40e:	2600      	movs	r6, #0
 800d410:	401a      	ands	r2, r3
 800d412:	0013      	movs	r3, r2
 800d414:	2280      	movs	r2, #128	@ 0x80
 800d416:	0352      	lsls	r2, r2, #13
 800d418:	189f      	adds	r7, r3, r2
 800d41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1bd      	bne.n	800d39c <_strtod_l+0x880>
 800d420:	e5bf      	b.n	800cfa2 <_strtod_l+0x486>
 800d422:	46c0      	nop			@ (mov r8, r8)
 800d424:	0800f040 	.word	0x0800f040
 800d428:	fffffc02 	.word	0xfffffc02
 800d42c:	fffffbe2 	.word	0xfffffbe2
 800d430:	7ff00000 	.word	0x7ff00000
 800d434:	39500000 	.word	0x39500000
 800d438:	000fffff 	.word	0x000fffff
 800d43c:	7fefffff 	.word	0x7fefffff
 800d440:	4333      	orrs	r3, r6
 800d442:	d09d      	beq.n	800d380 <_strtod_l+0x864>
 800d444:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d446:	2b00      	cmp	r3, #0
 800d448:	d01c      	beq.n	800d484 <_strtod_l+0x968>
 800d44a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d44c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d44e:	4213      	tst	r3, r2
 800d450:	d0e3      	beq.n	800d41a <_strtod_l+0x8fe>
 800d452:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d454:	0030      	movs	r0, r6
 800d456:	0039      	movs	r1, r7
 800d458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d016      	beq.n	800d48c <_strtod_l+0x970>
 800d45e:	f7ff fb45 	bl	800caec <sulp>
 800d462:	0002      	movs	r2, r0
 800d464:	000b      	movs	r3, r1
 800d466:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d468:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d46a:	f7f3 f889 	bl	8000580 <__aeabi_dadd>
 800d46e:	0006      	movs	r6, r0
 800d470:	000f      	movs	r7, r1
 800d472:	e7d2      	b.n	800d41a <_strtod_l+0x8fe>
 800d474:	2601      	movs	r6, #1
 800d476:	4a92      	ldr	r2, [pc, #584]	@ (800d6c0 <_strtod_l+0xba4>)
 800d478:	4276      	negs	r6, r6
 800d47a:	189b      	adds	r3, r3, r2
 800d47c:	4a91      	ldr	r2, [pc, #580]	@ (800d6c4 <_strtod_l+0xba8>)
 800d47e:	431a      	orrs	r2, r3
 800d480:	0017      	movs	r7, r2
 800d482:	e7ca      	b.n	800d41a <_strtod_l+0x8fe>
 800d484:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d486:	4233      	tst	r3, r6
 800d488:	d0c7      	beq.n	800d41a <_strtod_l+0x8fe>
 800d48a:	e7e2      	b.n	800d452 <_strtod_l+0x936>
 800d48c:	f7ff fb2e 	bl	800caec <sulp>
 800d490:	0002      	movs	r2, r0
 800d492:	000b      	movs	r3, r1
 800d494:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d496:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d498:	f7f4 fae2 	bl	8001a60 <__aeabi_dsub>
 800d49c:	2200      	movs	r2, #0
 800d49e:	2300      	movs	r3, #0
 800d4a0:	0006      	movs	r6, r0
 800d4a2:	000f      	movs	r7, r1
 800d4a4:	f7f2 ffd0 	bl	8000448 <__aeabi_dcmpeq>
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	d0b6      	beq.n	800d41a <_strtod_l+0x8fe>
 800d4ac:	e60c      	b.n	800d0c8 <_strtod_l+0x5ac>
 800d4ae:	9907      	ldr	r1, [sp, #28]
 800d4b0:	9806      	ldr	r0, [sp, #24]
 800d4b2:	f7ff faad 	bl	800ca10 <__ratio>
 800d4b6:	2380      	movs	r3, #128	@ 0x80
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	05db      	lsls	r3, r3, #23
 800d4bc:	0004      	movs	r4, r0
 800d4be:	000d      	movs	r5, r1
 800d4c0:	f7f2 ffd2 	bl	8000468 <__aeabi_dcmple>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	d06c      	beq.n	800d5a2 <_strtod_l+0xa86>
 800d4c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d177      	bne.n	800d5be <_strtod_l+0xaa2>
 800d4ce:	2e00      	cmp	r6, #0
 800d4d0:	d157      	bne.n	800d582 <_strtod_l+0xa66>
 800d4d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4d4:	031b      	lsls	r3, r3, #12
 800d4d6:	d15a      	bne.n	800d58e <_strtod_l+0xa72>
 800d4d8:	2200      	movs	r2, #0
 800d4da:	0020      	movs	r0, r4
 800d4dc:	0029      	movs	r1, r5
 800d4de:	4b7a      	ldr	r3, [pc, #488]	@ (800d6c8 <_strtod_l+0xbac>)
 800d4e0:	f7f2 ffb8 	bl	8000454 <__aeabi_dcmplt>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d159      	bne.n	800d59c <_strtod_l+0xa80>
 800d4e8:	0020      	movs	r0, r4
 800d4ea:	0029      	movs	r1, r5
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	4b77      	ldr	r3, [pc, #476]	@ (800d6cc <_strtod_l+0xbb0>)
 800d4f0:	f7f3 ffee 	bl	80014d0 <__aeabi_dmul>
 800d4f4:	0004      	movs	r4, r0
 800d4f6:	000d      	movs	r5, r1
 800d4f8:	2380      	movs	r3, #128	@ 0x80
 800d4fa:	061b      	lsls	r3, r3, #24
 800d4fc:	18eb      	adds	r3, r5, r3
 800d4fe:	940a      	str	r4, [sp, #40]	@ 0x28
 800d500:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d502:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d504:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d506:	9214      	str	r2, [sp, #80]	@ 0x50
 800d508:	9315      	str	r3, [sp, #84]	@ 0x54
 800d50a:	4a71      	ldr	r2, [pc, #452]	@ (800d6d0 <_strtod_l+0xbb4>)
 800d50c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d50e:	4013      	ands	r3, r2
 800d510:	9316      	str	r3, [sp, #88]	@ 0x58
 800d512:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d514:	4b6f      	ldr	r3, [pc, #444]	@ (800d6d4 <_strtod_l+0xbb8>)
 800d516:	429a      	cmp	r2, r3
 800d518:	d000      	beq.n	800d51c <_strtod_l+0xa00>
 800d51a:	e087      	b.n	800d62c <_strtod_l+0xb10>
 800d51c:	4a6e      	ldr	r2, [pc, #440]	@ (800d6d8 <_strtod_l+0xbbc>)
 800d51e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d520:	4694      	mov	ip, r2
 800d522:	4463      	add	r3, ip
 800d524:	001f      	movs	r7, r3
 800d526:	0030      	movs	r0, r6
 800d528:	0019      	movs	r1, r3
 800d52a:	f7ff f9a5 	bl	800c878 <__ulp>
 800d52e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d530:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d532:	f7f3 ffcd 	bl	80014d0 <__aeabi_dmul>
 800d536:	0032      	movs	r2, r6
 800d538:	003b      	movs	r3, r7
 800d53a:	f7f3 f821 	bl	8000580 <__aeabi_dadd>
 800d53e:	4a64      	ldr	r2, [pc, #400]	@ (800d6d0 <_strtod_l+0xbb4>)
 800d540:	4b66      	ldr	r3, [pc, #408]	@ (800d6dc <_strtod_l+0xbc0>)
 800d542:	0006      	movs	r6, r0
 800d544:	400a      	ands	r2, r1
 800d546:	429a      	cmp	r2, r3
 800d548:	d940      	bls.n	800d5cc <_strtod_l+0xab0>
 800d54a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d54c:	4a64      	ldr	r2, [pc, #400]	@ (800d6e0 <_strtod_l+0xbc4>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d103      	bne.n	800d55a <_strtod_l+0xa3e>
 800d552:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d554:	3301      	adds	r3, #1
 800d556:	d100      	bne.n	800d55a <_strtod_l+0xa3e>
 800d558:	e51a      	b.n	800cf90 <_strtod_l+0x474>
 800d55a:	2601      	movs	r6, #1
 800d55c:	4f60      	ldr	r7, [pc, #384]	@ (800d6e0 <_strtod_l+0xbc4>)
 800d55e:	4276      	negs	r6, r6
 800d560:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800d562:	9805      	ldr	r0, [sp, #20]
 800d564:	f7fe fe3c 	bl	800c1e0 <_Bfree>
 800d568:	9908      	ldr	r1, [sp, #32]
 800d56a:	9805      	ldr	r0, [sp, #20]
 800d56c:	f7fe fe38 	bl	800c1e0 <_Bfree>
 800d570:	9907      	ldr	r1, [sp, #28]
 800d572:	9805      	ldr	r0, [sp, #20]
 800d574:	f7fe fe34 	bl	800c1e0 <_Bfree>
 800d578:	9906      	ldr	r1, [sp, #24]
 800d57a:	9805      	ldr	r0, [sp, #20]
 800d57c:	f7fe fe30 	bl	800c1e0 <_Bfree>
 800d580:	e617      	b.n	800d1b2 <_strtod_l+0x696>
 800d582:	2e01      	cmp	r6, #1
 800d584:	d103      	bne.n	800d58e <_strtod_l+0xa72>
 800d586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d100      	bne.n	800d58e <_strtod_l+0xa72>
 800d58c:	e59c      	b.n	800d0c8 <_strtod_l+0x5ac>
 800d58e:	2300      	movs	r3, #0
 800d590:	4c54      	ldr	r4, [pc, #336]	@ (800d6e4 <_strtod_l+0xbc8>)
 800d592:	4d4d      	ldr	r5, [pc, #308]	@ (800d6c8 <_strtod_l+0xbac>)
 800d594:	930a      	str	r3, [sp, #40]	@ 0x28
 800d596:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d598:	2400      	movs	r4, #0
 800d59a:	e7b2      	b.n	800d502 <_strtod_l+0x9e6>
 800d59c:	2400      	movs	r4, #0
 800d59e:	4d4b      	ldr	r5, [pc, #300]	@ (800d6cc <_strtod_l+0xbb0>)
 800d5a0:	e7aa      	b.n	800d4f8 <_strtod_l+0x9dc>
 800d5a2:	0020      	movs	r0, r4
 800d5a4:	0029      	movs	r1, r5
 800d5a6:	4b49      	ldr	r3, [pc, #292]	@ (800d6cc <_strtod_l+0xbb0>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f7f3 ff91 	bl	80014d0 <__aeabi_dmul>
 800d5ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d5b0:	0004      	movs	r4, r0
 800d5b2:	000d      	movs	r5, r1
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d09f      	beq.n	800d4f8 <_strtod_l+0x9dc>
 800d5b8:	940a      	str	r4, [sp, #40]	@ 0x28
 800d5ba:	950b      	str	r5, [sp, #44]	@ 0x2c
 800d5bc:	e7a1      	b.n	800d502 <_strtod_l+0x9e6>
 800d5be:	2300      	movs	r3, #0
 800d5c0:	4c41      	ldr	r4, [pc, #260]	@ (800d6c8 <_strtod_l+0xbac>)
 800d5c2:	0025      	movs	r5, r4
 800d5c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d5c8:	001c      	movs	r4, r3
 800d5ca:	e79a      	b.n	800d502 <_strtod_l+0x9e6>
 800d5cc:	23d4      	movs	r3, #212	@ 0xd4
 800d5ce:	049b      	lsls	r3, r3, #18
 800d5d0:	18cf      	adds	r7, r1, r3
 800d5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5d4:	9710      	str	r7, [sp, #64]	@ 0x40
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1c2      	bne.n	800d560 <_strtod_l+0xa44>
 800d5da:	4b3d      	ldr	r3, [pc, #244]	@ (800d6d0 <_strtod_l+0xbb4>)
 800d5dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d5de:	403b      	ands	r3, r7
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d1bd      	bne.n	800d560 <_strtod_l+0xa44>
 800d5e4:	0020      	movs	r0, r4
 800d5e6:	0029      	movs	r1, r5
 800d5e8:	f7f2 ff7a 	bl	80004e0 <__aeabi_d2lz>
 800d5ec:	f7f2 ffb2 	bl	8000554 <__aeabi_l2d>
 800d5f0:	0002      	movs	r2, r0
 800d5f2:	000b      	movs	r3, r1
 800d5f4:	0020      	movs	r0, r4
 800d5f6:	0029      	movs	r1, r5
 800d5f8:	f7f4 fa32 	bl	8001a60 <__aeabi_dsub>
 800d5fc:	033c      	lsls	r4, r7, #12
 800d5fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d600:	0b24      	lsrs	r4, r4, #12
 800d602:	4334      	orrs	r4, r6
 800d604:	900e      	str	r0, [sp, #56]	@ 0x38
 800d606:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d608:	4a37      	ldr	r2, [pc, #220]	@ (800d6e8 <_strtod_l+0xbcc>)
 800d60a:	431c      	orrs	r4, r3
 800d60c:	d052      	beq.n	800d6b4 <_strtod_l+0xb98>
 800d60e:	4b37      	ldr	r3, [pc, #220]	@ (800d6ec <_strtod_l+0xbd0>)
 800d610:	f7f2 ff20 	bl	8000454 <__aeabi_dcmplt>
 800d614:	2800      	cmp	r0, #0
 800d616:	d000      	beq.n	800d61a <_strtod_l+0xafe>
 800d618:	e4c3      	b.n	800cfa2 <_strtod_l+0x486>
 800d61a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800d61c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d61e:	4a34      	ldr	r2, [pc, #208]	@ (800d6f0 <_strtod_l+0xbd4>)
 800d620:	4b2a      	ldr	r3, [pc, #168]	@ (800d6cc <_strtod_l+0xbb0>)
 800d622:	f7f2 ff2b 	bl	800047c <__aeabi_dcmpgt>
 800d626:	2800      	cmp	r0, #0
 800d628:	d09a      	beq.n	800d560 <_strtod_l+0xa44>
 800d62a:	e4ba      	b.n	800cfa2 <_strtod_l+0x486>
 800d62c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d02a      	beq.n	800d688 <_strtod_l+0xb6c>
 800d632:	23d4      	movs	r3, #212	@ 0xd4
 800d634:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d636:	04db      	lsls	r3, r3, #19
 800d638:	429a      	cmp	r2, r3
 800d63a:	d825      	bhi.n	800d688 <_strtod_l+0xb6c>
 800d63c:	0020      	movs	r0, r4
 800d63e:	0029      	movs	r1, r5
 800d640:	4a2c      	ldr	r2, [pc, #176]	@ (800d6f4 <_strtod_l+0xbd8>)
 800d642:	4b2d      	ldr	r3, [pc, #180]	@ (800d6f8 <_strtod_l+0xbdc>)
 800d644:	f7f2 ff10 	bl	8000468 <__aeabi_dcmple>
 800d648:	2800      	cmp	r0, #0
 800d64a:	d016      	beq.n	800d67a <_strtod_l+0xb5e>
 800d64c:	0020      	movs	r0, r4
 800d64e:	0029      	movs	r1, r5
 800d650:	f7f2 ff28 	bl	80004a4 <__aeabi_d2uiz>
 800d654:	2800      	cmp	r0, #0
 800d656:	d100      	bne.n	800d65a <_strtod_l+0xb3e>
 800d658:	3001      	adds	r0, #1
 800d65a:	f7f4 fe29 	bl	80022b0 <__aeabi_ui2d>
 800d65e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d660:	0004      	movs	r4, r0
 800d662:	000d      	movs	r5, r1
 800d664:	2b00      	cmp	r3, #0
 800d666:	d122      	bne.n	800d6ae <_strtod_l+0xb92>
 800d668:	2380      	movs	r3, #128	@ 0x80
 800d66a:	061b      	lsls	r3, r3, #24
 800d66c:	18cb      	adds	r3, r1, r3
 800d66e:	9018      	str	r0, [sp, #96]	@ 0x60
 800d670:	9319      	str	r3, [sp, #100]	@ 0x64
 800d672:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d674:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d676:	9214      	str	r2, [sp, #80]	@ 0x50
 800d678:	9315      	str	r3, [sp, #84]	@ 0x54
 800d67a:	22d6      	movs	r2, #214	@ 0xd6
 800d67c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d67e:	04d2      	lsls	r2, r2, #19
 800d680:	189b      	adds	r3, r3, r2
 800d682:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d684:	1a9b      	subs	r3, r3, r2
 800d686:	9315      	str	r3, [sp, #84]	@ 0x54
 800d688:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d68a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d68c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d68e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d690:	f7ff f8f2 	bl	800c878 <__ulp>
 800d694:	0002      	movs	r2, r0
 800d696:	000b      	movs	r3, r1
 800d698:	0030      	movs	r0, r6
 800d69a:	0039      	movs	r1, r7
 800d69c:	f7f3 ff18 	bl	80014d0 <__aeabi_dmul>
 800d6a0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d6a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d6a4:	f7f2 ff6c 	bl	8000580 <__aeabi_dadd>
 800d6a8:	0006      	movs	r6, r0
 800d6aa:	000f      	movs	r7, r1
 800d6ac:	e791      	b.n	800d5d2 <_strtod_l+0xab6>
 800d6ae:	9418      	str	r4, [sp, #96]	@ 0x60
 800d6b0:	9519      	str	r5, [sp, #100]	@ 0x64
 800d6b2:	e7de      	b.n	800d672 <_strtod_l+0xb56>
 800d6b4:	4b11      	ldr	r3, [pc, #68]	@ (800d6fc <_strtod_l+0xbe0>)
 800d6b6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800d6b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d6ba:	f7f2 fecb 	bl	8000454 <__aeabi_dcmplt>
 800d6be:	e7b2      	b.n	800d626 <_strtod_l+0xb0a>
 800d6c0:	fff00000 	.word	0xfff00000
 800d6c4:	000fffff 	.word	0x000fffff
 800d6c8:	3ff00000 	.word	0x3ff00000
 800d6cc:	3fe00000 	.word	0x3fe00000
 800d6d0:	7ff00000 	.word	0x7ff00000
 800d6d4:	7fe00000 	.word	0x7fe00000
 800d6d8:	fcb00000 	.word	0xfcb00000
 800d6dc:	7c9fffff 	.word	0x7c9fffff
 800d6e0:	7fefffff 	.word	0x7fefffff
 800d6e4:	bff00000 	.word	0xbff00000
 800d6e8:	94a03595 	.word	0x94a03595
 800d6ec:	3fdfffff 	.word	0x3fdfffff
 800d6f0:	35afe535 	.word	0x35afe535
 800d6f4:	ffc00000 	.word	0xffc00000
 800d6f8:	41dfffff 	.word	0x41dfffff
 800d6fc:	3fcfffff 	.word	0x3fcfffff

0800d700 <_strtod_r>:
 800d700:	b510      	push	{r4, lr}
 800d702:	4b02      	ldr	r3, [pc, #8]	@ (800d70c <_strtod_r+0xc>)
 800d704:	f7ff fa0a 	bl	800cb1c <_strtod_l>
 800d708:	bd10      	pop	{r4, pc}
 800d70a:	46c0      	nop			@ (mov r8, r8)
 800d70c:	200000b0 	.word	0x200000b0

0800d710 <_strtol_l.constprop.0>:
 800d710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d712:	b085      	sub	sp, #20
 800d714:	0017      	movs	r7, r2
 800d716:	001e      	movs	r6, r3
 800d718:	9003      	str	r0, [sp, #12]
 800d71a:	9101      	str	r1, [sp, #4]
 800d71c:	2b24      	cmp	r3, #36	@ 0x24
 800d71e:	d844      	bhi.n	800d7aa <_strtol_l.constprop.0+0x9a>
 800d720:	000c      	movs	r4, r1
 800d722:	2b01      	cmp	r3, #1
 800d724:	d041      	beq.n	800d7aa <_strtol_l.constprop.0+0x9a>
 800d726:	4b3d      	ldr	r3, [pc, #244]	@ (800d81c <_strtol_l.constprop.0+0x10c>)
 800d728:	2208      	movs	r2, #8
 800d72a:	469c      	mov	ip, r3
 800d72c:	0023      	movs	r3, r4
 800d72e:	4661      	mov	r1, ip
 800d730:	781d      	ldrb	r5, [r3, #0]
 800d732:	3401      	adds	r4, #1
 800d734:	5d48      	ldrb	r0, [r1, r5]
 800d736:	0001      	movs	r1, r0
 800d738:	4011      	ands	r1, r2
 800d73a:	4210      	tst	r0, r2
 800d73c:	d1f6      	bne.n	800d72c <_strtol_l.constprop.0+0x1c>
 800d73e:	2d2d      	cmp	r5, #45	@ 0x2d
 800d740:	d13a      	bne.n	800d7b8 <_strtol_l.constprop.0+0xa8>
 800d742:	7825      	ldrb	r5, [r4, #0]
 800d744:	1c9c      	adds	r4, r3, #2
 800d746:	2301      	movs	r3, #1
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	2210      	movs	r2, #16
 800d74c:	0033      	movs	r3, r6
 800d74e:	4393      	bics	r3, r2
 800d750:	d109      	bne.n	800d766 <_strtol_l.constprop.0+0x56>
 800d752:	2d30      	cmp	r5, #48	@ 0x30
 800d754:	d136      	bne.n	800d7c4 <_strtol_l.constprop.0+0xb4>
 800d756:	2120      	movs	r1, #32
 800d758:	7823      	ldrb	r3, [r4, #0]
 800d75a:	438b      	bics	r3, r1
 800d75c:	2b58      	cmp	r3, #88	@ 0x58
 800d75e:	d131      	bne.n	800d7c4 <_strtol_l.constprop.0+0xb4>
 800d760:	0016      	movs	r6, r2
 800d762:	7865      	ldrb	r5, [r4, #1]
 800d764:	3402      	adds	r4, #2
 800d766:	4a2e      	ldr	r2, [pc, #184]	@ (800d820 <_strtol_l.constprop.0+0x110>)
 800d768:	9b00      	ldr	r3, [sp, #0]
 800d76a:	4694      	mov	ip, r2
 800d76c:	4463      	add	r3, ip
 800d76e:	0031      	movs	r1, r6
 800d770:	0018      	movs	r0, r3
 800d772:	9302      	str	r3, [sp, #8]
 800d774:	f7f2 fd68 	bl	8000248 <__aeabi_uidivmod>
 800d778:	2200      	movs	r2, #0
 800d77a:	4684      	mov	ip, r0
 800d77c:	0010      	movs	r0, r2
 800d77e:	002b      	movs	r3, r5
 800d780:	3b30      	subs	r3, #48	@ 0x30
 800d782:	2b09      	cmp	r3, #9
 800d784:	d825      	bhi.n	800d7d2 <_strtol_l.constprop.0+0xc2>
 800d786:	001d      	movs	r5, r3
 800d788:	42ae      	cmp	r6, r5
 800d78a:	dd31      	ble.n	800d7f0 <_strtol_l.constprop.0+0xe0>
 800d78c:	1c53      	adds	r3, r2, #1
 800d78e:	d009      	beq.n	800d7a4 <_strtol_l.constprop.0+0x94>
 800d790:	2201      	movs	r2, #1
 800d792:	4252      	negs	r2, r2
 800d794:	4584      	cmp	ip, r0
 800d796:	d305      	bcc.n	800d7a4 <_strtol_l.constprop.0+0x94>
 800d798:	d101      	bne.n	800d79e <_strtol_l.constprop.0+0x8e>
 800d79a:	42a9      	cmp	r1, r5
 800d79c:	db25      	blt.n	800d7ea <_strtol_l.constprop.0+0xda>
 800d79e:	2201      	movs	r2, #1
 800d7a0:	4370      	muls	r0, r6
 800d7a2:	1828      	adds	r0, r5, r0
 800d7a4:	7825      	ldrb	r5, [r4, #0]
 800d7a6:	3401      	adds	r4, #1
 800d7a8:	e7e9      	b.n	800d77e <_strtol_l.constprop.0+0x6e>
 800d7aa:	f7fd fd11 	bl	800b1d0 <__errno>
 800d7ae:	2316      	movs	r3, #22
 800d7b0:	6003      	str	r3, [r0, #0]
 800d7b2:	2000      	movs	r0, #0
 800d7b4:	b005      	add	sp, #20
 800d7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7b8:	9100      	str	r1, [sp, #0]
 800d7ba:	2d2b      	cmp	r5, #43	@ 0x2b
 800d7bc:	d1c5      	bne.n	800d74a <_strtol_l.constprop.0+0x3a>
 800d7be:	7825      	ldrb	r5, [r4, #0]
 800d7c0:	1c9c      	adds	r4, r3, #2
 800d7c2:	e7c2      	b.n	800d74a <_strtol_l.constprop.0+0x3a>
 800d7c4:	2e00      	cmp	r6, #0
 800d7c6:	d1ce      	bne.n	800d766 <_strtol_l.constprop.0+0x56>
 800d7c8:	3608      	adds	r6, #8
 800d7ca:	2d30      	cmp	r5, #48	@ 0x30
 800d7cc:	d0cb      	beq.n	800d766 <_strtol_l.constprop.0+0x56>
 800d7ce:	3602      	adds	r6, #2
 800d7d0:	e7c9      	b.n	800d766 <_strtol_l.constprop.0+0x56>
 800d7d2:	002b      	movs	r3, r5
 800d7d4:	3b41      	subs	r3, #65	@ 0x41
 800d7d6:	2b19      	cmp	r3, #25
 800d7d8:	d801      	bhi.n	800d7de <_strtol_l.constprop.0+0xce>
 800d7da:	3d37      	subs	r5, #55	@ 0x37
 800d7dc:	e7d4      	b.n	800d788 <_strtol_l.constprop.0+0x78>
 800d7de:	002b      	movs	r3, r5
 800d7e0:	3b61      	subs	r3, #97	@ 0x61
 800d7e2:	2b19      	cmp	r3, #25
 800d7e4:	d804      	bhi.n	800d7f0 <_strtol_l.constprop.0+0xe0>
 800d7e6:	3d57      	subs	r5, #87	@ 0x57
 800d7e8:	e7ce      	b.n	800d788 <_strtol_l.constprop.0+0x78>
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	4252      	negs	r2, r2
 800d7ee:	e7d9      	b.n	800d7a4 <_strtol_l.constprop.0+0x94>
 800d7f0:	1c53      	adds	r3, r2, #1
 800d7f2:	d108      	bne.n	800d806 <_strtol_l.constprop.0+0xf6>
 800d7f4:	2322      	movs	r3, #34	@ 0x22
 800d7f6:	9a03      	ldr	r2, [sp, #12]
 800d7f8:	9802      	ldr	r0, [sp, #8]
 800d7fa:	6013      	str	r3, [r2, #0]
 800d7fc:	2f00      	cmp	r7, #0
 800d7fe:	d0d9      	beq.n	800d7b4 <_strtol_l.constprop.0+0xa4>
 800d800:	1e63      	subs	r3, r4, #1
 800d802:	9301      	str	r3, [sp, #4]
 800d804:	e007      	b.n	800d816 <_strtol_l.constprop.0+0x106>
 800d806:	9b00      	ldr	r3, [sp, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d000      	beq.n	800d80e <_strtol_l.constprop.0+0xfe>
 800d80c:	4240      	negs	r0, r0
 800d80e:	2f00      	cmp	r7, #0
 800d810:	d0d0      	beq.n	800d7b4 <_strtol_l.constprop.0+0xa4>
 800d812:	2a00      	cmp	r2, #0
 800d814:	d1f4      	bne.n	800d800 <_strtol_l.constprop.0+0xf0>
 800d816:	9b01      	ldr	r3, [sp, #4]
 800d818:	603b      	str	r3, [r7, #0]
 800d81a:	e7cb      	b.n	800d7b4 <_strtol_l.constprop.0+0xa4>
 800d81c:	0800f069 	.word	0x0800f069
 800d820:	7fffffff 	.word	0x7fffffff

0800d824 <_strtol_r>:
 800d824:	b510      	push	{r4, lr}
 800d826:	f7ff ff73 	bl	800d710 <_strtol_l.constprop.0>
 800d82a:	bd10      	pop	{r4, pc}

0800d82c <__ssputs_r>:
 800d82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d82e:	688e      	ldr	r6, [r1, #8]
 800d830:	b085      	sub	sp, #20
 800d832:	001f      	movs	r7, r3
 800d834:	000c      	movs	r4, r1
 800d836:	680b      	ldr	r3, [r1, #0]
 800d838:	9002      	str	r0, [sp, #8]
 800d83a:	9203      	str	r2, [sp, #12]
 800d83c:	42be      	cmp	r6, r7
 800d83e:	d830      	bhi.n	800d8a2 <__ssputs_r+0x76>
 800d840:	210c      	movs	r1, #12
 800d842:	5e62      	ldrsh	r2, [r4, r1]
 800d844:	2190      	movs	r1, #144	@ 0x90
 800d846:	00c9      	lsls	r1, r1, #3
 800d848:	420a      	tst	r2, r1
 800d84a:	d028      	beq.n	800d89e <__ssputs_r+0x72>
 800d84c:	2003      	movs	r0, #3
 800d84e:	6921      	ldr	r1, [r4, #16]
 800d850:	1a5b      	subs	r3, r3, r1
 800d852:	9301      	str	r3, [sp, #4]
 800d854:	6963      	ldr	r3, [r4, #20]
 800d856:	4343      	muls	r3, r0
 800d858:	9801      	ldr	r0, [sp, #4]
 800d85a:	0fdd      	lsrs	r5, r3, #31
 800d85c:	18ed      	adds	r5, r5, r3
 800d85e:	1c7b      	adds	r3, r7, #1
 800d860:	181b      	adds	r3, r3, r0
 800d862:	106d      	asrs	r5, r5, #1
 800d864:	42ab      	cmp	r3, r5
 800d866:	d900      	bls.n	800d86a <__ssputs_r+0x3e>
 800d868:	001d      	movs	r5, r3
 800d86a:	0552      	lsls	r2, r2, #21
 800d86c:	d528      	bpl.n	800d8c0 <__ssputs_r+0x94>
 800d86e:	0029      	movs	r1, r5
 800d870:	9802      	ldr	r0, [sp, #8]
 800d872:	f7fe fbe1 	bl	800c038 <_malloc_r>
 800d876:	1e06      	subs	r6, r0, #0
 800d878:	d02c      	beq.n	800d8d4 <__ssputs_r+0xa8>
 800d87a:	9a01      	ldr	r2, [sp, #4]
 800d87c:	6921      	ldr	r1, [r4, #16]
 800d87e:	f000 fa1b 	bl	800dcb8 <memcpy>
 800d882:	89a2      	ldrh	r2, [r4, #12]
 800d884:	4b18      	ldr	r3, [pc, #96]	@ (800d8e8 <__ssputs_r+0xbc>)
 800d886:	401a      	ands	r2, r3
 800d888:	2380      	movs	r3, #128	@ 0x80
 800d88a:	4313      	orrs	r3, r2
 800d88c:	81a3      	strh	r3, [r4, #12]
 800d88e:	9b01      	ldr	r3, [sp, #4]
 800d890:	6126      	str	r6, [r4, #16]
 800d892:	18f6      	adds	r6, r6, r3
 800d894:	6026      	str	r6, [r4, #0]
 800d896:	003e      	movs	r6, r7
 800d898:	6165      	str	r5, [r4, #20]
 800d89a:	1aed      	subs	r5, r5, r3
 800d89c:	60a5      	str	r5, [r4, #8]
 800d89e:	42be      	cmp	r6, r7
 800d8a0:	d900      	bls.n	800d8a4 <__ssputs_r+0x78>
 800d8a2:	003e      	movs	r6, r7
 800d8a4:	0032      	movs	r2, r6
 800d8a6:	9903      	ldr	r1, [sp, #12]
 800d8a8:	6820      	ldr	r0, [r4, #0]
 800d8aa:	f000 f9ce 	bl	800dc4a <memmove>
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	68a3      	ldr	r3, [r4, #8]
 800d8b2:	1b9b      	subs	r3, r3, r6
 800d8b4:	60a3      	str	r3, [r4, #8]
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	199b      	adds	r3, r3, r6
 800d8ba:	6023      	str	r3, [r4, #0]
 800d8bc:	b005      	add	sp, #20
 800d8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8c0:	002a      	movs	r2, r5
 800d8c2:	9802      	ldr	r0, [sp, #8]
 800d8c4:	f000 fdc0 	bl	800e448 <_realloc_r>
 800d8c8:	1e06      	subs	r6, r0, #0
 800d8ca:	d1e0      	bne.n	800d88e <__ssputs_r+0x62>
 800d8cc:	6921      	ldr	r1, [r4, #16]
 800d8ce:	9802      	ldr	r0, [sp, #8]
 800d8d0:	f7fe fb3c 	bl	800bf4c <_free_r>
 800d8d4:	230c      	movs	r3, #12
 800d8d6:	2001      	movs	r0, #1
 800d8d8:	9a02      	ldr	r2, [sp, #8]
 800d8da:	4240      	negs	r0, r0
 800d8dc:	6013      	str	r3, [r2, #0]
 800d8de:	89a2      	ldrh	r2, [r4, #12]
 800d8e0:	3334      	adds	r3, #52	@ 0x34
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	81a3      	strh	r3, [r4, #12]
 800d8e6:	e7e9      	b.n	800d8bc <__ssputs_r+0x90>
 800d8e8:	fffffb7f 	.word	0xfffffb7f

0800d8ec <_svfiprintf_r>:
 800d8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ee:	b0a1      	sub	sp, #132	@ 0x84
 800d8f0:	9003      	str	r0, [sp, #12]
 800d8f2:	001d      	movs	r5, r3
 800d8f4:	898b      	ldrh	r3, [r1, #12]
 800d8f6:	000f      	movs	r7, r1
 800d8f8:	0016      	movs	r6, r2
 800d8fa:	061b      	lsls	r3, r3, #24
 800d8fc:	d511      	bpl.n	800d922 <_svfiprintf_r+0x36>
 800d8fe:	690b      	ldr	r3, [r1, #16]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d10e      	bne.n	800d922 <_svfiprintf_r+0x36>
 800d904:	2140      	movs	r1, #64	@ 0x40
 800d906:	f7fe fb97 	bl	800c038 <_malloc_r>
 800d90a:	6038      	str	r0, [r7, #0]
 800d90c:	6138      	str	r0, [r7, #16]
 800d90e:	2800      	cmp	r0, #0
 800d910:	d105      	bne.n	800d91e <_svfiprintf_r+0x32>
 800d912:	230c      	movs	r3, #12
 800d914:	9a03      	ldr	r2, [sp, #12]
 800d916:	6013      	str	r3, [r2, #0]
 800d918:	2001      	movs	r0, #1
 800d91a:	4240      	negs	r0, r0
 800d91c:	e0cf      	b.n	800dabe <_svfiprintf_r+0x1d2>
 800d91e:	2340      	movs	r3, #64	@ 0x40
 800d920:	617b      	str	r3, [r7, #20]
 800d922:	2300      	movs	r3, #0
 800d924:	ac08      	add	r4, sp, #32
 800d926:	6163      	str	r3, [r4, #20]
 800d928:	3320      	adds	r3, #32
 800d92a:	7663      	strb	r3, [r4, #25]
 800d92c:	3310      	adds	r3, #16
 800d92e:	76a3      	strb	r3, [r4, #26]
 800d930:	9507      	str	r5, [sp, #28]
 800d932:	0035      	movs	r5, r6
 800d934:	782b      	ldrb	r3, [r5, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <_svfiprintf_r+0x52>
 800d93a:	2b25      	cmp	r3, #37	@ 0x25
 800d93c:	d148      	bne.n	800d9d0 <_svfiprintf_r+0xe4>
 800d93e:	1bab      	subs	r3, r5, r6
 800d940:	9305      	str	r3, [sp, #20]
 800d942:	42b5      	cmp	r5, r6
 800d944:	d00b      	beq.n	800d95e <_svfiprintf_r+0x72>
 800d946:	0032      	movs	r2, r6
 800d948:	0039      	movs	r1, r7
 800d94a:	9803      	ldr	r0, [sp, #12]
 800d94c:	f7ff ff6e 	bl	800d82c <__ssputs_r>
 800d950:	3001      	adds	r0, #1
 800d952:	d100      	bne.n	800d956 <_svfiprintf_r+0x6a>
 800d954:	e0ae      	b.n	800dab4 <_svfiprintf_r+0x1c8>
 800d956:	6963      	ldr	r3, [r4, #20]
 800d958:	9a05      	ldr	r2, [sp, #20]
 800d95a:	189b      	adds	r3, r3, r2
 800d95c:	6163      	str	r3, [r4, #20]
 800d95e:	782b      	ldrb	r3, [r5, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d100      	bne.n	800d966 <_svfiprintf_r+0x7a>
 800d964:	e0a6      	b.n	800dab4 <_svfiprintf_r+0x1c8>
 800d966:	2201      	movs	r2, #1
 800d968:	2300      	movs	r3, #0
 800d96a:	4252      	negs	r2, r2
 800d96c:	6062      	str	r2, [r4, #4]
 800d96e:	a904      	add	r1, sp, #16
 800d970:	3254      	adds	r2, #84	@ 0x54
 800d972:	1852      	adds	r2, r2, r1
 800d974:	1c6e      	adds	r6, r5, #1
 800d976:	6023      	str	r3, [r4, #0]
 800d978:	60e3      	str	r3, [r4, #12]
 800d97a:	60a3      	str	r3, [r4, #8]
 800d97c:	7013      	strb	r3, [r2, #0]
 800d97e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d980:	4b54      	ldr	r3, [pc, #336]	@ (800dad4 <_svfiprintf_r+0x1e8>)
 800d982:	2205      	movs	r2, #5
 800d984:	0018      	movs	r0, r3
 800d986:	7831      	ldrb	r1, [r6, #0]
 800d988:	9305      	str	r3, [sp, #20]
 800d98a:	f7fd fc4e 	bl	800b22a <memchr>
 800d98e:	1c75      	adds	r5, r6, #1
 800d990:	2800      	cmp	r0, #0
 800d992:	d11f      	bne.n	800d9d4 <_svfiprintf_r+0xe8>
 800d994:	6822      	ldr	r2, [r4, #0]
 800d996:	06d3      	lsls	r3, r2, #27
 800d998:	d504      	bpl.n	800d9a4 <_svfiprintf_r+0xb8>
 800d99a:	2353      	movs	r3, #83	@ 0x53
 800d99c:	a904      	add	r1, sp, #16
 800d99e:	185b      	adds	r3, r3, r1
 800d9a0:	2120      	movs	r1, #32
 800d9a2:	7019      	strb	r1, [r3, #0]
 800d9a4:	0713      	lsls	r3, r2, #28
 800d9a6:	d504      	bpl.n	800d9b2 <_svfiprintf_r+0xc6>
 800d9a8:	2353      	movs	r3, #83	@ 0x53
 800d9aa:	a904      	add	r1, sp, #16
 800d9ac:	185b      	adds	r3, r3, r1
 800d9ae:	212b      	movs	r1, #43	@ 0x2b
 800d9b0:	7019      	strb	r1, [r3, #0]
 800d9b2:	7833      	ldrb	r3, [r6, #0]
 800d9b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9b6:	d016      	beq.n	800d9e6 <_svfiprintf_r+0xfa>
 800d9b8:	0035      	movs	r5, r6
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	200a      	movs	r0, #10
 800d9be:	68e3      	ldr	r3, [r4, #12]
 800d9c0:	782a      	ldrb	r2, [r5, #0]
 800d9c2:	1c6e      	adds	r6, r5, #1
 800d9c4:	3a30      	subs	r2, #48	@ 0x30
 800d9c6:	2a09      	cmp	r2, #9
 800d9c8:	d950      	bls.n	800da6c <_svfiprintf_r+0x180>
 800d9ca:	2900      	cmp	r1, #0
 800d9cc:	d111      	bne.n	800d9f2 <_svfiprintf_r+0x106>
 800d9ce:	e017      	b.n	800da00 <_svfiprintf_r+0x114>
 800d9d0:	3501      	adds	r5, #1
 800d9d2:	e7af      	b.n	800d934 <_svfiprintf_r+0x48>
 800d9d4:	9b05      	ldr	r3, [sp, #20]
 800d9d6:	6822      	ldr	r2, [r4, #0]
 800d9d8:	1ac0      	subs	r0, r0, r3
 800d9da:	2301      	movs	r3, #1
 800d9dc:	4083      	lsls	r3, r0
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	002e      	movs	r6, r5
 800d9e2:	6023      	str	r3, [r4, #0]
 800d9e4:	e7cc      	b.n	800d980 <_svfiprintf_r+0x94>
 800d9e6:	9b07      	ldr	r3, [sp, #28]
 800d9e8:	1d19      	adds	r1, r3, #4
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	9107      	str	r1, [sp, #28]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	db01      	blt.n	800d9f6 <_svfiprintf_r+0x10a>
 800d9f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9f4:	e004      	b.n	800da00 <_svfiprintf_r+0x114>
 800d9f6:	425b      	negs	r3, r3
 800d9f8:	60e3      	str	r3, [r4, #12]
 800d9fa:	2302      	movs	r3, #2
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	6023      	str	r3, [r4, #0]
 800da00:	782b      	ldrb	r3, [r5, #0]
 800da02:	2b2e      	cmp	r3, #46	@ 0x2e
 800da04:	d10c      	bne.n	800da20 <_svfiprintf_r+0x134>
 800da06:	786b      	ldrb	r3, [r5, #1]
 800da08:	2b2a      	cmp	r3, #42	@ 0x2a
 800da0a:	d134      	bne.n	800da76 <_svfiprintf_r+0x18a>
 800da0c:	9b07      	ldr	r3, [sp, #28]
 800da0e:	3502      	adds	r5, #2
 800da10:	1d1a      	adds	r2, r3, #4
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	9207      	str	r2, [sp, #28]
 800da16:	2b00      	cmp	r3, #0
 800da18:	da01      	bge.n	800da1e <_svfiprintf_r+0x132>
 800da1a:	2301      	movs	r3, #1
 800da1c:	425b      	negs	r3, r3
 800da1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da20:	4e2d      	ldr	r6, [pc, #180]	@ (800dad8 <_svfiprintf_r+0x1ec>)
 800da22:	2203      	movs	r2, #3
 800da24:	0030      	movs	r0, r6
 800da26:	7829      	ldrb	r1, [r5, #0]
 800da28:	f7fd fbff 	bl	800b22a <memchr>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d006      	beq.n	800da3e <_svfiprintf_r+0x152>
 800da30:	2340      	movs	r3, #64	@ 0x40
 800da32:	1b80      	subs	r0, r0, r6
 800da34:	4083      	lsls	r3, r0
 800da36:	6822      	ldr	r2, [r4, #0]
 800da38:	3501      	adds	r5, #1
 800da3a:	4313      	orrs	r3, r2
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	7829      	ldrb	r1, [r5, #0]
 800da40:	2206      	movs	r2, #6
 800da42:	4826      	ldr	r0, [pc, #152]	@ (800dadc <_svfiprintf_r+0x1f0>)
 800da44:	1c6e      	adds	r6, r5, #1
 800da46:	7621      	strb	r1, [r4, #24]
 800da48:	f7fd fbef 	bl	800b22a <memchr>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d038      	beq.n	800dac2 <_svfiprintf_r+0x1d6>
 800da50:	4b23      	ldr	r3, [pc, #140]	@ (800dae0 <_svfiprintf_r+0x1f4>)
 800da52:	2b00      	cmp	r3, #0
 800da54:	d122      	bne.n	800da9c <_svfiprintf_r+0x1b0>
 800da56:	2207      	movs	r2, #7
 800da58:	9b07      	ldr	r3, [sp, #28]
 800da5a:	3307      	adds	r3, #7
 800da5c:	4393      	bics	r3, r2
 800da5e:	3308      	adds	r3, #8
 800da60:	9307      	str	r3, [sp, #28]
 800da62:	6963      	ldr	r3, [r4, #20]
 800da64:	9a04      	ldr	r2, [sp, #16]
 800da66:	189b      	adds	r3, r3, r2
 800da68:	6163      	str	r3, [r4, #20]
 800da6a:	e762      	b.n	800d932 <_svfiprintf_r+0x46>
 800da6c:	4343      	muls	r3, r0
 800da6e:	0035      	movs	r5, r6
 800da70:	2101      	movs	r1, #1
 800da72:	189b      	adds	r3, r3, r2
 800da74:	e7a4      	b.n	800d9c0 <_svfiprintf_r+0xd4>
 800da76:	2300      	movs	r3, #0
 800da78:	200a      	movs	r0, #10
 800da7a:	0019      	movs	r1, r3
 800da7c:	3501      	adds	r5, #1
 800da7e:	6063      	str	r3, [r4, #4]
 800da80:	782a      	ldrb	r2, [r5, #0]
 800da82:	1c6e      	adds	r6, r5, #1
 800da84:	3a30      	subs	r2, #48	@ 0x30
 800da86:	2a09      	cmp	r2, #9
 800da88:	d903      	bls.n	800da92 <_svfiprintf_r+0x1a6>
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d0c8      	beq.n	800da20 <_svfiprintf_r+0x134>
 800da8e:	9109      	str	r1, [sp, #36]	@ 0x24
 800da90:	e7c6      	b.n	800da20 <_svfiprintf_r+0x134>
 800da92:	4341      	muls	r1, r0
 800da94:	0035      	movs	r5, r6
 800da96:	2301      	movs	r3, #1
 800da98:	1889      	adds	r1, r1, r2
 800da9a:	e7f1      	b.n	800da80 <_svfiprintf_r+0x194>
 800da9c:	aa07      	add	r2, sp, #28
 800da9e:	9200      	str	r2, [sp, #0]
 800daa0:	0021      	movs	r1, r4
 800daa2:	003a      	movs	r2, r7
 800daa4:	4b0f      	ldr	r3, [pc, #60]	@ (800dae4 <_svfiprintf_r+0x1f8>)
 800daa6:	9803      	ldr	r0, [sp, #12]
 800daa8:	f7fc fc3e 	bl	800a328 <_printf_float>
 800daac:	9004      	str	r0, [sp, #16]
 800daae:	9b04      	ldr	r3, [sp, #16]
 800dab0:	3301      	adds	r3, #1
 800dab2:	d1d6      	bne.n	800da62 <_svfiprintf_r+0x176>
 800dab4:	89bb      	ldrh	r3, [r7, #12]
 800dab6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800dab8:	065b      	lsls	r3, r3, #25
 800daba:	d500      	bpl.n	800dabe <_svfiprintf_r+0x1d2>
 800dabc:	e72c      	b.n	800d918 <_svfiprintf_r+0x2c>
 800dabe:	b021      	add	sp, #132	@ 0x84
 800dac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dac2:	aa07      	add	r2, sp, #28
 800dac4:	9200      	str	r2, [sp, #0]
 800dac6:	0021      	movs	r1, r4
 800dac8:	003a      	movs	r2, r7
 800daca:	4b06      	ldr	r3, [pc, #24]	@ (800dae4 <_svfiprintf_r+0x1f8>)
 800dacc:	9803      	ldr	r0, [sp, #12]
 800dace:	f7fc fed9 	bl	800a884 <_printf_i>
 800dad2:	e7eb      	b.n	800daac <_svfiprintf_r+0x1c0>
 800dad4:	0800f169 	.word	0x0800f169
 800dad8:	0800f16f 	.word	0x0800f16f
 800dadc:	0800f173 	.word	0x0800f173
 800dae0:	0800a329 	.word	0x0800a329
 800dae4:	0800d82d 	.word	0x0800d82d

0800dae8 <__sflush_r>:
 800dae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daea:	220c      	movs	r2, #12
 800daec:	5e8b      	ldrsh	r3, [r1, r2]
 800daee:	0005      	movs	r5, r0
 800daf0:	000c      	movs	r4, r1
 800daf2:	071a      	lsls	r2, r3, #28
 800daf4:	d456      	bmi.n	800dba4 <__sflush_r+0xbc>
 800daf6:	684a      	ldr	r2, [r1, #4]
 800daf8:	2a00      	cmp	r2, #0
 800dafa:	dc02      	bgt.n	800db02 <__sflush_r+0x1a>
 800dafc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800dafe:	2a00      	cmp	r2, #0
 800db00:	dd4e      	ble.n	800dba0 <__sflush_r+0xb8>
 800db02:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800db04:	2f00      	cmp	r7, #0
 800db06:	d04b      	beq.n	800dba0 <__sflush_r+0xb8>
 800db08:	2200      	movs	r2, #0
 800db0a:	2080      	movs	r0, #128	@ 0x80
 800db0c:	682e      	ldr	r6, [r5, #0]
 800db0e:	602a      	str	r2, [r5, #0]
 800db10:	001a      	movs	r2, r3
 800db12:	0140      	lsls	r0, r0, #5
 800db14:	6a21      	ldr	r1, [r4, #32]
 800db16:	4002      	ands	r2, r0
 800db18:	4203      	tst	r3, r0
 800db1a:	d033      	beq.n	800db84 <__sflush_r+0x9c>
 800db1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db1e:	89a3      	ldrh	r3, [r4, #12]
 800db20:	075b      	lsls	r3, r3, #29
 800db22:	d506      	bpl.n	800db32 <__sflush_r+0x4a>
 800db24:	6863      	ldr	r3, [r4, #4]
 800db26:	1ad2      	subs	r2, r2, r3
 800db28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d001      	beq.n	800db32 <__sflush_r+0x4a>
 800db2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db30:	1ad2      	subs	r2, r2, r3
 800db32:	2300      	movs	r3, #0
 800db34:	0028      	movs	r0, r5
 800db36:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800db38:	6a21      	ldr	r1, [r4, #32]
 800db3a:	47b8      	blx	r7
 800db3c:	89a2      	ldrh	r2, [r4, #12]
 800db3e:	1c43      	adds	r3, r0, #1
 800db40:	d106      	bne.n	800db50 <__sflush_r+0x68>
 800db42:	6829      	ldr	r1, [r5, #0]
 800db44:	291d      	cmp	r1, #29
 800db46:	d846      	bhi.n	800dbd6 <__sflush_r+0xee>
 800db48:	4b29      	ldr	r3, [pc, #164]	@ (800dbf0 <__sflush_r+0x108>)
 800db4a:	410b      	asrs	r3, r1
 800db4c:	07db      	lsls	r3, r3, #31
 800db4e:	d442      	bmi.n	800dbd6 <__sflush_r+0xee>
 800db50:	2300      	movs	r3, #0
 800db52:	6063      	str	r3, [r4, #4]
 800db54:	6923      	ldr	r3, [r4, #16]
 800db56:	6023      	str	r3, [r4, #0]
 800db58:	04d2      	lsls	r2, r2, #19
 800db5a:	d505      	bpl.n	800db68 <__sflush_r+0x80>
 800db5c:	1c43      	adds	r3, r0, #1
 800db5e:	d102      	bne.n	800db66 <__sflush_r+0x7e>
 800db60:	682b      	ldr	r3, [r5, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d100      	bne.n	800db68 <__sflush_r+0x80>
 800db66:	6560      	str	r0, [r4, #84]	@ 0x54
 800db68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db6a:	602e      	str	r6, [r5, #0]
 800db6c:	2900      	cmp	r1, #0
 800db6e:	d017      	beq.n	800dba0 <__sflush_r+0xb8>
 800db70:	0023      	movs	r3, r4
 800db72:	3344      	adds	r3, #68	@ 0x44
 800db74:	4299      	cmp	r1, r3
 800db76:	d002      	beq.n	800db7e <__sflush_r+0x96>
 800db78:	0028      	movs	r0, r5
 800db7a:	f7fe f9e7 	bl	800bf4c <_free_r>
 800db7e:	2300      	movs	r3, #0
 800db80:	6363      	str	r3, [r4, #52]	@ 0x34
 800db82:	e00d      	b.n	800dba0 <__sflush_r+0xb8>
 800db84:	2301      	movs	r3, #1
 800db86:	0028      	movs	r0, r5
 800db88:	47b8      	blx	r7
 800db8a:	0002      	movs	r2, r0
 800db8c:	1c43      	adds	r3, r0, #1
 800db8e:	d1c6      	bne.n	800db1e <__sflush_r+0x36>
 800db90:	682b      	ldr	r3, [r5, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d0c3      	beq.n	800db1e <__sflush_r+0x36>
 800db96:	2b1d      	cmp	r3, #29
 800db98:	d001      	beq.n	800db9e <__sflush_r+0xb6>
 800db9a:	2b16      	cmp	r3, #22
 800db9c:	d11a      	bne.n	800dbd4 <__sflush_r+0xec>
 800db9e:	602e      	str	r6, [r5, #0]
 800dba0:	2000      	movs	r0, #0
 800dba2:	e01e      	b.n	800dbe2 <__sflush_r+0xfa>
 800dba4:	690e      	ldr	r6, [r1, #16]
 800dba6:	2e00      	cmp	r6, #0
 800dba8:	d0fa      	beq.n	800dba0 <__sflush_r+0xb8>
 800dbaa:	680f      	ldr	r7, [r1, #0]
 800dbac:	600e      	str	r6, [r1, #0]
 800dbae:	1bba      	subs	r2, r7, r6
 800dbb0:	9201      	str	r2, [sp, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	079b      	lsls	r3, r3, #30
 800dbb6:	d100      	bne.n	800dbba <__sflush_r+0xd2>
 800dbb8:	694a      	ldr	r2, [r1, #20]
 800dbba:	60a2      	str	r2, [r4, #8]
 800dbbc:	9b01      	ldr	r3, [sp, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	ddee      	ble.n	800dba0 <__sflush_r+0xb8>
 800dbc2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800dbc4:	0032      	movs	r2, r6
 800dbc6:	001f      	movs	r7, r3
 800dbc8:	0028      	movs	r0, r5
 800dbca:	9b01      	ldr	r3, [sp, #4]
 800dbcc:	6a21      	ldr	r1, [r4, #32]
 800dbce:	47b8      	blx	r7
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	dc07      	bgt.n	800dbe4 <__sflush_r+0xfc>
 800dbd4:	89a2      	ldrh	r2, [r4, #12]
 800dbd6:	2340      	movs	r3, #64	@ 0x40
 800dbd8:	2001      	movs	r0, #1
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	b21b      	sxth	r3, r3
 800dbde:	81a3      	strh	r3, [r4, #12]
 800dbe0:	4240      	negs	r0, r0
 800dbe2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dbe4:	9b01      	ldr	r3, [sp, #4]
 800dbe6:	1836      	adds	r6, r6, r0
 800dbe8:	1a1b      	subs	r3, r3, r0
 800dbea:	9301      	str	r3, [sp, #4]
 800dbec:	e7e6      	b.n	800dbbc <__sflush_r+0xd4>
 800dbee:	46c0      	nop			@ (mov r8, r8)
 800dbf0:	dfbffffe 	.word	0xdfbffffe

0800dbf4 <_fflush_r>:
 800dbf4:	690b      	ldr	r3, [r1, #16]
 800dbf6:	b570      	push	{r4, r5, r6, lr}
 800dbf8:	0005      	movs	r5, r0
 800dbfa:	000c      	movs	r4, r1
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d102      	bne.n	800dc06 <_fflush_r+0x12>
 800dc00:	2500      	movs	r5, #0
 800dc02:	0028      	movs	r0, r5
 800dc04:	bd70      	pop	{r4, r5, r6, pc}
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d004      	beq.n	800dc14 <_fflush_r+0x20>
 800dc0a:	6a03      	ldr	r3, [r0, #32]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d101      	bne.n	800dc14 <_fflush_r+0x20>
 800dc10:	f7fd f9e4 	bl	800afdc <__sinit>
 800dc14:	220c      	movs	r2, #12
 800dc16:	5ea3      	ldrsh	r3, [r4, r2]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d0f1      	beq.n	800dc00 <_fflush_r+0xc>
 800dc1c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc1e:	07d2      	lsls	r2, r2, #31
 800dc20:	d404      	bmi.n	800dc2c <_fflush_r+0x38>
 800dc22:	059b      	lsls	r3, r3, #22
 800dc24:	d402      	bmi.n	800dc2c <_fflush_r+0x38>
 800dc26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc28:	f7fd fafd 	bl	800b226 <__retarget_lock_acquire_recursive>
 800dc2c:	0028      	movs	r0, r5
 800dc2e:	0021      	movs	r1, r4
 800dc30:	f7ff ff5a 	bl	800dae8 <__sflush_r>
 800dc34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc36:	0005      	movs	r5, r0
 800dc38:	07db      	lsls	r3, r3, #31
 800dc3a:	d4e2      	bmi.n	800dc02 <_fflush_r+0xe>
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	059b      	lsls	r3, r3, #22
 800dc40:	d4df      	bmi.n	800dc02 <_fflush_r+0xe>
 800dc42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc44:	f7fd faf0 	bl	800b228 <__retarget_lock_release_recursive>
 800dc48:	e7db      	b.n	800dc02 <_fflush_r+0xe>

0800dc4a <memmove>:
 800dc4a:	b510      	push	{r4, lr}
 800dc4c:	4288      	cmp	r0, r1
 800dc4e:	d806      	bhi.n	800dc5e <memmove+0x14>
 800dc50:	2300      	movs	r3, #0
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d008      	beq.n	800dc68 <memmove+0x1e>
 800dc56:	5ccc      	ldrb	r4, [r1, r3]
 800dc58:	54c4      	strb	r4, [r0, r3]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	e7f9      	b.n	800dc52 <memmove+0x8>
 800dc5e:	188b      	adds	r3, r1, r2
 800dc60:	4298      	cmp	r0, r3
 800dc62:	d2f5      	bcs.n	800dc50 <memmove+0x6>
 800dc64:	3a01      	subs	r2, #1
 800dc66:	d200      	bcs.n	800dc6a <memmove+0x20>
 800dc68:	bd10      	pop	{r4, pc}
 800dc6a:	5c8b      	ldrb	r3, [r1, r2]
 800dc6c:	5483      	strb	r3, [r0, r2]
 800dc6e:	e7f9      	b.n	800dc64 <memmove+0x1a>

0800dc70 <strncmp>:
 800dc70:	b530      	push	{r4, r5, lr}
 800dc72:	0005      	movs	r5, r0
 800dc74:	1e10      	subs	r0, r2, #0
 800dc76:	d00b      	beq.n	800dc90 <strncmp+0x20>
 800dc78:	2400      	movs	r4, #0
 800dc7a:	3a01      	subs	r2, #1
 800dc7c:	5d2b      	ldrb	r3, [r5, r4]
 800dc7e:	5d08      	ldrb	r0, [r1, r4]
 800dc80:	4283      	cmp	r3, r0
 800dc82:	d104      	bne.n	800dc8e <strncmp+0x1e>
 800dc84:	42a2      	cmp	r2, r4
 800dc86:	d002      	beq.n	800dc8e <strncmp+0x1e>
 800dc88:	3401      	adds	r4, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1f6      	bne.n	800dc7c <strncmp+0xc>
 800dc8e:	1a18      	subs	r0, r3, r0
 800dc90:	bd30      	pop	{r4, r5, pc}
	...

0800dc94 <_sbrk_r>:
 800dc94:	2300      	movs	r3, #0
 800dc96:	b570      	push	{r4, r5, r6, lr}
 800dc98:	4d06      	ldr	r5, [pc, #24]	@ (800dcb4 <_sbrk_r+0x20>)
 800dc9a:	0004      	movs	r4, r0
 800dc9c:	0008      	movs	r0, r1
 800dc9e:	602b      	str	r3, [r5, #0]
 800dca0:	f7f5 fcb8 	bl	8003614 <_sbrk>
 800dca4:	1c43      	adds	r3, r0, #1
 800dca6:	d103      	bne.n	800dcb0 <_sbrk_r+0x1c>
 800dca8:	682b      	ldr	r3, [r5, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d000      	beq.n	800dcb0 <_sbrk_r+0x1c>
 800dcae:	6023      	str	r3, [r4, #0]
 800dcb0:	bd70      	pop	{r4, r5, r6, pc}
 800dcb2:	46c0      	nop			@ (mov r8, r8)
 800dcb4:	200006f8 	.word	0x200006f8

0800dcb8 <memcpy>:
 800dcb8:	2300      	movs	r3, #0
 800dcba:	b510      	push	{r4, lr}
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d100      	bne.n	800dcc2 <memcpy+0xa>
 800dcc0:	bd10      	pop	{r4, pc}
 800dcc2:	5ccc      	ldrb	r4, [r1, r3]
 800dcc4:	54c4      	strb	r4, [r0, r3]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	e7f8      	b.n	800dcbc <memcpy+0x4>
	...

0800dccc <nan>:
 800dccc:	2000      	movs	r0, #0
 800dcce:	4901      	ldr	r1, [pc, #4]	@ (800dcd4 <nan+0x8>)
 800dcd0:	4770      	bx	lr
 800dcd2:	46c0      	nop			@ (mov r8, r8)
 800dcd4:	7ff80000 	.word	0x7ff80000

0800dcd8 <__assert_func>:
 800dcd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dcda:	0014      	movs	r4, r2
 800dcdc:	001a      	movs	r2, r3
 800dcde:	4b09      	ldr	r3, [pc, #36]	@ (800dd04 <__assert_func+0x2c>)
 800dce0:	0005      	movs	r5, r0
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	000e      	movs	r6, r1
 800dce6:	68d8      	ldr	r0, [r3, #12]
 800dce8:	4b07      	ldr	r3, [pc, #28]	@ (800dd08 <__assert_func+0x30>)
 800dcea:	2c00      	cmp	r4, #0
 800dcec:	d101      	bne.n	800dcf2 <__assert_func+0x1a>
 800dcee:	4b07      	ldr	r3, [pc, #28]	@ (800dd0c <__assert_func+0x34>)
 800dcf0:	001c      	movs	r4, r3
 800dcf2:	4907      	ldr	r1, [pc, #28]	@ (800dd10 <__assert_func+0x38>)
 800dcf4:	9301      	str	r3, [sp, #4]
 800dcf6:	9402      	str	r4, [sp, #8]
 800dcf8:	002b      	movs	r3, r5
 800dcfa:	9600      	str	r6, [sp, #0]
 800dcfc:	f000 fbe0 	bl	800e4c0 <fiprintf>
 800dd00:	f000 fbee 	bl	800e4e0 <abort>
 800dd04:	20000060 	.word	0x20000060
 800dd08:	0800f182 	.word	0x0800f182
 800dd0c:	0800f1bd 	.word	0x0800f1bd
 800dd10:	0800f18f 	.word	0x0800f18f

0800dd14 <_calloc_r>:
 800dd14:	b570      	push	{r4, r5, r6, lr}
 800dd16:	0c0b      	lsrs	r3, r1, #16
 800dd18:	0c15      	lsrs	r5, r2, #16
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d11e      	bne.n	800dd5c <_calloc_r+0x48>
 800dd1e:	2d00      	cmp	r5, #0
 800dd20:	d10c      	bne.n	800dd3c <_calloc_r+0x28>
 800dd22:	b289      	uxth	r1, r1
 800dd24:	b294      	uxth	r4, r2
 800dd26:	434c      	muls	r4, r1
 800dd28:	0021      	movs	r1, r4
 800dd2a:	f7fe f985 	bl	800c038 <_malloc_r>
 800dd2e:	1e05      	subs	r5, r0, #0
 800dd30:	d01a      	beq.n	800dd68 <_calloc_r+0x54>
 800dd32:	0022      	movs	r2, r4
 800dd34:	2100      	movs	r1, #0
 800dd36:	f7fd f9f1 	bl	800b11c <memset>
 800dd3a:	e016      	b.n	800dd6a <_calloc_r+0x56>
 800dd3c:	1c2b      	adds	r3, r5, #0
 800dd3e:	1c0c      	adds	r4, r1, #0
 800dd40:	b289      	uxth	r1, r1
 800dd42:	b292      	uxth	r2, r2
 800dd44:	434a      	muls	r2, r1
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	b2a1      	uxth	r1, r4
 800dd4a:	4359      	muls	r1, r3
 800dd4c:	0c14      	lsrs	r4, r2, #16
 800dd4e:	190c      	adds	r4, r1, r4
 800dd50:	0c23      	lsrs	r3, r4, #16
 800dd52:	d107      	bne.n	800dd64 <_calloc_r+0x50>
 800dd54:	0424      	lsls	r4, r4, #16
 800dd56:	b292      	uxth	r2, r2
 800dd58:	4314      	orrs	r4, r2
 800dd5a:	e7e5      	b.n	800dd28 <_calloc_r+0x14>
 800dd5c:	2d00      	cmp	r5, #0
 800dd5e:	d101      	bne.n	800dd64 <_calloc_r+0x50>
 800dd60:	1c14      	adds	r4, r2, #0
 800dd62:	e7ed      	b.n	800dd40 <_calloc_r+0x2c>
 800dd64:	230c      	movs	r3, #12
 800dd66:	6003      	str	r3, [r0, #0]
 800dd68:	2500      	movs	r5, #0
 800dd6a:	0028      	movs	r0, r5
 800dd6c:	bd70      	pop	{r4, r5, r6, pc}

0800dd6e <rshift>:
 800dd6e:	0002      	movs	r2, r0
 800dd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd72:	6904      	ldr	r4, [r0, #16]
 800dd74:	b085      	sub	sp, #20
 800dd76:	3214      	adds	r2, #20
 800dd78:	114b      	asrs	r3, r1, #5
 800dd7a:	0016      	movs	r6, r2
 800dd7c:	9302      	str	r3, [sp, #8]
 800dd7e:	429c      	cmp	r4, r3
 800dd80:	dd31      	ble.n	800dde6 <rshift+0x78>
 800dd82:	261f      	movs	r6, #31
 800dd84:	000f      	movs	r7, r1
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	00a5      	lsls	r5, r4, #2
 800dd8a:	18d3      	adds	r3, r2, r3
 800dd8c:	4037      	ands	r7, r6
 800dd8e:	1955      	adds	r5, r2, r5
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	9701      	str	r7, [sp, #4]
 800dd94:	4231      	tst	r1, r6
 800dd96:	d10d      	bne.n	800ddb4 <rshift+0x46>
 800dd98:	0016      	movs	r6, r2
 800dd9a:	0019      	movs	r1, r3
 800dd9c:	428d      	cmp	r5, r1
 800dd9e:	d836      	bhi.n	800de0e <rshift+0xa0>
 800dda0:	9b00      	ldr	r3, [sp, #0]
 800dda2:	2600      	movs	r6, #0
 800dda4:	3b03      	subs	r3, #3
 800dda6:	429d      	cmp	r5, r3
 800dda8:	d302      	bcc.n	800ddb0 <rshift+0x42>
 800ddaa:	9b02      	ldr	r3, [sp, #8]
 800ddac:	1ae4      	subs	r4, r4, r3
 800ddae:	00a6      	lsls	r6, r4, #2
 800ddb0:	1996      	adds	r6, r2, r6
 800ddb2:	e018      	b.n	800dde6 <rshift+0x78>
 800ddb4:	2120      	movs	r1, #32
 800ddb6:	9e01      	ldr	r6, [sp, #4]
 800ddb8:	9f01      	ldr	r7, [sp, #4]
 800ddba:	1b89      	subs	r1, r1, r6
 800ddbc:	9e00      	ldr	r6, [sp, #0]
 800ddbe:	9103      	str	r1, [sp, #12]
 800ddc0:	ce02      	ldmia	r6!, {r1}
 800ddc2:	4694      	mov	ip, r2
 800ddc4:	40f9      	lsrs	r1, r7
 800ddc6:	42b5      	cmp	r5, r6
 800ddc8:	d816      	bhi.n	800ddf8 <rshift+0x8a>
 800ddca:	9b00      	ldr	r3, [sp, #0]
 800ddcc:	2600      	movs	r6, #0
 800ddce:	3301      	adds	r3, #1
 800ddd0:	429d      	cmp	r5, r3
 800ddd2:	d303      	bcc.n	800dddc <rshift+0x6e>
 800ddd4:	9b02      	ldr	r3, [sp, #8]
 800ddd6:	1ae4      	subs	r4, r4, r3
 800ddd8:	00a6      	lsls	r6, r4, #2
 800ddda:	3e04      	subs	r6, #4
 800dddc:	1996      	adds	r6, r2, r6
 800ddde:	6031      	str	r1, [r6, #0]
 800dde0:	2900      	cmp	r1, #0
 800dde2:	d000      	beq.n	800dde6 <rshift+0x78>
 800dde4:	3604      	adds	r6, #4
 800dde6:	1ab1      	subs	r1, r6, r2
 800dde8:	1089      	asrs	r1, r1, #2
 800ddea:	6101      	str	r1, [r0, #16]
 800ddec:	4296      	cmp	r6, r2
 800ddee:	d101      	bne.n	800ddf4 <rshift+0x86>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	6143      	str	r3, [r0, #20]
 800ddf4:	b005      	add	sp, #20
 800ddf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddf8:	6837      	ldr	r7, [r6, #0]
 800ddfa:	9b03      	ldr	r3, [sp, #12]
 800ddfc:	409f      	lsls	r7, r3
 800ddfe:	430f      	orrs	r7, r1
 800de00:	4661      	mov	r1, ip
 800de02:	c180      	stmia	r1!, {r7}
 800de04:	468c      	mov	ip, r1
 800de06:	9b01      	ldr	r3, [sp, #4]
 800de08:	ce02      	ldmia	r6!, {r1}
 800de0a:	40d9      	lsrs	r1, r3
 800de0c:	e7db      	b.n	800ddc6 <rshift+0x58>
 800de0e:	c980      	ldmia	r1!, {r7}
 800de10:	c680      	stmia	r6!, {r7}
 800de12:	e7c3      	b.n	800dd9c <rshift+0x2e>

0800de14 <__hexdig_fun>:
 800de14:	0002      	movs	r2, r0
 800de16:	3a30      	subs	r2, #48	@ 0x30
 800de18:	0003      	movs	r3, r0
 800de1a:	2a09      	cmp	r2, #9
 800de1c:	d802      	bhi.n	800de24 <__hexdig_fun+0x10>
 800de1e:	3b20      	subs	r3, #32
 800de20:	b2d8      	uxtb	r0, r3
 800de22:	4770      	bx	lr
 800de24:	0002      	movs	r2, r0
 800de26:	3a61      	subs	r2, #97	@ 0x61
 800de28:	2a05      	cmp	r2, #5
 800de2a:	d801      	bhi.n	800de30 <__hexdig_fun+0x1c>
 800de2c:	3b47      	subs	r3, #71	@ 0x47
 800de2e:	e7f7      	b.n	800de20 <__hexdig_fun+0xc>
 800de30:	001a      	movs	r2, r3
 800de32:	3a41      	subs	r2, #65	@ 0x41
 800de34:	2000      	movs	r0, #0
 800de36:	2a05      	cmp	r2, #5
 800de38:	d8f3      	bhi.n	800de22 <__hexdig_fun+0xe>
 800de3a:	3b27      	subs	r3, #39	@ 0x27
 800de3c:	e7f0      	b.n	800de20 <__hexdig_fun+0xc>
	...

0800de40 <__gethex>:
 800de40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de42:	b089      	sub	sp, #36	@ 0x24
 800de44:	9307      	str	r3, [sp, #28]
 800de46:	680b      	ldr	r3, [r1, #0]
 800de48:	9201      	str	r2, [sp, #4]
 800de4a:	9003      	str	r0, [sp, #12]
 800de4c:	9106      	str	r1, [sp, #24]
 800de4e:	1c9a      	adds	r2, r3, #2
 800de50:	0011      	movs	r1, r2
 800de52:	3201      	adds	r2, #1
 800de54:	1e50      	subs	r0, r2, #1
 800de56:	7800      	ldrb	r0, [r0, #0]
 800de58:	2830      	cmp	r0, #48	@ 0x30
 800de5a:	d0f9      	beq.n	800de50 <__gethex+0x10>
 800de5c:	1acb      	subs	r3, r1, r3
 800de5e:	3b02      	subs	r3, #2
 800de60:	9305      	str	r3, [sp, #20]
 800de62:	9100      	str	r1, [sp, #0]
 800de64:	f7ff ffd6 	bl	800de14 <__hexdig_fun>
 800de68:	2300      	movs	r3, #0
 800de6a:	001d      	movs	r5, r3
 800de6c:	9302      	str	r3, [sp, #8]
 800de6e:	4298      	cmp	r0, r3
 800de70:	d11e      	bne.n	800deb0 <__gethex+0x70>
 800de72:	2201      	movs	r2, #1
 800de74:	49a6      	ldr	r1, [pc, #664]	@ (800e110 <__gethex+0x2d0>)
 800de76:	9800      	ldr	r0, [sp, #0]
 800de78:	f7ff fefa 	bl	800dc70 <strncmp>
 800de7c:	0007      	movs	r7, r0
 800de7e:	42a8      	cmp	r0, r5
 800de80:	d000      	beq.n	800de84 <__gethex+0x44>
 800de82:	e06a      	b.n	800df5a <__gethex+0x11a>
 800de84:	9b00      	ldr	r3, [sp, #0]
 800de86:	7858      	ldrb	r0, [r3, #1]
 800de88:	1c5c      	adds	r4, r3, #1
 800de8a:	f7ff ffc3 	bl	800de14 <__hexdig_fun>
 800de8e:	2301      	movs	r3, #1
 800de90:	9302      	str	r3, [sp, #8]
 800de92:	42a8      	cmp	r0, r5
 800de94:	d02f      	beq.n	800def6 <__gethex+0xb6>
 800de96:	9400      	str	r4, [sp, #0]
 800de98:	9b00      	ldr	r3, [sp, #0]
 800de9a:	7818      	ldrb	r0, [r3, #0]
 800de9c:	2830      	cmp	r0, #48	@ 0x30
 800de9e:	d009      	beq.n	800deb4 <__gethex+0x74>
 800dea0:	f7ff ffb8 	bl	800de14 <__hexdig_fun>
 800dea4:	4242      	negs	r2, r0
 800dea6:	4142      	adcs	r2, r0
 800dea8:	2301      	movs	r3, #1
 800deaa:	0025      	movs	r5, r4
 800deac:	9202      	str	r2, [sp, #8]
 800deae:	9305      	str	r3, [sp, #20]
 800deb0:	9c00      	ldr	r4, [sp, #0]
 800deb2:	e004      	b.n	800debe <__gethex+0x7e>
 800deb4:	9b00      	ldr	r3, [sp, #0]
 800deb6:	3301      	adds	r3, #1
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	e7ed      	b.n	800de98 <__gethex+0x58>
 800debc:	3401      	adds	r4, #1
 800debe:	7820      	ldrb	r0, [r4, #0]
 800dec0:	f7ff ffa8 	bl	800de14 <__hexdig_fun>
 800dec4:	1e07      	subs	r7, r0, #0
 800dec6:	d1f9      	bne.n	800debc <__gethex+0x7c>
 800dec8:	2201      	movs	r2, #1
 800deca:	0020      	movs	r0, r4
 800decc:	4990      	ldr	r1, [pc, #576]	@ (800e110 <__gethex+0x2d0>)
 800dece:	f7ff fecf 	bl	800dc70 <strncmp>
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d10d      	bne.n	800def2 <__gethex+0xb2>
 800ded6:	2d00      	cmp	r5, #0
 800ded8:	d106      	bne.n	800dee8 <__gethex+0xa8>
 800deda:	3401      	adds	r4, #1
 800dedc:	0025      	movs	r5, r4
 800dede:	7820      	ldrb	r0, [r4, #0]
 800dee0:	f7ff ff98 	bl	800de14 <__hexdig_fun>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	d102      	bne.n	800deee <__gethex+0xae>
 800dee8:	1b2d      	subs	r5, r5, r4
 800deea:	00af      	lsls	r7, r5, #2
 800deec:	e003      	b.n	800def6 <__gethex+0xb6>
 800deee:	3401      	adds	r4, #1
 800def0:	e7f5      	b.n	800dede <__gethex+0x9e>
 800def2:	2d00      	cmp	r5, #0
 800def4:	d1f8      	bne.n	800dee8 <__gethex+0xa8>
 800def6:	2220      	movs	r2, #32
 800def8:	7823      	ldrb	r3, [r4, #0]
 800defa:	0026      	movs	r6, r4
 800defc:	4393      	bics	r3, r2
 800defe:	2b50      	cmp	r3, #80	@ 0x50
 800df00:	d11d      	bne.n	800df3e <__gethex+0xfe>
 800df02:	7863      	ldrb	r3, [r4, #1]
 800df04:	2b2b      	cmp	r3, #43	@ 0x2b
 800df06:	d02d      	beq.n	800df64 <__gethex+0x124>
 800df08:	2b2d      	cmp	r3, #45	@ 0x2d
 800df0a:	d02f      	beq.n	800df6c <__gethex+0x12c>
 800df0c:	2300      	movs	r3, #0
 800df0e:	1c66      	adds	r6, r4, #1
 800df10:	9304      	str	r3, [sp, #16]
 800df12:	7830      	ldrb	r0, [r6, #0]
 800df14:	f7ff ff7e 	bl	800de14 <__hexdig_fun>
 800df18:	1e43      	subs	r3, r0, #1
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	0005      	movs	r5, r0
 800df1e:	2b18      	cmp	r3, #24
 800df20:	d82a      	bhi.n	800df78 <__gethex+0x138>
 800df22:	7870      	ldrb	r0, [r6, #1]
 800df24:	f7ff ff76 	bl	800de14 <__hexdig_fun>
 800df28:	1e43      	subs	r3, r0, #1
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	3601      	adds	r6, #1
 800df2e:	3d10      	subs	r5, #16
 800df30:	2b18      	cmp	r3, #24
 800df32:	d91d      	bls.n	800df70 <__gethex+0x130>
 800df34:	9b04      	ldr	r3, [sp, #16]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d000      	beq.n	800df3c <__gethex+0xfc>
 800df3a:	426d      	negs	r5, r5
 800df3c:	197f      	adds	r7, r7, r5
 800df3e:	9b06      	ldr	r3, [sp, #24]
 800df40:	601e      	str	r6, [r3, #0]
 800df42:	9b02      	ldr	r3, [sp, #8]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d019      	beq.n	800df7c <__gethex+0x13c>
 800df48:	9b05      	ldr	r3, [sp, #20]
 800df4a:	2606      	movs	r6, #6
 800df4c:	425a      	negs	r2, r3
 800df4e:	4153      	adcs	r3, r2
 800df50:	425b      	negs	r3, r3
 800df52:	401e      	ands	r6, r3
 800df54:	0030      	movs	r0, r6
 800df56:	b009      	add	sp, #36	@ 0x24
 800df58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df5a:	2301      	movs	r3, #1
 800df5c:	2700      	movs	r7, #0
 800df5e:	9c00      	ldr	r4, [sp, #0]
 800df60:	9302      	str	r3, [sp, #8]
 800df62:	e7c8      	b.n	800def6 <__gethex+0xb6>
 800df64:	2300      	movs	r3, #0
 800df66:	9304      	str	r3, [sp, #16]
 800df68:	1ca6      	adds	r6, r4, #2
 800df6a:	e7d2      	b.n	800df12 <__gethex+0xd2>
 800df6c:	2301      	movs	r3, #1
 800df6e:	e7fa      	b.n	800df66 <__gethex+0x126>
 800df70:	230a      	movs	r3, #10
 800df72:	435d      	muls	r5, r3
 800df74:	182d      	adds	r5, r5, r0
 800df76:	e7d4      	b.n	800df22 <__gethex+0xe2>
 800df78:	0026      	movs	r6, r4
 800df7a:	e7e0      	b.n	800df3e <__gethex+0xfe>
 800df7c:	9b00      	ldr	r3, [sp, #0]
 800df7e:	9902      	ldr	r1, [sp, #8]
 800df80:	1ae3      	subs	r3, r4, r3
 800df82:	3b01      	subs	r3, #1
 800df84:	2b07      	cmp	r3, #7
 800df86:	dc0a      	bgt.n	800df9e <__gethex+0x15e>
 800df88:	9803      	ldr	r0, [sp, #12]
 800df8a:	f7fe f8e5 	bl	800c158 <_Balloc>
 800df8e:	1e05      	subs	r5, r0, #0
 800df90:	d108      	bne.n	800dfa4 <__gethex+0x164>
 800df92:	002a      	movs	r2, r5
 800df94:	21e4      	movs	r1, #228	@ 0xe4
 800df96:	4b5f      	ldr	r3, [pc, #380]	@ (800e114 <__gethex+0x2d4>)
 800df98:	485f      	ldr	r0, [pc, #380]	@ (800e118 <__gethex+0x2d8>)
 800df9a:	f7ff fe9d 	bl	800dcd8 <__assert_func>
 800df9e:	3101      	adds	r1, #1
 800dfa0:	105b      	asrs	r3, r3, #1
 800dfa2:	e7ef      	b.n	800df84 <__gethex+0x144>
 800dfa4:	0003      	movs	r3, r0
 800dfa6:	3314      	adds	r3, #20
 800dfa8:	9302      	str	r3, [sp, #8]
 800dfaa:	9305      	str	r3, [sp, #20]
 800dfac:	2300      	movs	r3, #0
 800dfae:	001e      	movs	r6, r3
 800dfb0:	9304      	str	r3, [sp, #16]
 800dfb2:	9b00      	ldr	r3, [sp, #0]
 800dfb4:	42a3      	cmp	r3, r4
 800dfb6:	d338      	bcc.n	800e02a <__gethex+0x1ea>
 800dfb8:	9c05      	ldr	r4, [sp, #20]
 800dfba:	9b02      	ldr	r3, [sp, #8]
 800dfbc:	c440      	stmia	r4!, {r6}
 800dfbe:	1ae4      	subs	r4, r4, r3
 800dfc0:	10a4      	asrs	r4, r4, #2
 800dfc2:	0030      	movs	r0, r6
 800dfc4:	612c      	str	r4, [r5, #16]
 800dfc6:	f7fe f9bf 	bl	800c348 <__hi0bits>
 800dfca:	9b01      	ldr	r3, [sp, #4]
 800dfcc:	0164      	lsls	r4, r4, #5
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	1a26      	subs	r6, r4, r0
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	429e      	cmp	r6, r3
 800dfd6:	dd52      	ble.n	800e07e <__gethex+0x23e>
 800dfd8:	1af6      	subs	r6, r6, r3
 800dfda:	0031      	movs	r1, r6
 800dfdc:	0028      	movs	r0, r5
 800dfde:	f7fe fd62 	bl	800caa6 <__any_on>
 800dfe2:	1e04      	subs	r4, r0, #0
 800dfe4:	d00f      	beq.n	800e006 <__gethex+0x1c6>
 800dfe6:	2401      	movs	r4, #1
 800dfe8:	231f      	movs	r3, #31
 800dfea:	0020      	movs	r0, r4
 800dfec:	1e72      	subs	r2, r6, #1
 800dfee:	4013      	ands	r3, r2
 800dff0:	4098      	lsls	r0, r3
 800dff2:	0003      	movs	r3, r0
 800dff4:	1151      	asrs	r1, r2, #5
 800dff6:	9802      	ldr	r0, [sp, #8]
 800dff8:	0089      	lsls	r1, r1, #2
 800dffa:	5809      	ldr	r1, [r1, r0]
 800dffc:	4219      	tst	r1, r3
 800dffe:	d002      	beq.n	800e006 <__gethex+0x1c6>
 800e000:	42a2      	cmp	r2, r4
 800e002:	dc34      	bgt.n	800e06e <__gethex+0x22e>
 800e004:	2402      	movs	r4, #2
 800e006:	0031      	movs	r1, r6
 800e008:	0028      	movs	r0, r5
 800e00a:	f7ff feb0 	bl	800dd6e <rshift>
 800e00e:	19bf      	adds	r7, r7, r6
 800e010:	9b01      	ldr	r3, [sp, #4]
 800e012:	689b      	ldr	r3, [r3, #8]
 800e014:	42bb      	cmp	r3, r7
 800e016:	da42      	bge.n	800e09e <__gethex+0x25e>
 800e018:	0029      	movs	r1, r5
 800e01a:	9803      	ldr	r0, [sp, #12]
 800e01c:	f7fe f8e0 	bl	800c1e0 <_Bfree>
 800e020:	2300      	movs	r3, #0
 800e022:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e024:	26a3      	movs	r6, #163	@ 0xa3
 800e026:	6013      	str	r3, [r2, #0]
 800e028:	e794      	b.n	800df54 <__gethex+0x114>
 800e02a:	3c01      	subs	r4, #1
 800e02c:	7823      	ldrb	r3, [r4, #0]
 800e02e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e030:	d012      	beq.n	800e058 <__gethex+0x218>
 800e032:	9b04      	ldr	r3, [sp, #16]
 800e034:	2b20      	cmp	r3, #32
 800e036:	d104      	bne.n	800e042 <__gethex+0x202>
 800e038:	9b05      	ldr	r3, [sp, #20]
 800e03a:	c340      	stmia	r3!, {r6}
 800e03c:	2600      	movs	r6, #0
 800e03e:	9305      	str	r3, [sp, #20]
 800e040:	9604      	str	r6, [sp, #16]
 800e042:	7820      	ldrb	r0, [r4, #0]
 800e044:	f7ff fee6 	bl	800de14 <__hexdig_fun>
 800e048:	230f      	movs	r3, #15
 800e04a:	4018      	ands	r0, r3
 800e04c:	9b04      	ldr	r3, [sp, #16]
 800e04e:	4098      	lsls	r0, r3
 800e050:	3304      	adds	r3, #4
 800e052:	4306      	orrs	r6, r0
 800e054:	9304      	str	r3, [sp, #16]
 800e056:	e7ac      	b.n	800dfb2 <__gethex+0x172>
 800e058:	9b00      	ldr	r3, [sp, #0]
 800e05a:	42a3      	cmp	r3, r4
 800e05c:	d8e9      	bhi.n	800e032 <__gethex+0x1f2>
 800e05e:	2201      	movs	r2, #1
 800e060:	0020      	movs	r0, r4
 800e062:	492b      	ldr	r1, [pc, #172]	@ (800e110 <__gethex+0x2d0>)
 800e064:	f7ff fe04 	bl	800dc70 <strncmp>
 800e068:	2800      	cmp	r0, #0
 800e06a:	d1e2      	bne.n	800e032 <__gethex+0x1f2>
 800e06c:	e7a1      	b.n	800dfb2 <__gethex+0x172>
 800e06e:	0028      	movs	r0, r5
 800e070:	1eb1      	subs	r1, r6, #2
 800e072:	f7fe fd18 	bl	800caa6 <__any_on>
 800e076:	2800      	cmp	r0, #0
 800e078:	d0c4      	beq.n	800e004 <__gethex+0x1c4>
 800e07a:	2403      	movs	r4, #3
 800e07c:	e7c3      	b.n	800e006 <__gethex+0x1c6>
 800e07e:	9b00      	ldr	r3, [sp, #0]
 800e080:	2400      	movs	r4, #0
 800e082:	429e      	cmp	r6, r3
 800e084:	dac4      	bge.n	800e010 <__gethex+0x1d0>
 800e086:	1b9e      	subs	r6, r3, r6
 800e088:	0029      	movs	r1, r5
 800e08a:	0032      	movs	r2, r6
 800e08c:	9803      	ldr	r0, [sp, #12]
 800e08e:	f7fe fad1 	bl	800c634 <__lshift>
 800e092:	0003      	movs	r3, r0
 800e094:	3314      	adds	r3, #20
 800e096:	0005      	movs	r5, r0
 800e098:	1bbf      	subs	r7, r7, r6
 800e09a:	9302      	str	r3, [sp, #8]
 800e09c:	e7b8      	b.n	800e010 <__gethex+0x1d0>
 800e09e:	9b01      	ldr	r3, [sp, #4]
 800e0a0:	685e      	ldr	r6, [r3, #4]
 800e0a2:	42be      	cmp	r6, r7
 800e0a4:	dd6f      	ble.n	800e186 <__gethex+0x346>
 800e0a6:	9b00      	ldr	r3, [sp, #0]
 800e0a8:	1bf6      	subs	r6, r6, r7
 800e0aa:	42b3      	cmp	r3, r6
 800e0ac:	dc36      	bgt.n	800e11c <__gethex+0x2dc>
 800e0ae:	9b01      	ldr	r3, [sp, #4]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	2b02      	cmp	r3, #2
 800e0b4:	d024      	beq.n	800e100 <__gethex+0x2c0>
 800e0b6:	2b03      	cmp	r3, #3
 800e0b8:	d026      	beq.n	800e108 <__gethex+0x2c8>
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d117      	bne.n	800e0ee <__gethex+0x2ae>
 800e0be:	9b00      	ldr	r3, [sp, #0]
 800e0c0:	42b3      	cmp	r3, r6
 800e0c2:	d114      	bne.n	800e0ee <__gethex+0x2ae>
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d10b      	bne.n	800e0e0 <__gethex+0x2a0>
 800e0c8:	9b01      	ldr	r3, [sp, #4]
 800e0ca:	9a07      	ldr	r2, [sp, #28]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	2662      	movs	r6, #98	@ 0x62
 800e0d0:	6013      	str	r3, [r2, #0]
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	9a02      	ldr	r2, [sp, #8]
 800e0d6:	612b      	str	r3, [r5, #16]
 800e0d8:	6013      	str	r3, [r2, #0]
 800e0da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0dc:	601d      	str	r5, [r3, #0]
 800e0de:	e739      	b.n	800df54 <__gethex+0x114>
 800e0e0:	9900      	ldr	r1, [sp, #0]
 800e0e2:	0028      	movs	r0, r5
 800e0e4:	3901      	subs	r1, #1
 800e0e6:	f7fe fcde 	bl	800caa6 <__any_on>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d1ec      	bne.n	800e0c8 <__gethex+0x288>
 800e0ee:	0029      	movs	r1, r5
 800e0f0:	9803      	ldr	r0, [sp, #12]
 800e0f2:	f7fe f875 	bl	800c1e0 <_Bfree>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0fa:	2650      	movs	r6, #80	@ 0x50
 800e0fc:	6013      	str	r3, [r2, #0]
 800e0fe:	e729      	b.n	800df54 <__gethex+0x114>
 800e100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e102:	2b00      	cmp	r3, #0
 800e104:	d1f3      	bne.n	800e0ee <__gethex+0x2ae>
 800e106:	e7df      	b.n	800e0c8 <__gethex+0x288>
 800e108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d1dc      	bne.n	800e0c8 <__gethex+0x288>
 800e10e:	e7ee      	b.n	800e0ee <__gethex+0x2ae>
 800e110:	0800f010 	.word	0x0800f010
 800e114:	0800eea9 	.word	0x0800eea9
 800e118:	0800f1be 	.word	0x0800f1be
 800e11c:	1e77      	subs	r7, r6, #1
 800e11e:	2c00      	cmp	r4, #0
 800e120:	d12f      	bne.n	800e182 <__gethex+0x342>
 800e122:	2f00      	cmp	r7, #0
 800e124:	d004      	beq.n	800e130 <__gethex+0x2f0>
 800e126:	0039      	movs	r1, r7
 800e128:	0028      	movs	r0, r5
 800e12a:	f7fe fcbc 	bl	800caa6 <__any_on>
 800e12e:	0004      	movs	r4, r0
 800e130:	231f      	movs	r3, #31
 800e132:	117a      	asrs	r2, r7, #5
 800e134:	401f      	ands	r7, r3
 800e136:	3b1e      	subs	r3, #30
 800e138:	40bb      	lsls	r3, r7
 800e13a:	9902      	ldr	r1, [sp, #8]
 800e13c:	0092      	lsls	r2, r2, #2
 800e13e:	5852      	ldr	r2, [r2, r1]
 800e140:	421a      	tst	r2, r3
 800e142:	d001      	beq.n	800e148 <__gethex+0x308>
 800e144:	2302      	movs	r3, #2
 800e146:	431c      	orrs	r4, r3
 800e148:	9b00      	ldr	r3, [sp, #0]
 800e14a:	0031      	movs	r1, r6
 800e14c:	1b9b      	subs	r3, r3, r6
 800e14e:	2602      	movs	r6, #2
 800e150:	0028      	movs	r0, r5
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	f7ff fe0b 	bl	800dd6e <rshift>
 800e158:	9b01      	ldr	r3, [sp, #4]
 800e15a:	685f      	ldr	r7, [r3, #4]
 800e15c:	2c00      	cmp	r4, #0
 800e15e:	d03f      	beq.n	800e1e0 <__gethex+0x3a0>
 800e160:	9b01      	ldr	r3, [sp, #4]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	2b02      	cmp	r3, #2
 800e166:	d010      	beq.n	800e18a <__gethex+0x34a>
 800e168:	2b03      	cmp	r3, #3
 800e16a:	d012      	beq.n	800e192 <__gethex+0x352>
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d106      	bne.n	800e17e <__gethex+0x33e>
 800e170:	07a2      	lsls	r2, r4, #30
 800e172:	d504      	bpl.n	800e17e <__gethex+0x33e>
 800e174:	9a02      	ldr	r2, [sp, #8]
 800e176:	6812      	ldr	r2, [r2, #0]
 800e178:	4314      	orrs	r4, r2
 800e17a:	421c      	tst	r4, r3
 800e17c:	d10c      	bne.n	800e198 <__gethex+0x358>
 800e17e:	2310      	movs	r3, #16
 800e180:	e02d      	b.n	800e1de <__gethex+0x39e>
 800e182:	2401      	movs	r4, #1
 800e184:	e7d4      	b.n	800e130 <__gethex+0x2f0>
 800e186:	2601      	movs	r6, #1
 800e188:	e7e8      	b.n	800e15c <__gethex+0x31c>
 800e18a:	2301      	movs	r3, #1
 800e18c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e18e:	1a9b      	subs	r3, r3, r2
 800e190:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e194:	2b00      	cmp	r3, #0
 800e196:	d0f2      	beq.n	800e17e <__gethex+0x33e>
 800e198:	692b      	ldr	r3, [r5, #16]
 800e19a:	2000      	movs	r0, #0
 800e19c:	9302      	str	r3, [sp, #8]
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	9304      	str	r3, [sp, #16]
 800e1a2:	002b      	movs	r3, r5
 800e1a4:	9a04      	ldr	r2, [sp, #16]
 800e1a6:	3314      	adds	r3, #20
 800e1a8:	1899      	adds	r1, r3, r2
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	1c54      	adds	r4, r2, #1
 800e1ae:	d01c      	beq.n	800e1ea <__gethex+0x3aa>
 800e1b0:	3201      	adds	r2, #1
 800e1b2:	601a      	str	r2, [r3, #0]
 800e1b4:	002b      	movs	r3, r5
 800e1b6:	3314      	adds	r3, #20
 800e1b8:	2e02      	cmp	r6, #2
 800e1ba:	d13f      	bne.n	800e23c <__gethex+0x3fc>
 800e1bc:	9a01      	ldr	r2, [sp, #4]
 800e1be:	9900      	ldr	r1, [sp, #0]
 800e1c0:	6812      	ldr	r2, [r2, #0]
 800e1c2:	3a01      	subs	r2, #1
 800e1c4:	428a      	cmp	r2, r1
 800e1c6:	d109      	bne.n	800e1dc <__gethex+0x39c>
 800e1c8:	000a      	movs	r2, r1
 800e1ca:	201f      	movs	r0, #31
 800e1cc:	4010      	ands	r0, r2
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	4082      	lsls	r2, r0
 800e1d2:	1149      	asrs	r1, r1, #5
 800e1d4:	0089      	lsls	r1, r1, #2
 800e1d6:	58cb      	ldr	r3, [r1, r3]
 800e1d8:	4213      	tst	r3, r2
 800e1da:	d13d      	bne.n	800e258 <__gethex+0x418>
 800e1dc:	2320      	movs	r3, #32
 800e1de:	431e      	orrs	r6, r3
 800e1e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1e2:	601d      	str	r5, [r3, #0]
 800e1e4:	9b07      	ldr	r3, [sp, #28]
 800e1e6:	601f      	str	r7, [r3, #0]
 800e1e8:	e6b4      	b.n	800df54 <__gethex+0x114>
 800e1ea:	c301      	stmia	r3!, {r0}
 800e1ec:	4299      	cmp	r1, r3
 800e1ee:	d8dc      	bhi.n	800e1aa <__gethex+0x36a>
 800e1f0:	68ab      	ldr	r3, [r5, #8]
 800e1f2:	9a02      	ldr	r2, [sp, #8]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	db18      	blt.n	800e22a <__gethex+0x3ea>
 800e1f8:	6869      	ldr	r1, [r5, #4]
 800e1fa:	9803      	ldr	r0, [sp, #12]
 800e1fc:	3101      	adds	r1, #1
 800e1fe:	f7fd ffab 	bl	800c158 <_Balloc>
 800e202:	1e04      	subs	r4, r0, #0
 800e204:	d104      	bne.n	800e210 <__gethex+0x3d0>
 800e206:	0022      	movs	r2, r4
 800e208:	2184      	movs	r1, #132	@ 0x84
 800e20a:	4b1d      	ldr	r3, [pc, #116]	@ (800e280 <__gethex+0x440>)
 800e20c:	481d      	ldr	r0, [pc, #116]	@ (800e284 <__gethex+0x444>)
 800e20e:	e6c4      	b.n	800df9a <__gethex+0x15a>
 800e210:	0029      	movs	r1, r5
 800e212:	692a      	ldr	r2, [r5, #16]
 800e214:	310c      	adds	r1, #12
 800e216:	3202      	adds	r2, #2
 800e218:	0092      	lsls	r2, r2, #2
 800e21a:	300c      	adds	r0, #12
 800e21c:	f7ff fd4c 	bl	800dcb8 <memcpy>
 800e220:	0029      	movs	r1, r5
 800e222:	9803      	ldr	r0, [sp, #12]
 800e224:	f7fd ffdc 	bl	800c1e0 <_Bfree>
 800e228:	0025      	movs	r5, r4
 800e22a:	692b      	ldr	r3, [r5, #16]
 800e22c:	1c5a      	adds	r2, r3, #1
 800e22e:	612a      	str	r2, [r5, #16]
 800e230:	2201      	movs	r2, #1
 800e232:	3304      	adds	r3, #4
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	18eb      	adds	r3, r5, r3
 800e238:	605a      	str	r2, [r3, #4]
 800e23a:	e7bb      	b.n	800e1b4 <__gethex+0x374>
 800e23c:	692a      	ldr	r2, [r5, #16]
 800e23e:	9902      	ldr	r1, [sp, #8]
 800e240:	428a      	cmp	r2, r1
 800e242:	dd0b      	ble.n	800e25c <__gethex+0x41c>
 800e244:	2101      	movs	r1, #1
 800e246:	0028      	movs	r0, r5
 800e248:	f7ff fd91 	bl	800dd6e <rshift>
 800e24c:	9b01      	ldr	r3, [sp, #4]
 800e24e:	3701      	adds	r7, #1
 800e250:	689b      	ldr	r3, [r3, #8]
 800e252:	42bb      	cmp	r3, r7
 800e254:	da00      	bge.n	800e258 <__gethex+0x418>
 800e256:	e6df      	b.n	800e018 <__gethex+0x1d8>
 800e258:	2601      	movs	r6, #1
 800e25a:	e7bf      	b.n	800e1dc <__gethex+0x39c>
 800e25c:	221f      	movs	r2, #31
 800e25e:	9c00      	ldr	r4, [sp, #0]
 800e260:	9900      	ldr	r1, [sp, #0]
 800e262:	4014      	ands	r4, r2
 800e264:	4211      	tst	r1, r2
 800e266:	d0f7      	beq.n	800e258 <__gethex+0x418>
 800e268:	9a04      	ldr	r2, [sp, #16]
 800e26a:	189b      	adds	r3, r3, r2
 800e26c:	3b04      	subs	r3, #4
 800e26e:	6818      	ldr	r0, [r3, #0]
 800e270:	f7fe f86a 	bl	800c348 <__hi0bits>
 800e274:	2320      	movs	r3, #32
 800e276:	1b1b      	subs	r3, r3, r4
 800e278:	4298      	cmp	r0, r3
 800e27a:	dbe3      	blt.n	800e244 <__gethex+0x404>
 800e27c:	e7ec      	b.n	800e258 <__gethex+0x418>
 800e27e:	46c0      	nop			@ (mov r8, r8)
 800e280:	0800eea9 	.word	0x0800eea9
 800e284:	0800f1be 	.word	0x0800f1be

0800e288 <L_shift>:
 800e288:	2308      	movs	r3, #8
 800e28a:	b570      	push	{r4, r5, r6, lr}
 800e28c:	2520      	movs	r5, #32
 800e28e:	1a9a      	subs	r2, r3, r2
 800e290:	0092      	lsls	r2, r2, #2
 800e292:	1aad      	subs	r5, r5, r2
 800e294:	6843      	ldr	r3, [r0, #4]
 800e296:	6804      	ldr	r4, [r0, #0]
 800e298:	001e      	movs	r6, r3
 800e29a:	40ae      	lsls	r6, r5
 800e29c:	40d3      	lsrs	r3, r2
 800e29e:	4334      	orrs	r4, r6
 800e2a0:	6004      	str	r4, [r0, #0]
 800e2a2:	6043      	str	r3, [r0, #4]
 800e2a4:	3004      	adds	r0, #4
 800e2a6:	4288      	cmp	r0, r1
 800e2a8:	d3f4      	bcc.n	800e294 <L_shift+0xc>
 800e2aa:	bd70      	pop	{r4, r5, r6, pc}

0800e2ac <__match>:
 800e2ac:	b530      	push	{r4, r5, lr}
 800e2ae:	6803      	ldr	r3, [r0, #0]
 800e2b0:	780c      	ldrb	r4, [r1, #0]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	2c00      	cmp	r4, #0
 800e2b6:	d102      	bne.n	800e2be <__match+0x12>
 800e2b8:	6003      	str	r3, [r0, #0]
 800e2ba:	2001      	movs	r0, #1
 800e2bc:	bd30      	pop	{r4, r5, pc}
 800e2be:	781a      	ldrb	r2, [r3, #0]
 800e2c0:	0015      	movs	r5, r2
 800e2c2:	3d41      	subs	r5, #65	@ 0x41
 800e2c4:	2d19      	cmp	r5, #25
 800e2c6:	d800      	bhi.n	800e2ca <__match+0x1e>
 800e2c8:	3220      	adds	r2, #32
 800e2ca:	3101      	adds	r1, #1
 800e2cc:	42a2      	cmp	r2, r4
 800e2ce:	d0ef      	beq.n	800e2b0 <__match+0x4>
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	e7f3      	b.n	800e2bc <__match+0x10>

0800e2d4 <__hexnan>:
 800e2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2d6:	680b      	ldr	r3, [r1, #0]
 800e2d8:	b08b      	sub	sp, #44	@ 0x2c
 800e2da:	9201      	str	r2, [sp, #4]
 800e2dc:	9901      	ldr	r1, [sp, #4]
 800e2de:	115a      	asrs	r2, r3, #5
 800e2e0:	0092      	lsls	r2, r2, #2
 800e2e2:	188a      	adds	r2, r1, r2
 800e2e4:	9202      	str	r2, [sp, #8]
 800e2e6:	0019      	movs	r1, r3
 800e2e8:	221f      	movs	r2, #31
 800e2ea:	4011      	ands	r1, r2
 800e2ec:	9008      	str	r0, [sp, #32]
 800e2ee:	9106      	str	r1, [sp, #24]
 800e2f0:	4213      	tst	r3, r2
 800e2f2:	d002      	beq.n	800e2fa <__hexnan+0x26>
 800e2f4:	9b02      	ldr	r3, [sp, #8]
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	9302      	str	r3, [sp, #8]
 800e2fa:	9b02      	ldr	r3, [sp, #8]
 800e2fc:	2500      	movs	r5, #0
 800e2fe:	1f1f      	subs	r7, r3, #4
 800e300:	003e      	movs	r6, r7
 800e302:	003c      	movs	r4, r7
 800e304:	9b08      	ldr	r3, [sp, #32]
 800e306:	603d      	str	r5, [r7, #0]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	9507      	str	r5, [sp, #28]
 800e30c:	9305      	str	r3, [sp, #20]
 800e30e:	9503      	str	r5, [sp, #12]
 800e310:	9b05      	ldr	r3, [sp, #20]
 800e312:	3301      	adds	r3, #1
 800e314:	9309      	str	r3, [sp, #36]	@ 0x24
 800e316:	9b05      	ldr	r3, [sp, #20]
 800e318:	785b      	ldrb	r3, [r3, #1]
 800e31a:	9304      	str	r3, [sp, #16]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d028      	beq.n	800e372 <__hexnan+0x9e>
 800e320:	9804      	ldr	r0, [sp, #16]
 800e322:	f7ff fd77 	bl	800de14 <__hexdig_fun>
 800e326:	2800      	cmp	r0, #0
 800e328:	d155      	bne.n	800e3d6 <__hexnan+0x102>
 800e32a:	9b04      	ldr	r3, [sp, #16]
 800e32c:	2b20      	cmp	r3, #32
 800e32e:	d819      	bhi.n	800e364 <__hexnan+0x90>
 800e330:	9b03      	ldr	r3, [sp, #12]
 800e332:	9a07      	ldr	r2, [sp, #28]
 800e334:	4293      	cmp	r3, r2
 800e336:	dd12      	ble.n	800e35e <__hexnan+0x8a>
 800e338:	42b4      	cmp	r4, r6
 800e33a:	d206      	bcs.n	800e34a <__hexnan+0x76>
 800e33c:	2d07      	cmp	r5, #7
 800e33e:	dc04      	bgt.n	800e34a <__hexnan+0x76>
 800e340:	002a      	movs	r2, r5
 800e342:	0031      	movs	r1, r6
 800e344:	0020      	movs	r0, r4
 800e346:	f7ff ff9f 	bl	800e288 <L_shift>
 800e34a:	9b01      	ldr	r3, [sp, #4]
 800e34c:	2508      	movs	r5, #8
 800e34e:	429c      	cmp	r4, r3
 800e350:	d905      	bls.n	800e35e <__hexnan+0x8a>
 800e352:	1f26      	subs	r6, r4, #4
 800e354:	2500      	movs	r5, #0
 800e356:	0034      	movs	r4, r6
 800e358:	9b03      	ldr	r3, [sp, #12]
 800e35a:	6035      	str	r5, [r6, #0]
 800e35c:	9307      	str	r3, [sp, #28]
 800e35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e360:	9305      	str	r3, [sp, #20]
 800e362:	e7d5      	b.n	800e310 <__hexnan+0x3c>
 800e364:	9b04      	ldr	r3, [sp, #16]
 800e366:	2b29      	cmp	r3, #41	@ 0x29
 800e368:	d15a      	bne.n	800e420 <__hexnan+0x14c>
 800e36a:	9b05      	ldr	r3, [sp, #20]
 800e36c:	9a08      	ldr	r2, [sp, #32]
 800e36e:	3302      	adds	r3, #2
 800e370:	6013      	str	r3, [r2, #0]
 800e372:	9b03      	ldr	r3, [sp, #12]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d053      	beq.n	800e420 <__hexnan+0x14c>
 800e378:	42b4      	cmp	r4, r6
 800e37a:	d206      	bcs.n	800e38a <__hexnan+0xb6>
 800e37c:	2d07      	cmp	r5, #7
 800e37e:	dc04      	bgt.n	800e38a <__hexnan+0xb6>
 800e380:	002a      	movs	r2, r5
 800e382:	0031      	movs	r1, r6
 800e384:	0020      	movs	r0, r4
 800e386:	f7ff ff7f 	bl	800e288 <L_shift>
 800e38a:	9b01      	ldr	r3, [sp, #4]
 800e38c:	429c      	cmp	r4, r3
 800e38e:	d936      	bls.n	800e3fe <__hexnan+0x12a>
 800e390:	001a      	movs	r2, r3
 800e392:	0023      	movs	r3, r4
 800e394:	cb02      	ldmia	r3!, {r1}
 800e396:	c202      	stmia	r2!, {r1}
 800e398:	429f      	cmp	r7, r3
 800e39a:	d2fb      	bcs.n	800e394 <__hexnan+0xc0>
 800e39c:	9b02      	ldr	r3, [sp, #8]
 800e39e:	1c61      	adds	r1, r4, #1
 800e3a0:	1eda      	subs	r2, r3, #3
 800e3a2:	2304      	movs	r3, #4
 800e3a4:	4291      	cmp	r1, r2
 800e3a6:	d805      	bhi.n	800e3b4 <__hexnan+0xe0>
 800e3a8:	9b02      	ldr	r3, [sp, #8]
 800e3aa:	3b04      	subs	r3, #4
 800e3ac:	1b1b      	subs	r3, r3, r4
 800e3ae:	089b      	lsrs	r3, r3, #2
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	9a01      	ldr	r2, [sp, #4]
 800e3b6:	18d3      	adds	r3, r2, r3
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	c304      	stmia	r3!, {r2}
 800e3bc:	429f      	cmp	r7, r3
 800e3be:	d2fc      	bcs.n	800e3ba <__hexnan+0xe6>
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d104      	bne.n	800e3d0 <__hexnan+0xfc>
 800e3c6:	9b01      	ldr	r3, [sp, #4]
 800e3c8:	429f      	cmp	r7, r3
 800e3ca:	d127      	bne.n	800e41c <__hexnan+0x148>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	603b      	str	r3, [r7, #0]
 800e3d0:	2005      	movs	r0, #5
 800e3d2:	b00b      	add	sp, #44	@ 0x2c
 800e3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3d6:	9b03      	ldr	r3, [sp, #12]
 800e3d8:	3501      	adds	r5, #1
 800e3da:	3301      	adds	r3, #1
 800e3dc:	9303      	str	r3, [sp, #12]
 800e3de:	2d08      	cmp	r5, #8
 800e3e0:	dd06      	ble.n	800e3f0 <__hexnan+0x11c>
 800e3e2:	9b01      	ldr	r3, [sp, #4]
 800e3e4:	429c      	cmp	r4, r3
 800e3e6:	d9ba      	bls.n	800e35e <__hexnan+0x8a>
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	2501      	movs	r5, #1
 800e3ec:	3c04      	subs	r4, #4
 800e3ee:	6023      	str	r3, [r4, #0]
 800e3f0:	220f      	movs	r2, #15
 800e3f2:	6823      	ldr	r3, [r4, #0]
 800e3f4:	4010      	ands	r0, r2
 800e3f6:	011b      	lsls	r3, r3, #4
 800e3f8:	4303      	orrs	r3, r0
 800e3fa:	6023      	str	r3, [r4, #0]
 800e3fc:	e7af      	b.n	800e35e <__hexnan+0x8a>
 800e3fe:	9b06      	ldr	r3, [sp, #24]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d0dd      	beq.n	800e3c0 <__hexnan+0xec>
 800e404:	2320      	movs	r3, #32
 800e406:	9a06      	ldr	r2, [sp, #24]
 800e408:	9902      	ldr	r1, [sp, #8]
 800e40a:	1a9b      	subs	r3, r3, r2
 800e40c:	2201      	movs	r2, #1
 800e40e:	4252      	negs	r2, r2
 800e410:	40da      	lsrs	r2, r3
 800e412:	3904      	subs	r1, #4
 800e414:	680b      	ldr	r3, [r1, #0]
 800e416:	4013      	ands	r3, r2
 800e418:	600b      	str	r3, [r1, #0]
 800e41a:	e7d1      	b.n	800e3c0 <__hexnan+0xec>
 800e41c:	3f04      	subs	r7, #4
 800e41e:	e7cf      	b.n	800e3c0 <__hexnan+0xec>
 800e420:	2004      	movs	r0, #4
 800e422:	e7d6      	b.n	800e3d2 <__hexnan+0xfe>

0800e424 <__ascii_mbtowc>:
 800e424:	b082      	sub	sp, #8
 800e426:	2900      	cmp	r1, #0
 800e428:	d100      	bne.n	800e42c <__ascii_mbtowc+0x8>
 800e42a:	a901      	add	r1, sp, #4
 800e42c:	1e10      	subs	r0, r2, #0
 800e42e:	d006      	beq.n	800e43e <__ascii_mbtowc+0x1a>
 800e430:	2b00      	cmp	r3, #0
 800e432:	d006      	beq.n	800e442 <__ascii_mbtowc+0x1e>
 800e434:	7813      	ldrb	r3, [r2, #0]
 800e436:	600b      	str	r3, [r1, #0]
 800e438:	7810      	ldrb	r0, [r2, #0]
 800e43a:	1e43      	subs	r3, r0, #1
 800e43c:	4198      	sbcs	r0, r3
 800e43e:	b002      	add	sp, #8
 800e440:	4770      	bx	lr
 800e442:	2002      	movs	r0, #2
 800e444:	4240      	negs	r0, r0
 800e446:	e7fa      	b.n	800e43e <__ascii_mbtowc+0x1a>

0800e448 <_realloc_r>:
 800e448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e44a:	0006      	movs	r6, r0
 800e44c:	000c      	movs	r4, r1
 800e44e:	0015      	movs	r5, r2
 800e450:	2900      	cmp	r1, #0
 800e452:	d105      	bne.n	800e460 <_realloc_r+0x18>
 800e454:	0011      	movs	r1, r2
 800e456:	f7fd fdef 	bl	800c038 <_malloc_r>
 800e45a:	0004      	movs	r4, r0
 800e45c:	0020      	movs	r0, r4
 800e45e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e460:	2a00      	cmp	r2, #0
 800e462:	d103      	bne.n	800e46c <_realloc_r+0x24>
 800e464:	f7fd fd72 	bl	800bf4c <_free_r>
 800e468:	2400      	movs	r4, #0
 800e46a:	e7f7      	b.n	800e45c <_realloc_r+0x14>
 800e46c:	f000 f83f 	bl	800e4ee <_malloc_usable_size_r>
 800e470:	0007      	movs	r7, r0
 800e472:	4285      	cmp	r5, r0
 800e474:	d802      	bhi.n	800e47c <_realloc_r+0x34>
 800e476:	0843      	lsrs	r3, r0, #1
 800e478:	42ab      	cmp	r3, r5
 800e47a:	d3ef      	bcc.n	800e45c <_realloc_r+0x14>
 800e47c:	0029      	movs	r1, r5
 800e47e:	0030      	movs	r0, r6
 800e480:	f7fd fdda 	bl	800c038 <_malloc_r>
 800e484:	9001      	str	r0, [sp, #4]
 800e486:	2800      	cmp	r0, #0
 800e488:	d0ee      	beq.n	800e468 <_realloc_r+0x20>
 800e48a:	002a      	movs	r2, r5
 800e48c:	42bd      	cmp	r5, r7
 800e48e:	d900      	bls.n	800e492 <_realloc_r+0x4a>
 800e490:	003a      	movs	r2, r7
 800e492:	0021      	movs	r1, r4
 800e494:	9801      	ldr	r0, [sp, #4]
 800e496:	f7ff fc0f 	bl	800dcb8 <memcpy>
 800e49a:	0021      	movs	r1, r4
 800e49c:	0030      	movs	r0, r6
 800e49e:	f7fd fd55 	bl	800bf4c <_free_r>
 800e4a2:	9c01      	ldr	r4, [sp, #4]
 800e4a4:	e7da      	b.n	800e45c <_realloc_r+0x14>

0800e4a6 <__ascii_wctomb>:
 800e4a6:	0003      	movs	r3, r0
 800e4a8:	1e08      	subs	r0, r1, #0
 800e4aa:	d005      	beq.n	800e4b8 <__ascii_wctomb+0x12>
 800e4ac:	2aff      	cmp	r2, #255	@ 0xff
 800e4ae:	d904      	bls.n	800e4ba <__ascii_wctomb+0x14>
 800e4b0:	228a      	movs	r2, #138	@ 0x8a
 800e4b2:	2001      	movs	r0, #1
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	4240      	negs	r0, r0
 800e4b8:	4770      	bx	lr
 800e4ba:	2001      	movs	r0, #1
 800e4bc:	700a      	strb	r2, [r1, #0]
 800e4be:	e7fb      	b.n	800e4b8 <__ascii_wctomb+0x12>

0800e4c0 <fiprintf>:
 800e4c0:	b40e      	push	{r1, r2, r3}
 800e4c2:	b517      	push	{r0, r1, r2, r4, lr}
 800e4c4:	4c05      	ldr	r4, [pc, #20]	@ (800e4dc <fiprintf+0x1c>)
 800e4c6:	ab05      	add	r3, sp, #20
 800e4c8:	cb04      	ldmia	r3!, {r2}
 800e4ca:	0001      	movs	r1, r0
 800e4cc:	6820      	ldr	r0, [r4, #0]
 800e4ce:	9301      	str	r3, [sp, #4]
 800e4d0:	f000 f83c 	bl	800e54c <_vfiprintf_r>
 800e4d4:	bc1e      	pop	{r1, r2, r3, r4}
 800e4d6:	bc08      	pop	{r3}
 800e4d8:	b003      	add	sp, #12
 800e4da:	4718      	bx	r3
 800e4dc:	20000060 	.word	0x20000060

0800e4e0 <abort>:
 800e4e0:	2006      	movs	r0, #6
 800e4e2:	b510      	push	{r4, lr}
 800e4e4:	f000 fa18 	bl	800e918 <raise>
 800e4e8:	2001      	movs	r0, #1
 800e4ea:	f7f5 f821 	bl	8003530 <_exit>

0800e4ee <_malloc_usable_size_r>:
 800e4ee:	1f0b      	subs	r3, r1, #4
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	1f18      	subs	r0, r3, #4
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	da01      	bge.n	800e4fc <_malloc_usable_size_r+0xe>
 800e4f8:	580b      	ldr	r3, [r1, r0]
 800e4fa:	18c0      	adds	r0, r0, r3
 800e4fc:	4770      	bx	lr

0800e4fe <__sfputc_r>:
 800e4fe:	6893      	ldr	r3, [r2, #8]
 800e500:	b510      	push	{r4, lr}
 800e502:	3b01      	subs	r3, #1
 800e504:	6093      	str	r3, [r2, #8]
 800e506:	2b00      	cmp	r3, #0
 800e508:	da04      	bge.n	800e514 <__sfputc_r+0x16>
 800e50a:	6994      	ldr	r4, [r2, #24]
 800e50c:	42a3      	cmp	r3, r4
 800e50e:	db07      	blt.n	800e520 <__sfputc_r+0x22>
 800e510:	290a      	cmp	r1, #10
 800e512:	d005      	beq.n	800e520 <__sfputc_r+0x22>
 800e514:	6813      	ldr	r3, [r2, #0]
 800e516:	1c58      	adds	r0, r3, #1
 800e518:	6010      	str	r0, [r2, #0]
 800e51a:	7019      	strb	r1, [r3, #0]
 800e51c:	0008      	movs	r0, r1
 800e51e:	bd10      	pop	{r4, pc}
 800e520:	f000 f930 	bl	800e784 <__swbuf_r>
 800e524:	0001      	movs	r1, r0
 800e526:	e7f9      	b.n	800e51c <__sfputc_r+0x1e>

0800e528 <__sfputs_r>:
 800e528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e52a:	0006      	movs	r6, r0
 800e52c:	000f      	movs	r7, r1
 800e52e:	0014      	movs	r4, r2
 800e530:	18d5      	adds	r5, r2, r3
 800e532:	42ac      	cmp	r4, r5
 800e534:	d101      	bne.n	800e53a <__sfputs_r+0x12>
 800e536:	2000      	movs	r0, #0
 800e538:	e007      	b.n	800e54a <__sfputs_r+0x22>
 800e53a:	7821      	ldrb	r1, [r4, #0]
 800e53c:	003a      	movs	r2, r7
 800e53e:	0030      	movs	r0, r6
 800e540:	f7ff ffdd 	bl	800e4fe <__sfputc_r>
 800e544:	3401      	adds	r4, #1
 800e546:	1c43      	adds	r3, r0, #1
 800e548:	d1f3      	bne.n	800e532 <__sfputs_r+0xa>
 800e54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e54c <_vfiprintf_r>:
 800e54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e54e:	b0a1      	sub	sp, #132	@ 0x84
 800e550:	000f      	movs	r7, r1
 800e552:	0015      	movs	r5, r2
 800e554:	001e      	movs	r6, r3
 800e556:	9003      	str	r0, [sp, #12]
 800e558:	2800      	cmp	r0, #0
 800e55a:	d004      	beq.n	800e566 <_vfiprintf_r+0x1a>
 800e55c:	6a03      	ldr	r3, [r0, #32]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d101      	bne.n	800e566 <_vfiprintf_r+0x1a>
 800e562:	f7fc fd3b 	bl	800afdc <__sinit>
 800e566:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e568:	07db      	lsls	r3, r3, #31
 800e56a:	d405      	bmi.n	800e578 <_vfiprintf_r+0x2c>
 800e56c:	89bb      	ldrh	r3, [r7, #12]
 800e56e:	059b      	lsls	r3, r3, #22
 800e570:	d402      	bmi.n	800e578 <_vfiprintf_r+0x2c>
 800e572:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e574:	f7fc fe57 	bl	800b226 <__retarget_lock_acquire_recursive>
 800e578:	89bb      	ldrh	r3, [r7, #12]
 800e57a:	071b      	lsls	r3, r3, #28
 800e57c:	d502      	bpl.n	800e584 <_vfiprintf_r+0x38>
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d113      	bne.n	800e5ac <_vfiprintf_r+0x60>
 800e584:	0039      	movs	r1, r7
 800e586:	9803      	ldr	r0, [sp, #12]
 800e588:	f000 f93e 	bl	800e808 <__swsetup_r>
 800e58c:	2800      	cmp	r0, #0
 800e58e:	d00d      	beq.n	800e5ac <_vfiprintf_r+0x60>
 800e590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e592:	07db      	lsls	r3, r3, #31
 800e594:	d503      	bpl.n	800e59e <_vfiprintf_r+0x52>
 800e596:	2001      	movs	r0, #1
 800e598:	4240      	negs	r0, r0
 800e59a:	b021      	add	sp, #132	@ 0x84
 800e59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e59e:	89bb      	ldrh	r3, [r7, #12]
 800e5a0:	059b      	lsls	r3, r3, #22
 800e5a2:	d4f8      	bmi.n	800e596 <_vfiprintf_r+0x4a>
 800e5a4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e5a6:	f7fc fe3f 	bl	800b228 <__retarget_lock_release_recursive>
 800e5aa:	e7f4      	b.n	800e596 <_vfiprintf_r+0x4a>
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	ac08      	add	r4, sp, #32
 800e5b0:	6163      	str	r3, [r4, #20]
 800e5b2:	3320      	adds	r3, #32
 800e5b4:	7663      	strb	r3, [r4, #25]
 800e5b6:	3310      	adds	r3, #16
 800e5b8:	76a3      	strb	r3, [r4, #26]
 800e5ba:	9607      	str	r6, [sp, #28]
 800e5bc:	002e      	movs	r6, r5
 800e5be:	7833      	ldrb	r3, [r6, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d001      	beq.n	800e5c8 <_vfiprintf_r+0x7c>
 800e5c4:	2b25      	cmp	r3, #37	@ 0x25
 800e5c6:	d148      	bne.n	800e65a <_vfiprintf_r+0x10e>
 800e5c8:	1b73      	subs	r3, r6, r5
 800e5ca:	9305      	str	r3, [sp, #20]
 800e5cc:	42ae      	cmp	r6, r5
 800e5ce:	d00b      	beq.n	800e5e8 <_vfiprintf_r+0x9c>
 800e5d0:	002a      	movs	r2, r5
 800e5d2:	0039      	movs	r1, r7
 800e5d4:	9803      	ldr	r0, [sp, #12]
 800e5d6:	f7ff ffa7 	bl	800e528 <__sfputs_r>
 800e5da:	3001      	adds	r0, #1
 800e5dc:	d100      	bne.n	800e5e0 <_vfiprintf_r+0x94>
 800e5de:	e0ae      	b.n	800e73e <_vfiprintf_r+0x1f2>
 800e5e0:	6963      	ldr	r3, [r4, #20]
 800e5e2:	9a05      	ldr	r2, [sp, #20]
 800e5e4:	189b      	adds	r3, r3, r2
 800e5e6:	6163      	str	r3, [r4, #20]
 800e5e8:	7833      	ldrb	r3, [r6, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d100      	bne.n	800e5f0 <_vfiprintf_r+0xa4>
 800e5ee:	e0a6      	b.n	800e73e <_vfiprintf_r+0x1f2>
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	4252      	negs	r2, r2
 800e5f6:	6062      	str	r2, [r4, #4]
 800e5f8:	a904      	add	r1, sp, #16
 800e5fa:	3254      	adds	r2, #84	@ 0x54
 800e5fc:	1852      	adds	r2, r2, r1
 800e5fe:	1c75      	adds	r5, r6, #1
 800e600:	6023      	str	r3, [r4, #0]
 800e602:	60e3      	str	r3, [r4, #12]
 800e604:	60a3      	str	r3, [r4, #8]
 800e606:	7013      	strb	r3, [r2, #0]
 800e608:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e60a:	4b59      	ldr	r3, [pc, #356]	@ (800e770 <_vfiprintf_r+0x224>)
 800e60c:	2205      	movs	r2, #5
 800e60e:	0018      	movs	r0, r3
 800e610:	7829      	ldrb	r1, [r5, #0]
 800e612:	9305      	str	r3, [sp, #20]
 800e614:	f7fc fe09 	bl	800b22a <memchr>
 800e618:	1c6e      	adds	r6, r5, #1
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d11f      	bne.n	800e65e <_vfiprintf_r+0x112>
 800e61e:	6822      	ldr	r2, [r4, #0]
 800e620:	06d3      	lsls	r3, r2, #27
 800e622:	d504      	bpl.n	800e62e <_vfiprintf_r+0xe2>
 800e624:	2353      	movs	r3, #83	@ 0x53
 800e626:	a904      	add	r1, sp, #16
 800e628:	185b      	adds	r3, r3, r1
 800e62a:	2120      	movs	r1, #32
 800e62c:	7019      	strb	r1, [r3, #0]
 800e62e:	0713      	lsls	r3, r2, #28
 800e630:	d504      	bpl.n	800e63c <_vfiprintf_r+0xf0>
 800e632:	2353      	movs	r3, #83	@ 0x53
 800e634:	a904      	add	r1, sp, #16
 800e636:	185b      	adds	r3, r3, r1
 800e638:	212b      	movs	r1, #43	@ 0x2b
 800e63a:	7019      	strb	r1, [r3, #0]
 800e63c:	782b      	ldrb	r3, [r5, #0]
 800e63e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e640:	d016      	beq.n	800e670 <_vfiprintf_r+0x124>
 800e642:	002e      	movs	r6, r5
 800e644:	2100      	movs	r1, #0
 800e646:	200a      	movs	r0, #10
 800e648:	68e3      	ldr	r3, [r4, #12]
 800e64a:	7832      	ldrb	r2, [r6, #0]
 800e64c:	1c75      	adds	r5, r6, #1
 800e64e:	3a30      	subs	r2, #48	@ 0x30
 800e650:	2a09      	cmp	r2, #9
 800e652:	d950      	bls.n	800e6f6 <_vfiprintf_r+0x1aa>
 800e654:	2900      	cmp	r1, #0
 800e656:	d111      	bne.n	800e67c <_vfiprintf_r+0x130>
 800e658:	e017      	b.n	800e68a <_vfiprintf_r+0x13e>
 800e65a:	3601      	adds	r6, #1
 800e65c:	e7af      	b.n	800e5be <_vfiprintf_r+0x72>
 800e65e:	9b05      	ldr	r3, [sp, #20]
 800e660:	6822      	ldr	r2, [r4, #0]
 800e662:	1ac0      	subs	r0, r0, r3
 800e664:	2301      	movs	r3, #1
 800e666:	4083      	lsls	r3, r0
 800e668:	4313      	orrs	r3, r2
 800e66a:	0035      	movs	r5, r6
 800e66c:	6023      	str	r3, [r4, #0]
 800e66e:	e7cc      	b.n	800e60a <_vfiprintf_r+0xbe>
 800e670:	9b07      	ldr	r3, [sp, #28]
 800e672:	1d19      	adds	r1, r3, #4
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	9107      	str	r1, [sp, #28]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	db01      	blt.n	800e680 <_vfiprintf_r+0x134>
 800e67c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e67e:	e004      	b.n	800e68a <_vfiprintf_r+0x13e>
 800e680:	425b      	negs	r3, r3
 800e682:	60e3      	str	r3, [r4, #12]
 800e684:	2302      	movs	r3, #2
 800e686:	4313      	orrs	r3, r2
 800e688:	6023      	str	r3, [r4, #0]
 800e68a:	7833      	ldrb	r3, [r6, #0]
 800e68c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e68e:	d10c      	bne.n	800e6aa <_vfiprintf_r+0x15e>
 800e690:	7873      	ldrb	r3, [r6, #1]
 800e692:	2b2a      	cmp	r3, #42	@ 0x2a
 800e694:	d134      	bne.n	800e700 <_vfiprintf_r+0x1b4>
 800e696:	9b07      	ldr	r3, [sp, #28]
 800e698:	3602      	adds	r6, #2
 800e69a:	1d1a      	adds	r2, r3, #4
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	9207      	str	r2, [sp, #28]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	da01      	bge.n	800e6a8 <_vfiprintf_r+0x15c>
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	425b      	negs	r3, r3
 800e6a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6aa:	4d32      	ldr	r5, [pc, #200]	@ (800e774 <_vfiprintf_r+0x228>)
 800e6ac:	2203      	movs	r2, #3
 800e6ae:	0028      	movs	r0, r5
 800e6b0:	7831      	ldrb	r1, [r6, #0]
 800e6b2:	f7fc fdba 	bl	800b22a <memchr>
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	d006      	beq.n	800e6c8 <_vfiprintf_r+0x17c>
 800e6ba:	2340      	movs	r3, #64	@ 0x40
 800e6bc:	1b40      	subs	r0, r0, r5
 800e6be:	4083      	lsls	r3, r0
 800e6c0:	6822      	ldr	r2, [r4, #0]
 800e6c2:	3601      	adds	r6, #1
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	6023      	str	r3, [r4, #0]
 800e6c8:	7831      	ldrb	r1, [r6, #0]
 800e6ca:	2206      	movs	r2, #6
 800e6cc:	482a      	ldr	r0, [pc, #168]	@ (800e778 <_vfiprintf_r+0x22c>)
 800e6ce:	1c75      	adds	r5, r6, #1
 800e6d0:	7621      	strb	r1, [r4, #24]
 800e6d2:	f7fc fdaa 	bl	800b22a <memchr>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d040      	beq.n	800e75c <_vfiprintf_r+0x210>
 800e6da:	4b28      	ldr	r3, [pc, #160]	@ (800e77c <_vfiprintf_r+0x230>)
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d122      	bne.n	800e726 <_vfiprintf_r+0x1da>
 800e6e0:	2207      	movs	r2, #7
 800e6e2:	9b07      	ldr	r3, [sp, #28]
 800e6e4:	3307      	adds	r3, #7
 800e6e6:	4393      	bics	r3, r2
 800e6e8:	3308      	adds	r3, #8
 800e6ea:	9307      	str	r3, [sp, #28]
 800e6ec:	6963      	ldr	r3, [r4, #20]
 800e6ee:	9a04      	ldr	r2, [sp, #16]
 800e6f0:	189b      	adds	r3, r3, r2
 800e6f2:	6163      	str	r3, [r4, #20]
 800e6f4:	e762      	b.n	800e5bc <_vfiprintf_r+0x70>
 800e6f6:	4343      	muls	r3, r0
 800e6f8:	002e      	movs	r6, r5
 800e6fa:	2101      	movs	r1, #1
 800e6fc:	189b      	adds	r3, r3, r2
 800e6fe:	e7a4      	b.n	800e64a <_vfiprintf_r+0xfe>
 800e700:	2300      	movs	r3, #0
 800e702:	200a      	movs	r0, #10
 800e704:	0019      	movs	r1, r3
 800e706:	3601      	adds	r6, #1
 800e708:	6063      	str	r3, [r4, #4]
 800e70a:	7832      	ldrb	r2, [r6, #0]
 800e70c:	1c75      	adds	r5, r6, #1
 800e70e:	3a30      	subs	r2, #48	@ 0x30
 800e710:	2a09      	cmp	r2, #9
 800e712:	d903      	bls.n	800e71c <_vfiprintf_r+0x1d0>
 800e714:	2b00      	cmp	r3, #0
 800e716:	d0c8      	beq.n	800e6aa <_vfiprintf_r+0x15e>
 800e718:	9109      	str	r1, [sp, #36]	@ 0x24
 800e71a:	e7c6      	b.n	800e6aa <_vfiprintf_r+0x15e>
 800e71c:	4341      	muls	r1, r0
 800e71e:	002e      	movs	r6, r5
 800e720:	2301      	movs	r3, #1
 800e722:	1889      	adds	r1, r1, r2
 800e724:	e7f1      	b.n	800e70a <_vfiprintf_r+0x1be>
 800e726:	aa07      	add	r2, sp, #28
 800e728:	9200      	str	r2, [sp, #0]
 800e72a:	0021      	movs	r1, r4
 800e72c:	003a      	movs	r2, r7
 800e72e:	4b14      	ldr	r3, [pc, #80]	@ (800e780 <_vfiprintf_r+0x234>)
 800e730:	9803      	ldr	r0, [sp, #12]
 800e732:	f7fb fdf9 	bl	800a328 <_printf_float>
 800e736:	9004      	str	r0, [sp, #16]
 800e738:	9b04      	ldr	r3, [sp, #16]
 800e73a:	3301      	adds	r3, #1
 800e73c:	d1d6      	bne.n	800e6ec <_vfiprintf_r+0x1a0>
 800e73e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e740:	07db      	lsls	r3, r3, #31
 800e742:	d405      	bmi.n	800e750 <_vfiprintf_r+0x204>
 800e744:	89bb      	ldrh	r3, [r7, #12]
 800e746:	059b      	lsls	r3, r3, #22
 800e748:	d402      	bmi.n	800e750 <_vfiprintf_r+0x204>
 800e74a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e74c:	f7fc fd6c 	bl	800b228 <__retarget_lock_release_recursive>
 800e750:	89bb      	ldrh	r3, [r7, #12]
 800e752:	065b      	lsls	r3, r3, #25
 800e754:	d500      	bpl.n	800e758 <_vfiprintf_r+0x20c>
 800e756:	e71e      	b.n	800e596 <_vfiprintf_r+0x4a>
 800e758:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e75a:	e71e      	b.n	800e59a <_vfiprintf_r+0x4e>
 800e75c:	aa07      	add	r2, sp, #28
 800e75e:	9200      	str	r2, [sp, #0]
 800e760:	0021      	movs	r1, r4
 800e762:	003a      	movs	r2, r7
 800e764:	4b06      	ldr	r3, [pc, #24]	@ (800e780 <_vfiprintf_r+0x234>)
 800e766:	9803      	ldr	r0, [sp, #12]
 800e768:	f7fc f88c 	bl	800a884 <_printf_i>
 800e76c:	e7e3      	b.n	800e736 <_vfiprintf_r+0x1ea>
 800e76e:	46c0      	nop			@ (mov r8, r8)
 800e770:	0800f169 	.word	0x0800f169
 800e774:	0800f16f 	.word	0x0800f16f
 800e778:	0800f173 	.word	0x0800f173
 800e77c:	0800a329 	.word	0x0800a329
 800e780:	0800e529 	.word	0x0800e529

0800e784 <__swbuf_r>:
 800e784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e786:	0006      	movs	r6, r0
 800e788:	000d      	movs	r5, r1
 800e78a:	0014      	movs	r4, r2
 800e78c:	2800      	cmp	r0, #0
 800e78e:	d004      	beq.n	800e79a <__swbuf_r+0x16>
 800e790:	6a03      	ldr	r3, [r0, #32]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d101      	bne.n	800e79a <__swbuf_r+0x16>
 800e796:	f7fc fc21 	bl	800afdc <__sinit>
 800e79a:	69a3      	ldr	r3, [r4, #24]
 800e79c:	60a3      	str	r3, [r4, #8]
 800e79e:	89a3      	ldrh	r3, [r4, #12]
 800e7a0:	071b      	lsls	r3, r3, #28
 800e7a2:	d502      	bpl.n	800e7aa <__swbuf_r+0x26>
 800e7a4:	6923      	ldr	r3, [r4, #16]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d109      	bne.n	800e7be <__swbuf_r+0x3a>
 800e7aa:	0021      	movs	r1, r4
 800e7ac:	0030      	movs	r0, r6
 800e7ae:	f000 f82b 	bl	800e808 <__swsetup_r>
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	d003      	beq.n	800e7be <__swbuf_r+0x3a>
 800e7b6:	2501      	movs	r5, #1
 800e7b8:	426d      	negs	r5, r5
 800e7ba:	0028      	movs	r0, r5
 800e7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7be:	6923      	ldr	r3, [r4, #16]
 800e7c0:	6820      	ldr	r0, [r4, #0]
 800e7c2:	b2ef      	uxtb	r7, r5
 800e7c4:	1ac0      	subs	r0, r0, r3
 800e7c6:	6963      	ldr	r3, [r4, #20]
 800e7c8:	b2ed      	uxtb	r5, r5
 800e7ca:	4283      	cmp	r3, r0
 800e7cc:	dc05      	bgt.n	800e7da <__swbuf_r+0x56>
 800e7ce:	0021      	movs	r1, r4
 800e7d0:	0030      	movs	r0, r6
 800e7d2:	f7ff fa0f 	bl	800dbf4 <_fflush_r>
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d1ed      	bne.n	800e7b6 <__swbuf_r+0x32>
 800e7da:	68a3      	ldr	r3, [r4, #8]
 800e7dc:	3001      	adds	r0, #1
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	60a3      	str	r3, [r4, #8]
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	1c5a      	adds	r2, r3, #1
 800e7e6:	6022      	str	r2, [r4, #0]
 800e7e8:	701f      	strb	r7, [r3, #0]
 800e7ea:	6963      	ldr	r3, [r4, #20]
 800e7ec:	4283      	cmp	r3, r0
 800e7ee:	d004      	beq.n	800e7fa <__swbuf_r+0x76>
 800e7f0:	89a3      	ldrh	r3, [r4, #12]
 800e7f2:	07db      	lsls	r3, r3, #31
 800e7f4:	d5e1      	bpl.n	800e7ba <__swbuf_r+0x36>
 800e7f6:	2d0a      	cmp	r5, #10
 800e7f8:	d1df      	bne.n	800e7ba <__swbuf_r+0x36>
 800e7fa:	0021      	movs	r1, r4
 800e7fc:	0030      	movs	r0, r6
 800e7fe:	f7ff f9f9 	bl	800dbf4 <_fflush_r>
 800e802:	2800      	cmp	r0, #0
 800e804:	d0d9      	beq.n	800e7ba <__swbuf_r+0x36>
 800e806:	e7d6      	b.n	800e7b6 <__swbuf_r+0x32>

0800e808 <__swsetup_r>:
 800e808:	4b2d      	ldr	r3, [pc, #180]	@ (800e8c0 <__swsetup_r+0xb8>)
 800e80a:	b570      	push	{r4, r5, r6, lr}
 800e80c:	0005      	movs	r5, r0
 800e80e:	6818      	ldr	r0, [r3, #0]
 800e810:	000c      	movs	r4, r1
 800e812:	2800      	cmp	r0, #0
 800e814:	d004      	beq.n	800e820 <__swsetup_r+0x18>
 800e816:	6a03      	ldr	r3, [r0, #32]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d101      	bne.n	800e820 <__swsetup_r+0x18>
 800e81c:	f7fc fbde 	bl	800afdc <__sinit>
 800e820:	230c      	movs	r3, #12
 800e822:	5ee2      	ldrsh	r2, [r4, r3]
 800e824:	0713      	lsls	r3, r2, #28
 800e826:	d423      	bmi.n	800e870 <__swsetup_r+0x68>
 800e828:	06d3      	lsls	r3, r2, #27
 800e82a:	d407      	bmi.n	800e83c <__swsetup_r+0x34>
 800e82c:	2309      	movs	r3, #9
 800e82e:	602b      	str	r3, [r5, #0]
 800e830:	2340      	movs	r3, #64	@ 0x40
 800e832:	2001      	movs	r0, #1
 800e834:	4313      	orrs	r3, r2
 800e836:	81a3      	strh	r3, [r4, #12]
 800e838:	4240      	negs	r0, r0
 800e83a:	e03a      	b.n	800e8b2 <__swsetup_r+0xaa>
 800e83c:	0752      	lsls	r2, r2, #29
 800e83e:	d513      	bpl.n	800e868 <__swsetup_r+0x60>
 800e840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e842:	2900      	cmp	r1, #0
 800e844:	d008      	beq.n	800e858 <__swsetup_r+0x50>
 800e846:	0023      	movs	r3, r4
 800e848:	3344      	adds	r3, #68	@ 0x44
 800e84a:	4299      	cmp	r1, r3
 800e84c:	d002      	beq.n	800e854 <__swsetup_r+0x4c>
 800e84e:	0028      	movs	r0, r5
 800e850:	f7fd fb7c 	bl	800bf4c <_free_r>
 800e854:	2300      	movs	r3, #0
 800e856:	6363      	str	r3, [r4, #52]	@ 0x34
 800e858:	2224      	movs	r2, #36	@ 0x24
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	4393      	bics	r3, r2
 800e85e:	81a3      	strh	r3, [r4, #12]
 800e860:	2300      	movs	r3, #0
 800e862:	6063      	str	r3, [r4, #4]
 800e864:	6923      	ldr	r3, [r4, #16]
 800e866:	6023      	str	r3, [r4, #0]
 800e868:	2308      	movs	r3, #8
 800e86a:	89a2      	ldrh	r2, [r4, #12]
 800e86c:	4313      	orrs	r3, r2
 800e86e:	81a3      	strh	r3, [r4, #12]
 800e870:	6923      	ldr	r3, [r4, #16]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d10b      	bne.n	800e88e <__swsetup_r+0x86>
 800e876:	21a0      	movs	r1, #160	@ 0xa0
 800e878:	2280      	movs	r2, #128	@ 0x80
 800e87a:	89a3      	ldrh	r3, [r4, #12]
 800e87c:	0089      	lsls	r1, r1, #2
 800e87e:	0092      	lsls	r2, r2, #2
 800e880:	400b      	ands	r3, r1
 800e882:	4293      	cmp	r3, r2
 800e884:	d003      	beq.n	800e88e <__swsetup_r+0x86>
 800e886:	0021      	movs	r1, r4
 800e888:	0028      	movs	r0, r5
 800e88a:	f000 f88f 	bl	800e9ac <__smakebuf_r>
 800e88e:	230c      	movs	r3, #12
 800e890:	5ee2      	ldrsh	r2, [r4, r3]
 800e892:	2101      	movs	r1, #1
 800e894:	0013      	movs	r3, r2
 800e896:	400b      	ands	r3, r1
 800e898:	420a      	tst	r2, r1
 800e89a:	d00b      	beq.n	800e8b4 <__swsetup_r+0xac>
 800e89c:	2300      	movs	r3, #0
 800e89e:	60a3      	str	r3, [r4, #8]
 800e8a0:	6963      	ldr	r3, [r4, #20]
 800e8a2:	425b      	negs	r3, r3
 800e8a4:	61a3      	str	r3, [r4, #24]
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	6923      	ldr	r3, [r4, #16]
 800e8aa:	4283      	cmp	r3, r0
 800e8ac:	d101      	bne.n	800e8b2 <__swsetup_r+0xaa>
 800e8ae:	0613      	lsls	r3, r2, #24
 800e8b0:	d4be      	bmi.n	800e830 <__swsetup_r+0x28>
 800e8b2:	bd70      	pop	{r4, r5, r6, pc}
 800e8b4:	0791      	lsls	r1, r2, #30
 800e8b6:	d400      	bmi.n	800e8ba <__swsetup_r+0xb2>
 800e8b8:	6963      	ldr	r3, [r4, #20]
 800e8ba:	60a3      	str	r3, [r4, #8]
 800e8bc:	e7f3      	b.n	800e8a6 <__swsetup_r+0x9e>
 800e8be:	46c0      	nop			@ (mov r8, r8)
 800e8c0:	20000060 	.word	0x20000060

0800e8c4 <_raise_r>:
 800e8c4:	b570      	push	{r4, r5, r6, lr}
 800e8c6:	0004      	movs	r4, r0
 800e8c8:	000d      	movs	r5, r1
 800e8ca:	291f      	cmp	r1, #31
 800e8cc:	d904      	bls.n	800e8d8 <_raise_r+0x14>
 800e8ce:	2316      	movs	r3, #22
 800e8d0:	6003      	str	r3, [r0, #0]
 800e8d2:	2001      	movs	r0, #1
 800e8d4:	4240      	negs	r0, r0
 800e8d6:	bd70      	pop	{r4, r5, r6, pc}
 800e8d8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d004      	beq.n	800e8e8 <_raise_r+0x24>
 800e8de:	008a      	lsls	r2, r1, #2
 800e8e0:	189b      	adds	r3, r3, r2
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	2a00      	cmp	r2, #0
 800e8e6:	d108      	bne.n	800e8fa <_raise_r+0x36>
 800e8e8:	0020      	movs	r0, r4
 800e8ea:	f000 f831 	bl	800e950 <_getpid_r>
 800e8ee:	002a      	movs	r2, r5
 800e8f0:	0001      	movs	r1, r0
 800e8f2:	0020      	movs	r0, r4
 800e8f4:	f000 f81a 	bl	800e92c <_kill_r>
 800e8f8:	e7ed      	b.n	800e8d6 <_raise_r+0x12>
 800e8fa:	2a01      	cmp	r2, #1
 800e8fc:	d009      	beq.n	800e912 <_raise_r+0x4e>
 800e8fe:	1c51      	adds	r1, r2, #1
 800e900:	d103      	bne.n	800e90a <_raise_r+0x46>
 800e902:	2316      	movs	r3, #22
 800e904:	6003      	str	r3, [r0, #0]
 800e906:	2001      	movs	r0, #1
 800e908:	e7e5      	b.n	800e8d6 <_raise_r+0x12>
 800e90a:	2100      	movs	r1, #0
 800e90c:	0028      	movs	r0, r5
 800e90e:	6019      	str	r1, [r3, #0]
 800e910:	4790      	blx	r2
 800e912:	2000      	movs	r0, #0
 800e914:	e7df      	b.n	800e8d6 <_raise_r+0x12>
	...

0800e918 <raise>:
 800e918:	b510      	push	{r4, lr}
 800e91a:	4b03      	ldr	r3, [pc, #12]	@ (800e928 <raise+0x10>)
 800e91c:	0001      	movs	r1, r0
 800e91e:	6818      	ldr	r0, [r3, #0]
 800e920:	f7ff ffd0 	bl	800e8c4 <_raise_r>
 800e924:	bd10      	pop	{r4, pc}
 800e926:	46c0      	nop			@ (mov r8, r8)
 800e928:	20000060 	.word	0x20000060

0800e92c <_kill_r>:
 800e92c:	2300      	movs	r3, #0
 800e92e:	b570      	push	{r4, r5, r6, lr}
 800e930:	4d06      	ldr	r5, [pc, #24]	@ (800e94c <_kill_r+0x20>)
 800e932:	0004      	movs	r4, r0
 800e934:	0008      	movs	r0, r1
 800e936:	0011      	movs	r1, r2
 800e938:	602b      	str	r3, [r5, #0]
 800e93a:	f7f4 fde9 	bl	8003510 <_kill>
 800e93e:	1c43      	adds	r3, r0, #1
 800e940:	d103      	bne.n	800e94a <_kill_r+0x1e>
 800e942:	682b      	ldr	r3, [r5, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d000      	beq.n	800e94a <_kill_r+0x1e>
 800e948:	6023      	str	r3, [r4, #0]
 800e94a:	bd70      	pop	{r4, r5, r6, pc}
 800e94c:	200006f8 	.word	0x200006f8

0800e950 <_getpid_r>:
 800e950:	b510      	push	{r4, lr}
 800e952:	f7f4 fdd7 	bl	8003504 <_getpid>
 800e956:	bd10      	pop	{r4, pc}

0800e958 <__swhatbuf_r>:
 800e958:	b570      	push	{r4, r5, r6, lr}
 800e95a:	000e      	movs	r6, r1
 800e95c:	001d      	movs	r5, r3
 800e95e:	230e      	movs	r3, #14
 800e960:	5ec9      	ldrsh	r1, [r1, r3]
 800e962:	0014      	movs	r4, r2
 800e964:	b096      	sub	sp, #88	@ 0x58
 800e966:	2900      	cmp	r1, #0
 800e968:	da0c      	bge.n	800e984 <__swhatbuf_r+0x2c>
 800e96a:	89b2      	ldrh	r2, [r6, #12]
 800e96c:	2380      	movs	r3, #128	@ 0x80
 800e96e:	0011      	movs	r1, r2
 800e970:	4019      	ands	r1, r3
 800e972:	421a      	tst	r2, r3
 800e974:	d114      	bne.n	800e9a0 <__swhatbuf_r+0x48>
 800e976:	2380      	movs	r3, #128	@ 0x80
 800e978:	00db      	lsls	r3, r3, #3
 800e97a:	2000      	movs	r0, #0
 800e97c:	6029      	str	r1, [r5, #0]
 800e97e:	6023      	str	r3, [r4, #0]
 800e980:	b016      	add	sp, #88	@ 0x58
 800e982:	bd70      	pop	{r4, r5, r6, pc}
 800e984:	466a      	mov	r2, sp
 800e986:	f000 f853 	bl	800ea30 <_fstat_r>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	dbed      	blt.n	800e96a <__swhatbuf_r+0x12>
 800e98e:	23f0      	movs	r3, #240	@ 0xf0
 800e990:	9901      	ldr	r1, [sp, #4]
 800e992:	021b      	lsls	r3, r3, #8
 800e994:	4019      	ands	r1, r3
 800e996:	4b04      	ldr	r3, [pc, #16]	@ (800e9a8 <__swhatbuf_r+0x50>)
 800e998:	18c9      	adds	r1, r1, r3
 800e99a:	424b      	negs	r3, r1
 800e99c:	4159      	adcs	r1, r3
 800e99e:	e7ea      	b.n	800e976 <__swhatbuf_r+0x1e>
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	2340      	movs	r3, #64	@ 0x40
 800e9a4:	e7e9      	b.n	800e97a <__swhatbuf_r+0x22>
 800e9a6:	46c0      	nop			@ (mov r8, r8)
 800e9a8:	ffffe000 	.word	0xffffe000

0800e9ac <__smakebuf_r>:
 800e9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ae:	2602      	movs	r6, #2
 800e9b0:	898b      	ldrh	r3, [r1, #12]
 800e9b2:	0005      	movs	r5, r0
 800e9b4:	000c      	movs	r4, r1
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	4233      	tst	r3, r6
 800e9ba:	d007      	beq.n	800e9cc <__smakebuf_r+0x20>
 800e9bc:	0023      	movs	r3, r4
 800e9be:	3347      	adds	r3, #71	@ 0x47
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	6123      	str	r3, [r4, #16]
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	6163      	str	r3, [r4, #20]
 800e9c8:	b005      	add	sp, #20
 800e9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9cc:	ab03      	add	r3, sp, #12
 800e9ce:	aa02      	add	r2, sp, #8
 800e9d0:	f7ff ffc2 	bl	800e958 <__swhatbuf_r>
 800e9d4:	9f02      	ldr	r7, [sp, #8]
 800e9d6:	9001      	str	r0, [sp, #4]
 800e9d8:	0039      	movs	r1, r7
 800e9da:	0028      	movs	r0, r5
 800e9dc:	f7fd fb2c 	bl	800c038 <_malloc_r>
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	d108      	bne.n	800e9f6 <__smakebuf_r+0x4a>
 800e9e4:	220c      	movs	r2, #12
 800e9e6:	5ea3      	ldrsh	r3, [r4, r2]
 800e9e8:	059a      	lsls	r2, r3, #22
 800e9ea:	d4ed      	bmi.n	800e9c8 <__smakebuf_r+0x1c>
 800e9ec:	2203      	movs	r2, #3
 800e9ee:	4393      	bics	r3, r2
 800e9f0:	431e      	orrs	r6, r3
 800e9f2:	81a6      	strh	r6, [r4, #12]
 800e9f4:	e7e2      	b.n	800e9bc <__smakebuf_r+0x10>
 800e9f6:	2380      	movs	r3, #128	@ 0x80
 800e9f8:	89a2      	ldrh	r2, [r4, #12]
 800e9fa:	6020      	str	r0, [r4, #0]
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	81a3      	strh	r3, [r4, #12]
 800ea00:	9b03      	ldr	r3, [sp, #12]
 800ea02:	6120      	str	r0, [r4, #16]
 800ea04:	6167      	str	r7, [r4, #20]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00c      	beq.n	800ea24 <__smakebuf_r+0x78>
 800ea0a:	0028      	movs	r0, r5
 800ea0c:	230e      	movs	r3, #14
 800ea0e:	5ee1      	ldrsh	r1, [r4, r3]
 800ea10:	f000 f820 	bl	800ea54 <_isatty_r>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d005      	beq.n	800ea24 <__smakebuf_r+0x78>
 800ea18:	2303      	movs	r3, #3
 800ea1a:	89a2      	ldrh	r2, [r4, #12]
 800ea1c:	439a      	bics	r2, r3
 800ea1e:	3b02      	subs	r3, #2
 800ea20:	4313      	orrs	r3, r2
 800ea22:	81a3      	strh	r3, [r4, #12]
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	9a01      	ldr	r2, [sp, #4]
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	81a3      	strh	r3, [r4, #12]
 800ea2c:	e7cc      	b.n	800e9c8 <__smakebuf_r+0x1c>
	...

0800ea30 <_fstat_r>:
 800ea30:	2300      	movs	r3, #0
 800ea32:	b570      	push	{r4, r5, r6, lr}
 800ea34:	4d06      	ldr	r5, [pc, #24]	@ (800ea50 <_fstat_r+0x20>)
 800ea36:	0004      	movs	r4, r0
 800ea38:	0008      	movs	r0, r1
 800ea3a:	0011      	movs	r1, r2
 800ea3c:	602b      	str	r3, [r5, #0]
 800ea3e:	f7f4 fdc7 	bl	80035d0 <_fstat>
 800ea42:	1c43      	adds	r3, r0, #1
 800ea44:	d103      	bne.n	800ea4e <_fstat_r+0x1e>
 800ea46:	682b      	ldr	r3, [r5, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d000      	beq.n	800ea4e <_fstat_r+0x1e>
 800ea4c:	6023      	str	r3, [r4, #0]
 800ea4e:	bd70      	pop	{r4, r5, r6, pc}
 800ea50:	200006f8 	.word	0x200006f8

0800ea54 <_isatty_r>:
 800ea54:	2300      	movs	r3, #0
 800ea56:	b570      	push	{r4, r5, r6, lr}
 800ea58:	4d06      	ldr	r5, [pc, #24]	@ (800ea74 <_isatty_r+0x20>)
 800ea5a:	0004      	movs	r4, r0
 800ea5c:	0008      	movs	r0, r1
 800ea5e:	602b      	str	r3, [r5, #0]
 800ea60:	f7f4 fdc4 	bl	80035ec <_isatty>
 800ea64:	1c43      	adds	r3, r0, #1
 800ea66:	d103      	bne.n	800ea70 <_isatty_r+0x1c>
 800ea68:	682b      	ldr	r3, [r5, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d000      	beq.n	800ea70 <_isatty_r+0x1c>
 800ea6e:	6023      	str	r3, [r4, #0]
 800ea70:	bd70      	pop	{r4, r5, r6, pc}
 800ea72:	46c0      	nop			@ (mov r8, r8)
 800ea74:	200006f8 	.word	0x200006f8

0800ea78 <_init>:
 800ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7a:	46c0      	nop			@ (mov r8, r8)
 800ea7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea7e:	bc08      	pop	{r3}
 800ea80:	469e      	mov	lr, r3
 800ea82:	4770      	bx	lr

0800ea84 <_fini>:
 800ea84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea86:	46c0      	nop			@ (mov r8, r8)
 800ea88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea8a:	bc08      	pop	{r3}
 800ea8c:	469e      	mov	lr, r3
 800ea8e:	4770      	bx	lr
